<apidoc:module name="TransactionBuiltins" category="TransactionBuiltins" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public" category="TransactionBuiltins" subcategory="Transactions">
  <p xmlns="http://www.w3.org/1999/xhtml">Use these XQuery functions for manipulating transactions. You will
     usually only need these functions if you develop or administer
     applications using multi-statement transactions. For a detailed
     discussion of multi-statement transactions, see "Understanding
     Transactions in MarkLogic Server" in the <em>Application Developer's
     Guide</em>
  </p>
</apidoc:summary><apidoc:function name="get-transaction-mode" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Retrieve the transaction mode for the current session. Returns one of
  "auto", "query", "update", "update-auto-commit", "query-single-statement",
  or "multi-auto".
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
  The transaction mode for the session may not be the same as the transaction
  mode for the current transaction. The mode of a transaction is fixed when
  the transaction is created.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2340746'>Transaction Type</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declare option xdmp:transaction-mode "update";
xdmp:get-transaction-mode()

=&gt; "update"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.getTransactionMode();

=&gt; "update-auto-commit"
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declare option xdmp:transaction-mode "update";

xdmp:set-transaction-mode("query"),
xdmp:get-transaction-mode()

=&gt; "query". Changing the transaction mode during
   execution does not affect the current transaction,
   but still changes the transaction mode of the
   current session.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.setTransactionMode("query");
xdmp.getTransactionMode();

=&gt; "query". Changing the transaction mode during
   execution does not affect the current transaction,
   but still changes the transaction mode of the
   current session.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-transaction-mode" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Set the transaction mode for the current session. Calling this function
  has no effect on existing transactions.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:string">
    The new transaction mode. Must be one of "auto", "query", "update",
    "query-single-statement", "update-auto-commit", and "multi-auto".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
    Transaction mode determines what type of transaction MarkLogic creates
    during a session. The transaction type is fixed when the transaction is
    created, so calling <code>xdmp:set-transaction-mode</code> never affects
    the current transaction.
  </p><p xmlns="http://www.w3.org/1999/xhtml">
    The transaction mode defaults to "auto". To change the mode, you
    may either call <code>xdmp:set-transaction-mode</code> or use the
    <code>xdmp:transaction-mode</code> XQuery prolog option.
  </p><p xmlns="http://www.w3.org/1999/xhtml">
    Use the <code>xdmp:transaction-mode</code> option to set the
    transaction mode before a transaction exists. Use
    <code>xdmp:set-transaction-mode</code> to set the mode during execution.
  </p><p xmlns="http://www.w3.org/1999/xhtml">
    For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2340746'>Transaction Type</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declare option xdmp:transaction-mode "update";

  (: this transaction runs in update mode, due to the option :)
xdmp:set-transaction-mode("query"),
xdmp:document-insert("/docs/mydoc.xml", &lt;myData/&gt;),
xdmp:commit();

  (: but this new transaction runs in query mode :)
xdmp:get-transaction-mode(),
fn:doc("/docs/mydoc.xml")

=&gt; "query"
   &lt;myData/&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  this transaction runs in update mode, due to the declaration
xdmp.eval('declareUpdate({explicitCommit: true}); \n\
xdmp.setTransactionMode("query"); \n\
xdmp.documentInsert("/docs/mydoc.json", {"myData": "data"}); \n\
xdmp.commit();');

// but this new transaction runs in query mode 
xdmp.eval('var res = []; \n\
res.push(xdmp.getTransactionMode()); \n\
res.push(cts.doc("/docs/mydoc.json")); \n\
res;');

=&gt; ["query",{"myData":"data"}]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="transaction" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Returns the transaction ID for the current transaction, or transaction IDs for
  all transactions with the given name.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="txn-name" type="xs:string" optional="true">
    An optional transaction name.</apidoc:param>
      <apidoc:param name="host-id" type="xs:unsignedLong" optional="true">
    An optional host ID, for retrieving the transaction ID of a named
    remote transaction. Default: The current host (<code xmlns="http://www.w3.org/1999/xhtml">xdmp:host()</code>).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
     When called with no parameters, this function returns the transaction
     ID of the current transaction on the local host. When called with a
     <em>txn-name</em>, the transaction ID for the named local or remote
     transaction(s) is returned.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Transaction names need not be unique. This function will return
     multiple transaction IDs if more than one transaction matches
     the parameters.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     To retrieve the transaction ID of a named remote transaction, supply
     a <em>host-id</em>. If <em>host-id</em> is unknown or MarkLogic Server
     is not online on that host, an exception is raised.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     If no matching transaction exists, an empty sequence is returned.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:transaction()
=&gt; The transaction ID for the current transaction on the local host.
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:transaction("myNamedTransaction")
=&gt; The transaction ID for "myNamedTransaction" on the local host.
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:transaction("myNamedTransaction",
       xdmp:host("some-host.marklogic.com"))
=&gt; The transaction ID for "myNamedTransaction" on the remote host
   some-host.marklogic.com.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.transaction();
=&gt; The transaction ID for the current transaction on the local host.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.transaction("myNamedTransaction");
=&gt; The transaction ID for "myNamedTransaction" on the local host.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.transaction("myNamedTransaction",
       xdmp.host("some-host.marklogic.com"));
=&gt; The transaction ID for "myNamedTransaction" on the remote host
   some-host.marklogic.com.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="transaction-locks" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Returns all URIs currently locked for read or write by a transaction.
  If the transaction is waiting to lock a URI, that URI is returned too.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="host-id" type="xs:unsignedLong" optional="true">
    An optional host ID. If omitted, the local App Server host is
    assumed.  If a host ID is specified, then a transaction ID should
    also be specified.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong" optional="true">
    An optional transaction ID. If omitted, the current transaction is
    assumed. If a transaction ID is specified, then a host ID should
    also be specified.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(transaction-locks)</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/my-transaction-locks</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/any-transaction-locks</code></p>
</apidoc:privilege>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $document1:= fn:doc("doc1.xml")
let $document2:= fn:doc("doc2.xml")
let $update1 := xdmp:document-insert("doc3.xml",&lt;doc/&gt;)
let $update2 := xdmp:document-insert("doc4.xml",&lt;doc/&gt;)
return xdmp:transaction-locks()
=&gt;
&lt;transaction-locks xmlns="http://marklogic.com/xdmp/status/host"&gt;
  &lt;read&gt;doc1.xml&lt;/read&gt;
  &lt;read&gt;doc2.xml&lt;/read&gt;
  &lt;write&gt;doc3.xml&lt;/write&gt;
  &lt;write&gt;doc4.xml&lt;/write&gt;
&lt;/transaction-locks&gt;
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $serialize := xdmp:lock-for-update("lockname")
return xdmp:transaction-locks()
=&gt;
&lt;transaction-locks xmlns="http://marklogic.com/xdmp/status/host"&gt;
  &lt;write&gt;lockname&lt;/write&gt;
&lt;/transaction-locks&gt;
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $_ := xdmp:spawn-function(
  function () {
    xdmp:set-transaction-name("holder"),
    xdmp:lock-for-update("lock-uri"),
    xdmp:sleep(1000)},
  &lt;options xmlns="xdmp:eval"&gt;
    &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
  &lt;/options&gt;)
let $_ := xdmp:spawn-function(
  function () {
    xdmp:set-transaction-name("waiter"),
    xdmp:lock-for-update("lock-uri")},
  &lt;options xmlns="xdmp:eval"&gt;
    &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
  &lt;/options&gt;)
let $hostid := xdmp:host()
let $txns := xdmp:host-status($hostid)/&amp;#42;:transactions
let $holder := $txns/&amp;#42;:transaction[*:transaction-name = "holder"]/&amp;#42;:transaction-id
let $waiter := $txns/&amp;#42;:transaction[*:transaction-name = "waiter"]/&amp;#42;:transaction-id
return
  (xdmp:transaction-locks($hostid,$holder),
   xdmp:transaction-locks($hostid,$waiter))
=&gt;
(&lt;transaction-locks xmlns="http://marklogic.com/xdmp/status/host"&gt;
   &lt;write&gt;lock-uri&lt;/write&gt;
 &lt;/transaction-locks&gt;,
 &lt;transaction-locks xmlns="http://marklogic.com/xdmp/status/host"&gt;
   &lt;write&gt;lock-uri&lt;/write&gt;
   &lt;waiting&gt;lock-uri&lt;/waiting&gt;
 &lt;/transaction-locks&gt;)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-transaction-name" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Set the name of a local or remote transaction.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
    The new name.
  </apidoc:param>
      <apidoc:param name="host-id" type="xs:unsignedLong" optional="true">
    An optional host ID. If omitted, the local App Server host is assumed.
    If a host ID is given, then a transaction ID must also be given.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong" optional="true">
    An optional transaction ID. If omitted, the current transaction is
    assumed. If a transaction ID is given, then a host ID must also be given.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-set-transaction-name-my</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-set-transaction-name-any</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If the transaction already has a name, it is overwritten with the
     new name.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
    If the specified transaction does not exist, <code>XDMP-NOTXN</code>
    is raised.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
    If <em>host-id</em> is not found or MarkLogic Server is not available
    on that host, the exception <code>XDMP-HOSTOFFLINE</code> is raised.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:set-transaction-name("myTransaction")
=&gt; Set the name of the current transaction in the current local session
   to "myTransaction".
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.setTransactionName("myTransaction");
=&gt; Set the name of the current transaction in the current local session
   to "myTransaction".
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:set-transaction-name("myTransaction",
                            xdmp:host("some-host.marklogic.com"), $txn-id)
=&gt; Set the name of the given transaction on the remote host
   some-host.marklogic.com to "myTransaction".
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.setTransactionName("myTransaction",
                            xdmp:host("some-host.marklogic.com"), $txn-id);
=&gt; Set the name of the given transaction on the remote host
   some-host.marklogic.com to "myTransaction".
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-transaction-time-limit" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Set the transaction time limit for a local or remote transaction.
  Defaults to the configured request timeout.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="time-limit" type="xs:unsignedInt">
    The desired time limit, in seconds.
  </apidoc:param>
      <apidoc:param name="host-id" type="xs:unsignedLong" optional="true">
    An optional host ID. If omitted, the local App Server host is assumed.
    If a host ID is given, then a transaction ID must also be given.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong" optional="true">
    An optional transaction ID. If omitted, the current transaction is
    assumed. If a transaction ID is given, then a host ID must also be given.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-set-transaction-time-limit-my</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-set-transaction-time-limit-any</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
     The transaction time limit determines how long the transaction may run
     before being automatically aborted. If you set the time limit to a limit
     less than the elapsed time of the current transaction, the transaction
     may abort immediately.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     The default (and maximum) transaction time limit is the request time
     limit configured for the server that creates the transaction. For
     information on configuring the request time limit, see the Administrator's
     Guide, or <code><a href="#admin:appserver-set-request-timeout">
     admin:appserver-set-request-timeout</a></code>.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     If you attempt to set the transaction time limit to a value greater
     than the configured request time limit, the exception
     <code>XDMP-TIMELIMIT</code> is raised.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Changing any time limits on a request, even  if it happens in an eval 
     or an invoke that is inside the original request, affects the whole 
     request; that is, the timeouts affect the entire App Server request.  
     Therefore, if you set the limit lower on an eval or an invoke within an 
     outer App Server request, that new timeout is used for the entire 
     request.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:set-transaction-time-limit(10)
=&gt; Empty. The time limit of the current transaction on the
   local host is set to 10 seconds.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.setTransactionTimeLimit(10);
=&gt; Empty. The time limit of the current transaction on the
   local host is set to 10 seconds.
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:set-transaction-time-limit(10, xdmp:host(), $some-txn-id)
=&gt; Empty. The time limit of the given transaction on the local
   host is set to 10 seconds.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.setTransactionTimeLimit(10, xdmp.host(), some-txn-id);
=&gt; Empty. The time limit of the given transaction on the local
   host is set to 10 seconds.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="commit" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Commit the current transaction to the database.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Transactions running in "update" or "query" transaction mode must be
     explicitly committed, using this function. <code>xdmp:commit</code>
     is a no-op in "auto" transaction mode (the default) because
     auto-commit transactions automatically commit at the end of
     every statement.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     When you call <code>xdmp:commit</code>, the transaction is marked for
     commit, but commit does not actually happen until the end of the
     currently executing statement.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     This function is equivalent to calling
     <code><a href="#xdmp:transaction-commit">xdmp:transaction-commit</a></code>
     for the current host and transaction:
     <code>xdmp:transaction-commit(xdmp:host(), xdmp:transaction())</code>.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2355092'>Committing Multi-Statement Transactions</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:set-transaction-mode("update"),
  xdmp:document-insert("/docs/mydoc.xml", &lt;myData/&gt;),
  xdmp:commit()

  =&gt; Empty. The current transaction is marked ready to be committed.
     When the commit completes, the document is visible in the database,
     and the transaction ends.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate({explicitCommit: true});
xdmp.documentInsert("/docs/mydoc.json", {myData: "data"});
xdmp.commit();

  =&gt; Empty. The current transaction is marked ready to be committed.
     When the commit completes, the document is visible in the database,
     and the transaction ends.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="rollback" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Roll back the current transaction.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
     When a transaction is rolled back, the current statement immediately
     terminates, updates made by any statement in the transaction are
     discarded, and the transaction terminates.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Transactions running in "update" or "query" transaction mode should be
     explicitly rolled back, using this function. Failure to explicitly
     commit or roll back such a transaction leaves the transaction open
     until transaction timeout, thus unnecessarily holding resources and
     locks, potentially blocking other transactions.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Transactions running in "auto" transaction mode may also use this
     function, to roll back a transaction without raising an error.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     The result of a statement terminated with <code>xdmp:rollback</code>
     is always the empty sequence.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     This function is equivalent to calling
     <code><a href="#xdmp:transaction-rollback">xdmp:transaction-rollback</a></code>
     for the current host and transaction:
     <code>xdmp:transaction-rollback(xdmp:host(), xdmp:transaction())</code>.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2368380'>Rolling Back Multi-Statement Transactions</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  (: multi-statement transaction :)
  declare option xdmp:transaction-mode "update";

  xdmp:document-insert("/docs/first.xml", &lt;first/&gt;);
  xdmp:document-insert("/docs/second.xml", &lt;second/&gt;);
  xdmp:rollback();

  =&gt; Empty. The transaction is rolled back. The documents are
     not added to the database. The transaction ends.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// multi-statement transaction 
declareUpdate({explicitCommit: true});

xdmp.documentInsert("/docs/first.json", {"first": 1});
xdmp.documentInsert("/docs/second.json", {"second": 2});
xdmp.rollback();

  =&gt; Empty. The transaction is rolled back. The documents are
     not added to the database. The transaction ends.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="transaction-commit" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Explicitly commit a transaction running on a named host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="host-id" type="xs:unsignedLong">
    A host id.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong">
    The transaction ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/complete-my-transactions</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/complete-any-transactions</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Use this function to explicitly commit a remote transaction running in
     "update" or "query" transaction mode. You typically will not use this
     function for transactions running in "auto" transaction mode because
     the server commits such transactions automatically, at the end of
     every statement.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     When you call <code>xdmp:transaction-commit</code>, the transaction is
     marked for commit. The commit occurs asyncronously at a point in time
     after the end of the current executing statement, typically after the
     next cluster heartbeat.  The transaction ends
     at that point, and you can verify it with
     <a href="#xdmp:host-status"><code>xdmp:host-status</code></a>.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     If the named host or transaction does not exist, an error is raised.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2352234'>Administering Transactions</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2355092'>Committing Multi-Statement Transactions</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:transaction-commit(xdmp:host("some-host.yourdomain.com"), $some-txn-id)

=&gt; Empty. The given transaction is marked ready to be committed.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.transactionCommit(xdmp.host("some-host.yourdomain.com"), some-txn-id);

=&gt; Empty. The given transaction is marked ready to be committed.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="transaction-rollback" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Explicitly roll back a transaction running on a named host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="host-id" type="xs:unsignedLong">
    A host id.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong">
    The transaction ID.</apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-transaction-complete</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Use this function to explicitly roll back a remote transaction running in
     "update" or "query" transaction mode. See <code><a href="#xdmp:rollback">
     xdmp:rollback</a></code> for more information.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     Any statement executing under the remote transaction is halted immediately.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
     If the named host or transaction does not exist, an error is raised.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2352234'>Administering Transactions</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2368380'>Rolling Back Multi-Statement Transactions</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:transaction-rollback(xdmp:host("some-host.yourdomain.com"), $some-txn-id)

=&gt; Empty. The given transaction is rolled back and all
   modifications made by the transaction are discarded.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.transactionRollback(xdmp.host("some-host.yourdomain.com"), some-txn-id);

=&gt; Empty. The given transaction is rolled back and all
   modifications made by the transaction are discarded.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="xa-complete" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Completes (commits or rolls back) a prepared XA transaction.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestID" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong">
    The transaction ID.
  </apidoc:param>
      <apidoc:param name="commit" type="xs:boolean">
    Whether to commit or rollback. A value of true means commit.
  </apidoc:param>
      <apidoc:param name="remember" type="xs:boolean">
    Whether to remember the completion until explicitly forgotten.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/complete-my-transactions</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/complete-any-transactions</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
    You should usually let the Transaction Manager handle commit or rollback
    of global transactions. This function is made available for unusual
    circumstances in which you need to heuristically complete the MarkLogic
    branch of a global XA transaction. For example, if contact with the
    Transaction Manager is lost for a long time.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:xa-complete($forest-id, $txn-id, fn:true(), fn:true())
=&gt; Empty. The given transaction is committed and the
   outcome is remembered.

xdmp:xa-complete($forest-id, $txn-id, fn:false(), fn:true())
=&gt; Empty. The given transaction is rolled back and the
     outcome is remembered.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.xaComplete(forest-id, txn-id, true, true);
=&gt; Empty. The given transaction is committed and the
   outcome is remembered.

xdmp.xaComplete(forest-id, txn-id, false, true);
=&gt; Empty. The given transaction is rolled back and the
     outcome is remembered.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="xa-forget" type="builtin" lib="xdmp" category="TransactionBuiltins">
    <apidoc:summary>
  Forgets a remembered completed XA transaction.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestID" type="xs:unsignedLong">
    The forest ID of the coordinating forest.
  </apidoc:param>
      <apidoc:param name="txn-id" type="xs:unsignedLong">
    The ID of a MarkLogic transaction that is part of a global XA transaction.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xa-forget</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
    Once a global transaction is prepared, it is remembered only by the
    coordinating forest. Supply the coordinating forest's ID to this
    function. Use xdmp:host-status and xdmp:forest-status to discover
    the coordinating forest.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:xa-forget($forest-id, $txn-id)

=&gt; Empty. The given transaction is forgotten and can no longer
   be recovered.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.xaForget(forest-id, txn-id);

=&gt; Empty. The given transaction is forgotten and can no longer
   be recovered.
</pre></apidoc:example>
  </apidoc:function></apidoc:module>