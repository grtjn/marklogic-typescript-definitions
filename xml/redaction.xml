<apidoc:module name="redaction" category="Redaction" lib="rdt" bucket="XQuery Library Modules"
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml"
>
<apidoc:summary category="Redaction" bucket="XQuery Library Modules" class="xquery">
<p>
 This module contains functions redacting content in documents when reading
 them from the database.
</p>
   
<p>To use the <code>rdt</code> module as part of your own XQuery module, 
 include the following line in your XQuery prolog:
</p>
<p><code>import module namespace rdt = "http://marklogic.com/xdmp/redaction"
         at "/MarkLogic/redaction.xqy";</code></p>
<p>The library namespace prefix <code>rdt</code> is <em>not</em> predefined 
 in the server.
</p>
</apidoc:summary>
<apidoc:summary category="Redaction" bucket="XQuery Library Modules" class="javascript">
<p>
 This module contains functions redacting content in documents when reading
 them from the database.
</p>
<p>To use this module in your Server-Side JavaScript code, include a
<code>require</code> statement similar to following line in your code:
</p>
<p><code>var rdt = require('/MarkLogic/redaction');</code></p>
<p>The library namespace prefix <code>rdt</code> is <em>not</em> predefined
in the server.</p>
</apidoc:summary>

<apidoc:function name="rule-validate" lib="rdt" category="Redaction"
    bucket="XQuery Library Modules">
  <apidoc:summary>
    Validate the redaction rules in one or more redaction rule collections
    and return the URIs of the rule documents validated.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="rule-collection" type="xs:string*">
      The URIs of the collections that contains the redaction rules to be 
      validated. The collections must not contain any non-rule documents.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:usage>
    Use this function to perform validation of redaction rules. Rules are 
    identified by the rule collection to which they belong. If all rules 
    validate successfully, this function returns a list of the validated
    rule URIs. If any rule is invalid, this function throws the exception
    <code>RDT-BADRULE</code>. If a rule names a custom redaction for a module 
    that is not installed in MarkLogic, the exception 
    <code>RDT-MODNOTFOUND</code> is thrown.
   <p>
    Validation does not check the contents of the <code>options</code>
    section of a rule because this data is redaction-function specific, rather
    than a general characteristic of all redaction rules. If the rule uses
    dictionary-based masking, no validation is performed on the dictionary.
   </p><p>
    The collection(s) can contain XML rules, JSON rules, or both, but must not 
    contain non-rule documents.
   </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>redaction-user</code> role or the
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/redaction-user</code></p>
  </apidoc:privilege>
  <apidoc:see-also-list>
    <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/redaction.xml%2336594'>Validating Redaction Rules</a> in the <em>Application Developer's Guide</em>.
    </apidoc:see-also>
  </apidoc:see-also-list>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace rdt = "http://marklogic.com/xdmp/redaction"
    at "/MarkLogic/redaction.xqy";
rdt:rule-validate(("pii-conceal", "obscure-loc"))

(: Result: Assuming the rules in the "pii-conceal" and "obscure-loc"
 : collections are valid, the URIs of all the rule documents in these
 : collections. :)
  ]]></pre></apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
var rdt = require('/MarkLogic/redaction.xqy')
rdt.ruleValidate(["pii-conceal", "obscure-loc"])

// Result: Assuming the rules in the "pii-conceal" and "obscure-loc"
// collections are valid, the URIs of all the rule documents in these
// collections.
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="redact" lib="rdt" category="Redaction" bucket="XQuery Library Modules">
  <apidoc:summary>
    Apply redaction rules to a set of XML and/or JSON documents, returning
    the resulting documents.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="doc" type="node()*">
      The documents to which to apply redaction rules. Only XML and JSON
      documents can be redacted.
    </apidoc:param>
    <apidoc:param name="rule-collection" type="xs:string*">
      The URIs of collections of redaction rules to apply to the input nodes.
      The collection(s) can contain XML rules, JSON rules, or both, but must 
      not contain non-rule documents.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>node()*</apidoc:return>
  <apidoc:usage>
    This function applies redaction rules to a set of input documents. If no 
    rules match a node, the node is returned unchanged. The collections named 
    in <code>$rule-collections</code> can only contain redaction rule 
    definitions.
   <p>
    You should validate your rules before using them to redact content. An
    invalid rule will cause this function to throw an exception. Use
    <a class="xquery" href="#rdt:rule-validate">rdt:rule-validate</a>
    <a class="javascript" href="#rdt.ruleValidate">rdt.ruleValidate</a> 
    to validate a redaction rule collection.
   </p><p>
    Install rules in the schema database associated with your content
    database.
   </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>redaction-user</code> role or the
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/redaction-user</code></p>
  </apidoc:privilege>
  <apidoc:see-also-list>
    <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/redaction.xml%2328503'>Redacting Document Content</a> in the <em>Application Developer's Guide</em>.
    </apidoc:see-also>
  </apidoc:see-also-list>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: Install a redaction rule using the built-in "redact-us-ssn" redaction 
 : function. The rule is installed in the "ssn-rules" collection. The 
 : context database for rule insertion must be the schema database. :)
xquery version "1.0-ml";
xdmp:document-insert("/redactionRules/ssn.xml", 
  <rule xml:lang="zxx" xmlns="http://marklogic.com/xdmp/redaction">
    <description>Stomp SSN</description>
    <path>//ssn</path>
    <method>
     <function>redact-us-ssn</function>
    </method>
    <options>
     <level>partial</level>
    </options>
  </rule>, xdmp:default-permissions(), "ssn-rules");

(: Redact all documents in the "people" collection, using the rules in the
 : "ssn-rules" collection. The context database is the content database. :)
xquery version "1.0-ml";
import module namespace rdt = "http://marklogic.com/xdmp/redaction"
    at "/MarkLogic/redaction.xqy";

rdt:redact(cts:search(fn:doc(), cts:collection-query("people")), "ssn-rules")
  ]]></pre></apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
// ------------------------- Script 1 ------------------------------
// Install a redaction rule using the built-in 'redact-us-ssn' redaction
// function. The rule is installed in the 'pii-rules' collection. The
// context database for the rule insertion must be the schema database.

declareUpdate();

xdmp.documentInsert('/redactionRules/ssn.json', 
  { rule: {
      description: 'hide ssn',
      path: '//ssn',
      method: { function: 'redact-us-ssn' },
      options: { level: 'partial' }
  }}, xdmp.defaultPermissions(), ['pii-rules']);

// ------------------------- Script 2 ------------------------------

// The following is a SEPARATE STEP (script) that uses the installed rule
// to redact documents in the "people" collection. The context database
// is the content database.
//
// Note that since rdt.redact expects a document node as input and
// match.document is the root node under the document node, fn.root
// is used to access the parent document node.

const jsearch = require('/MarkLogic/jsearch');
const rdt = require('/MarkLogic/redaction');

jsearch.collections('people').documents()
    .map(function (match) { 
        match.document = fn.head(
          rdt.redact(fn.root(match.document), 'pii-rules')
        ).root;
        return match;
    }).result();

// The returned search result object contains the redacted content
// in results[i].document.
  ]]></pre></apidoc:example>
</apidoc:function>
</apidoc:module>
