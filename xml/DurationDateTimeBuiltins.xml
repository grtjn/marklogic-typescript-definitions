<apidoc:module name="DurationDateTimeBuiltins" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions" lib="fn" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public" category="DurationDateTimeBuiltins">
The duration, date, and time built-in functions are XQuery functions
that operate on duration-, date-, and time-related values.
They are defined in
<a href="http://www.w3.org/TR/xpath-functions/" xmlns="http://www.w3.org/1999/xhtml">XQuery 1.0
and XPath 2.0 Functions and Operators</a>.
</apidoc:summary><apidoc:function name="years-from-duration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer representing the years component in the
canonical lexical representation of the value of $arg. The result may be
negative.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:duration?">
The duration whose year component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:years-from-duration(xs:duration("P20Y15M"))
=&gt; 21
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:years-from-duration(xs:duration("-P15M"))
=&gt; -1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearsFromDuration(xs.duration("P20Y15M"));
=&gt; 21
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearsFromDuration(xs.duration("-P15M"));
=&gt; -1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="months-from-duration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer representing the months component in the
canonical lexical representation of the value of $arg. The result may be
negative.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:duration?">
The duration whose month component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:months-from-duration(xs:duration("P20Y15M"))
=&gt; 3
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:months-from-duration(xs:duration("-P20Y18M"))
=&gt; -6
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthsFromDuration(xs.duration("P20Y15M"));
=&gt; 3
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthsFromDuration(xs.duration("-P20Y18M"));
=&gt; -6
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="days-from-duration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer representing the days component in the canonical
lexical representation of the value of $arg. The result may be negative.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:duration?">
The duration whose day component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:days-from-duration(xs:duration("P3DT10H"))
=&gt; 3
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:days-from-duration(xs:duration("P3DT55H"))
=&gt; 5
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.daysFromDuration(xs.duration("P3DT10H"));
=&gt; 3
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.daysFromDuration(xs.duration("P3DT55H"));
=&gt; 5
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="hours-from-duration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer representing the hours component in the canonical
lexical representation of the value of $arg. The result may be negative.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:duration?">
The duration whose hour component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-duration(xs:duration("P3DT10H"))
=&gt; 10
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-duration(xs:duration("P3DT12H32M12S"))
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-duration(xs:duration("PT123H"))
=&gt; 3
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-duration(xs:duration("-P3DT10H"))
=&gt; -10
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDuration(xs.duration("P3DT10H"));
=&gt; 10
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDuration(xs.duration("P3DT12H32M12S"));
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDuration(xs.duration("PT123H"));
=&gt; 3
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDuration(xs.duration("-P3DT10H"));
=&gt; -10
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="minutes-from-duration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer representing the minutes component in the canonical
lexical representation of the value of $arg. The result may be negative. 
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:duration?">
The duration whose minute component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:minutes-from-duration(xs:duration("P3DT10H"))
=&gt; 0
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:minutes-from-duration(xs:duration("-P5DT12H30M"))
=&gt; -30
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.minutesFromDuration(xs.duration("P3DT10H"));
=&gt; 0
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.minutesFromDuration(xs.duration("-P5DT12H30M"));
=&gt; -30
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="seconds-from-duration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:decimal representing the seconds component in the canonical
lexical representation of the value of $arg. The result may be negative. 
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:duration?">
The duration whose minute component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:decimal?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:seconds-from-duration(xs:duration("P3DT10H12.5S"))
=&gt; 12.5
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:seconds-from-duration(xs:duration("-PT256S"))
=&gt; -16.0
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.secondsFromDuration(xs.duration("P3DT10H12.5S"));
=&gt; 12.5
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.secondsFromDuration(xs.duration("-PT256S"));
=&gt; -16.0
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="year-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer representing the year component in the localized value
of $arg. The result may be negative.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose year component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:year-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:year-from-dateTime(xs:dateTime("1999-05-31T21:30:00-05:00"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:year-from-dateTime(xs:dateTime("1999-12-31T19:20:00"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearFromDateTime(xs.dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearFromDateTime(xs.dateTime("1999-05-31T21:30:00-05:00"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearFromDateTime(xs.dateTime("1999-12-31T19:20:00"))
=&gt; 1999
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="year" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer representing the year component in the localized value
of $arg. The result may be negative.</p>
<p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="genericDateTimeArg?">
The dateTime/date/string whose day component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:year(xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:year("1999-05-31T13:20:00-05:00")
=&gt; 1999
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="month-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 1 and 12, both inclusive, representing the
month component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose month component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:month-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 5
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:month-from-dateTime(xs:dateTime("1999-12-31T19:20:00-07:00"))
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:month-from-dateTime(
    fn:adjust-dateTime-to-timezone(
        xs:dateTime("1999-12-31T19:20:00-05:00"),
        xs:dayTimeDuration("PT0H")))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthFromDateTime(xs.dateTime("1999-05-31T13:20:00-05:00"));
=&gt; 5
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthFromDateTime(xs.dateTime("1999-12-31T19:20:00-07:00"));
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthFromDateTime(
    fn.adjustDateTimeToTimezone(
        xs.dateTime("1999-12-31T19:20:00-05:00"),
        xs.dayTimeDuration("PT0H")));
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="month" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 1 and 12, both inclusive, representing the
month component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The genericDateTime whose month component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:month(xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 5
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:month(xs:dateTime("1999-12-31T19:20:00-07:00"))
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:month(
    fn:adjust-dateTime-to-timezone(
        xs:dateTime("1999-12-31T19:20:00-05:00"),
        xs:dayTimeDuration("PT0H")))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.month(xs.dateTime("1999-05-31T13:20:00-05:00"));
=&gt; 5
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.month(xs.dateTime("1999-12-31T19:20:00-07:00"));
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthFromDateTime(
    sql.month(
        xs.dateTime("1999-12-31T19:20:00-05:00"),
        xs.dayTimeDuration("PT0H")));
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="day-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 1 and 31, both inclusive, representing the day
component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose day component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:day-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:day-from-dateTime(
    xs:dateTime("1999-12-31T20:00:00-05:00"))
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:day-from-dateTime(
    fn:adjust-dateTime-to-timezone(
        xs:dateTime("1999-12-31T19:20:00-05:00"),
        xs:dayTimeDuration("PT0H")))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.dayFromDateTime(xs.dateTime("1999-05-31T13:20:00-05:00"));
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.dayFromDateTime(
    xs.dateTime("1999-12-31T20:00:00-05:00"));
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.dayFromDateTime(
    fn.adjustDateTimeToTimezone(
        xs.dateTime("1999-12-31T19:20:00-03:00"),
        xs.dayTimeDuration("PT0H")));
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="day" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 1 and 31, both inclusive, representing the day
component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The xs:genericDateTimeArg whose day component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:day(xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:day(
    "1999-12-31T20:00:00-05:00")
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:day(
    fn:adjust-dateTime-to-timezone(
        xs:dateTime("1999-12-31T19:20:00-05:00"),
        xs:dayTimeDuration("PT0H")))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.day(xs.dateTime("1999-05-31T13:20:00-05:00"));
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.day(
    "1999-12-31T20:00:00-05:00");
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.day(
    fn.adjustDateTimeToTimezone(
        xs.dateTime("1999-12-31T19:20:00-03:00"),
        xs.dayTimeDuration("PT0H")));
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="hours-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 0 and 23, both inclusive, representing the
hours component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose hours component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-dateTime(
    xs:dateTime("1999-05-31T08:20:00-05:00"))
=&gt; 8
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-dateTime(
    xs:dateTime("1999-12-31T21:20:00-05:00"))
=&gt; 21
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-dateTime(
  fn:adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T21:20:00-05:00"),
    xs:dayTimeDuration("PT0H"))) 
=&gt; 2
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-dateTime(
    xs:dateTime("1999-12-31T12:00:00"))
=&gt; 12
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDateTime(
    xs.dateTime("1999-05-31T08:20:00-05:00"))
=&gt; 8
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDateTime(
    xs.dateTime("1999-12-31T21:20:00-05:00"))
=&gt; 21
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDateTime(
  fn.adjustDateTimeToTimezone(
    xs.dateTime("1999-12-31T21:20:00-05:00"),
    xs.dayTimeDuration("PT0H"))) 
=&gt; 2
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromDateTime(
    xs.dateTime("1999-12-31T12:00:00"))
=&gt; 12
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="minutes-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer value between 0 and 59, both inclusive,
representing the minute component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose minutes component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:minutes-from-dateTime(
    xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:minutes-from-dateTime(
    xs:dateTime("1999-05-31T13:30:00+05:30"))
=&gt; 30
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.minutesFromDateTime(
    xs.dateTime("1999-05-31T13:20:00-05:00"));
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.minutesFromDateTime(
    xs.dateTime("1999-05-31T13:30:00+05:30"));
=&gt; 0
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="seconds-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:decimal value between 0 and 60.999..., both inclusive
representing the seconds and fractional seconds in the localized value of
$arg. Note that the value can be greater than 60 seconds to accommodate
occasional leap seconds used to keep human time synchronized with the
rotation of the planet.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose seconds component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:decimal?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:seconds-from-dateTime(
    xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 0
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.secondsFromDateTime(
    xs.dateTime("1999-05-31T13:20:00-05:00"))
=&gt; 0
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="timezone-from-dateTime" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns the timezone component of $arg if any. If $arg has a timezone
component, then the result is an xs:dayTimeDuration that indicates
deviation from UTC; its value may range from +14:00 to -14:00 hours, both
inclusive. Otherwise, the result is the empty sequence.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime whose timezone component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dayTimeDuration?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-dateTime(
    xs:dateTime("1999-05-31T13:20:00-05:00"))
=&gt; the xs:dayTimeDuration whose value is -PT5H
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-dateTime(
    xs:dateTime("2000-06-12T13:20:00Z"))
=&gt; the xs:dayTimeDuration whose value is PT0S
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-dateTime(
    xs:dateTime("2004-08-27T00:00:00"))
=&gt; ()
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromDateTime(
    xs.dateTime("1999-05-31T13:20:00-05:00"));
=&gt; the xs.dayTimeDuration whose value is -PT5H
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromDateTime(
    xs.dateTime("2000-06-12T13:20:00Z"));
=&gt; the xs.dayTimeDuration whose value is PT0S
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromDateTime(
    xs.dateTime("2004-08-27T00:00:00"));
=&gt; ()
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="year-from-date" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer representing the year component in the localized value
of $arg. The result may be negative.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose year component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:year-from-date(xs:date("1999-05-31"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:year-from-date(xs:date("2000-01-01+05:00"))
=&gt; 2000
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearFromDate(xs.date("1999-05-31"))
=&gt; 1999
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.yearFromDate(xs.date("2000-01-01+05:00"))
=&gt; 1999
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="month-from-date" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer between 1 and 12, both inclusive, representing the
month component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose month component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:month-from-date(xs:date("1999-05-31-05:00"))
=&gt; 5 
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:month-from-date(xs:date("2000-01-01+05:00"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthFromDate(xs.date("1999-05-31-05:00"))
=&gt; 5 
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.monthFromDate(xs.date("2000-01-01+05:00"))
=&gt; 12
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="day-from-date" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer between 1 and 31, both inclusive, representing the day
component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose day component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:day-from-date(xs:date("1999-05-31-05:00"))
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:day-from-date(xs:date("2000-01-01+05:00"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.dayFromDate(xs.date("1999-05-31-05:00"))
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.dayFromDate(xs.date("2000-01-01+05:00"))
=&gt; 31
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="quarter-from-date" type="builtin" lib="xdmp" category="DurationDateTimeBuiltins">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer between 1 and 4, both inclusive, calculating the
quarter component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose quarter component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:quarter-from-date(xs:date("1999-05-31"))
=&gt; 2 
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:quarter-from-date(xs:date("2000-01-01"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.quarterFromDate(xs.date("1999-05-31"))
=&gt; 2 
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.quarterFromDate(xs.date("2000-01-01"))
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="quarter" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 1 and 4, both inclusive, calculating the
quarter component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The genericDateTime whose quarter component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:quarter(xs:date("1999-05-31"))
=&gt; 2
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:quarter(xs:date("2000-01-01"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.quarter(xs.date("1999-05-31"))
=&gt; 2
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.quarter(xs.date("2000-01-01"))
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="week-from-date" type="builtin" lib="xdmp" category="DurationDateTimeBuiltins">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer between 1 and 53, both inclusive, representing the week
value in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose weeks of the year will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:week-from-date(xs:date("2012-05-16"))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:week-from-date(xs:date("2000-01-01"))
=&gt; 52 
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.weekFromDate(xs.date("2012-05-16"))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.weekFromDate(xs.date("2000-01-01"))
=&gt; 52
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="week" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 1 and 53, both inclusive, representing the week
value in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime? | xs:date? | xs:string?">
The dateTime/date/string whose day component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:week(xs:date("2012-05-16"))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:week("2012-05-16")
=&gt; 31
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.week(xs.date("2012-05-16"))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.week("2012-05-16")
=&gt; 31
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="yearday-from-date" type="builtin" lib="xdmp" category="DurationDateTimeBuiltins">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer between 1 and 366, both inclusive, representing the
yearday value in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose days of the year will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:yearday-from-date(xs:date('1997-07-16'))
=&gt; 197
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:yearday-from-date(xs:date('2000-01-01'))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.yeardayFromDate(xs.date('1997-07-16'))
=&gt; 197
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.yeardayFromDate(xs.date('2000-01-01'))
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="yearday" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer between 1 and 366, both inclusive, representing the
yearday value in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The xs:genericDateTimeArg whose days of the year will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:yearday(xs:date('1997-07-16'))
=&gt; 197
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:yearday('2000-01-01')
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.yearday(xs.date('1997-07-16'))
=&gt; 197
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.yearday('2000-01-01')
=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="weekday-from-date" type="builtin" lib="xdmp" category="DurationDateTimeBuiltins">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an xs:integer in the range 1 to 7, inclusive, representing the 
weekday value in the localized value of $arg. Monday is the first weekday
value (value of 1), and Sunday is the last (value of 7).
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose weekday value will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:weekday-from-date(xs:date("2012-05-16"))
(: Returns 3, representing Wednesday :)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.weekdayFromDate(xs.date('2012-05-16'))
// Returns 3, representing Wednesday
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="timezone-from-date" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns the timezone component of $arg if any. If $arg has a timezone
component, then the result is an xs:dayTimeDuration that indicates
deviation from UTC; its value may range from +14:00 to -14:00 hours, both
inclusive. Otherwise, the result is the empty sequence.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date whose timezone component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dayTimeDuration?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-date(xs:date("1999-05-31-05:00"))
=&gt; the xs:dayTimeDuration whose value is -PT5H
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-date(xs:date("2000-06-12Z"))
=&gt; the xs:dayTimeDuration with value PT0H
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromDate(xs.date("1999-05-31-05:00"))
=&gt; the xs.dayTimeDuration whose value is -PT5H
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromDate(xs.date("2000-06-12Z"))
=&gt; the xs.dayTimeDuration with value PT0H
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="hours-from-time" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 0 and 23, both inclusive, representing the
value of the hours component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:time?">
The time whose hours component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-time(xs:time("11:23:00"))
=&gt; 11
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-time(xs:time("21:23:00"))
=&gt; 21
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-time(xs:time("01:23:00+05:00"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:hours-from-time(
    fn:adjust-time-to-timezone(
         xs:time("01:23:00+05:00"),
         xs:dayTimeDuration("PT0H")))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromTime(xs.time("11:23:00"))
=&gt; 11
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromTime(xs.time("21:23:00"))
=&gt; 21
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromTime(xs.time("01:23:00+05:00"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.hoursFromTime(
    fn.adjustTimeToTimezone(
         xs.time("01:23:00+05:00"),
         xs.dayTimeDuration("PT0H")))
=&gt; 20
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="hours" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer between 0 and 23, both inclusive, representing the
value of the hours component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The genericDateTime whose hours component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:hours(xs:time("11:23:00"))
=&gt; 11
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:hours(xs:time("21:23:00"))
=&gt; 21
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:hours(xs:time("01:23:00+05:00"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:hours(
    fn:adjust-time-to-timezone(
         xs:time("01:23:00+05:00"),
         xs:dayTimeDuration("PT0H")))
=&gt; 20
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.hours(xs.time("11:23:00"))
=&gt; 11
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.hours(xs.time("21:23:00"))
=&gt; 21
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.hours(xs.time("01:23:00+05:00"))
=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.hours(
    fn.adjustTimeToTimezone(
         xs.time("01:23:00+05:00"),
         xs.dayTimeDuration("PT0H")))
=&gt; 20
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="minutes-from-time" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer value between 0 to 59, both inclusive, representing
the value of the minutes component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:time?">
The time whose minutes component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:minutes-from-time(xs:time("13:00:00Z"))
=&gt; 0 
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.minutesFromTime(xs.time("13:00:00Z"))
=&gt; 0 
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="minutes" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:integer value between 0 to 59, both inclusive, representing
the value of the minutes component in the localized value of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The genericDateTime whose minutes component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:minutes(xs:time("13:00:00Z"))
=&gt; 0
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.minutes(xs.time("13:00:00Z"))
=&gt; 0
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:minutes("13:00:00Z")
=&gt; 0
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.minutes("13:00:00Z")
=&gt; 0
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="seconds-from-time" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:decimal value between 0 and 60.999..., both inclusive,
representing the seconds and fractional seconds in the localized value of
$arg. Note that the value can be greater than 60 seconds to accommodate
occasional leap seconds used to keep human time synchronized with the
rotation of the planet.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:time?">
The time whose seconds component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:decimal?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:seconds-from-time(xs:time("13:20:10.5"))
=&gt; 10.5
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.secondsFromTime(xs.time("13:20:10.5"))
=&gt; 10.5
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="seconds" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an xs:decimal value between 0 and 60.999..., both inclusive,
representing the seconds and fractional seconds in the localized value of
$arg. Note that the value can be greater than 60 seconds to accommodate
occasional leap seconds used to keep human time synchronized with the
rotation of the planet.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:genericDateTimeArg?">
The time whose seconds component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:decimal?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:seconds(xs:time("13:20:10.5"))
=&gt; 10.5
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:seconds("13:20:10.5")
=&gt; 10.5
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.seconds("13:20:10.5")
=&gt; 10.5
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="timezone-from-time" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns the timezone component of $arg if any. If $arg has a timezone
component, then the result is an xs:dayTimeDuration that indicates
deviation from UTC; its value may range from +14:00 to -14:00 hours, both
inclusive. Otherwise, the result is the empty sequence.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:time?">
The time whose timezone component will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dayTimeDuration?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-time(xs:time("13:20:00-05:00"))
=&gt; xs:dayTimeDuration whose value is -PT5H
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:timezone-from-time(xs:time("13:20:00"))
=&gt; ()
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromTime(xs.time("13:20:00-05:00"))
=&gt; xs.dayTimeDuration whose value is -PT5H
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.timezoneFromTime(xs.time("13:20:00"))
=&gt; ()
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="adjust-dateTime-to-timezone" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Adjusts an xs:dateTime value to a specific timezone, or to no
timezone at all. If $timezone is the empty sequence, returns an xs:dateTime
without a timezone. Otherwise, returns an xs:dateTime with a timezone.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $timezone is not specified, then $timezone is the value of the implicit
timezone in the dynamic context.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, then the result is the empty sequence.
</p><p xmlns="http://www.w3.org/1999/xhtml">
A dynamic error is raised [err:FODT0003] if $timezone is less than -PT14H or
greater than PT14H or if does not contain an integral number of minutes.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg does not have a timezone component and $timezone is the empty
sequence, then the result is $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml"> 
If $arg does not have a timezone component and $timezone is not the empty
sequence, then the result is $arg with $timezone as the timezone component.
</p><p xmlns="http://www.w3.org/1999/xhtml"> 
If $arg has a timezone component and $timezone is the empty sequence, then
the result is the localized value of $arg without its timezone component.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg has a timezone component and $timezone is not the empty sequence,
then the result is an xs:dateTime value with a timezone component of
$timezone that is equal to $arg.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:dateTime?">
The dateTime to adjust to the new timezone.
  </apidoc:param>
      <apidoc:param name="timezone" type="xs:dayTimeDuration?" optional="true">
The new timezone for the dateTime.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dateTime?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Assume the dynamic context provides an implicit timezone
of -05:00 (-PT5H0M).

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T10:00:00"))
=&gt; 2002-03-07T10:00:00-05:00

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T10:00:00-07:00"))
=&gt; 2002-03-07T12:00:00-05:00

fn:adjust-dateTime-to-timezone(
     xs:dateTime("2002-03-07T10:00:00"), 
     xs:dayTimeDuration("-PT10H"))
=&gt; 2002-03-07T10:00:00-10:00

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T10:00:00-07:00"), 
    xs:dayTimeDuration("-PT10H"))
=&gt; 2002-03-07T07:00:00-10:00

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T10:00:00-07:00"),
    xs:dayTimeDuration("PT10H"))
=&gt; 2002-03-08T03:00:00+10:00

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T00:00:00+01:00"),
    xs:dayTimeDuration("-PT8H"))
=&gt; 2002-03-06T15:00:00-08:00

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T10:00:00"), ())
=&gt; 2002-03-07T10:00:00

fn:adjust-dateTime-to-timezone(
    xs:dateTime("2002-03-07T10:00:00-07:00"), ())
=&gt; 2002-03-07T10:00:00
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Assume the dynamic context provides an implicit timezone
of -05:00 (-PT5H0M).

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00"))
=&gt; 2002-03-07T10:00:00-05:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00-07:00"))
=&gt; 2002-03-07T12:00:00-05:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00"), 
     xs.dayTimeDuration("-PT10H"))
=&gt; 2002-03-07T10:00:00-10:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00-07:00"), 
    xs.dayTimeDuration("-PT10H"))
=&gt; 2002-03-07T07:00:00-10:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00-07:00"),
    xs.dayTimeDuration("PT10H"))
=&gt; 2002-03-08T03:00:00+10:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T00:00:00+01:00"),
    xs.dayTimeDuration("-PT8H"))
=&gt; 2002-03-06T15:00:00-08:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00"), ())
=&gt; 2002-03-07T10:00:00

fn.adjustDateTimeToTimezone(
    xs.dateTime("2002-03-07T10:00:00-07:00"), ())
=&gt; 2002-03-07T10:00:00
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="adjust-date-to-timezone" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Adjusts an xs:date value to a specific timezone, or to no timezone at
all. If $timezone is the empty sequence, returns an xs:date without a
timezone. Otherwise, returns an xs:date with a timezone. For purposes of
timezone adjustment, an xs:date is treated as an xs:dateTime with time
00:00:00.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $timezone is not specified, then $timezone is the value of the implicit
timezone in the dynamic context.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, then the result is the empty sequence.
</p><p xmlns="http://www.w3.org/1999/xhtml">
A dynamic error is raised [err:FODT0003] if $timezone is less than -PT14H or
greater than PT14H or if does not contain an integral number of minutes.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg does not have a timezone component and $timezone is the empty
sequence, then the result is $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml"> 
If $arg does not have a timezone component and $timezone is not the empty
sequence, then the result is $arg with $timezone as the timezone component.
</p><p xmlns="http://www.w3.org/1999/xhtml"> 
If $arg has a timezone component and $timezone is the empty sequence, then
the result is the localized value of $arg without its timezone component.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg has a timezone component and $timezone is not the empty sequence, then:
</p><p xmlns="http://www.w3.org/1999/xhtml">
Let $srcdt be an xs:dateTime value, with 00:00:00 for the time component and
date and timezone components that are the same as the date and timezone
components of $arg. 
</p><p xmlns="http://www.w3.org/1999/xhtml">
Let $r be the result of evaluating fn:adjust-dateTime-to-timezone($srcdt,
$timezone)
</p><p xmlns="http://www.w3.org/1999/xhtml">
The result of this function will be a date value that has date and timezone
components that are the same as the date and timezone components of $r.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:date?">
The date to adjust to the new timezone.
  </apidoc:param>
      <apidoc:param name="timezone" type="xs:dayTimeDuration?" optional="true">
The new timezone for the date.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:date?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Assume the dynamic context provides an implicit timezone
of -05:00 (-PT5H0M).

fn:adjust-date-to-timezone(xs:date("2002-03-07"))
=&gt; 2002-03-07-05:00.

fn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"))
=&gt; 2002-03-07-05:00. $arg is converted to the xs:dateTime
"2002-03-07T00:00:00-07:00". This is adjusted to the implicit
timezone, giving "2002-03-07T02:00:00-05:00".

fn:adjust-date-to-timezone(
    xs:date("2002-03-07"), 
    xs:dayTimeDuration("-PT10H"))
=&gt; 2002-03-07-10:00.

fn:adjust-date-to-timezone(
    xs:date("2002-03-07-07:00"), 
    xs:dayTimeDuration("-PT10H"))
=&gt; 2002-03-06-10:00. $arg is converted to the xs:dateTime
"2002-03-07T00:00:00-07:00". This is adjusted to the given
timezone, giving "2002-03-06T21:00:00-10:00".

fn:adjust-date-to-timezone(xs:date("2002-03-07"), ())
=&gt; 2002-03-07.

fn:adjust-date-to-timezone(
    xs:date("2002-03-07-07:00"), ())
=&gt; 2002-03-07.
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Assume the dynamic context provides an implicit timezone
of -05:00 (-PT5H0M).

fn.adjustDateToTimezone(xs.date("2002-03-07"))
=&gt; 2002-03-07-05:00.

fn.adjustDateToTimezone(xs.date("2002-03-07-07:00"))
=&gt; 2002-03-07-05:00. $arg is converted to the xs:dateTime
"2002-03-07T00:00:00-07:00". This is adjusted to the implicit
timezone, giving "2002-03-07T02:00:00-05:00".

fn.adjustDateToTimezone(
    xs.date("2002-03-07"), 
    xs.dayTimeDuration("-PT10H"))
=&gt; 2002-03-07-10:00.

fn.adjustDateToTimezone(
    xs.date("2002-03-07-07:00"), 
    xs.dayTimeDuration("-PT10H"))
=&gt; 2002-03-06-10:00. $arg is converted to the xs.dateTime
"2002-03-07T00:00:00-07:00". This is adjusted to the given
timezone, giving "2002-03-06T21:00:00-10:00".

fn.adjustDateToTimezone(xs.date("2002-03-07"), ())
=&gt; 2002-03-07.

fn.adjustDateToTimezone(
    xs.date("2002-03-07-07:00"), ())
=&gt; 2002-03-07.
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="adjust-time-to-timezone" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Adjusts an xs:time value to a specific timezone, or to no timezone at
all. If $timezone is the empty sequence, returns an xs:time without a
timezone. Otherwise, returns an xs:time with a timezone. 
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $timezone is not specified, then $timezone is the value of the implicit
timezone in the dynamic context.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg is the empty sequence, then the result is the empty sequence.
</p><p xmlns="http://www.w3.org/1999/xhtml">
A dynamic error is raised [err:FODT0003] if $timezone is less than -PT14H or
greater than PT14H or if does not contain an integral number of minutes.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg does not have a timezone component and $timezone is the empty
sequence, then the result is $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml"> 
If $arg does not have a timezone component and $timezone is not the empty
sequence, then the result is $arg with $timezone as the timezone component.
</p><p xmlns="http://www.w3.org/1999/xhtml"> 
If $arg has a timezone component and $timezone is the empty sequence, then
the result is the localized value of $arg without its timezone component.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If $arg has a timezone component and $timezone is not the empty sequence, then:
</p><p xmlns="http://www.w3.org/1999/xhtml">
Let $srcdt be an xs:dateTime value, with an arbitrary date for the date
component and time and timezone components that are the same as the time
and timezone components of $arg.
</p><p xmlns="http://www.w3.org/1999/xhtml">
Let $r be the result of evaluating fn:adjust-dateTime-to-timezone($srcdt,
$timezone)
</p><p xmlns="http://www.w3.org/1999/xhtml">
The result of this function will be a time value that has time and timezone
components that are the same as the time and timezone components of $r.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:time?">
The time to adjust to the new timezone.
  </apidoc:param>
      <apidoc:param name="timezone" type="xs:dayTimeDuration?" optional="true">
The new timezone for the date.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:time?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Assume the dynamic context provides an implicit timezone
of -05:00 (-PT5H0M).

fn:adjust-time-to-timezone(xs:time("10:00:00"))
=&gt; 10:00:00-05:00

fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"))
=&gt; 12:00:00-05:00

fn:adjust-time-to-timezone(xs:time("10:00:00"), 
  xs:dayTimeDuration("-PT10H"))
=&gt; 10:00:00-10:00

fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"), 
  xs:dayTimeDuration("-PT10H"))
=&gt; 07:00:00-10:00

fn:adjust-time-to-timezone(xs:time("10:00:00"), ())
=&gt; 10:00:00

fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"), ())
=&gt; 10:00:00

fn:adjust-time-to-timezone(
    xs:time("10:00:00-07:00"),
    xs:dayTimeDuration("PT10H"))
=&gt; 03:00:00+10:00
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Assume the dynamic context provides an implicit timezone
of -05:00 (-PT5H0M).

fn.adjustTimeToTimezone(xs.time("10:00:00"))
=&gt; 10:00:00-05:00

fn.adjustTimeToTimezone(xs.time("10:00:00-07:00"))
=&gt; 12:00:00-05:00

fn.adjustTimeToTimezone(xs.time("10:00:00"), 
  xs:dayTimeDuration("-PT10H"))
=&gt; 10:00:00-10:00

fn.adjustTimeToTimezone(xs.time("10:00:00-07:00"), 
  xs.dayTimeDuration("-PT10H"))
=&gt; 07:00:00-10:00

fn.adjustTimeToTimezone(xs.time("10:00:00"), ())
=&gt; 10:00:00

fn.adjustTimeToTimezone(xs.time("10:00:00-07:00"), ())
=&gt; 10:00:00

fn.adjustTimeToTimezone(
    xs.time("10:00:00-07:00"),
    xs.dayTimeDuration("PT10H"))
=&gt; 03:00:00+10:00
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="subtract-dateTimes-yielding-yearMonthDuration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
[0.9-ml only, use the minus operator ( - ) instead] Returns the
<code>xdt:yearMonthDuration</code> that corresponds to the difference between
the normalized value of $srcval1 and the normalized value of $srcval2. If
either argument is the empty sequence, returns the empty sequence. If the
normalized value of $srcval1 precedes in time the normalized value of
$srcval2, the returned value is a negative duration.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="srcval1" type="xs:dateTime">
   The first xs:dateTime value.
  </apidoc:param>
      <apidoc:param name="srcval1" type="xs:dateTime">
   The second xs:dateTime value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xdt:yearMonthDuration</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "0.9-ml"
fn:subtract-dateTimes-yielding-yearMonthDuration(
  fn:current-dateTime(),
  xs:dateTime("2000-01-11T12:01:00.000Z"))
=&gt; the yearMonthDuration P8Y10M, or whatever is
   correct for the current date
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="subtract-dateTimes-yielding-dayTimeDuration" type="builtin" lib="fn" category="DurationDateTimeBuiltins" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
[0.9-ml only, use the minus operator ( - ) instead] Returns the
<code>xdt:dayTimeDuration</code> that corresponds to the difference between
the normalized value of $srcval1 and the normalized value of $srcval2.
If either argument is the empty sequence, returns the empty sequence.
If the normalized value of $srcval1 precedes in time the normalized value of
$srcval2, then the returned value is a negative duration.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="srcval1" type="xs:dateTime">
   The first xs:dateTime value.
  </apidoc:param>
      <apidoc:param name="srcval1" type="xs:dateTime">
   The second xs:dateTime value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xdt:dayTimeDuration</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "0.9-ml"
fn:subtract-dateTimes-yielding-dayTimeDuration(
  fn:current-dateTime(),
  xs:dateTime("2000-01-11T12:01:00.000Z"))
=&gt; the dayTimeDuration P3240DT14H49M46.37S, or
   whatever is correct for the current date
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="datepart" type="builtin" lib="sql" category="DurationDateTimeBuiltins" class="xquery">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an integer that represents the specified <code>datepart</code> of the specified
<code>date</code>.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If <code>datepart</code> or  <code>date</code> is the empty sequence, the
function returns the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="datepart" type="xs:string?">
    The part of date that to be returned.
    <p xmlns="http://www.w3.org/1999/xhtml">Options:</p><p xmlns="http://www.w3.org/1999/xhtml">
      <code>datepart</code> parameter abbreviation includes:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"year","yyyy","yy"</dt>
        <dd>The year part of the <code>date</code></dd>
        <dt>"quarter","qq","q"</dt>
        <dd>The quarter part of the <code>date</code></dd>
        <dt>"month","mm","m"</dt>
        <dd>The month part of the <code>date</code></dd>
        <dt>"dayofyear","dy","y"</dt>
        <dd>The day of the year from the <code>date</code></dd>
        <dt>"day","dd","d"</dt>
        <dd>The day of the month from the <code>date</code></dd>
        <dt>"week","wk","ww"</dt>
        <dd>The week of the year from the <code>date</code></dd>
        <dt>"weekday","dw"</dt>
        <dd>The day of the week from the <code>date</code></dd>
        <dt>"hour","hh"</dt>
        <dd>The hour of the day from the <code>date</code></dd>
        <dt>"minute","mi","n"</dt>
        <dd>The minute of the hour from the <code>date</code></dd>
        <dt>"second","ss","s"</dt>
        <dd>The second of the minute from the <code>date</code></dd>
        <dt>"millisecond","ms"</dt>
        <dd>The millisecond of the minute from the <code>date</code></dd>
        <dt>"microsecond","msc"</dt>
        <dd>The microsecond of the minute from the <code>date</code></dd>
        <dt>"nanosecond","ns"</dt>
        <dd>The nanosecond of the minute from the <code>date</code></dd>
        <dt>"TZoffset","tz"</dt>
        <dd>The timezone offset from the <code>date</code></dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="date" type="xs:genericDateTimeArg">
Is an expression that can be resolved to a xs:date, xs:time, xs:dateTime.
<code xmlns="http://www.w3.org/1999/xhtml">date</code> can be an expression, column expression,user-defined
variable, or string literal.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:usage><p xmlns="http://www.w3.org/1999/xhtml">This function is only available for use within SQL; it is 
not available directly from XQuery, XSLT, or JavaScript.</p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
select datepart('yy','2007-10-30T12:15:32.1234567+05:10')
returns 2007</pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:datepart("dayofyear",'2007-10-30T12:15:32.1234567+05:10')
returns 303</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="datediff" type="builtin" lib="sql" category="DurationDateTimeBuiltins" class="xquery">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns the count (signed integer) of the specified
datepart boundaries crossed between the specified startdate and enddate.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="datepart" type="xs:string">
Is the part of startdate and enddate that specifies the type of boundary crossed.
The following table lists all valid datepart arguments.
User-defined variable equivalents are not valid.
    <p xmlns="http://www.w3.org/1999/xhtml">Options:</p><p xmlns="http://www.w3.org/1999/xhtml">
      <code>datepart</code> parameter abbreviation includes:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"year","yyyy","yy"</dt>
        <dd>The year part of the <code>date</code></dd>
        <dt>"quarter","qq","q"</dt>
        <dd>The quarter part of the <code>date</code></dd>
        <dt>"month","mm","m"</dt>
        <dd>The month part of the <code>date</code></dd>
        <dt>"dayofyear","dy","y"</dt>
        <dd>The day of the year from the <code>date</code></dd>
        <dt>"day","dd","d"</dt>
        <dd>The day of the month from the <code>date</code></dd>
        <dt>"week","wk","ww"</dt>
        <dd>The week of the year from the <code>date</code></dd>
        <dt>"weekday","dw"</dt>
        <dd>The day of the week from the <code>date</code></dd>
        <dt>"hour","hh"</dt>
        <dd>The hour of the day from the <code>date</code></dd>
        <dt>"minute","mi","n"</dt>
        <dd>The minute of the hour from the <code>date</code></dd>
        <dt>"second","ss","s"</dt>
        <dd>The second of the minute from the <code>date</code></dd>
        <dt>"millisecond","ms"</dt>
        <dd>The millisecond of the minute from the <code>date</code></dd>
        <dt>"microsecond","msc"</dt>
        <dd>The microsecond of the minute from the <code>date</code></dd>
        <dt>"nanosecond","ns"</dt>
        <dd>The nanosecond of the minute from the <code>date</code></dd>
     </dl></blockquote>
   </apidoc:param>
      <apidoc:param name="startdate" type="item()">
Is an expression that can be resolved to a time, date, datetime or
 value. date can be an expression, column expression,
user-defined variable or string literal. <code xmlns="http://www.w3.org/1999/xhtml">startdate</code> is subtracted from
<code xmlns="http://www.w3.org/1999/xhtml">enddate</code>.
  </apidoc:param>
      <apidoc:param name="enddate" type="item()">
Same as <code xmlns="http://www.w3.org/1999/xhtml">startdate</code>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:usage><p xmlns="http://www.w3.org/1999/xhtml">This function is only available for use within SQL; it is
not available directly from XQuery, XSLT, or JavaScript.</p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
select datediff('day','2008-06-05','2008-08-05')
returns -61</pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:datediff('day','2008-08-05','2008-06-05')
returns 61</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="dateadd" type="builtin" lib="sql" category="DurationDateTimeBuiltins" class="xquery">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns a specified date with the specified number interval (signed integer)
added to a specified datepart of that date
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="datepart" type="xs:string">
Is the part of date where the number will be added. The following table lists all
valid datepart arguments. User-defined variable equivalents are not valid.
The return data type is the data type of the date argument.
    <p xmlns="http://www.w3.org/1999/xhtml">Options:</p><p xmlns="http://www.w3.org/1999/xhtml">
      <code>datepart</code> parameter abbreviation includes:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"year","yyyy","yy"</dt>
        <dd>The year part of the <code>date</code></dd>
        <dt>"quarter","qq","q"</dt>
        <dd>The quarter part of the <code>date</code></dd>
        <dt>"month","mm","m"</dt>
        <dd>The month part of the <code>date</code></dd>
        <dt>"dayofyear","dy","y"</dt>
        <dd>The day of the year from the <code>date</code></dd>
        <dt>"day","dd","d"</dt>
        <dd>The day of the month from the <code>date</code></dd>
        <dt>"week","wk","ww"</dt>
        <dd>The week of the year from the <code>date</code></dd>
        <dt>"weekday","dw"</dt>
        <dd>The day of the week from the <code>date</code></dd>
        <dt>"hour","hh"</dt>
        <dd>The hour of the day from the <code>date</code></dd>
        <dt>"minute","mi","n"</dt>
        <dd>The minute of the hour from the <code>date</code></dd>
        <dt>"second","ss","s"</dt>
        <dd>The second of the minute from the <code>date</code></dd>
        <dt>"millisecond","ms"</dt>
        <dd>The millisecond of the minute from the <code>date</code></dd>
        <dt>"microsecond","msc"</dt>
        <dd>The microsecond of the minute from the <code>date</code></dd>
        <dt>"nanosecond","ns"</dt>
        <dd>The nanosecond of the minute from the <code>date</code></dd>
     </dl></blockquote>
   </apidoc:param>
      <apidoc:param name="number" type="xs:integer">
This number will be added to the datepart of the given date.
  </apidoc:param>
      <apidoc:param name="date" type="item()">
Is an expression that can be resolved to a time, date or datetime,
value. date can be an expression, column expression,
user-defined variable or string literal. startdate is subtracted from enddate.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()
</apidoc:return>
    <apidoc:usage><p xmlns="http://www.w3.org/1999/xhtml">This function is only available for use within SQL; it is 
not available directly from XQuery, XSLT, or JavaScript.</p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
 sql:dateadd('day',45, '2008-11-11T13:23:44.657')
returns   2008-12-26T13:23:44.657</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="timestampadd" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a xs:string? timestamp created by adding a number to the given dateTimeType field of a given timestamp.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dateTimeType" type="xs:ID">
  The dateTimeType of the timestamp where addition should take place. Available types are:
  <dl xmlns="http://www.w3.org/1999/xhtml">
  <dt><p>SQL_TSI_FRAC_SECOND</p></dt>
  <dd>nano seconds</dd>
  <dt><p>SQL_TSI_SECOND</p></dt>
  <dd>seconds</dd>
  <dt><p>SQL_TSI_MINUTE</p></dt>
  <dd>minute</dd>
  <dt><p>SQL_TSI_HOUR</p></dt>
  <dd>hour</dd>
  <dt><p>SQL_TSI_DAY</p></dt>
  <dd>day</dd>
  <dt><p>SQL_TSI_WEEK</p></dt>
  <dd>week</dd>
  <dt><p>SQL_TSI_MONTH</p></dt>
  <dd>month</dd>
  <dt><p>SQL_TSI_QUARTER</p></dt>
  <dd>quarter</dd>
  <dt><p>SQL_TSI_YEAR</p></dt>
  <dd>year</dd>
  </dl>
  </apidoc:param>
      <apidoc:param name="value" type="xs:integer">
  The integer to add to the given dateTimeType field of the third parameter.
  </apidoc:param>
      <apidoc:param name="timestamp" type="xs:string">
  The xs:dateTime timestamp to which addition has to take place.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:sql("select timestampadd(SQL_TSI_DAY, 2,'2009-05-18T03:03:03')","format")
=&gt; |ANON7761991471377004207| |2009-05-20T03:03:03|
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:timestampadd('SQL_TSI_DAY', 2,'2009-05-18T03:03:03')
=&gt; |ANON7761991471377004207| |2009-05-20T03:03:03|
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.timestampadd('SQL_TSI_DAY', 2,'2009-05-18T03:03:03')
=&gt; |ANON7761991471377004207| |2009-05-20T03:03:03|
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="timestampdiff" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns the difference in dateTimeType field of two given timestamps.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dateTimeType" type="xs:ID">
  The dateTimeType of the timestamp where addition should take place. Available types are:
  <dl xmlns="http://www.w3.org/1999/xhtml">
  <dt><p>SQL_TSI_FRAC_SECOND</p></dt>
  <dd>nano seconds</dd>
  <dt><p>SQL_TSI_SECOND</p></dt>
  <dd>seconds</dd>
  <dt><p>SQL_TSI_MINUTE</p></dt>
  <dd>minute</dd>
  <dt><p>SQL_TSI_HOUR</p></dt>
  <dd>hour</dd>
  <dt><p>SQL_TSI_DAY</p></dt>
  <dd>day</dd>
  <dt><p>SQL_TSI_WEEK</p></dt>
  <dd>week</dd>
  <dt><p>SQL_TSI_MONTH</p></dt>
  <dd>month</dd>
  <dt><p>SQL_TSI_QUARTER</p></dt>
  <dd>quarter</dd>
  <dt><p>SQL_TSI_YEAR</p></dt>
  <dd>year</dd>
  </dl>
  </apidoc:param>
      <apidoc:param name="timestamp1" type="xs:genericDateTimeArg">
  The integer to add to the given dateTimeType field of the third parameter.
  </apidoc:param>
      <apidoc:param name="timestamp2" type="xs:genericDateTimeArg">
  The xs:dateTime timestamp to which addition has to take place.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:sql("select timestampdiff(SQL_TSI_DAY,'2009-05-20T03:03:03','2009-05-18T03:03:03')","format")
=&gt; |ANON7761991471377004207| |2|
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:timestampdiff('SQL_TSI_DAY', '2009-05-20T03:03:03','2009-05-18T03:03:03')
=&gt; |ANON7761991471377004207| |2|
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.timestampdiff('SQL_TSI_DAY', '2009-05-20T03:03:03','2009-05-18T03:03:03')
=&gt; |ANON7761991471377004207| |2|
</pre></apidoc:example>
  </apidoc:function></apidoc:module>