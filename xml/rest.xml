<apidoc:module name="restModule" category="rest Library" lib="rest" 
	bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc" class="xquery">

<apidoc:summary category="rest Library" bucket="XQuery Library Modules">
<p>
The REST library enables you to create RESTful functions that are independent 
of the language used in applications. 
</p>	
<p>
The REST library consists of a set of XQuery functions that support URL rewriting and 
endpoint validation and a MarkLogic REST vocabulary that simplifies the task of 
describing web service endpoints. The REST vocabulary is used to write declarative 
descriptions of the endpoints. These descriptions include the mapping of URL parts
to parameters and conditions that must be met in order for the incoming request to 
be mapped to an endpoint.
</p>
<p>The REST library is installed as the following file:</p>
   <code><em>install_dir</em>/Modules/MarkLogic/appservices/utils/rest.xqy</code> 
 
<p>where <code><em>install_dir</em></code> is the directory in which 
   MarkLogic Server is installed.</p>
<p> To use the <code>rest.xqy</code> module in your own XQuery modules, 
    include the following line in your XQuery prolog:</p>
<pre xml:space="preserve">
  <code>
  import module namespace rest = "http://marklogic.com/appservices/rest"  
      at "/MarkLogic/appservices/utils/rest.xqy";
  </code></pre>
<p>The library uses the <code>rest:</code> namespace, which is 
   <em>not</em> predefined in the server.</p>
 
</apidoc:summary>


<apidoc:function name="rewrite" lib="rest" category="rest Library" 
	bucket="XQuery Library Modules">
	<apidoc:summary>This function is used in the URL rewriter to map 
		the incoming request to an endpoint. By default, if you 
		supply only options, all aspects of the request environment 
		are used for rewriting.  If you supply specific criteria, the 
		filter is less strict, allowing the same options block to be 
		used for simple url-based rewriting as well as request 
		processing.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="options" type="element(rest:options)">
    The options node that defines the request.
    </apidoc:param>
    <apidoc:param name="match-criteria" type="xs:string+">
	    Criteria to be used in matching request rules for rewriting.  
	    By default, all are used.  Supply one or more of:  
	    "uri", "accept", "conditions","method", "params".
    </apidoc:param>	  
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
      at "/MarkLogic/appservices/utils/rest.xqy";

  declare default function namespace "http://www.w3.org/2005/xpath-functions";

  declare option xdmp:mapping "false";

  let $options :=
    <rest:options>
      <rest:request uri="^/shake/endpoint/(.+)/(\d+)$" 
		    endpoint="/shake/endpoint.xqy">
        <rest:uri-param name="play">$1.xml</rest:uri-param>
        <rest:uri-param name="act" as="decimal">$2</rest:uri-param>
      </rest:request>
      <rest:request uri="^/shake/endpoint/(.+)/?$" 
	      endpoint="/shake/endpoint.xqy">
        <rest:uri-param name="play">$1.xml</rest:uri-param>
      </rest:request>
    </rest:options>
 
  let $rewrite := rest:rewrite($options)
 
  return
    $rewrite

    (: Rewrites a URL ending with either /shake/endpoint/play or 
       /shake/endpoint/play/{number} for execution by the 
       endpoint.xqy module. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
      at "/MarkLogic/appservices/utils/rest.xqy";

  declare default function namespace "http://www.w3.org/2005/xpath-functions";

  declare option xdmp:mapping "false";

  let $options :=
    <rest:options>
       <rest:request uri="^/shake/endpoint/(.+)/(\d+)$" 
		    endpoint="/shake/endpoint.xqy">
        <rest:uri-param name="play">$1.xml</rest:uri-param>
        <rest:uri-param name="act" as="decimal">$2</rest:uri-param>
        <rest:http method="GET POST"/>
      </rest:request>
      <rest:request uri="^/shake/endpoint/(.+)/?$" 
	      endpoint="/shake/endpoint.xqy">
        <rest:uri-param name="play">$1.xml</rest:uri-param>
        <rest:http method="GET POST"/>
      </rest:request>
    </rest:options>
 
  let $rewrite := rest:rewrite($options,("uri","method"))
 
  return
    $rewrite

    (: Rewrites a URL ending with either /shake/endpoint/play or 
       /shake/endpoint/play/{number} for execution by the endpoint.xqy 
       module, taking into account uri and request method but ignoring 
       other criteria such as parameters and user agent. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="report-error" lib="rest" category="rest Library" 
	bucket="XQuery Library Modules">
  <apidoc:summary>
   This function formats the specified error structure.  
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="error" type="element()">
    The error structure to be formatted.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
      at "/MarkLogic/appservices/utils/rest.xqy";

  try {
     let $params := rest:process-request($request)
     return
       ...the non-error case...
   } catch ($e) {
       rest:report-error($e)
   }

 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
 
 
<apidoc:function name="check-options" lib="rest" category="rest Library" 
	bucket="XQuery Library Modules">
  <apidoc:summary>
  This function validates the specified <code>options</code> node.  Validation 
  includes both schema validation and some additional 
  rule-based validation.  An empty sequence indicates valid options and any
  problems are reported via <code>rest:report</code> elements.  
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="options" type="element(rest:options)">
    The options node to be validated.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(rest:report)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
      at "/MarkLogic/appservices/utils/rest.xqy";

      try {
         rest:check-options(
           <options xmlns="http://marklogic.com/appservices/rest">
              <request uri="^/(.+)$" endpoint="/endpoint.xqy">
                <uri-param name="play">$1.xml</uri-param>
              </request>
           </options>)
    } catch ($e) {
       rest:report-error($e)
    }
    ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="get-raw-query-params" lib="rest" category="rest Library" 
	bucket="XQuery Library Modules">
  <apidoc:summary>
  This function extracts all of the query parameters and returns them in a map.
  This does not include the parameters that would be derived from matching the 
  URI string. No error checking or type conversion is performed by this 
  function.  The parameters returned by this function are all strings, as 
  they are not type checked.
  </apidoc:summary>
  <apidoc:return>map:map</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
     at "/MarkLogic/appservices/utils/rest.xqy";

  rest:get-raw-query-params ( )

  (: Returns a map of the query parameters. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="matching-request" lib="rest" category="rest Library" 
	bucket="XQuery Library Modules">
  <apidoc:summary>
	  This function returns the <code>request</code> element in 
	  the <code>options</code> node that matches the specified URI. If 
	  you only specify options parameter, all criteria in the request 
	  environment are considered.  If you supply specific criteria, the 
	  filter is less strict, allowing the same options block to be used 
	  for simple url-based rewriting as well as request processing.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="options" type="element(rest:options)">
    The options node.
    </apidoc:param>
    <apidoc:param name="match-criteria" type="xs:string+">
    Criteria to be used in matching request rules.  By default, all are used.
    Supply one or more of:  "uri", "accept", "conditions","method", "params". 
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(rest:request)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
  at "/MarkLogic/appservices/utils/rest.xqy";

  declare option xdmp:mapping "false";

  let $options :=
    <options xmlns="http://marklogic.com/appservices/rest">
      <request uri="^/shakespeare/(.+)/(.+)" endpoint="/redirect.xqy">
        <uri-param name="__ml_redirect__">/$1/$2</uri-param>
      </request>
      <request uri="^/shakespeare/(.+)" endpoint="/redirect.xqy">
        <uri-param name="__ml_redirect__">/$1</uri-param>
      </request>
      <request uri="^/(.+)/act(\d+)" endpoint="/endpoint.xqy">
        <uri-param name="play">$1.xml</uri-param>
        <uri-param name="act" as="integer">$2</uri-param>
        <param name="scene" as="integer" values="1|2|3" default="1"/>
      </request>
      <request uri="^/(.+)$" endpoint="/endpoint.xqy">
        <uri-param name="play">$1.xml</uri-param>
      </request>
      <request uri="^(.+)$" endpoint="/options.xqy" user-params="allow">
        <uri-param name="__ml_options__">$1</uri-param>
        <http method="OPTIONS"/>
      </request>
    </options>

  let $uri     := "/shakespeare/hamlet"

  return rest:matching-request($options, "uri")

  (: Returns the request node that matches the URI, "/shakespeare/hamlet". :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
  at "/MarkLogic/appservices/utils/rest.xqy";

  declare option xdmp:mapping "false";

  let $options :=
    <options xmlns="http://marklogic.com/appservices/rest">
      <request uri="^/shakespeare/(.+)/(.+)" endpoint="/redirect.xqy">
        <uri-param name="__ml_redirect__">/$1/$2</uri-param>
      </request>
      <request uri="^/shakespeare/(.+)" endpoint="/redirect.xqy">
        <uri-param name="__ml_redirect__">/$1</uri-param>
      </request>
      <request uri="^/(.+)/act(\d+)" endpoint="/endpoint.xqy">
        <uri-param name="play">$1.xml</uri-param>
        <uri-param name="act" as="integer">$2</uri-param>
        <param name="scene" as="integer" values="1|2|3" default="1"/>
      </request>
      <request uri="^/(.+)$" endpoint="/endpoint.xqy">
        <uri-param name="play">$1.xml</uri-param>
      </request>
      <request uri="^/(.+)$" endpoint="/delete.xqy">
        <http method="DELETE"/>
        <param name="reason" required="true"/>
      </request>
      <request uri="^(.+)$" endpoint="/options.xqy" user-params="allow">
        <uri-param name="__ml_options__">$1</uri-param>
        <http method="OPTIONS"/>
      </request>
    </options>

  let $uri     := "/shakespeare/hamlet"
  let $accept  := xdmp:get-request-header("Accept") 
  let $params  := map:map()

  return rest:matching-request($options, ("uri","method"))

  (: Returns the request node contining "/delete.xqy" with a DELETE request for URI, "/myplay", ignoring the missing parameter :)
    ]]></pre>
  </apidoc:example>

</apidoc:function>
<apidoc:function name="process-request" lib="rest" category="rest Library" 
	bucket="XQuery Library Modules">
  <apidoc:summary>
	  <p>This function is used in the endpoint main module to parse the 
	  incoming request against the options. It returns a map that 
	  contains all of the parameters as typed values.  Processing the 
	  request also checks all of the associated conditions and will 
	  raise an error if any condition is not met. </p>
  <p>If the request is processed successfully, then all of the 
	  conditions have been met and the returned map contains all of 
	  the parameters. If not, an error occurs. </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="request" type="element(rest:request)">
    The request to be processed into a map.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>map:map</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
      at "/MarkLogic/appservices/utils/rest.xqy";

  declare default function namespace "http://www.w3.org/2005/xpath-functions";

  declare option xdmp:mapping "false";

  let $request :=
    <rest:request uri="^/endpoint/(.+)/(\d+)$" endpoint="/endpoint.xqy">
      <rest:uri-param name="play">$1.xml</rest:uri-param>
      <rest:uri-param name="act" as="decimal" 
	      optional="true">$2</rest:uri-param>
    </rest:request>
 
  let $map  := rest:process-request($request) 
  let $play := map:get($map, "play") 
  let $num  := map:get($map, "act") 

  return  
    if (empty($num))
    then
      fn:doc($play)
    else
      fn:doc($play)/PLAY/ACT[$num]
  
  (: The rest:process-request returns a map from $request that contains the 
     keys 'play' and 'act', which are use to return either the contents of 
     an entire play or a specific act in the play. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="check-request" lib="rest" category="rest Library" 
    bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function takes a <code>request</code> element and returns a report of the 
  problems found. If this function 
  does not return an empty sequence, you have made a mistake and the library will not perform reliably.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="options" type="element(rest:request)">
    The options node that defines the request.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(rest:report)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace rest="http://marklogic.com/appservices/rest"
      at "/MarkLogic/appservices/utils/rest.xqy";

  rest:check-request(
    <request uri="^/(.+)$" 
             endpoint="/endpoint.xqy" 
             xmlns="http://marklogic.com/appservices/rest">
      <uri-param name="play">$1.xml</uri-param>
    </request>)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

</apidoc:module>
