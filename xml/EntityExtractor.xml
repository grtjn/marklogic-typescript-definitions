<apidoc:module name="Entity" category="SearchBuiltins" lib="cts" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:function name="entity-dictionary" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Search">
    <apidoc:summary>
  Returns a <code xmlns="http://www.w3.org/1999/xhtml">cts:entity-dictionary</code> object. 
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="entities" type="cts:entity*">
    The entities to put into the dictionary. 
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
   Options with which you can control the behavior of the entity dictionary. 
   You can specify the following options. It is strongly recommended that
   you use the default option settings.
   <ul xmlns="http://www.w3.org/1999/xhtml">
	  <li><code>"case-sensitive"</code> or <code>"case-insensitive"</code>:
      Perform case-sensitive or case-insensitive matching of entities names. 
      Specify one or the other. Default: <code>"case-sensitive"</code>.</li>
	  <li><code>"remove-overlaps"</code> or <code>"allow-overlaps"</code>: 
      Either eliminate entities with the overlapping names or allow them.
      Specify one or the other. Default: <code>"allow-overlaps"</code>.</li>
	  <li><code>"whole-words"</code> or <code>"partial-words"</code>: 
      Either require matches to align with token boundares, or allow
      matches to fall within token boundaries. Specify one or the other. 
      Default: <code>"whole-words"</code>.</li>
	</ul>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:entity-dictionary</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Use this function when creating ad hoc entity dictionaries, or as a 
   prelude to saving an entity dictionary to the database.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/entity.xml%2357701'>Creating an Entity Dictionary</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#cts:entity" xmlns="http://www.w3.org/1999/xhtml">cts:entity</a>
    <a class="javascript" href="#cts.entity" xmlns="http://www.w3.org/1999/xhtml">cts.entity</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#entity:skos-dictionary" xmlns="http://www.w3.org/1999/xhtml">entity:skos-dictionary</a>
    <a class="javascript" href="#entity.skosDictionary" xmlns="http://www.w3.org/1999/xhtml">entity.skosDictionary</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#cts:entity-dictionary-parse" xmlns="http://www.w3.org/1999/xhtml">cts:entity-dictionary-parse</a>
    <a class="javascript" href="#cts.entityDictionaryParse" xmlns="http://www.w3.org/1999/xhtml">cts.entityDictionaryParse</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#entity:dictionary-insert" xmlns="http://www.w3.org/1999/xhtml">entity:dictionary-insert</a>
    <a class="javascript" href="#entity.dictionarInsert" xmlns="http://www.w3.org/1999/xhtml">entity.dictionaryInsert</a>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $dict := 
  cts:entity-dictionary(
    for $alt in ("ACA", "Obamacare", "Affordable Care Act")
    return cts:entity("E1", "ACA", $alt, "Law")
  )
return 
  cts:entity-highlight(&lt;node&gt;ACA is often called Obamacare&lt;/node&gt;,
    element {$cts:entity-type} {attribute norm {$cts:normalized-text}, 
             $cts:text}, $dict)

(: Returns output such as the following:
 :
 : &lt;node&gt;&lt;Law norm="ACA"&gt;ACA&lt;/Law&gt; is often called &lt;Law norm="ACA"&gt;Obamacare&lt;/Law&gt;&lt;/node&gt;
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const entries = [];
for (let alt of ['ACA', 'Obamacare', 'Affordable Care Act']) {
  entries.push(cts.entity('E1', 'ACA', alt, 'Law'));
}
const dictionary = cts.entityDictionary(entries);
const inputNode = new NodeBuilder()
                    .addElement('node', 'ACA is often called Obamacare')
                    .toNode();
const resultBuilder = new NodeBuilder();
cts.entityHighlight(inputNode,
  function(builder, entityType, text, normText, entityId, node, start) {
      builder.startElement(entityType)
              .addAttribute('norm', normText)
              .addText(text)
             .endElement(); 
  },
  resultBuilder, dictionary);
resultBuilder.toNode();

// Returns the following output:
//
// &lt;node&gt;&lt;Law norm="ACA"&gt;ACA&lt;/Law&gt; is often called &lt;Law norm="ACA"&gt;Obamacare&lt;/Law&gt;&lt;/node&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="entity" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Search">
    <apidoc:summary>
  Returns a <code xmlns="http://www.w3.org/1999/xhtml">cts:entity</code> object. This is an opaque object you
  can use to build an entity dictionary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:string">
   A unique ID for the entity. A unique entity may have multiple entries in 
   the dictionary with different matching words: the unique ID ties them all 
   together. For entities created from a SKOS ontology this could be the 
   URI of the <code xmlns="http://www.w3.org/1999/xhtml">Concept</code>. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The variable <code>$cts:entity-id</code> 
   in <a href="#cts:entity-highlight">cts:entity-highlight</a> and 
   <a href="#cts:entity-walk">cts:entity-walk</a> will be filled in with 
   this ID for each matching entity.</span>
  </apidoc:param>
      <apidoc:param name="normalizedText" type="xs:string">
   The normalized form of the entity. For entities created from a SKOS 
   ontology this could be the preferred label of the <code xmlns="http://www.w3.org/1999/xhtml">Concept</code>. 
   <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The variable <code>$cts:normalized-text</code> in 
   <a href="#cts:entity-highlight">cts:entity-highlight</a> and 
   <a href="#cts:entity-walk">cts:entity-walk</a> will be filled in with 
   this form for each matching entity.</span>
  </apidoc:param>
      <apidoc:param name="text" type="xs:string">
   The word (or phrase) to match during entity extraction. This will be 
   an exact match, unless the dictionary was created with the 
   <code xmlns="http://www.w3.org/1999/xhtml">"case-insensitive"</code> option, in which case the string is 
   matched with case folding. For entities created from a SKOS ontology 
   this could be a label or alternative label for the <code xmlns="http://www.w3.org/1999/xhtml">Concept</code>.
  </apidoc:param>
      <apidoc:param name="type" type="xs:string">
   The type of the entity. For entities created from a SKOS ontology 
   this could be the id of the top concept for the matching 
   <code xmlns="http://www.w3.org/1999/xhtml">Concept</code>, or its preferred label. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The 
   variable <code>$cts:entity-type</code> in 
   <a href="#cts:entity-highlight">cts:entity-highlight</a> and 
   <a href="#cts:entity-walk">cts:entity-walk</a> will be filled in with 
   this type for each matching entity.</span>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:entity</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/entity.xml%2357701'>Creating an Entity Dictionary</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#cts:entity:dictionary" xmlns="http://www.w3.org/1999/xhtml">cts:entity-dictionary</a>
    <a class="javascript" href="#cts.entityDictionary" xmlns="http://www.w3.org/1999/xhtml">cts.entityDictionary</a>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $dict := 
  cts:entity-dictionary(
    for $alt in ("ACA", "Obamacare", "Affordable Care Act")
    return cts:entity("E1", "ACA", $alt, "Law")
  )
return 
  cts:entity-highlight(&lt;node&gt;ACA is often called Obamacare&lt;/node&gt;,
    element {$cts:entity-type} {attribute norm {$cts:normalized-text}, 
             $cts:text}, $dict)

(: Returns output such as the following:
 :
 : &lt;node&gt;&lt;Law norm="ACA"&gt;ACA&lt;/Law&gt; is often called &lt;Law norm="ACA"&gt;Obamacare&lt;/Law&gt;&lt;/node&gt;
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const entries = [];
for (let alt of ['ACA', 'Obamacare', 'Affordable Care Act']) {
  entries.push(cts.entity('E1', 'ACA', alt, 'Law'));
}
const dictionary = cts.entityDictionary(entries);
const inputNode = new NodeBuilder()
                    .addElement('node', 'ACA is often called Obamacare')
                    .toNode();
const resultBuilder = new NodeBuilder();
cts.entityHighlight(inputNode,
  function(builder, entityType, text, normText, entityId, node, start) {
      builder.startElement(entityType)
              .addAttribute('norm', normText)
              .addText(text)
             .endElement(); 
  },
  resultBuilder, dictionary);
resultBuilder.toNode();

// Returns the following output:
//
// &lt;node&gt;&lt;Law norm="ACA"&gt;ACA&lt;/Law&gt; is often called &lt;Law norm="ACA"&gt;Obamacare&lt;/Law&gt;&lt;/node&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="entity-dictionary-parse" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Search">
    <apidoc:summary>
  Construct a <code xmlns="http://www.w3.org/1999/xhtml">cts:entity-dictionary</code> object by parsing it from a formatted string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="contents" type="xs:string*">
   The dictionary entries to parse. Each line (or string) must consist of
   four tab-delimited fields: The entity ID, the normalized form of the
   entity, the word or phrase to match during entity identification, and
   the entity type. For more details about the fields, see
   <a class="xquery" href="#cts:entity" xmlns="http://www.w3.org/1999/xhtml">cts:entity</a><a class="javascript" href="#cts.entity" xmlns="http://www.w3.org/1999/xhtml">cts.entity</a>.
   Multiple formatted strings can be passed in and they will be combined 
   into a single dictionary object.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
   Options with which you can control the behavior of the entity dictionary. 
   You can specify the following options. It is strongly recommended that
   you use the default option settings.
   <ul xmlns="http://www.w3.org/1999/xhtml">
	  <li><code>"case-sensitive"</code> or <code>"case-insensitive"</code>:
      Perform case-sensitive or case-insensitive matching of entities names. 
      Specify one or the other. Default: <code>"case-sensitive"</code>.</li>
	  <li><code>"remove-overlaps"</code> or <code>"allow-overlaps"</code>: 
      Either eliminate entities with the overlapping names or allow them.
      Specify one or the other. Default: <code>"allow-overlaps"</code>.</li>
	  <li><code>"whole-words"</code> or <code>"partial-words"</code>: 
      Either require matches to align with token boundares, or allow
      matches to fall within token boundaries. Specify one or the other. 
      Default: <code>"whole-words"</code>.</li>
	</ul>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:entity-dictionary</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/entity.xml%2357701'>Creating an Entity Dictionary</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#entity:dictionary-insert" xmlns="http://www.w3.org/1999/xhtml">entity:dictionary-insert</a>
    <a class="javascript" href="#entity.dictionaryInsert" xmlns="http://www.w3.org/1999/xhtml">entity.dictionaryInsert</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#cts.entity-dictionary" xmlns="http://www.w3.org/1999/xhtml">cts:entity-dictionary</a>
    <a class="javascript" href="#cts.entityDictionary" xmlns="http://www.w3.org/1999/xhtml">cts.entityDictionary</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#entity:skos-dictionary" xmlns="http://www.w3.org/1999/xhtml">entity:skos-dictionary</a>
    <a class="javascript" href="#entity.skosDictionary" xmlns="http://www.w3.org/1999/xhtml">entity.skosDictionary</a>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace entity="http://marklogic.com/entity"
  at "/MarkLogic/entity.xqy";

(: NOTE: The fields in each line below must be TAB separated. :)
let $dictionary := cts:entity-dictionary-parse(
"11208172	Nixon	Nixon	person:head of state
11208172	Nixon	Richard Nixon	person:head of state
11208172	Nixon	Richard M. Nixon	person:head of state
11208172	Nixon	Richard Milhous Nixon	person:head of state
11208172	Nixon	President Nixon	person:head of state
08932568	Paris	Paris	administrative district:national capital
09145751	Paris	Paris	administrative district:town
09500217	Paris	Paris	imaginary being:mythical being
")
let $input-xml := &lt;node&gt;Nixon visited Paris&lt;/node&gt;
return entity:enrich($input-xml, $dictionary)

(: Returns output similar to the following. (Whitespace added to improve
 : readability.)
 :
 : &lt;node xmlns:e="http://marklogic.com/entity"&gt;
 :   &lt;e:entity type="person:head of state"&gt;Nixon&lt;/e:entity&gt; 
 :   visited 
 :   &lt;e:entity type="administrative district:national capital"&gt;Paris&lt;/e:entity&gt;
 : &lt;/node&gt;
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
'use strict';
const entity = require('/MarkLogic/entity');

// NOTE: The fields in the array items below must be TAB separated.
const dictionary =
  cts.entityDictionaryParse([
    '11208172	Nixon	Nixon	person:head of state',
    '11208172	Nixon	Richard Nixon	person:head of state',
    '11208172	Nixon	Richard M. Nixon	person:head of state',
    '11208172	Nixon	Richard Milhous Nixon	person:head of state',
    '11208172	Nixon	President Nixon	person:head of state',
    '08932568	Paris	Paris	administrative district:national capital',
    '09145751	Paris	Paris	administrative district:town',
    '09500217	Paris	Paris	imaginary being:mythical being'
  ]);
const node = new NodeBuilder()
                   .addElement('node', 'Nixon visited Paris')
                   .toNode();
entity.enrich(node, dictionary);

// Returns output similar to the following. (Whitespace added to improve
// readability.)
//
// &lt;node xmlns:e="http://marklogic.com/entity"&gt;
//   &lt;e:entity type="person:head of state"&gt;Nixon&lt;/e:entity&gt; 
//   visited 
//   &lt;e:entity type="administrative district:national capital"&gt;Paris&lt;/e:entity&gt;
// &lt;/node&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="entity-dictionary-get" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Search">
    <apidoc:summary>
  Retrieve an entity dictionary previously cached in the database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
   The URI of an entity dictionary previously been saved in the database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">cts:entity-dictionary</apidoc:return>
    <apidoc:return class="javascript">cts.entityDictionary</apidoc:return>
    <apidoc:usage>
  If no dictionary exists with the specified URI, this function throws
  <code xmlns="http://www.w3.org/1999/xhtml">XDMP-NOSUCHDICT</code>.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/entity.xml%2357701'>Creating an Entity Dictionary</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#cts.entity-dictionary" xmlns="http://www.w3.org/1999/xhtml">cts:entity-dictionary</a>
    <a class="javascript" href="#cts.entityDictionary" xmlns="http://www.w3.org/1999/xhtml">cts.entityDictionary</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#entity:dictionary-insert" xmlns="http://www.w3.org/1999/xhtml">entity:dictionary-insert</a>
    <a class="javascript" href="#entity.dictionaryInsert" xmlns="http://www.w3.org/1999/xhtml">entity.dictionaryInsert</a>
  </apidoc:see-also>
  <apidoc:see-also>
    <a class="xquery" href="#entity:dictionary-load" xmlns="http://www.w3.org/1999/xhtml">entity:dictionary-load</a>
    <a class="javascript" href="#entity.dictionaryLoad" xmlns="http://www.w3.org/1999/xhtml">entity.dictionaryLoad</a>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Assume you previously inserted an entity dictionary with the
 : URI "/ontology/people", using entity:dictionary-load or
 : entity:dictionary-insert.
 :)
xquery version "1.0-ml";
cts:entity-dictionary-get("/ontology/people")

(: Returns an opaque cts:entity-dictionary object suitable for use with
 : functions that accept a cts:entity-dictionary as input. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Assume you previously inserted an entity dictionary with the
// URI "/ontology/people", using entity.dictionaryLoad or
// entity.dictionaryInsert.

cts.entityDictionaryGet('/ontology/people');

// Returns an opaque cts.entityDictionary object suitable for use with
// functions that accept a cts.entityDictionary as input.
</pre></apidoc:example>
  </apidoc:function></apidoc:module>