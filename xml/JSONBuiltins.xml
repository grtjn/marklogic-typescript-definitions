<apidoc:module name="Extensions" category="Extension" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary category="Extension" subcategory="JSON" lib="xdmp" access="public">
 <p xmlns="http://www.w3.org/1999/xhtml">The JSON built-in functions serialize XQuery items to JSON and
 read a JSON string and create XQuery items from it.  JSON (JavaScript
 Object Notation) is a data-interchange format popular mechanism for passing
 data from JavaScript to other programming environments. </p>
 </apidoc:summary><apidoc:function name="to-json" type="builtin" lib="xdmp" category="Extension" subcategory="JSON">
    <apidoc:name class="javascript">toJSON</apidoc:name>
    <apidoc:summary>
  Constructs a JSON document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="item" type="item()*">
    A sequence of items from which the JSON document is to be constructed.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The item sequence from which the JSON document is
    constructed.</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">A Sequence, typically containing a 
    JavaScript Object, from which the JSON document is
    constructed. If you pass in a single value, 
  it is treated as a Sequence with that single item; therefore, if you 
  pass in an array, the array is treated as a single value (not as one value
  for each item in the array). If you mean to pass in  
  the values of each item in the array, then you can call 
  <a href="#xdmp.arrayValues">xdmp.arrayValues</a> on the array. </span>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()</apidoc:return>
    <apidoc:usage>
  <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">
  <p>An <code>object-node()</code> is constructed from a
  <code>json:object</code>, a <code>map:map</code>, or an
  <code>object-node()</code>.</p>
  <p>An <code>array-node()</code> is constructed from a
  <code>json:array</code>, a sequence of multiple items, or an
  <code>array-node()</code>.</p>
  <p>A <code>null-node()</code> is constructed from an empty sequence or
     an <code>null-node()</code>.</p>
  <p>A <code>boolean-node()</code> is constructed from an
  <code>xs:boolean</code> or a <code>boolean-node()</code>.</p>
  <p>A <code>number-node()</code> is constructed from an
  <code>xs:integer</code>, a <code>xs:decimal</code>, a
  <code>xs:float</code>, a <code>xs:double</code>, or a
  <code>number-node()</code>. Integers with absolute value greater than
     9007199254740991 are excluded and instead construct <code>text()</code>
     nodes to avoid any loss of precision.</p>
  <p>A <code>text()</code> node is constructed from all other items.</p>
  </span>
  <p xmlns="http://www.w3.org/1999/xhtml">To serialize a JSON node to a string, use <code>xdmp:quote</code>.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:to-json(("a",fn:false()))
=&gt;
["a", false]
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $object := json:object()
let $_ := map:put($object,"a",111)
return xdmp:to-json($object)
=&gt;
{"a":111}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var object = {"a":111};
xdmp.toJSON(object)
=&gt;
{"a":111}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.toJSON({"foo":"bar"}).root.foo
=&gt; "bar"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="to-json-string" type="builtin" lib="xdmp" category="Extension" subcategory="JSON">
    <apidoc:summary>
  Returns a string representing a JSON
  serialization of a given item sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="item" type="item()*">
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The item sequence whose JSON serialization is 
    returned.</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">A Sequence, typically containing a 
    JavaScript Object, whose JSON serialization is 
    returned. If you pass in a single value, 
  it is treated as a Sequence with that single item; therefore, if you 
  pass in an array, the array is treated as a single value (not as one value
  for each item in the array). If you mean to pass in  
  the values of each item in the array, then you can call 
  <a href="#xdmp.arrayValues">xdmp.arrayValues</a> on the array. </span>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">XML nodes are serialized to JSON strings.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">JSON has no serialization for infinity, not a number, and negative 0,
  therefore if you try and serialize INF, -INF, NaN, or -0 as JSON, an
  exception is thrown.  If you want to represent these values in some way in
  your serialized JSON, then you can catch the exception (with a try/catch, for
  example) and provide your own value for it.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">XQuery maps (<code>map:map</code> types) serialize to JSON name-value
  pairs.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:to-json-string(("a",fn:false()))
   =&gt; ["a", false]
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.toJsonString(["a",false]);
   =&gt; ["a", false]
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:to-json-string(
  xdmp:from-json-string('{ "a":111 }'))
=&gt;
{"a":111}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.toJsonString(
  xdmp.fromJsonString('{ "a":111 }'));
=&gt;
{"a":111}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="from-json" type="builtin" lib="xdmp" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Atomizes a JSON node, returning a JSON value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="node()">
    A node of kind <code xmlns="http://www.w3.org/1999/xhtml">object-node()</code>, <code xmlns="http://www.w3.org/1999/xhtml">array-node()</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">text()</code>, <code xmlns="http://www.w3.org/1999/xhtml">number-node()</code>, <code xmlns="http://www.w3.org/1999/xhtml">boolean-node()</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">null-node()</code>, or <code xmlns="http://www.w3.org/1999/xhtml">document-node()</code>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">An <code>object-node()</code> atomizes as a <code>json:object</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">An <code>array-node()</code> atomizes as a <code>json:array</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>null-node()</code> atomizes as an empty sequence.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>boolean-node()</code> atomizes as an <code>xs:boolean</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>number-node()</code> atomizes as an <code>xs:integer</code>,
     <code>xs:decimal</code>, or <code>xs:double</code> value.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>text()</code> node atomizes as an <code>xs:untypedAtomic</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>document-node()</code> atomizes the same as its root.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function returns the same result as <code>fn:data</code>,
     but it only works on JSON nodes.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To make a JSON node from a string, use <code>xdmp:unquote</code>
     with the <code>"format-json"</code> option.</p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:from-json(xdmp:unquote('["a", null, false]',(),"format-json"))
=&gt;
json:array(
&lt;json:array xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:json="http://marklogic.com/xdmp/json"&gt;
   &lt;json:value&gt;a&lt;/json:value&gt;
   &lt;json:value xsi:nil="true"/&gt;
   &lt;json:value xsi:type="xs:boolean"&gt;false&lt;/json:value&gt;
&lt;/json:array&gt;)
  </pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $string := '[{"some-key":45683}, "this is a string", 123]'
let $node := xdmp:unquote($string,(),"format-json")
return xdmp:from-json($node)
=&gt;
json:array(
&lt;json:array xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:json="http://marklogic.com/xdmp/json"&gt;
  &lt;json:value&gt;
    &lt;json:object&gt;
      &lt;json:entry key="some-key"&gt;
        &lt;json:value xsi:type="xs:integer"&gt;45683&lt;/json:value&gt;
      &lt;/json:entry&gt;
    &lt;/json:object&gt;
  &lt;/json:value&gt;
  &lt;json:value&gt;this is a string&lt;/json:value&gt;
  &lt;json:value xsi:type="xs:integer"&gt;123&lt;/json:value&gt;&lt;/json:array&gt;)
</pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
You can make changes to the json:object and json:array values returned by
xdmp:from-json.  The following uses the map:put function on the returned
json:object value to add a property, then returns the modified object
both as a value and as a node.

let $string := '[{"some-key":45683}, "this is a string", 123]'
let $node := xdmp:unquote($string,(),"format-json")
let $array := xdmp:from-json($node)
let $_ := map:put($array[1],$array[2],$array[3])
return ($array[1],xdmp:to-json($array[1]))
=&gt;
json:object(
&lt;json:object xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:json="http://marklogic.com/xdmp/json"&gt;
  &lt;entry key="some-key"&gt;
    &lt;json:value xsi:type="xs:integer"&gt;45683&lt;/json:value&gt;
  &lt;/entry&gt;
  &lt;entry key="this is a string"&gt;
    &lt;json:value xsi:type="xs:integer"&gt;123&lt;/json:value&gt;
  &lt;/entry&gt;
&lt;/json:object&gt;)
{"some-key":45683, "this is a string":123}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="fromJSON" type="builtin" lib="xdmp" category="Extension" subcategory="JSON" class="javascript">
    <apidoc:summary>
  Atomizes a JSON node, returning a JSON value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="node()">
    A node of kind <code xmlns="http://www.w3.org/1999/xhtml">object-node()</code>, <code xmlns="http://www.w3.org/1999/xhtml">array-node()</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">text()</code>, <code xmlns="http://www.w3.org/1999/xhtml">number-node()</code>, <code xmlns="http://www.w3.org/1999/xhtml">boolean-node()</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">null-node()</code>, or <code xmlns="http://www.w3.org/1999/xhtml">document-node()</code>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">An <code>object-node()</code> atomizes as a <code>json:object</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">An <code>array-node()</code> atomizes as a <code>json:array</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>null-node()</code> atomizes as an empty sequence.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>boolean-node()</code> atomizes as an <code>xs:boolean</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>number-node()</code> atomizes as an <code>xs:integer</code>,
     <code>xs:decimal</code>, or <code>xs:double</code> value.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>text()</code> node atomizes as an <code>xs:untypedAtomic</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A <code>document-node()</code> atomizes the same as its root.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function returns the same result as <code>fn:data</code>,
     but it only works on JSON nodes.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To make a JSON node from a string, use <code>xdmp:unquote</code>
     with the <code>"format-json"</code> option.</p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.fromJSON(xdmp.unquote('["a", null, false]',null,"format-json"));
=&gt;
["a", null, false]
  </pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var str = '[{"some-key":45683}, "this is a string", 123]';
var node = xdmp.unquote(str,null,"format-json");
xdmp.fromJSON(node);
=&gt;
[{"some-key":45683}, "this is a string", 123]
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="from-json-string" type="builtin" lib="xdmp" category="Extension" subcategory="JSON">
    <apidoc:summary>
  Parses a string as JSON, returning an item sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:string">
    JSON input to be parsed.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">A JSON object or string is parsed as a <code>json:object</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The JSON null value is represented as the empty sequence, and serializes
  in a way that indicates it is a null value.  Therefore, when the null value
  is returned to JSON via <code>xdmp:to-json</code>, the null value is
  preserved.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Nested arrays in JSON are turned into nested sets of
  <code>json:array</code>s.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Any codepoints in the JSON string that aren't allowed in XML are
     rejected and an error is thrown.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:from-json-string('["a", null, false]')
=&gt;
json:array(
&lt;json:array xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:json="http://marklogic.com/xdmp/json"&gt;
   &lt;json:value xsi:type="xs:string"&gt;a&lt;/json:value&gt;
   &lt;json:value xsi:nil="true"/&gt;
   &lt;json:value xsi:type="xs:boolean"&gt;false&lt;/json:value&gt;
&lt;/json:array&gt;)
  </pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.fromJsonString('["a", null, false]');
=&gt;
["a",null,false]
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $json :=
  '[{"some-key":45683}, "this is a string", 123]'
return
xdmp:from-json-string($json)

=&gt;

json:array(
&lt;json:array xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:json="http://marklogic.com/xdmp/json"&gt;
  &lt;json:value&gt;
    &lt;json:object&gt;
      &lt;json:entry key="some-key"&gt;
        &lt;json:value xsi:type="xs:integer"&gt;45683&lt;/json:value&gt;
      &lt;/json:entry&gt;
    &lt;/json:object&gt;
  &lt;/json:value&gt;
  &lt;json:value xsi:type="xs:string"&gt;this is a string&lt;/json:value&gt;
  &lt;json:value xsi:type="xs:integer"&gt;123&lt;/json:value&gt;&lt;/json:array&gt;)

Note that what is shown above is the serialization of the XQuery items to
a json:array.  You can also use some or all of the items in the XQuery data
model.  For example, consider the following, which adds to the map based on the
other values:

xquery version "1.0-ml";
let $json :=
  '[{"some-key":45683}, "this is a string", 123]'
let $items := xdmp:from-json-string($json)
let $put := map:put($items[1], xs:string($items[3]), $items[2])
return
($items[1], xdmp:to-json-string($items[1]))

(: returns the following json:array and JSON string:
json:object(
&lt;json:object xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:json="http://marklogic.com/xdmp/json"&gt;
  &lt;entry key="some-key"&gt;
    &lt;json:value xsi:type="xs:integer"&gt;45683&lt;/json:value&gt;
  &lt;/entry&gt;
  &lt;entry key="123"&gt;
    &lt;json:value xsi:type="xs:string"&gt;this is a string&lt;/json:value&gt;
  &lt;/entry&gt;
&lt;/json:object&gt;)
{"some-key":45683, "123":"this is a string"}

This query uses the map functions to modify the first json:object
in the json:array.
:)
</pre></apidoc:example>
  </apidoc:function></apidoc:module>