<apidoc:module name="SecurityBuiltins" category="Security" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
The security built-in functions are XQuery functions to perform many
security-related tasks in MarkLogic Server.
</apidoc:summary><apidoc:function name="can-grant-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Tests whether a user can grant or revoke a set of roles.  Raises an error 
  if the session user can not.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="roles" type="xs:string*">
    A set of role names
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:can-grant-roles(("development", "qa"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.canGrantRoles(["development", "qa"]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="security-assert" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Tests whether the current user has at least one of a given set of privileges.
  Raises an error if the user does not have any of the privileges.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="privileges" type="xs:string*">
    The set of privilege URIs.  These are the action URIs for the privileges,
    not the names of the privileges.
  </apidoc:param>
      <apidoc:param name="kind" type="xs:string">
    The kind of privileges (either "execute" or "uri"). 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:security-assert("http://my-function/function-foo", "execute")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.securityAssert("http://my-function/function-foo", "execute");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="passive-security-assert" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Tests whether the current user has at least one of a given set of privileges.
  Raises an error if the user does not have any of the privileges. 
  Ignore undefined privileges.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="privileges" type="xs:string*">
    The set of privilege URIs.  These are the action URIs for the privileges,
    not the names of the privileges.
  </apidoc:param>
      <apidoc:param name="kind" type="xs:string">
    The kind of privileges (either "execute" or "uri"). 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:passive-security-assert("http://my-function/function-foo", "execute")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.passiveSecurityAssert("http://my-function/function-foo", "execute");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="has-privilege" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Tests whether the current user has at least one of a given set of privileges.
  Returns true if they do, false otherwise.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="privileges" type="xs:string*">
    The set of privilege URIs.  These are the URIs for the privileges, not
    the names of the privileges.
  </apidoc:param>
      <apidoc:param name="kind" type="xs:string">
    The kind of privileges (either "execute" or "uri").
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:has-privilege("http://myprivs/function-foo", "execute")
=&gt; true if the current user has the execute privilege on a
   privilege with the URI "http://myprivs/function-foo"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hasPrivilege("http://myprivs/function-foo", "execute");
=&gt; true if the current user has the execute privilege on a
   privilege with the URI "http://myprivs/function-foo"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="passive-has-privilege" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Tests whether the current user has at least one of a given set of privileges.
  Returns true if they do, false otherwise.
  Ignore undefined privileges.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="privileges" type="xs:string*">
    The set of privilege URIs.  These are the URIs for the privileges, not
    the names of the privileges.
  </apidoc:param>
      <apidoc:param name="kind" type="xs:string">
    The kind of privileges (either "execute" or "uri").
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:passive-has-privilege("http://myprivs/function-foo", "execute")
=&gt; true if the current user has the execute privilege on a
   privilege with the URI "http://myprivs/function-foo"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.passiveHasPrivilege("http://myprivs/function-foo", "execute");
=&gt; true if the current user has the execute privilege on a
   privilege with the URI "http://myprivs/function-foo"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="user-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns all roles assigned to a user, including roles directly assigned
  to the user and roles inherited by other roles.  Returns roles for users from
  the security database or from the specified external security, depending on
  the parameter values. 
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
    The user name.
  </apidoc:param>
      <apidoc:param name="extSecId" type="xs:unsignedLong" optional="true">
    An external security config ID to search. This is needed only to find an
    external user. The default is the current App Server's external-security
    setting.
  </apidoc:param>
      <apidoc:param name="secDbFirst" type="xs:boolean" optional="true">
    A boolean value to specify whether to check security database before any 
    specified external security.  The default is the current App Server's 
    internal-security setting, or true when running on the task server. 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
    <a href="#xdmp:user" xmlns="http://www.w3.org/1999/xhtml">xdmp:user</a>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:privilege>
  http://marklogic.com/xdmp/privileges/xdmp-user-roles
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:user-roles("ian")
=&gt;(2349872340, 432987324)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.userRoles("ian");
=&gt; [2349872340, 432987324]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="userid-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns all roles assigned to a user, including roles directly assigned
  to the user and roles inherited by other roles.  Returns role IDs for users 
  from the security database or from the specified external security, 
  depending on the parameter values.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="userId" type="xs:unsignedLong">
    The user ID.
  </apidoc:param>
      <apidoc:param name="extSecId" type="xs:unsignedLong" optional="true">
    An external security config ID to search. This is needed only to find an
    external user. The default is the current App Server's external-security
    setting.
  </apidoc:param>
      <apidoc:param name="secDbFirst" type="xs:boolean" optional="true">
    A boolean value to specify whether to check security database before any 
    specified external security.  The default is the current App Server's 
    internal-security setting, or true when running on the task server. 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
    <a href="#xdmp:user" xmlns="http://www.w3.org/1999/xhtml">xdmp:user</a>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:privilege>
  http://marklogic.com/xdmp/privileges/xdmp-user-roles
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:user-roles(83928739123)
=&gt; (2349872340, 432987324)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.userRoles(83928739123);
=&gt; [2349872340, 432987324]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="role-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the set of all roles inherited by a given role, including roles
  directly assigned to the role and roles inherited from other roles.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
    The role name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
  http://marklogic.com/xdmp/privileges/xdmp-role-roles
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:role-roles("vp")
=&gt; (2349872340, 432987324)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.roleRoles("vp");
=&gt; [2349872340, 432987324]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="privilege-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the set of all roles that have a given privilege.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="action" type="xs:string">
    The privilege action.
  </apidoc:param>
      <apidoc:param name="kind" type="xs:string">
    The privilege kind.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
  http://marklogic.com/xdmp/privileges/xdmp-privilege-roles
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:privilege-roles(
         "http://marklogic.com/xdmp/privileges/admin-module-write",
         "execute")
=&gt; ( 8487823278258687528, 8950790268580922626, 
     14303099028664823447, 2890629636447572780,
     13947965013900320292 )
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.privilegeRoles(
         "http://marklogic.com/xdmp/privileges/admin-module-write",
         "execute");
=&gt; ( 8487823278258687528, 8950790268580922626, 
     14303099028664823447, 2890629636447572780,
     13947965013900320292 )
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="amp-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the set of all roles assigned to an amp, including roles directly
  assigned to the amp and roles inherited by other roles.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace-uri" type="xs:string">
    The amped function namespace URI.
  </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
    The amped function localname.
  </apidoc:param>
      <apidoc:param name="document-uri" type="xs:string">
    The amped function module URI.
  </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
    The database ID containing the module.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
  http://marklogic.com/xdmp/privileges/xdmp-amp-roles
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:amp-roles("http://marklogic.com",
                 "read-docs",
                 "/app/docs.xqy",
                 239487239487)
=&gt; (2349872340, 432987324)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.ampRoles("http://marklogic.com",
                 "read-docs",
                 "/app/docs.xqy",
                 239487239487);
=&gt; Sequence(2349872340, 432987324)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-get-collections" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the collections to which a given document belongs.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:string*</apidoc:return>
    <apidoc:return class="javascript">String[]</apidoc:return>
    <apidoc:usage class="javascript">
  If the URI passed in doesn't exist, an empty array is returned.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-get-collections("chapter5.xml")
=&gt; ("http://marklogic.com/all-books",
        "http://marklogic.com/xml-books")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentGetCollections("chapter5.json")
=&gt; ["http://marklogic.com/all-books",
        "http://marklogic.com/xml-books"]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-get-metadata" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the metadata value of a given document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">map:map?</apidoc:return>
    <apidoc:return class="javascript">Object?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Set some metadata on a document. :)
xquery version "1.0-ml";
xdmp:document-set-metadata("foo.xml",
  map:map() =&gt; map:with("someKey", "someValue")
            =&gt; map:with("someOtherKey", 123));

(: Fetch the metadata. :)
xquery version "1.0-ml";
xdmp:document-get-metadata("foo.xml")

(: Returns the metadata for the document, as a map. For example:
 :
 : &lt;map:map xmlns:map="http://marklogic.com/xdmp/map" 
 :     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 :     xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
 :   &lt;map:entry key="someKey"&gt;
 :     &lt;map:value xsi:type="xs:string"&gt;somevalue&lt;/map:value&gt;
 :   &lt;/map:entry&gt;
 :   &lt;map:entry key="someOtherKey"&gt;
 :     &lt;map:value xsi:type="xs:string"&gt;123&lt;/map:value&gt;
 :   &lt;/map:entry&gt;
 : &lt;/map:map&gt; 
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Assume you have a previously attached metadata to a document.
// For example by running a script such as the following:
//
// declareUpdate();
// xdmp.documentSetMetadata("/foo.xml",
//   {someKey: 'someValue', someOtherKey: 123});
//
// Then retrieve the metadata as follows:

xdmp.documentGetMetadata("/foo.xml")

// Returns the metadata, as a JavaScript object. For example:
//   {"someKey":"someValue", "someOtherKey":"123"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-get-metadata-value" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the metadata value of a given document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="keyName" type="xs:string">
    Name of the key for the metadata.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:string?</apidoc:return>
    <apidoc:return class="javascript">String?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-get-metadata-value("/foo.xml", "a")
=&gt; Metadata of key "a" on /foo.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentGetMetadataValue("doc.json", "temporalProtectExTime")
=&gt; Metadata of key "temporalProtectExTime" on doc.json
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-metadata" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the metadata value of a given node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="xs:string">
    The node whose metadata are to be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">map:map?</apidoc:return>
    <apidoc:return class="javascript">Object?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-metadata(fn:doc("/foo.xml"))
=&gt; Metadata of document node of /foo.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeMetadata(cts.doc("/foo.json"))
=&gt; Metadata of document node of /foo.json
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-metadata-value" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the metadata value of a node for a particular key.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The node whose metadata are to be returned.
  </apidoc:param>
      <apidoc:param name="keyName" type="xs:string">
    Name of the key for the metadata.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:string?</apidoc:return>
    <apidoc:return class="javascript">String?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-metadata-value(fn:doc("/foo.xml"), "a")
=&gt; Metadata of key "a" on document node /foo.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeGetMetadata(cts.doc("/foo.json"),"a")
=&gt; Metadata of key "a" on document node /foo.json
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-collections" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns any collections for the node's document in the database. If
  the specified node does not come from a document in a database, then
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:node-collections</code> returns an empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()">
    The node whose collections are to be returned.
   </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:string*</apidoc:return>
    <apidoc:return class="javascript">String[]</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-collections(doc("http://marklogic.com/document"))
=&gt; ("http://acme.com/this-collection", "http://acme.com/that-collection")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeCollections(cts.doc("/dog.json"));
=&gt; ["http://acme.com/this-collection", "http://acme.com/that-collection"]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-get-permissions" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the permissions to a given document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param class="xquery" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "elements" or "objects".
    With "elements", the built-in returns a sequence of XML elements.
    With "objects",  the built-in returns a sequence of map:map.
    The default is "elements".
  </apidoc:param>
      <apidoc:param class="javascript" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "objects" or "elements".
    With "objects",  the built-in returns an array of objects.
    With "elements", the built-in returns an array of XML element nodes.
    The default is "objects".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">item()*</apidoc:return>
    <apidoc:return class="javascript">Object[]</apidoc:return>
    <apidoc:usage class="javascript">
  If the URI passed in doesn't exist, an empty array is returned.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-get-permissions("chapter5.xml")
  =&gt;(&lt;sec:permission&gt;
          &lt;sec:capability&gt;read&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;324978243&lt;/sec:role-id&gt;
        &lt;/sec:permission&gt;,
        &lt;sec:permission&gt;
          &lt;sec:capability&gt;read&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;32493478578243&lt;/sec:role-id&gt;
        &lt;/sec:permission&gt;,
        &lt;sec:permission&gt;
          &lt;sec:capability&gt;update&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;32493478578243&lt;/sec:role-id&gt;
        &lt;/sec:permission&gt;)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.documentGetPermissions("chapter5.json")
  =&gt;
  [
    {
      "permission" : {
        "capability" : "read",
        "roldId" : "324978243"
       }
    },
    {
      "permission" : {
        "capability" : "read",
        "roldId" : "32493478578243"
      }
    },
    {
      "permission" : {
        "capability" : "update",
        "roldId" : "32493478578243"
      }
    }
  ]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-permissions" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the permissions to a node's document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()">
    The node.
  </apidoc:param>
      <apidoc:param class="xquery" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "elements" or "objects".
    With "elements", the built-in returns a sequence of XML elements.
    With "objects",  the built-in returns a sequence of map:map.
    The default is "elements".
  </apidoc:param>
      <apidoc:param class="javascript" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "objects" or "elements".
    With "objects",  the built-in returns an array of objects.
    With "elements", the built-in returns an array of XML element nodes.
    The default is "objects".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">item()*</apidoc:return>
    <apidoc:return class="javascript">Object[]</apidoc:return>
    <apidoc:usage class="javascript">
  If the URI passed in doesn't exist, an empty array is returned.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:node-permissions(fn:doc("chapter5.xml"))
  =&gt;(&lt;sec:permission&gt;
          &lt;sec:capability&gt;read&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;324978243&lt;/sec:role-id&gt;
        &lt;/sec:permission&gt;,
        &lt;sec:permission&gt;
          &lt;sec:capability&gt;read&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;32493478578243&lt;/sec:role-id&gt;
        &lt;/sec:permission&gt;,
        &lt;sec:permission&gt;
          &lt;sec:capability&gt;update&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;32493478578243&lt;/sec:role-id&gt;
        &lt;/sec:permission&gt;)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.nodePermissions(cts.doc("chapter5.json"))
  =&gt;
  [
    {
      "permission" : {
        "capability" : "read",
        "roldId" : "324978243"
       }
    },
    {
      "permission" : {
        "capability" : "read",
        "roldId" : "32493478578243"
      }
    },
    {
      "permission" : {
        "capability" : "update",
        "roldId" : "32493478578243"
      }
    }
  ]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="default-permissions" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the permissions any new document would get if the current user
  were to insert a document without specifying the default permissions.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="true">
    The document URI to get default permissions.
  </apidoc:param>
      <apidoc:param class="xquery" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "elements" or "objects".
    With "elements", the built-in returns a sequence of XML elements.
    With "objects",  the built-in returns a sequence of map:map.
    The default is "elements".
  </apidoc:param>
      <apidoc:param class="javascript" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "objects" or "elements".
    With "objects",  the built-in returns an array of objects.
    With "elements", the built-in returns an array of XML element nodes.
    The default is "objects".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()*</apidoc:return>
    <apidoc:return class="javascript">Object[]</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Fetch permissions as elements (default behavior) :)
xdmp:default-permissions("http://example.com/content/foo.xml")

(: Returns a sequence of elements, such as the following:
 :
 : (&lt;sec:permission&gt;
 :    &lt;sec:capability&gt;read&lt;/sec:capability&gt;
 :    &lt;sec:role-id&gt;324978243&lt;/sec:role-id&gt;
 :  &lt;/sec:permission&gt;,
 :  &lt;sec:permission&gt;
 :    &lt;sec:capability&gt;read&lt;/sec:capability&gt;
 :    &lt;sec:role-id&gt;32493478578243&lt;/sec:role-id&gt;
 :  &lt;/sec:permission&gt;,
 :  &lt;sec:permission&gt;
 :    &lt;sec:capability&gt;update&lt;/sec:capability&gt;
 :    &lt;sec:role-id&gt;32493478578243&lt;/sec:role-id&gt;
 :  &lt;/sec:permission&gt;)
 :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Fetch permissions for the current user, as json objects :)
xquery version "1.0-ml";
xdmp:default-permissions((), "objects")

(: Returns output similar to the following (rendered here as JSON):
 :
 :   {"capability":"read", "roleId":"14918370877051183774"}
 :   {"capability":"update", "roleId":"8487823278258687528"}
 :
 : The following is the underlying XML, which you can pass where an
 : Object or map:map is expected.
 :
 :   &lt;json:object xmlns:json="http://marklogic.com/xdmp/json" 
 :       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 :       xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
 :     &lt;json:entry key="capability"&gt;
 :       &lt;json:value xsi:type="xs:string"&gt;read&lt;/json:value&gt;
 :     &lt;/json:entry&gt;
 :     &lt;json:entry key="roleId"&gt;
 :       &lt;json:value xsi:type="xs:integer"&gt;14918370877051183774&lt;/json:value&gt;
 :     &lt;/json:entry&gt;
 :   &lt;/json:object&gt;
 :   &lt;json:object xmlns:json="http://marklogic.com/xdmp/json" 
 :       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 :       xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
 :     &lt;json:entry key="capability"&gt;
 :       &lt;json:value xsi:type="xs:string"&gt;update&lt;/json:value&gt;
 :     &lt;/json:entry&gt;
 :     &lt;json:entry key="roleId"&gt;
 :       &lt;json:value xsi:type="xs:integer"&gt;8487823278258687528&lt;/json:value&gt;
 :     &lt;/json:entry&gt;
 :   &lt;/json:object&gt;
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Retrieve the default permissions for a given URI, as objects:
xdmp.defaultPermissions("http://example.com/content/foo.json")

// Returns an array of JSON objects, such as the following:
//
//  [{"permission" : {"capability" : "read", "roldId" : "324978243" }},
//   {"permission" : {"capability" : "read", "roldId" : "32493478578243" }},
//   {"permission" : {"capability" : "update", "roldId" : "32493478578243" }} ]
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Retrieve default permissions for the current user, as a 
// Sequence of XML elements
xdmp.defaultPermissions(null, 'elements');

// Returns an array of element nodes such as the following:
//
// [&lt;sec:permission xmlns:sec="http://marklogic.com/xdmp/security"&gt;
//    &lt;sec:capability&gt;update&lt;/sec:capability&gt;
//    &lt;sec:role-id&gt;8487823278258687528&lt;/sec:role-id&gt;
//  &lt;/sec:permission&gt;,
//  &lt;sec:permission xmlns:sec="http://marklogic.com/xdmp/security"&gt;
//    &lt;sec:capability&gt;update&lt;/sec:capability&gt;
//    &lt;sec:role-id&gt;8487823278258687528&lt;/sec:role-id&gt;
//  &lt;/sec:permission&gt;]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="default-collections" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the collections any new document would get if the current user
  were to insert a document without specifying the collections.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="true">
    The document URI to get parent directory.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:default-collections()
=&gt; ("http://example.com/docs",
        "http://example.com/manuals")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.defaultCollections();
=&gt; ("http://example.com/docs",
        "http://example.com/manuals")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-current-user" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the name of the current user.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:get-current-user();
=&gt; "ian"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.getCurrentUser();
=&gt; "ian"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-current-userid" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the ID of the current user.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:get-current-userid()
=&gt; 23987236
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.getCurrentUserid();
=&gt; 23987236
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-request-user" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  If this App Server is using application-level authentication, 
  returns the ID of the user in the last successful call to 
  <a href="#xdmp:login" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:login</code></a>.
  Otherwise, returns the ID of the user from the <code xmlns="http://www.w3.org/1999/xhtml">Authorization</code> 
  header of this App Server request.
  If you want to get the ID of the current user, use the 
  <a href="#xdmp:get-current-userid" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:get-current-userid</code></a> 
  function.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:get-request-user()
=&gt; 23987236
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.getRequestUser();
=&gt; 23987236
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-current-roles" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns all the current roles, both assigned and inherited by the
  current user and any received from amps.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:get-current-roles()
=&gt; (2349872340, 432987324)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.getCurrentRoles();
=&gt; (2349872340, 432987324)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="permission" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary class="xquery">
  Returns a permission element in the security namespace corresponding
  to the named role and capability given.
</apidoc:summary>
    <apidoc:summary class="javascript">
  Returns a permission object corresponding
  to the named role and capability given.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="role" type="xs:string">
    A role name.
  </apidoc:param>
      <apidoc:param name="capability" type="xs:string">
    A capability (read, update, insert, or execute).
  </apidoc:param>
      <apidoc:param class="xquery" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "element" or "object".
    With "element", the built-in returns an XML element.
    With "object",  the built-in returns a map:map.
    The default is "element".
  </apidoc:param>
      <apidoc:param class="javascript" name="output-kind" type="xs:string" optional="true">
    The output kind. It can be either "object" or "element".
    With "object",  the built-in returns an object.
    With "element", the built-in returns an XML element node.
    The default is "object".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()|map:map</apidoc:return>
    <apidoc:return class="javascript">Object|Element</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:permission("development", "read")
  =&gt;&lt;sec:permission&gt;
          &lt;sec:capability&gt;read&lt;/sec:capability&gt;
          &lt;sec:role-id&gt;32497824353&lt;/sec:role-id&gt;
       &lt;/sec:permission&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.permission("development", "read")
  =&gt;
  {
    "capability" : "read",
    "roleId" : "32497824353"
  }
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="user" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the user ID for the specified user name.  Unlike the security
  library module function <a href="#sec:uid-for-name" xmlns="http://www.w3.org/1999/xhtml"><code>sec:uid-for-name</code></a>, this function
  can be evaluated against any database and does not need to be evaluated
  directly against the security database.  It returns the user ID either from 
  the security database or from the specified external security, depending on
  the parameter values. 
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="user" type="xs:string">
    A user name.
  </apidoc:param>
      <apidoc:param name="extSecId" type="xs:unsignedLong" optional="true">
    An external security config ID to search. This is needed only to find an
    external user. The default is the current App Server's external-security
    setting.
  </apidoc:param>
      <apidoc:param name="secDbFirst" type="xs:boolean" optional="true">
    A boolean value to specify whether to check security database before any 
    specified external security.  The default is the current App Server's 
    internal-security setting, or true when running on the task server. 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: assume no external security is configured :)
xdmp:user("sylvester")
=&gt; 239871567325
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: searches for "sylvester" in the external security configured, 
   without looking in the security database
:)
xdmp:user("sylvester", xdmp:external-security("ldap-config"), fn:false())
=&gt; 239871567325
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// assume no external security is configured 
xdmp.user("sylvester")
=&gt; 239871567325
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.user("john", xdmp.externalSecurity("ldap-config"), false);
=&gt; 16291221516538572683
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="role" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the role ID for the specified role name.  Unlike the security
  library module function <code xmlns="http://www.w3.org/1999/xhtml">sec:uid-for-name</code>, this function
  can be evaluated against any database and does not need to be evaluated
  directly against the security database.  It returns the role ID from the
  security database configured for the database in which the App Server
  evaluates against.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="role" type="xs:string">
    A role name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:role("editor")
=&gt; 2392349873545
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.role("editor");
=&gt; 2392349873545
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="role-name" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the role name for the specified role id.  This function
  can be evaluated against any database and does not need to be evaluated
  directly against the security database.  It returns the role name from the
  security database configured for the database in which the App Server
  evaluates against.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="role-id" type="xs:unsignedLong">
    A role ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:role-name(2392349873545)
=&gt; "editor"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.role(2392349873545);
=&gt; "editor"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="privilege" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the privilege ID for the specified privilege name.  Unlike the security
  library module function <code xmlns="http://www.w3.org/1999/xhtml">sec:uid-for-name</code>, this function
  can be evaluated against any database and does not need to be evaluated
  directly against the security database.  It returns the privilege ID from the
  security database configured for the database in which the App Server
  evaluates against.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="action" type="xs:string">
    A privilege action.
  </apidoc:param>
      <apidoc:param name="kind" type="xs:string">
    A privilege kind: "execute" or "URI".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:privilege("http://my-app/test","execute")
=&gt; 2392349873545
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.privilege("http://my-app/test","execute");
=&gt; 2392349873545
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="amp" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the amp ID for the specified amp.  Unlike the security
  library module function <code xmlns="http://www.w3.org/1999/xhtml">sec:uid-for-name</code>, this function
  can be evaluated against any database and does not need to be evaluated
  directly against the security database.  It returns the amp ID from the
  security database configured for the database in which the App Server
  evaluates against.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string">
    A function namespace.
  </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
    A function localname.  </apidoc:param>
      <apidoc:param name="module-uri" type="xs:string">
    The module URI for the amp.
  </apidoc:param>
      <apidoc:param name="database" type="xs:unsignedLong">
    The ID of the database in which the module to which this amp refers is
    stored.  If the module is on the filesystem under the <code xmlns="http://www.w3.org/1999/xhtml">Modules</code>
    directory, then specify 0 for the database ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:amp("http://my-app/test","my-func","/modules/my-module.xqy",
            xdmp:modules-database())
=&gt; 2392349873545
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.amp("http://marklogic.com/xdmp/security", "amp-add-roles",
         "/MarkLogic/security.xqy", 0);
=&gt; 3548369234520018804
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="user-external-security" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
Returns external security id and user name for an external user.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="user-id" type="xs:unsignedLong">
    A user ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(external-user)?</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:usage schema="external-user.xsd">
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:user-external-security(2646897984048470146)
=&gt;
&lt;external-user&gt;
  &lt;external-security-id&gt;11235280821135443504&lt;/external-security-id&gt;
  &lt;user-name&gt;john&lt;/user-name&gt;
&lt;/external-user&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.userExternalSecurity(
  xdmp.user("user2@REPO.LOCAL",
    xdmp.externalSecurity("ldap08-a")
  )
)
=&gt;
{
  "externalSecurityId": "3714400769541931396",
  "userName": "user2@REPO.LOCAL"
}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="external-security" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the external security ID for the specified external security name.
  Unlike the security library module function <code xmlns="http://www.w3.org/1999/xhtml">sec:uid-for-name</code>, 
  this function can be evaluated against any database and does not need to be 
  evaluated directly against the security database. It returns the external
  security ID from the security database configured for the database in which 
  the App Server evaluates against.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="external-security" type="xs:string">
    An external security name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:external-security("ldap-config")
=&gt; 2392349873545
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.externalSecurity("ldap-config");
=&gt; 2392349873545
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="credentials" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the credentials that the current user is allowed to use.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="[xs:string?]">
    An optional URL the user needs a credential for.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(sec:credential)*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:credentials("http://intraweb.acme.com/some/path")
=&gt; &lt;sec:credential&gt;
     &lt;sec:credential-id&gt;92837172832323&lt;/sec:id&gt;
     &lt;sec:credential-name&gt;acme&lt;/sec:name&gt;
     &lt;sec:credential-description&gt;ACME Intraweb&lt;/sec:descriptions&gt;
     &lt;sec:credential-username&gt;admin&lt;/sec:username&gt;
     &lt;sec:credential-password&gt;...encrypted password...&lt;/sec:password&gt;
     &lt;sec:credential-certificate&gt;
       ... PEM encoded certificate ...
     &lt;/sec:credential-certificate&gt;
     &lt;sec:credential-private-key&gt;
       ... encrypted private key ...
     &lt;/sec:credential-private-key&gt;
     &lt;sec:credential-targets&gt;
       &lt;sec:credential-target&gt;
       &lt;/sec:credential-target&gt;
     &lt;/sec:credential-targets&gt;
     &lt;sec:credential-signing&gt;false&lt;/sec:credential-signing&gt;
     &lt;sec:credential-permissions&gt;
       &lt;sec:permission&gt;
         &lt;sec:capability&gt;read&lt;/sec:capability&gt;
         &lt;sec:role-id&gt;8272371823823&lt;/sec:role-id&gt;
       &lt;/sec:permission&gt;
     &lt;/sec:credential-permissions&gt;
   &lt;/sec:credential&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.credentials();
=&gt; 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="credential" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the credential
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    The credential id.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(sec:credential)</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:credential(xdmp:credential-id("my-cred"))
=&gt; &lt;sec:credential&gt;
     &lt;sec:credential-id&gt;92837172832323&lt;/sec:id&gt;
     &lt;sec:credential-name&gt;acme&lt;/sec:name&gt;
     &lt;sec:credential-description&gt;ACME Intraweb&lt;/sec:descriptions&gt;
     &lt;sec:credential-username&gt;admin&lt;/sec:username&gt;
     &lt;sec:credential-password&gt;...encrypted password...&lt;/sec:password&gt;
     &lt;sec:credential-certificate&gt;
       ... PEM encoded certificate ...
     &lt;/sec:credential-certificate&gt;
     &lt;sec:credential-private-key&gt;
       ... encrypted private key ...
     &lt;/sec:credential-private-key&gt;
     &lt;sec:credential-targets&gt;
       &lt;sec:credential-target&gt;
       &lt;/sec:credential-target&gt;
     &lt;/sec:credential-targets&gt;
     &lt;sec:credential-signing&gt;false&lt;/sec:credential-signing&gt;
     &lt;sec:credential-permissions&gt;
       &lt;sec:permission&gt;
         &lt;sec:capability&gt;read&lt;/sec:capability&gt;
         &lt;sec:role-id&gt;8272371823823&lt;/sec:role-id&gt;
       &lt;/sec:permission&gt;
     &lt;/sec:credential-permissions&gt;
   &lt;/sec:credential&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.credential(xdmp.credentialId("my-cred"));
=&gt; 2392349873545
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="credential-id" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Returns the id of a named credential.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="credential-name" type="xs:string">
    A credential name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:credential-id("intraweb")
=&gt; 92837172832323
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.credentialID("intraweb");
=&gt; 92837172832323
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="keystore-export" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Exports all encryption keys stored in the MarkLogic embedded KMS.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="passphrase" type="xs:string">
    A passphrase used to encrypt the exported encryption keys.
  </apidoc:param>
      <apidoc:param name="filepath" type="xs:string">
    A fully quialified file path on the host filesystem.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:keystore-export("A hard to guess phrase", "/backups/MarkLogic.wallet.bak")
=&gt;  true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.keystoreExport("A hard to guess phrase", "/backups/MarkLogic.wallet.bak")
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="keystore-import" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Import encryption keys into the MarkLogic embedded KMS from an exported encrypted file (see keystore-export). 
  The import process will reject duplicate keys and log a warning indicating the id of the rejected keys.
  Imported keys can only be use for decryption.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="passphrase" type="xs:string">
    A passphrase used to decrypt the file content.
  </apidoc:param>
      <apidoc:param name="filepath" type="xs:string">
    A fully quialified file path on the host filesystem.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:keystore-import("A hard to guess phrase", "/backups/MarkLogic.wallet.bak")
=&gt;  true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.keystoreImport("A hard to guess phrase", "/backups/MarkLogic.wallet.bak")
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="keystore-validate-exported" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Validates the content of an exported keystore file, see keystore-export and keystore-import
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="passphrase" type="xs:string">
    A passphrase used to decrypt the file content
  </apidoc:param>
      <apidoc:param name="filepath" type="xs:string">
    A fully quialified file path on the host filesystem.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(keystore-export)</apidoc:return>
    <apidoc:return class="javascript">Sequence</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:keystore-validate-exported("A hard to guess phrase", "/backups/MarkLogic.wallet.bak")
=&gt;  &lt;keystore-ids&gt;
&lt;id&gt;255fe6ca-8b01-4130-8a40-e3af617e1404&lt;/id&gt; 
&lt;id&gt;67b92a6f-7b12-4a6c-aa01-1cc9f77ffc62&lt;/id&gt;
&lt;id&gt;d8c9796f-90ad-43ef-9d21-08ce26f7e23d&lt;/id&gt;
&lt;/keystore-ids&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.keystoreValidateExported("A hard to guess phrase", "/backups/MarkLogic.wallet.bak")
=&gt; {"id":"255fe6ca-8b01-4130-8a40-e3af617e1404", 
    "id":"67b92a6f-7b12-4a6c-aa01-1cc9f77ffc62", 
    "id":"d8c9796f-90ad-43ef-9d21-08ce26f7e23d"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-query-rolesets" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Return a sequence of query-rolesets that are required for proper querying
  with Element Level Security if the node is inserted into the database with
  the given document-insert options.
  A typical workflow calls this function and adds each query-rolesets through
  the sec:add-query-rolesets function before inserting the document into the
  database so that the document can be correctly queried with
  Element Level Security as soon as it is inserted.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI to be used when the document is inserted later.
  </apidoc:param>
      <apidoc:param name="root" type="node()">
    The root node. The root node can be an element node, an object node or
    an array node.
  </apidoc:param>
      <apidoc:param name="insert-options" type="(element()|map:map)?" optional="true">
    Options from the
    <a class="xquery" href="#xdmp:document-insert" xmlns="http://www.w3.org/1999/xhtml">xdmp:document-insert</a>
    <a class="javascript" href="#xdmp.documentInsert" xmlns="http://www.w3.org/1999/xhtml">xdmp.documentInsert</a>
    function. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can pass either an XML element node
    or a <code>map:map</code>.</span>
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Other options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"all"</dt>
        <dd>Return all query-rolesets, even if they are already configured.</dd>
        <dt>"unconfigured"</dt>
        <dd>Return only those query-rolesets that are not configured.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(sec:query-rolesets)*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
    If neither "all" nor "unconfigured" is present, it defaults to "unconfigured".
  </p>
</apidoc:usage>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/node-query-rolesets</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-query-rolesets(
    "/example.xml", &lt;foo&gt;aaa&lt;/foo&gt;, (), ("all"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeQueryRolesets(
    "/example.json", {"foo":"aaa"}, null, ["new"])
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-query-rolesets(
    "/example.xml",
    &lt;foo&gt;aaa&lt;/foo&gt;,
    &lt;options xmlns="xdmp:document-insert"&gt;
      &lt;permissions&gt;
        {xdmp:permission("role-1","read"),xdmp:permission("role-2","read")}
      &lt;/permissions&gt;
    &lt;/options&gt;)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeQueryRolesets(
     "/example.json",
     {"foo":"aaa"},
     {"permissions" : xdmp.documentGetPermissions("foo.json")})
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-node-query-rolesets" type="builtin" lib="xdmp" category="Security">
    <apidoc:summary>
  Return a sequence of query-rolesets that are required for proper querying of
  the given database nodes with Element Level Security.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="nodes" type="node()*">
    A sequence of database nodes.
  </apidoc:param>
      <apidoc:param class="javascript" name="nodes" type="Sequence">
    A sequence of database nodes.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"all"</dt>
        <dd>Return all query-rolesets, even if they are already configured.</dd>
        <dt>"unconfigured"</dt>
        <dd>Return only those query-rolesets that are not configured.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(sec:query-rolesets)*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
    "Nodes" is a sequence of database nodes. If an array is passed in,
    it will be treated as one array node. Use Sequence.from to convert
    an array of nodes to a sequence of nodes when necessary.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
    If neither "all" nor "unconfigured" is present, it defaults to "all".
  </p>
</apidoc:usage>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/database-node-query-rolesets</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-node-query-rolesets(
    fn:doc("/example.xml"), ("all"))
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";
(: run this against the Security database :)
let $qry := 'xdmp:database-node-query-rolesets(fn:doc("/example.xml"), ("all"))'
let $qry-rolesets := 
xdmp:eval($qry, (),&lt;options xmlns="xdmp:eval"&gt;
                   &lt;database&gt;{xdmp:database(YOUR_DB_NAME)}&lt;/database&gt;
                 &lt;/options&gt;)
return
sec:add-query-rolesets($qry-rolesets)
=&gt;
(: returns the role id(s) associated with the query rolesets :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseNodeQueryRolesets(
    fn.doc("/example.json"), ["new"])
</pre></apidoc:example>
  </apidoc:function></apidoc:module>