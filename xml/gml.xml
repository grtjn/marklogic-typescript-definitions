<apidoc:module name="GML" subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions" 
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml" lib="geogml"
>
<apidoc:summary access="public" subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions" class="xquery">
<p>The GML module provides support for geospatial queries using GML
markup. 
</p>
<p>To use the GML module as part of your own XQuery module, include the
following line in your XQuery prolog:
</p>
<p><code>import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";</code></p>
<p>The library namespace prefix <code>geogml</code> is <em>not</em> predefined
in the server.</p>
</apidoc:summary>
<apidoc:summary access="public" subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions" class="javascript">
<p>The GML module provides support for geospatial queries using GML
markup. 
</p>
<p>To use the GML module in your Server-Side JavaScript code, include a
<code>require</code> statement similar to following line in your code:
</p>
<p><code>var geogml = require('/MarkLogic/geospatial/gml.xqy');</code></p>
<p>The library namespace prefix <code>geogml</code> is <em>not</em> predefined
in the server.</p>
</apidoc:summary>

<apidoc:function name="point" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
  Create a cts:point value from a GML Point element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="point" type="element()">
    A GML Point element.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:point </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
declare namespace gml="http://www.opengis.net/gml/3.2";

geogml:point(
  <gml:Point>
    <gml:pos>12.5 -127.24</gml:pos>
  </gml:Point>
)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="box" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a <code>cts:box</code> value from a GML Envelope element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="box" type="element()">
    An GML Envelope element.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:box</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
  declare namespace gml="http://www.opengis.net/gml/3.2";

  geogml:box(
     <gml:Envelope>
       <gml:lowerCorner>12.5 -127.24</gml:lowerCorner>
       <gml:upperCorner>30 -122.24</gml:upperCorner>
     </gml:Envelope>)
  ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const geogml = require("/MarkLogic/geospatial/gml");  

geogml.box(
  fn.head(xdmp.unquote(  
   "<gml:Envelope xmlns:gml='http://www.opengis.net/gml/3.2'>" +  
      "<gml:lowerCorner>12.5 -127.24</gml:lowerCorner>" +  
      "<gml:upperCorner>30 -122.24</gml:upperCorner>" +  
   "</gml:Envelope>"
  )).root
);
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="circle" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a <code>cts:circle</code> value from a radius and GML Point 
	  element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="radius" type="xs:double">
    The radius of the circle, in miles.
    </apidoc:param>
    <apidoc:param name="center" type="element()">
    A GML Point element representing the center of the circle.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:circle</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
declare namespace gml="http://www.opengis.net/gml/3.2";

geogml:circle(47, 
  <gml:Point>
    <gml:pos>12.5 -127.24</gml:pos>
  </gml:Point>)
  ]]></pre></apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const geogml = require("/MarkLogic/geospatial/gml");  

const center = fn.head(xdmp.unquote(
  '<gml:Point xmlns:gml="http://www.opengis.net/gml/3.2">' + 
    '<gml:pos>12.5 -127.24</gml:pos>' +
  '</gml:Point>'
)).root;
geogml.circle(47, center);
  ]]></pre></apidoc:example>
</apidoc:function>
<apidoc:function name="polygon" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a <code>cts:polygon</code> value from a sequence of GML 
	  Point elements or a GML Polygon element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="polygon-or-points" type="element()+">
    A sequence of Point elements representing the vertices of the polygon or a Polygon element.
    Note that if it is a Polygon element, the return from this function represents the 
    exterior polygon.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:polygon</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: create a cts:polygon from a sequence of GML Points :)
  xquery version "1.0-ml";
  import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
  declare namespace gml="http://www.opengis.net/gml/3.2";

  geogml:polygon((
    <gml:Point>
      <gml:pos>12.5 -127.24</gml:pos>
    </gml:Point>,
    <gml:Point>
      <gml:pos>15.25 -127.8</gml:pos>
    </gml:Point>,
    <gml:Point>
      <gml:pos>13.45 -126.1</gml:pos>
    </gml:Point>,
    <gml:Point>
      <gml:pos>12.5 -127.24</gml:pos>
    </gml:Point>
  ))
  ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Create a cts:polygon from a GML Polygon :)
  xquery version "1.0-ml";
  import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
  declare namespace gml="http://www.opengis.net/gml/3.2";

  geogml:polygon(
    <gml:Polygon>
      <gml:exterior><gml:LinearRing>
        <gml:pos>12.5 -127.24</gml:pos>
        <gml:pos>15.25 -127.8</gml:pos>
        <gml:pos>13.45 -126.1</gml:pos>
        <gml:pos>12.5 -127.24</gml:pos>
      </gml:LinearRing></gml:exterior>
    </gml:Polygon>
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="interior-polygon" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a sequence of <code>cts:polygon</code> values from a 
	  GML Polygon element.  The polygons returned represent the 
	  interior polygons, if any.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="polygon" type="element()">
    A GML Polygon element representing the polygon.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:polygon*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
  declare namespace gml="http://www.opengis.net/gml/3.2";

  (: Returns empty; no interior :)
  geogml:interior-polygon(
    <gml:Polygon>
      <gml:exterior><gml:LinearRing>
        <gml:pos>12.5 -127.24</gml:pos>
        <gml:pos>15.25 -127.8</gml:pos>
        <gml:pos>13.45 -126.1</gml:pos>
        <gml:pos>12.5 -127.24</gml:pos>
      </gml:LinearRing></gml:exterior>
    </gml:Polygon>
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="complex-polygon" type="gml" lib="geogml" subcategory="GML" 
    bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a <code>cts:complex-polygon</code> value from a GML Polygon 
	  element.  The polygon returned represents the combination of 
	  the exterior polygon and the interior polygons.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="complex-polygon" type="element()">
    A GML Polygon element representing the complex polygon.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:complex-polygon</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
  declare namespace gml="http://www.opengis.net/gml/3.2";

  geogml:complex-polygon(
    <gml:Polygon>
      <gml:exterior>
        <gml:LinearRing>
          <gml:posList>12.5,-127.24 15.25,-127.8 13.45,-126.1 12.5,-127.24</gml:posList>
        </gml:LinearRing>
      </gml:exterior>
      <gml:interior>
        <gml:LinearRing>
          <gml:posList>13,-127 -14,127 -14,126 -13,127</gml:posList>
        </gml:LinearRing>
      </gml:interior>
    </gml:Polygon>
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="geospatial-query" type="gml" lib="geogml" subcategory="GML"
    bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Returns a <code>cts:query</code> matching points within given regions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. 
    Where multiple boxes,
    circles, polygons, or points are specified, the query matches if any
    box, circle, polygon, or
    point matches.
    </apidoc:param>
    <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p>Options include:</p>
      <blockquote>
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"type=<em>value</em>"</dt>
        <dd>Specify the format of point coordinates, either (lat,long)
         or (long,lat). Latitude-first order is the default. Allowed values: 
         <code>point</code> (default) or <code>long-lat-point</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes' and circles' boundaries are counted as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes' and circles' boundaries are not counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
      </dl></blockquote>
    </apidoc:param>
    <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
    </apidoc:param>
    <apidoc:param name="namespace" type="xs:string?" optional="true">
      An optional GML namespace URI you can use to control which version
      of GML data to match. Default: http://www.opengis.net/gml/3.2
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:query</apidoc:return>
<apidoc:usage>
<p>The point value is expressed in the content of the element as a pair
of numbers, separated by whitespace and punctuation (excluding decimal points
and sign characters).
</p>
<p>Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western 
longitudes take negative values.  Longitudes will be wrapped to the range 
(-180,+180) and latitudes will be clipped to the range (-90,+90).  
</p>
<p>If the northern boundary of a box is south of the southern boundary, no 
points will  match. However, longitudes wrap around the globe, so that if 
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p>Special handling occurs at the poles, as all longitudes exist at latitudes 
+90 and -90.
</p>
</apidoc:usage>
<apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

(: create a document with test data :)
xdmp:document-insert("/points.xml",
<root xmlns:gml="http://www.opengis.net/gml/3.2">
  <item><gml:Point><gml:pos>10.5 30.0</gml:pos></gml:Point></item>
  <item><gml:Point><gml:pos>15.35 35.34</gml:pos></gml:Point></item>
  <item><gml:Point><gml:pos>5.11 40.55</gml:pos></gml:Point></item>
</root> );

xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
   at "/MarkLogic/geospatial/gml.xqy";
declare namespace gml="http://www.opengis.net/gml/3.2";

cts:search(doc("/points.xml")//item, 
  geogml:geospatial-query(
    geogml:box(
      <gml:Envelope>
        <gml:lowerCorner>10.0 35.0</gml:lowerCorner>
        <gml:upperCorner>20.0 40.0</gml:upperCorner>
      </gml:Envelope>) ))
(:
  returns the following node: 
  <item xmlns:gml="http://www.opengis.net/gml/3.2">
    <gml:Point><gml:pos>15.35 35.34</gml:pos></gml:Point>
  </item>
:)
,

cts:search(doc("/points.xml")//item, 
  geogml:geospatial-query(geogml:box(
    <gml:Envelope xmlns:gml="http://www.opengis.net/gml/3.2">
      <gml:lowerCorner>10.0 40.0</gml:lowerCorner>
      <gml:upperCorner>20.0 35.0</gml:upperCorner>
    </gml:Envelope>
  )))
(:
  returns the following nodes (wrapping around the Earth):
  <item xmlns:gml="http://www.opengis.net/gml/3.2">
    <gml:Point><gml:pos>10.5 30.0</gml:pos></gml:Point>
  </item>
:)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="geospatial-query-from-elements" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Returns a <code>cts:query</code> matching points within given 
	  regions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="regions" type="element()*">
    One or more geographic boxes, circles, polygons, or points, represented
    as GML elements.
    Where multiple boxes,
    circles, polygons, or points are specified, the query matches if any
    box, circle, polygon, or
    point matches.
    </apidoc:param>
    <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p>Options include:</p>
      <blockquote>
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system, at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw (unmapped) coordinate system, at double precision.</dd>
          </dl>
        </dd>
        <!--
        <dt>"unit=miles"</dt>
        <dd>Distance (for circles) is measured in miles.</dd>
        -->
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes' and circles' boundaries are counted as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes' and circles' boundaries are not counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
      </dl></blockquote>
    </apidoc:param>
    <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:query</apidoc:return>
<apidoc:usage>
<p>The point value is expressed in the content of the element as a pair
of numbers, separated by whitespace and punctuation (excluding decimal points
and sign characters).
</p>
<p>Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western 
longitudes take negative values.  Longitudes will be wrapped to the range 
(-180,+180) and latitudes will be clipped to the range (-90,+90).  
</p>
<p>If the northern boundary of a box is south of the southern boundary, no 
points will  match. However, longitudes wrap around the globe, so that if 
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p>Special handling occurs at the poles, as all longitudes exist at latitudes 
+90 and -90.
</p>
<p>This function will take into account interior polygons, if any, and properly
construct the query to account for them.
</p>
</apidoc:usage>
<apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

(: create a document with test data :)
xdmp:document-insert("/points.xml",
<root xmlns:gml="http://www.opengis.net/gml/3.2">
  <item><gml:Point><gml:pos>10.5 30.0</gml:pos></gml:Point></item>
  <item><gml:Point><gml:pos>15.35 35.34</gml:pos></gml:Point></item>
  <item><gml:Point><gml:pos>5.11 40.55</gml:pos></gml:Point></item>
</root> );

xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
   at "/MarkLogic/geospatial/gml.xqy";
declare namespace gml="http://www.opengis.net/gml/3.2";

cts:search(doc("/points.xml")//item, 
  geogml:geospatial-query-from-elements(
      <gml:Envelope>
        <gml:lowerCorner>10.0 35.0</gml:lowerCorner>
        <gml:upperCorner>20.0 40.0</gml:upperCorner>
      </gml:Envelope>) )
(:
  returns the following node: 
  <item xmlns:gml="http://www.opengis.net/gml/3.2">
    <gml:Point><gml:pos>15.35 35.34</gml:pos></gml:Point>
  </item>
:)
,

cts:search(doc("/points.xml")//item, 
  geogml:geospatial-query-from-elements(
    <gml:Envelope xmlns:gml="http://www.opengis.net/gml/3.2">
      <gml:lowerCorner>10.0 40.0</gml:lowerCorner>
      <gml:upperCorner>20.0 35.0</gml:upperCorner>
    </gml:Envelope>) )
(:
  returns the following nodes (wrapping around the Earth):
  <item xmlns:gml="http://www.opengis.net/gml/3.2">
    <gml:Point><gml:pos>10.5 30.0</gml:pos></gml:Point>
  </item>
:)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="linestring" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a <code>cts:linestring</code> value from a GML LineString element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="linestring" type="element()">
    A GML LineString element.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:linestring</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
  declare namespace gml="http://www.opengis.net/gml/3.2";

  geogml:linestring(
    <gml:LineString>
      <gml:posList srsDimension="2">45.67 88.56 55.56 89.44</gml:posList>
    </gml:LineString>)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="parse-gml" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
    Construct regions from GML elements.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="gml" type="element()*">
    Zero or more XML elements conforming to the GML schema.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:region*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
         at "/MarkLogic/geospatial/gml.xqy";
declare namespace gml="http://www.opengis.net/gml/3.2";

geogml:parse-gml(
   <gml:Envelope>
     <gml:lowerCorner>12.5 -127.24</gml:lowerCorner>
     <gml:upperCorner>30 -122.24</gml:upperCorner>
   </gml:Envelope>)

==> A cts:box corresponding to the input GML.
  ]]></pre></apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const geogml = require("/MarkLogic/geospatial/gml");  

xdmp.describe(fn.head(
  geogml.parseGml(
    fn.head(xdmp.unquote(  
      "<gml:Envelope xmlns:gml='http://www.opengis.net/gml/3.2'>" +  
        "<gml:lowerCorner>12.5 -127.24</gml:lowerCorner>" +  
        "<gml:upperCorner>30 -122.24</gml:upperCorner>" +  
     "</gml:Envelope>"
    )).root
)));

// a box with the given coordinates:
//   cts.box("[12.5, -127.24, 30, -122.24]")
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="to-gml" type="gml" lib="geogml" 
	subcategory="GML" bucket="XQuery Library Modules" category="Geospatial Supporting Functions">
  <apidoc:summary>
    Construct GML elements from <code>cts:region</code> values.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="region" type="cts:region*">
      Zero or more cts:region values.
    </apidoc:param>
    <apidoc:param name="gml-namespace" type="xs:string" optional="true">
      A GML namespace URI that indicates the GML version of
      the output elements. Defaults to GML v3.2
      (http://www.opengis.net/gml/3.2).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element()*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
       at "/MarkLogic/geospatial/gml.xqy";

geogml:to-gml(
  cts:polygon((
    cts:point(5.0,1.0), cts:point(8.0,1.0),
    cts:point(8.0,6.0), cts:point(5.0,7.0)
  ))
)

==> A GML v3.2 polygon element similar to the following:

<gml:Polygon gml:id="n9a22cfd1385cc751" srsName="ML:wgs84" 
             xmlns:gml="http://www.opengis.net/gml/3.2">
  <gml:exterior>
    <gml:LinearRing>
      <gml:posList srsDimension="2">5 1 8 1 8 6 5 7 5 1</gml:posList>
    </gml:LinearRing>
  </gml:exterior>
</gml:Polygon>
  ]]></pre></apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const geogml = require("/MarkLogic/geospatial/gml");  

geogml.toGml(
  cts.polygon([
    cts.point(5.0,1.0), cts.point(8.0,1.0),
    cts.point(8.0,6.0), cts.point(5.0,7.0)
  ])
);

/* Returns a GML 3.2 polygon element similar to the following:
<gml:Polygon gml:id="n9a22cfd1385cc751" srsName="ML:wgs84" 
             xmlns:gml="http://www.opengis.net/gml/3.2">
  <gml:exterior>
    <gml:LinearRing>
      <gml:posList srsDimension="2">5 1 8 1 8 6 5 7 5 1</gml:posList>
    </gml:LinearRing>
  </gml:exterior>
</gml:Polygon>
*/
  ]]></pre></apidoc:example>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace geogml = "http://marklogic.com/geospatial/gml"
       at "/MarkLogic/geospatial/gml.xqy";

(: Explicitly specify the GML namespace URI :)
geogml:to-gml(
  cts:polygon((
    cts:point(5.0,1.0), cts:point(8.0,1.0),
    cts:point(8.0,6.0), cts:point(5.0,7.0)
  )), "http://www.opengis.net/gml"
)

==> A GML polygon element similar to the following:

<gml:Polygon gml:id="nff4985dc42e44817" srsName="ML:wgs84" 
             xmlns:gml="http://www.opengis.net/gml">
  <gml:exterior>
    <gml:LinearRing>
      <gml:posList srsDimension="2">5 1 8 1 8 6 5 7 5 1</gml:posList>
    </gml:LinearRing>
  </gml:exterior>
</gml:Polygon>
  ]]></pre></apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const geogml = require("/MarkLogic/geospatial/gml");  

// Explicitly specifying the GML namespace URI
geogml.toGml(
  cts.polygon([
    cts.point(5.0,1.0), cts.point(8.0,1.0),
    cts.point(8.0,6.0), cts.point(5.0,7.0)
  ]), 'http://www.opengis.net/gml'
);

/* Returns a GML polygon element similar to the following:

<gml:Polygon gml:id="nff4985dc42e44817" srsName="ML:wgs84" 
             xmlns:gml="http://www.opengis.net/gml">
  <gml:exterior>
    <gml:LinearRing>
      <gml:posList srsDimension="2">5 1 8 1 8 6 5 7 5 1</gml:posList>
    </gml:LinearRing>
  </gml:exterior>
</gml:Polygon>
*/
  ]]></pre></apidoc:example>
</apidoc:function>

</apidoc:module>
