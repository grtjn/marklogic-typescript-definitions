<apidoc:module name="Extensions" category="Extension" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary category="Extension" lib="xdmp" access="public">
   <p xmlns="http://www.w3.org/1999/xhtml">The extension built-in functions are miscellaneous extensions to the
   XQuery core library, including functions for evaluating
   strings as XQuery expressions and functions to get information about
   documents in the database.</p>
 </apidoc:summary><apidoc:summary category="map" lib="map" access="public" class="xquery">
   <p xmlns="http://www.w3.org/1999/xhtml">The map built-in functions are used to create maps.  Maps store
   name-value pairs in an in-memory data structure.
   You can also persist a map to disk by storing it in a document.
   Some programming languages implement maps using hash tables, but these
   map functions make it convenient for you to create and update your
   own maps.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">Maps are represented using the <code>map:map</code> XQuery primitive
   type.  When you serialize an object of <code>map:map</code> type, it
   serializes to an XML node in the <code>http://marklogic.com/xdmp/map</code>
   namespace.</p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="Function Values">
   <p xmlns="http://www.w3.org/1999/xhtml">The function values functions allow you to pass a function value
   as a parameter to another function.  You can also pass in the location
   of the implementation of a function, allowing the caller to
   specify a different version of a function to use in the context of
   making that function.</p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="MarkLogic Server">
 <p xmlns="http://www.w3.org/1999/xhtml">The MarkLogic Server extension functions are XQuery extensions that
 return MarkLogic Server-specific information, such as the version of
 MarkLogic Server, the IDs of the hosts in the cluster, and so on. </p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="Extension">
 <p xmlns="http://www.w3.org/1999/xhtml">The extension functions provide miscellaneous extensions to 
 <span class="xquery">XQuery</span>  <span class="javascript">JavaScript</span>.</p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="HTTP">
 <p xmlns="http://www.w3.org/1999/xhtml">The HTTP functions allow you to make various HTTP calls from
 within your XQuery program.</p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="Search">
 <p xmlns="http://www.w3.org/1999/xhtml">The search extension functions complement the Search Built-in functions.</p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="XML">
 <p xmlns="http://www.w3.org/1999/xhtml">The XML extension functions provide XML functionality such as
 parsing a string as XML.</p>
 </apidoc:summary><apidoc:summary category="Extension" lib="xdmp" subcategory="XQuery Context">
 <p xmlns="http://www.w3.org/1999/xhtml">The XQuery Context functions are XQuery extensions that allow
 you to start a new query context, manipulate the current context, or
 get information about the current context.</p>
 </apidoc:summary><apidoc:summary category="Extension" subcategory="Documents, Directories, Properties, and Locks">
 <p xmlns="http://www.w3.org/1999/xhtml">The Documents, Directories, Properties, and Locks functions are XQuery built-in
 extension functions that get information from documents, directories,
 properties, and locks from MarkLogic Server.  All of these are stored
 as fragments in a database.</p>
 </apidoc:summary><apidoc:function name="strftime" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Formats a dateTime value using POSIX strftime.  This function uses
  the POSIX strftime system call in the way it is implemented on each
  platform.  For other XQuery functions that have more functionality
  (for example, for things like timezones), use one or more if the
  various XQuery or XSLT standard functions such as
  <a href="#fn:format-dateTime" xmlns="http://www.w3.org/1999/xhtml"><code>fn:format-dateTime</code></a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="xs:string">
    The strftime format string.
  </apidoc:param>
      <apidoc:param name="value" type="xs:dateTime">
    The dateTime value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">The supported format strings differ for different platforms.  For the
 supported format strings for Windows, see the following link:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><a href="http://msdn2.microsoft.com/en-us/library/fe06s4ak(VS.80).aspx" target="_blank">http://msdn2.microsoft.com/en-us/library/fe06s4ak(VS.80).aspx</a></p>
 <p xmlns="http://www.w3.org/1999/xhtml">For the supported format strings for Solaris, see the following link:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><a href="http://docs.sun.com/app/docs/doc/817-5438/6mkt5pcec?a=view" target="_blank">http://docs.sun.com/app/docs/doc/817-5438/6mkt5pcec?a=view</a></p>
 <p xmlns="http://www.w3.org/1999/xhtml">For the supported format strings for Linux, see the following link:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><a href="http://linux.about.com/library/cmd/blcmdl3_strftime.htm" target="_blank">http://linux.about.com/library/cmd/blcmdl3_strftime.htm</a></p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:strftime("%a, %d %b %Y %H:%M:%S", fn:current-dateTime())
=&gt; Thu, 06 Nov 2014 14:08:37
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.strftime("%a, %d %b %Y %H:%M:%S", fn.currentDateTime());
=&gt; Thu, 06 Nov 2014 14:08:37
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="exists" type="builtin" lib="xdmp" category="Extension" subcategory="Search" class="xquery">
    <apidoc:summary>
  Returns true if any fragment is selected by an expression, false if no
  fragments are selected.  This can be used as a fast existence check.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expression" type="item()*" optional="false">
    The expression to check.
    This must be a partially searchable XPath expression
    or a <code xmlns="http://www.w3.org/1999/xhtml">cts:search()</code> expression.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
    <p xmlns="http://www.w3.org/1999/xhtml">Queries that use <code>xdmp:exists</code> require that the XPath
    expression searched is partially searchable.
    A <em>partially searchable</em> XPath expression is one whose first step
    is searchable. You can use <code>xdmp:query-trace()</code> to determine
    if a step is searchable.  If there are no entries in the
    <code>xdmp:query-trace()</code> output indicating that the first step
    is <code>unsearchable</code>, then the expression is partially searchable
    and you can perform an <code>xdmp:exists</code> operation on it.</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Calling <code>xdmp:exists</code> on an expression is the same as
    calling <code>xdmp:estimate</code> on the expression with a maximum of 1.
    For example, the following are equivalent:<br/>
    <pre xml:space="preserve">
     xdmp:exists(cts:search(collection(), "foo"))

       is equivalent to:

     xs:boolean(xdmp:estimate(cts:search(collection(), "foo"), 1)) </pre></p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:exists(collection())
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="exists" type="builtin" lib="cts" category="Extension" subcategory="Search" class="javascript">
    <apidoc:summary>
  Returns true if any fragment is selected by the search, false if no
  fragments are selected.  This can be used as a fast existence check.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:query?">
    A <code xmlns="http://www.w3.org/1999/xhtml">cts.query</code> specifying the search to perform.  If a string
   is entered, the string is treated as a <code xmlns="http://www.w3.org/1999/xhtml">cts.wordQuery</code> of the
   specified string.
  </apidoc:param>
      <apidoc:param name="options" type="(cts:order|xs:string)*" optional="true">
  Options to this search.  The default is ().
  See <a href="#cts.search" xmlns="http://www.w3.org/1999/xhtml"><code>cts.search</code></a>
    for details on the available options.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An null value means to search all forests in the database.
    The default is null.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>Boolean</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  cts.exists(cts.wordQuery("something here"))
   =&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="estimate" type="builtin" lib="xdmp" category="Extension" subcategory="Search" class="xquery">
    <apidoc:summary>
  Returns the number of fragments selected by an expression.
  This can be used as a fast estimate of the number of items in a sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expression" type="item()*" optional="false">
    The expression to estimate.
    This must be a partially searchable XPath expression
    or a <code xmlns="http://www.w3.org/1999/xhtml">cts:search()</code> expression.
  </apidoc:param>
      <apidoc:param name="maximum" type="xs:double?" optional="true">
    The maximum value to return.
    Stop selecting fragments if this number is reached.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:usage>
    Queries that use <code xmlns="http://www.w3.org/1999/xhtml">xdmp:estimate</code> require that the XPath
    expression searched is partially searchable.
    A <em xmlns="http://www.w3.org/1999/xhtml">partially searchable</em> XPath expression is one whose first step
    is searchable. You can use <code xmlns="http://www.w3.org/1999/xhtml">xdmp:query-trace()</code> to determine
    if a step is searchable.  If there are no entries in the
    <code xmlns="http://www.w3.org/1999/xhtml">xdmp:query-trace()</code> output indicating that the first step
    is <code xmlns="http://www.w3.org/1999/xhtml">unsearchable</code>, then the expression is partially searchable
    and you can perform an <code xmlns="http://www.w3.org/1999/xhtml">xdmp:estimate</code> operation on it.
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:estimate(collection())
=&gt; 10476
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:estimate(cts:search(fn:doc(), cts:word-query("merry")))

=&gt; Returns an estimate of the number of fragments matched by the search
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:estimate(cts:search(fn:doc(), cts:word-query("merry")))

=&gt; Returns an estimate of the number of fragments matched by the search
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="estimate" type="builtin" lib="cts" category="Extension" subcategory="Search" class="javascript">
    <apidoc:summary>
  Returns the number of fragments selected by a search.
  This can be used as a fast estimate of the number results.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:query?">
    A <code xmlns="http://www.w3.org/1999/xhtml">cts:query</code> specifying the search to perform.  If a string
   is entered, the string is treated as a <code xmlns="http://www.w3.org/1999/xhtml">cts.wordQuery</code> of the
   specified string.
  </apidoc:param>
      <apidoc:param name="options" type="(cts:order|xs:string)*" optional="true">
    Options to this search.  The default is ().
    See <a href="#cts.search" xmlns="http://www.w3.org/1999/xhtml"><code>cts.search</code></a>
    for details on available options.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is (). In the XQuery version, you can use
    <code xmlns="http://www.w3.org/1999/xhtml">cts:search</code> with this
    parameter and an empty <code xmlns="http://www.w3.org/1999/xhtml">cts:and-query</code> to specify a
    forest-specific XPath statement (see the
    <a href="#cts:search#searchEx3" xmlns="http://www.w3.org/1999/xhtml">third
    example</a> below). If you
    use this to constrain an XPath to one or more forests, you should set
    the <code xmlns="http://www.w3.org/1999/xhtml">quality-weight</code> to zero to keep the XPath document
    order.
  </apidoc:param>
      <apidoc:param name="maximum" type="xs:double?" optional="true">
    The maximum value to return.
    Stop selecting fragments if this number is reached.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  cts.estimate(cts.wordQuery("unsually"))
   =&gt; 10476
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="plan" type="builtin" lib="xdmp" category="Extension" subcategory="Search" class="xquery">
    <apidoc:summary>
  Returns an XML element recording information about how the given
  expression will be processed by the index.  The information is a
  structured representation of the information provided in the error log
  when query trace is enabled.  The query will be processed up to the
  point of getting an estimate of the number of fragments returned by the
  index.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expression" type="item()*" optional="false">
    The expression to estimate.
    This must be a partially searchable XPath expression
    or a <code xmlns="http://www.w3.org/1999/xhtml">cts:search()</code> expression.
  </apidoc:param>
      <apidoc:param name="maximum" type="xs:double?" optional="true">
    The maximum value to return.
    Stop selecting fragments if this number is reached.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">The output from <code>xdmp:plan</code> will vary depending on various index
  settings.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Running an <code>xdmp:plan</code> on a search is similar to running an
  <code>xdmp:estimate</code> on a search, but it returns a report on the
  search instead of just an estimate. As part of the report, the
  <code>qry:result</code> element includes the estimate.
  If the search expression argument cannot be run in the
  plan because it is not partially searchable, then an
  <code>XDMP-UNSEARCHABLE</code> exception is returned as part of the
  <code>xdmp:plan</code> output. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If you are running a search using the search API
  (for example, <code>search:search</code>), use the
  option <code>&lt;return-plan&gt;true&lt;/return-plan&gt;</code> in your
  search API options node.
  </p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-plan</code>
</apidoc:privilege>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:plan(cts:search(fn:doc(),cts:word-query("cat")))
   =&gt;
&lt;qry:query-plan xmlns:qry="http://marklogic.com/cts/query"&gt;
  &lt;qry:expr-trace&gt;xdmp:eval("xquery version &amp;amp;quot;1.0-ml&amp;amp;quot;;&amp;amp;
     #10;&amp;amp;#10;xdmp:plan(cts:search...", (), &amp;lt;options
     xmlns="xdmp:eval"&amp;gt;&amp;lt;database&amp;gt;8855151527276563827&amp;lt;/database&amp;gt;
     &amp;lt;isolation&amp;gt;different-tra...&amp;lt;/options&amp;gt;)
  &lt;/qry:expr-trace&gt;
  &lt;qry:info-trace&gt;Analyzing path for search: fn:doc()&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 1 is searchable: fn:doc()&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Path is fully searchable.&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Gathering constraints.&lt;/qry:info-trace&gt;
  &lt;qry:word-trace text="cat"&gt;
    &lt;qry:key&gt;12545744176132597186&lt;/qry:key&gt;
  &lt;/qry:word-trace&gt;
    &lt;qry:info-trace&gt;Search query contributed 1 constraint:
        cts:word-query("cat", ("lang=en"), 1)
    &lt;/qry:info-trace&gt;
  &lt;qry:partial-plan&gt;
    &lt;qry:term-query weight="1"&gt;
      &lt;qry:key&gt;12545744176132597186&lt;/qry:key&gt;
      &lt;qry:annotation&gt;word("cat")&lt;/qry:annotation&gt;
    &lt;/qry:term-query&gt;
  &lt;/qry:partial-plan&gt;
  &lt;qry:info-trace&gt;Executing search.&lt;/qry:info-trace&gt;
  &lt;qry:final-plan&gt;
    &lt;qry:and-query&gt;
      &lt;qry:term-query weight="1"&gt;
        &lt;qry:key&gt;12545744176132597186&lt;/qry:key&gt;
        &lt;qry:annotation&gt;word("cat")&lt;/qry:annotation&gt;
      &lt;/qry:term-query&gt;
    &lt;/qry:and-query&gt;
  &lt;/qry:final-plan&gt;
  &lt;qry:info-trace&gt;Selected 1 fragment to filter&lt;/qry:info-trace&gt;
  &lt;qry:result estimate="1"/&gt;
&lt;/qry:query-plan&gt;

</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml" ;

xdmp:plan(
 cts:search(/document,
   cts:word-query("cut?",
    ("unstemmed", "wildcarded") ) ) )
(:
The &lt;qry:expansion-trace&gt; element indicates that a
lexicon expansion occurred on the wildcarded query
(word searches, three character searches and
a codepoint lexicon are enabled in the database
configuration for wildcard queries).  The
&lt;qry:expansion&gt; element shows what term(s) the
lexicon expansion found.  In this case, "cut?"
expands to "cute".
:)
=&gt;
&lt;qry:query-plan xmlns:qry="http://marklogic.com/cts/query"&gt;
  &lt;qry:info-trace&gt;Analyzing path for search: fn:collection()/document
  &lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 1 is searchable: fn:collection()&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 2 is searchable: document&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Path is fully searchable.&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Gathering constraints.&lt;/qry:info-trace&gt;
  &lt;qry:expansion-trace type="full" elapsed-time="PT0.000381S" text="cut?"
  counts="1"&gt;
    &lt;qry:interval lowerbound="CUT" upperbound="C??"/&gt;
    &lt;qry:interval lowerbound="cUT" upperbound="c??"/&gt;
    &lt;qry:interval lowerbound="}UT" upperbound="???"/&gt;
    &lt;qry:expansion text="cute"/&gt;
  &lt;/qry:expansion-trace&gt;
  &lt;qry:word-trace text="cute"&gt;
    &lt;qry:key&gt;16588943567160478160&lt;/qry:key&gt;
  &lt;/qry:word-trace&gt;
  &lt;qry:info-trace&gt;Search query contributed 1 constraint:
  cts:word-query("cut?", ("unstemmed","wildcarded","lang=en"), 1)
  &lt;/qry:info-trace&gt;
  &lt;qry:partial-plan&gt;
    &lt;qry:term-query weight="1"&gt;
      &lt;qry:key&gt;16588943567160478160&lt;/qry:key&gt;
      &lt;qry:annotation&gt;word("cute")&lt;/qry:annotation&gt;
    &lt;/qry:term-query&gt;
  &lt;/qry:partial-plan&gt;
  &lt;qry:info-trace&gt;Executing search.&lt;/qry:info-trace&gt;
  &lt;qry:final-plan&gt;
    &lt;qry:and-query&gt;
      &lt;qry:or-two-queries&gt;
	&lt;qry:term-query weight="0"&gt;
	  &lt;qry:key&gt;3998944933214536873&lt;/qry:key&gt;
	  &lt;qry:annotation&gt;doc-root(element(document),doc-kind(document))
	&lt;/qry:annotation&gt;
	&lt;/qry:term-query&gt;
	&lt;qry:term-query weight="0"&gt;
	  &lt;qry:key&gt;13616698357625443361&lt;/qry:key&gt;
	  &lt;qry:annotation&gt;link-child(descendant(doc-root(element(document),
	     doc-kind(document)) ))
	&lt;/qry:annotation&gt;
	&lt;/qry:term-query&gt;
      &lt;/qry:or-two-queries&gt;
      &lt;qry:term-query weight="1"&gt;
	&lt;qry:key&gt;16588943567160478160&lt;/qry:key&gt;
	&lt;qry:annotation&gt;word("cute")&lt;/qry:annotation&gt;
      &lt;/qry:term-query&gt;
    &lt;/qry:and-query&gt;
  &lt;/qry:final-plan&gt;
  &lt;qry:info-trace&gt;Selected 1 fragment to filter&lt;/qry:info-trace&gt;
  &lt;qry:result estimate="1"/&gt;
&lt;/qry:query-plan&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="plan" type="builtin" lib="cts" category="Extension" subcategory="Search" class="javascript">
    <apidoc:summary>
  Returns an array of JavaScript objects recording information about how the
  given search will be processed by the index.  The information is a
  structured representation of the information provided in the error log
  when query trace is enabled.  The query will be processed up to the
  point of getting an estimate of the number of fragments returned by the
  index.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:query?">
    A <span class="xquery" xmlns="http://www.w3.org/1999/xhtml"><code>cts:query</code></span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml"><code>cts.query</code></span> specifying
    the search to perform.  If a string is entered, the string is
    treated as a <span class="xquery" xmlns="http://www.w3.org/1999/xhtml"><code>cts:word-query</code></span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml"><code>cts.wordQuery</code></span> of the
    specified string.
  </apidoc:param>
      <apidoc:param name="options" type="(cts:order|xs:string)*" optional="true">
    Options to this search.  The default is <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">()</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">null</span>. See 
    <a href="#cts:search" xmlns="http://www.w3.org/1999/xhtml"><code>cts.search</code></a>
    for details on available options.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">A sequence</span> <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">An array</span> 
    of IDs of forests to which the search will be constrained.
    An empty <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">sequence</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">array</span> means to search all forests in the database.
    The default is <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">()</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">[]</span>. In the XQuery version, you can use
    <code xmlns="http://www.w3.org/1999/xhtml">cts:search</code> with this parameter and an empty <code xmlns="http://www.w3.org/1999/xhtml">cts:and-query</code> 
    to specify a forest-specific XPath statement (see the
    <a href="#cts:search#searchEx3" xmlns="http://www.w3.org/1999/xhtml">third example</a> below). If you
    use this to constrain an XPath to one or more forests, you should set
    the <code xmlns="http://www.w3.org/1999/xhtml">quality-weight</code> to zero to preserve the XPath document
    order.
  </apidoc:param>
      <apidoc:param name="maximum" type="xs:double?" optional="true">
    The maximum value to return.
    Stop selecting fragments if this number is reached.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()</apidoc:return>
    <apidoc:return class="javascript">Array</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">The output from <span class="xquery"><code>cts:plan</code></span>
  <span class="javascript"><code>cts.plan</code></span> will vary depending 
  on various index settings.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Running a <span class="xquery"><code>cts:plan</code></span>
  <span class="javascript"><code>cts.plan</code></span> on a search is 
  similar to running an <span class="xquery"><code>cts:estimate</code></span>
  <span class="javascript"><code>cts.estimate</code></span> on a search, 
  but it returns a report on the search instead of just an estimate. 
  As part of the report, the <span class="xquery"><code>qry:result</code></span>
  <span class="javascript"><code>qry.result</code></span> element includes 
  the estimate.
  </p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-plan</code>
</apidoc:privilege>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.plan(cts.wordQuery("cat"));
=&gt;
[
  {
    "exprTrace": "xdmp:eval(\"cts.plan(cts.wordQuery(\\\"cat\\\"));\", {}, &lt;options xmlns=\"xdmp:eval\"&gt;&lt;database&gt;18245659202902618990&lt;/database&gt;&lt;modules&gt;10742030102324...&lt;/options&gt;)"
  },
  "Analyzing path for search: fn.doc()",
  "Step 1 is searchable: fn.doc()",
  "Path is fully searchable.",
  "Gathering constraints.",
  {
    "wordTrace": {
      "text": "cat",
      "keys": [
        "12545744176132597186"
      ]
    }
  },
  "Search query contributed 1 constraint: cts.wordQuery(\"cat\", [\"lang=en\"], 1)",
  {
    "partialPlan": {
      "query": {
        "termQuery": {
          "weight": 1,
          "key": "12545744176132597186",
          "annotation": "word(\"cat\")"
        }
      }
    }
  },
  "Executing search.",
  {
    "ordering": []
  },
  {
    "finalPlan": {
      "query": {
        "andQuery": {
          "queries": [
            {
              "termQuery": {
                "weight": 1,
                "key": "12545744176132597186",
                "annotation": "word(\"cat\")"
              }
            }
          ]
        }
      }
    }
  },
  "Selected 0 fragments to filter",
  {
    "result": {
      "estimate": 0
    }
  }
]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="plannable" type="builtin" lib="xdmp" category="Extension" subcategory="Search" class="xquery">
    <apidoc:summary>
  Returns a boolean showing whether the given expression is suitable to use
  with <code xmlns="http://www.w3.org/1999/xhtml">xdmp:plan</code>.  Expressions that are fully searchable are
  "plannable"; that is, they will return query plan output when used with
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:plan</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expression" type="item()*" optional="false">
    The expression to determine if it is plannable.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Behaves the same as "Analyzing path for search" in
  <code>xdmp:plan</code>. When true is returned, the expression
  could be planned by <code>xdmp:plan</code>, otherwise the expression
  would throw an <code>XDMP-UNSEARCHABLE</code> exception when run in
  <code>xdmp:plan</code>.
  </p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:plannable(cts:search(fn:doc(),cts:word-query("cat")))
   =&gt; true
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:plannable(/foo/descendant::bar="baz")
   =&gt; false
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="version" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the current MarkLogic Server version.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:version()
   =&gt; "8.0-1"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.version();
 =&gt; "8.0-1"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cluster-effective-version" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the current MarkLogic Server effective version.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsingedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:cluster-effective-version()
   =&gt; 8000400
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.clusterEffectiveVersion();
 =&gt; 8000400
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cluster-version-at-least" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns true current MarkLogic Server effective version is equal or greater that 
  the version
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="version" type="xs:unsignedInt">
    The version to compare against the cluster's effective version
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:cluster-version-at-least(9000100)
   =&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.clusterVersionAtLeast(9000100)
   =&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="xquery-version" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Returns the XQuery language version of the calling module.
  Currently supported XQuery versions are:
  <ul xmlns="http://www.w3.org/1999/xhtml">
	<li>"0.9-ml": The legacy MarkLogic XQuery version.  This was the only
    XQuery version available on MarkLogic Server 3.2 and
    earlier.  It is based on the May 2003 XQuery Draft Recommendation,
    with MarkLogic extensions
    </li>
	<li>"1.0-ml": XQuery version 1.0, with MarkLogic extensions.  This
    is the preferred version of XQuery beginning with release 4.0.
    </li>
	<li>"1.0": Strict XQuery version 1.0.  This XQuery version complies
    as closely as possible with the published XQuery 1.0 specification.
    </li>
      </ul>
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:xquery-version()
   =&gt; "1.0-ml"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="platform" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the operating-system platform upon which MarkLogic Server is running
  ("solaris", "winnt", "linux", or "macosx").
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:platform()
=&gt; "winnt"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.platform()
=&gt; "winnt"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="architecture" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the hardware architecture upon which MarkLogic Server is running.
  If <code xmlns="http://www.w3.org/1999/xhtml">xdmp:platform()</code> returns "linux",
  it will return "x86_64" or "i686.
  If <code xmlns="http://www.w3.org/1999/xhtml">xdmp:platform()</code> returns "solaris",
  it will return "amd64" or "sparcv9".
  If <code xmlns="http://www.w3.org/1999/xhtml">xdmp:platform()</code> returns "winnt",
  it will return "amd64" or "i686".
  If <code xmlns="http://www.w3.org/1999/xhtml">xdmp:platform()</code> returns "macosx",
  it will return "x86_64".
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:architecture()
=&gt; "amd64"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.architecture();
=&gt; "amd64"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="path" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns a string whose value corresponds to the
  path of the node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()">
    The node whose path is returned.
  </apidoc:param>
      <apidoc:param name="include-document" type="xs:boolean?" optional="true">
    If true, then the path is presented with a leading <code xmlns="http://www.w3.org/1999/xhtml">doc(..)/..</code>,
    otherwise the path is presented as <code xmlns="http://www.w3.org/1999/xhtml">/..</code>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $arg := &lt;a&gt;&lt;b&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;/b&gt;
                &lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
return xdmp:path($arg/b[1]/c)

  =&gt; "/a/b[1]/c"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arg = fn.head(xdmp.unquote('&lt;a&gt;&lt;b&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;/b&gt; &lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;')
               ).root;
xdmp.path(arg.xpath("./b[1]/c"));

  =&gt; "/a/b[1]/c"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="describe" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns a string representing the
  description of a given item sequence.  If you take
  the output of this function and evaluate it as an XQuery program, 
  it returns the item(s) input to the function.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="item" type="item()*">
    The item sequence whose description is returned.
  </apidoc:param>
      <apidoc:param name="max-sequence-length" type="xs:unsignedInt?" optional="true">
    Represents the maximum number of items per sequence to print.
    The default is 3.  () means no maximum.
  </apidoc:param>
      <apidoc:param name="max-item-length" type="xs:unsignedInt?" optional="true">
    Represents the maximum number of characters per item to print.
    The default is 64.  The minimum is 8.  () means no limit.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If you specify an item that is in a database, this function
  returns the path to the item (or to the items if you specify multiple items).
  If the item or items are constructed in XQuery, then it prints out the item,
  truncating the characters in each item according to the
  <code>$max-item-length</code> parameter.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:describe(current-date())

=&gt; xs:date("2007-01-15-08:00")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.describe(fn.currentDate());

=&gt; xs.dateTime("2014-11-06T08:00:00")
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $x := &lt;mynode&gt;Some text here.&lt;/mynode&gt;
  return
  xdmp:describe($x)

  =&gt; &lt;mynode&gt;Some text here.&lt;/mynode&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var x = xdmp.toJSON({key:"value"});
xdmp.describe(x);

  =&gt; document{{"key":"value"}}
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  (:  assume /mydoc.xml is an XML document with
      the following content:
      &lt;mynode&gt;Some text here.&lt;/mynode&gt; :)
  xdmp:describe(doc("/mydoc.xml")/mynode)

  =&gt; doc("/mydoc.xml")/mynode
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  assume /mydoc.json is a JSON document with the following content:
//    {key: "value"}
xdmp.describe(cts.doc("/mydoc.json").root.key)

  =&gt; fn.doc("/mydoc.json")/text("key")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="hash32" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the 32-bit hash of a string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
    The string to be hashed.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:hash32("/a/b[1]/c")
=&gt; 152930691
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hash32("/a/b[1]/c");
=&gt; 152930691
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="hash64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the 64-bit hash of a string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
    The string to be hashed.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:hash64("/a/b[1]/c")
=&gt; 5082244643751628547
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hash64("/a/b[1]/c")
=&gt; 5082244643751628547
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="step64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Combines an initial hash with a subsequent hash.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="initial" type="xs:unsignedLong">
    An initial hash.
  </apidoc:param>
      <apidoc:param name="step" type="xs:unsignedLong">
    A step hash to be combined with the initial hash.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:step64(xdmp:hash64("initial"), xdmp:hash64("step"))
=&gt; 12899951685816192752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.step64(xdmp.hash64("initial"), xdmp.hash64("step"));
=&gt; 12899951685816192752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="add64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Add two 64-bit integer values, discarding overflow.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The first value.
  </apidoc:param>
      <apidoc:param name="y" type="xs:unsignedLong">
    The second value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:add64(11442580934957149475,14565934789622151058)
=&gt; 7561771650869748917
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.add64(11442580934957149475,14565934789622151058);
=&gt; 7561771650869748917
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="and64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  AND two 64-bit integer values.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The first value.
  </apidoc:param>
      <apidoc:param name="y" type="xs:unsignedLong">
    The second value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:and64(255, 2)
=&gt; 2
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.and64(255, 2);
=&gt; 2
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="mul64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Muliply two 64-bit integer values, discarding overflow.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The first value.
  </apidoc:param>
      <apidoc:param name="y" type="xs:unsignedLong">
    The second value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:mul64(15107650474313474666,13290239292956375463)
=&gt; 1404109880107289894
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.mul64(15107650474313474666,13290239292956375463);
=&gt; 1404109880107289894
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="not64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  NOT a 64-bit integer value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The input value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:not64(255)
=&gt; 18446744073709551360
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.not64(255);
=&gt; 18446744073709551360
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="or64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  OR two 64-bit integer values.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The first value.
  </apidoc:param>
      <apidoc:param name="y" type="xs:unsignedLong">
    The second value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:or64(255, 2)
=&gt; 255
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.or64(255, 2);
=&gt; 255
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="xor64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  XOR two 64-bit integer values.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The first value.
  </apidoc:param>
      <apidoc:param name="y" type="xs:unsignedLong">
    The second value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:xor64(255, 2)
=&gt; 253
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.xor64(255, 2);
=&gt; 253
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="lshift64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Left-shift a 64-bit integer value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The value to shift.
  </apidoc:param>
      <apidoc:param name="y" type="xs:integer">
    The left shift to perform. This value may be negative.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:lshift64(255, 2)
=&gt; 1020
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.lshift64(255, 2);
=&gt; 1020
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="rshift64" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Right-shift a 64-bit integer value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:unsignedLong">
    The value to shift.
  </apidoc:param>
      <apidoc:param name="y" type="xs:integer">
    The right shift to perform. This value may be negative.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:rshift64(255, 2)
=&gt; 63
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.rshift64(255, 2);
=&gt; 63
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="random" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns a random unsigned integer between 0 and a number up to 64 bits long.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="max" type="xs:unsignedLong" optional="true">
    The optional maximum value (inclusive).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:random(100)
=&gt; 47
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.random(100);
=&gt; 47
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="hex-to-integer" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Parses a hexadecimal string, returning an integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hex" type="xs:string">
    The hexadecimal string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:hex-to-integer("1234567890abcdef")
=&gt; 1311768467294899695
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hexToInteger("1234567890abcdef");
=&gt; 1311768467294899695
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="integer-to-hex" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns a hexadecimal representation of an integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="xs:integer">
    The integer value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:integer-to-hex(1234567890)
=&gt; "499602d2"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.integerToHex(1234567890);
=&gt; "499602d2"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="binary-to-integer" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Parses a binary string, returning an integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="binary" type="xs:string">
    The binary string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:binary-to-integer("1001001100101100000001011010010")
=&gt; 1234567890
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.binaryToInteger("1001001100101100000001011010010");
=&gt; 1234567890
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="integer-to-binary" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns a binary representation of an integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="xs:integer">
    The integer value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:integer-to-binary(1234567890)
=&gt; "1001001100101100000001011010010"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.integerToBinary(1234567890);
=&gt; "1001001100101100000001011010010"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="octal-to-integer" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Parses an octal string, returning an integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="octal" type="xs:string">
    The octal string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:octal-to-integer("12345670")
=&gt; 2739128
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.octalToInteger("12345670");
=&gt; 2739128
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="integer-to-octal" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns an octal representation of an integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="xs:integer">
    The integer value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:integer-to-octal(1234567890)
=&gt; "11145401322"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.integerToOctal(1234567890);
=&gt; "11145401322"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="request-timestamp" type="builtin" lib="xdmp" category="Extension" subcategory="Search">
    <apidoc:summary>
  Returns the system timestamp for this request if the request is a query
  statement.  Returns the empty sequence if the current request is an update
  statement.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:usage>
  The <code xmlns="http://www.w3.org/1999/xhtml">xdmp:request-timestamp</code> function returns the system
  timestamp that is in effect for current query.  This timestamp will
  remain unchanged for the duration of the query. If you want to get
  the most recent system timestamp external to the current running
  context during an update statement (for example, if your query takes
  a long time to run, and there are other updates occurring in your
  database while your update statement is running), you can use
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</code> to evaluate a separate query statement that
  returns the system timestamp at the time the <code xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</code>
  query is evaluated.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:request-timestamp()
=&gt; 1234567
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.requestTimestamp();
=&gt; 1234567
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="security-database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the database ID of the security database
  associated with the current database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong" optional="true">
    A database ID. Defaults to the current database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:usage>To run queries against the security database, you can specify
  the <code xmlns="http://www.w3.org/1999/xhtml">xdmp:security-database()</code> function as the second
  parameter to <code xmlns="http://www.w3.org/1999/xhtml">xdmp:eval-in()</code>. </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:security-database()
=&gt; 8447094497219470018
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.securityDatabase();
=&gt; 8447094497219470018
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="schema-database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the database ID of the schema database
  associated with the current database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong" optional="true">
    A database ID. Defaults to the current database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:usage>To run queries against the schema database, you can specify
  the <code xmlns="http://www.w3.org/1999/xhtml">xdmp:schema-database()</code> function as the second
  parameter to <code xmlns="http://www.w3.org/1999/xhtml">xdmp:eval-in()</code>. </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:schema-database()
=&gt; 15467547981724877000
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.schemaDatabase();
=&gt; 15467547981724877000
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="modules-database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the database ID of the modules database.  Returns 0 if the
  current App Server uses the file system for its modules.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:modules-database()
=&gt; 8447094497219470018
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.modulesDatabase();
=&gt; 8447094497219470018
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="triggers-database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the database ID of the triggers database
  associated with the current database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong" optional="true">
    A database ID. Defaults to the current database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:triggers-database()
=&gt; 8447094497219470018
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.triggersDatabase();
=&gt; 8447094497219470018
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="quote" type="builtin" lib="xdmp" category="Extension" subcategory="XML">
    <apidoc:summary>
  Returns the unevaluated serialized representation
  of the input parameter as a string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="item()*">
    Input to be quoted.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:quote" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
      <dt><p>
	<span class="xquery">&lt;output-encoding&gt;</span>
      <span class="javascript">outputEncoding</span></p></dt>
      <dd>Specifies the encoding to use for this quote operation. This is
      only used to escape characters that cannot be represented.</dd>
      <dt><p>
	<span class="xquery">&lt;output-sgml-character-entities&gt;</span>
      <span class="javascript">outputSgmlCharacterEntities</span></p></dt>
      <dd>Specifies if character entities should be output upon serialization
      of the XML.  Valid values are <code>normal</code>, <code>none</code>,
      <code>math</code>, and <code>pub</code>. By default (that is, if this
      option is not specified), no SGML entities are serialized on output,
      unless the App Server is configured to output SGML character
      entities.</dd>
      <dt><p>
	<span class="xquery">&lt;method&gt;</span>
      <span class="javascript">method</span></p></dt>
      <dd>Valid values are <code>xml</code>, <code>html</code>,
      <code>xhtml</code>, and <code>text</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code>xsl:output</code></a> instruction.
      and the MarkLogic XQuery <code>xdmp:output</code> prolog statement.
      </dd>
      <dt><p>
	<span class="xquery">&lt;cdata-section-elements&gt;</span>
      <span class="javascript">cdataSectionElements</span></p></dt>
      <dd>A <span class="xquery">list of space-separated</span>
      <span class="javascript">single QName or array of</span> QNames to output
      as CDATA sections. This is like the corresponding part of both the XSLT
      <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code>xsl:output</code></a> instruction and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.
      </dd>
      <dt><p>
	<span class="xquery">&lt;encoding&gt;</span>
      <span class="javascript">encoding</span></p></dt>
      <dd>The encoding.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code>xsl:output</code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;use-character-maps&gt;</span>
      <span class="javascript">useCharacterMaps</span></p></dt>
      <dd>One or more of the following values, <span class="xquery">separated by spaces.</span>
      <span class="javascript">as a string or an array of strings.</span>
      Valid values are
      <span class="xquery"><code>xdmp:sgml-entities-normal</code>,</span>
      <span class="javascript"><code>xdmp:sgml-entities-normal</code>,</span>
      <span class="xquery"><code>xdmp:sgml-entities-math</code>,</span>
      <span class="javascript"><code>xdmp:sgml-entities-math</code>,</span>
      and
      <span class="xquery"><code>xdmp:sgml-entities-pub</code>.</span>
      <span class="javascript"><code>xdmp:sgml-entities-pub</code>.</span>
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code>xsl:output</code></a> instruction and the MarkLogic XQuery
      prolog statement.
      </dd>
      <dt><p>
	<span class="xquery">&lt;media-type&gt;</span>
      <span class="javascript">mediaType</span></p></dt>
      <dd>A mimetype representing a media type. For example,
      <code>text/plain</code> or <code>application/xml</code> (or other valid
      mimetypes).
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code>xsl:output</code></a> instruction and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.
      </dd>
      <dt><p>
	<span class="xquery">&lt;byte-order-mark&gt;</span>
      <span class="javascript">byteOrderMark</span></p></dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;indent&gt;</span>
      <span class="javascript">indent</span></p></dt>
      <dd>Specifies if typed XML (that is, XML for which there is an
      in-scope schema) should be pretty-printed (indented).  Valid
      values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;indent-untyped&gt;</span>
      <span class="javascript">indentUntyped</span></p></dt>
      <dd>Specifies if untyped XML (that is, XML for which there is no
      in-scope schema) should be pretty-printed (indented).  Valid
      values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;indent-tabs&gt;</span>
      <span class="javascript">indentTabs</span></p></dt>
      <dd>Specifies if tab characters should be used instead of 8 consecutive
      spaces when indenting.  Valid values are <code>yes</code> or <code>no</code>.
      </dd>
      <dt><p>
	<span class="xquery">&lt;include-content-type&gt;</span>
      <span class="javascript">includeContentType</span></p></dt>
      <dd>Include the content-type declaration when serializing the node.
      Valid values are
      <code>yes</code> or <code>no</code>.</dd>
      <dt><p>
	<span class="xquery">&lt;escape-uri-attributes&gt;</span>
      <span class="javascript">escapeUriAttributes</span></p></dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;doctype-public&gt;</span>
      <span class="javascript">doctypePublic</span></p></dt>
      <dd>A public identifier, which is the public identifier to use on the
      emitted DOCTYPE.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;doctype-system&gt;</span>
      <span class="javascript">doctypeSystem</span></p></dt>
      <dd>A system identifier, which is the system identifier to use on the
      emitted DOCTYPE.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;omit-xml-declaration&gt;</span>
      <span class="javascript">omitXmlDeclaration</span></p></dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;standalone&gt;</span>
      <span class="javascript">standalone</span></p></dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;normalization-form&gt;</span>
      <span class="javascript">normalizationForm</span></p></dt>
      <dd>Valid values are <code>NFC</code>, <code>NFD</code>,
      and <code>NFKD</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
      <dt><p>
	<span class="xquery">&lt;default-attributes&gt;</span>
      <span class="javascript">defaultAttributes</span></p></dt>
      <dd>Specifies whether attributes defaulted with a schema should be
      included in the serialization.
      Valid values are <code>yes</code> or <code>no</code>.
      This is like the corresponding part of <span class="xquery">both</span>
      the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">
      <code><span class="xquery">xsl:output</span>
      <span class="javascript">xsl:output</span></code></a>
      instruction<span class="javascript">.</span>
      <span class="xquery"> and the MarkLogic XQuery
      <code>xdmp:output</code> prolog statement.</span>
      </dd>
    </dl></blockquote>

  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $arg := &lt;a&gt;aaa&lt;/a&gt;
return ($arg, xdmp:quote($arg))

(: returns the following output:
   (&lt;a&gt;aaa&lt;/a&gt;, "&lt;a&gt;aaa&lt;/a&gt;")
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
'use strict';
const arg = fn.head(xdmp.unquote('&lt;a&gt;aaa&lt;/a&gt;')).root;
[arg, xdmp.quote(arg)];

// Returns the following output:
//  ["&lt;a&gt;aaa&lt;/a&gt;", "&lt;a&gt;aaa&lt;/a&gt;"]
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $input-node := &lt;parent&gt;&lt;child&gt;content&lt;/child&gt;&lt;/parent&gt;
let $options :=
  &lt;options xmlns="xdmp:quote"&gt;
    &lt;indent-untyped&gt;yes&lt;/indent-untyped&gt;
    &lt;omit-xml-declaration&gt;no&lt;/omit-xml-declaration&gt;
  &lt;/options&gt;
return xdmp:quote($input-node, $options)

(: Returns the following (as a string value):
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;parent&gt;
      &lt;child&gt;content&lt;/child&gt;
    &lt;/parent&gt;
 :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $input-node := &lt;parent&gt;&lt;child&gt;content&lt;/child&gt;&lt;/parent&gt;
let $options := 
  map:map() =&gt; map:with("indentUntyped", "yes")
            =&gt; map:with("omitXmlDeclaration", "no")
return xdmp:quote($input-node, $options)

(: Returns the following (as a string value):
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;parent&gt;
      &lt;child&gt;content&lt;/child&gt;
    &lt;/parent&gt;
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
'use strict';

//Build an XML node of the form &lt;parent&gt;&lt;child&gt;content&lt;/child&gt;&lt;/parent&gt;
const builder = new NodeBuilder();
const inputNode = 
  builder.startElement('parent')
         .startElement('child')
         .addText('content')
         .endElement()
         .endElement()
         .toNode();

const options = {indentUntyped: 'yes', omitXmlDeclaration: 'no'};
xdmp.quote(inputNode, options);

// Returns the following output (as a string value):
// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
// &lt;parent&gt;
//   &lt;child&gt;content&lt;/child&gt;
// &lt;/parent&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="unquote" type="builtin" lib="xdmp" category="Extension" subcategory="XML">
    <apidoc:summary>
  Parses a string as XML, returning one or more document nodes.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:string">
    Input to be unquoted.
  </apidoc:param>
      <apidoc:param name="default-namespace" type="xs:string?" optional="true">
    Default namespace for nodes in the first parameter.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    The options for getting this document.
    The default value is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>"repair-full"</dt>
    <dd>Specifies that malformed XML content be repaired.
        XML content with multiple top-level elements will be
        parsed as multiple documents.
        This option has no effect on binary or text documents.</dd>
    <dt>"repair-none"</dt>
    <dd>Specifies that malformed XML content be rejected.
        XML content will be parsed as a single document, so
        a maximum of one document node will be returned.
        This option has no effect on binary or text documents.</dd>
    <dt>"format-text"</dt>
    <dd>Specifies to get the document as a text document,
        regardless of the URI specified.</dd>
    <dt>"format-binary"</dt>
    <dd>Specifies to get the document as a binary document,
        regardless of the URI specified.</dd>
    <dt>"format-xml"</dt>
    <dd>Specifies to get the document as an XML document,
        regardless of the URI specified.</dd>
    <dt>"format-json"</dt>
    <dd>Specifies to get the document as a JSON document,
        regardless of the URI specified.</dd>
    <dt>"default-language=<em>xx</em>"</dt>
    <dd> If the root element node specified in the first parameter does not
    already have an <code>xml:lang</code> attribute, the language to
    specify in an <code>xml:lang</code> attribute on the root element node.
    If <code>default-language</code> is not specified, then nothing is
    added to the root element node. Some examples are
    <code>default-language=en</code> and <code>default-language=fr</code>.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()+</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If no format is specified in $options, it is inferred from the input.
  If the first non-whitespace character is either '{' or '[' it is JSON.
  Otherwise it is XML.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If neither "repair-full" nor "repair-none" is present,
  the default is specified by the XQuery version of the caller.
  In XQuery version <code>1.0</code> and <code>1.0-ml</code> the default is
  "repair-none".  In XQuery version <code>0.9-ml</code> the default is
  "repair-full".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If $arg is the empty string, <code>xdmp:unquote</code> returns an empty
  document node.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:unquote("&lt;foo/&gt;")
=&gt; &lt;foo/&gt;
  It returns this as a document node.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.head(xdmp.unquote('&lt;foo/&gt;'));
=&gt; &lt;foo/&gt;
  It returns this as a document node.
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:unquote('&lt;foo&gt;hello&lt;/foo&gt;', "",
          ("repair-none", "default-language=en"))
  =&gt; &lt;foo xml:lang="en"&gt;hello&lt;/foo&gt;
  It returns this as a document node and does
  not perform tag repair on the node.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.head(
  xdmp.unquote('&lt;foo&gt;hello&lt;/foo&gt;', null,
               ['repair-none', 'default-language=en'])
);

=&gt; &lt;foo xml:lang="en"&gt;hello&lt;/foo&gt;
   It returns this as a document node and does
   not perform tag repair on the node.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.head(
  xdmp.unquote('&lt;foo&gt;hello&lt;/foo&gt;', 'bar',
               ['repair-none', 'default-language=en'])
);

=&gt; &lt;foo xml:lang="en" xmlns="bar"&gt;hello&lt;/foo&gt;
   It returns this as a document node and does
   not perform tag repair on the node.  Note that
   the node is in the "bar" namespace.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="log" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Logs a message into a specific app server error log file. System and 
  Application logs are split and logged separately. If the function is executed
  on an app server at port 8888, the message will appear in 
  <code xmlns="http://www.w3.org/1999/xhtml">&lt;install_dir&gt;/Logs/8888_ErrorLog.txt</code> and not in  <code xmlns="http://www.w3.org/1999/xhtml">&lt;install_dir&gt;/Logs/ErrorLog.txt</code>. The
  <code xmlns="http://www.w3.org/1999/xhtml">&lt;install_dir&gt;</code> is the location of the MarkLogic install 
  directory. The port number is the port number of the current App
  Server or "TaskServer" if the current request is running on the Task
  Server. 
  The log message is sent as soon as this function is called, even if 
  the program from which it is called has not completed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="msg" type="item()*" class="xquery">
    Message for logging.
  </apidoc:param>
      <apidoc:param name="msg" type="Sequence | Object | String | Array | Null | Number | Boolean" class="javascript">
    Message for logging.
  </apidoc:param>
      <apidoc:param name="level" type="xs:string?" optional="true">
    One of: emergency, alert, critical, error, warning, notice, info,
      config, debug, fine, finer, or finest. The default level is "info".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:log("AAAA")
=&gt; () and logs an info-level message with the text "AAAA"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.log("AAAA");
=&gt; () and logs an info-level log message with the text "AAAA"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="log-level" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Retrieves the current server log level.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:log-level()
=&gt; finest
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.logLevel();
=&gt; finest
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="trace-enabled" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns whether or not a trace event is enabled.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
    The trace event name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $query := cts:word-query("hello")
return
  if (xdmp:trace-enabled("Query Trace")) 
  then xdmp:log($query)
  else ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.wordQuery('hello');
if (xdmp.traceEnabled("JSearch Query")) {
  console.debug(query)
}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="query-meters" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the current value of the resource meters for this
  query sequence<span class="javascript" xmlns="http://www.w3.org/1999/xhtml"> as a JSON node</span>.
</apidoc:summary>
    <apidoc:return class="xquery">element()</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">The resource meters returned include:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
  <dl>
  <dt><span class="xquery">elapsed-time</span>
  <span class="javascript">elapsedTime</span></dt>
  <dd>The time elapsed since the start of the processing of this query,
  in the form of a duration.</dd>
  <dt>requests</dt>
  <dd>The number of requests.</dd>
  <dt><span class="xquery">list-cache-hits</span>
  <span class="javascript">listCacheHits</span></dt>
  <dd>The number of successful list cache lookups.  The list
  cache holds search termlists used to accelerate path expressions and
  text searches.</dd>
  <dt><span class="xquery">list-cache-misses</span>
  <span class="javascript">listCacheMisses</span></dt>
  <dd>The number of unsuccessful list cache lookups.  Each
  unsuccessful list cache lookup was followed by a disk access to load the
  search termlist into the cache.</dd>
  <dt><span class="xquery">in-memory-list-hits</span>
  <span class="javascript">inMemoryListHits</span></dt>
  <dd>The number of successful list lookups in in-memory
  stands.</dd>
  <dt><span class="xquery">expanded-tree-cache-hits</span>
  <span class="javascript">expandedTreeCacheHits</span></dt>
  <dd>The number of successful expanded tree cache lookups.
  The expanded tree cache cache holds XML document data in the expanded
  representation used by the XQuery evaluator.</dd>
  <dt><span class="xquery">expanded-tree-cache-misses</span>
  <span class="javascript">expandedTreeCacheMisses</span></dt>
  <dd>The number of unsuccessful expanded tree cache lookups.
  Each unsuccessful expanded tree lookup was followed by a compressed tree
  cache lookup to load the expanded tree into the cache.</dd>
  <dt><span class="xquery">compressed-tree-cache-hits</span>
  <span class="javascript">compressedTreeCacheHits</span></dt>
  <dd>The number of successful compressed tree cache lookups.
  The compressed tree cache holds XML document data in the compressed
  representation stored on disk.</dd>
  <dt><span class="xquery">compressed-tree-cache-misses</span>
  <span class="javascript">compressedTreeCacheMisses</span></dt>
  <dd>The number of unsuccessful compressed tree cache lookups.
  Each unsuccessful compressed tree cache lookup was followed by a disk
  access to load the compressed tree into the cache.</dd>
  <dt><span class="xquery">in-memory-compressed-tree-hits</span>
  <span class="javascript">inMemoryCompressedTreeHits</span></dt>
  <dd>The number of successful compressed tree lookups in
  in-memory stands.</dd>
  <dt><span class="xquery">value-cache-hits</span>
  <span class="javascript">valueCacheHits</span></dt>
  <dd>The number of successful value cache lookups.  The value
  cache is a transient cache that exists only for the duration of one
  query.  It holds typed values, and is used to accelerate the frequent
  conversion of nodes to typed values.</dd>
  <dt><span class="xquery">value-cache-misses</span>
  <span class="javascript">valueCacheMisses</span></dt>
  <dd>The number of unsuccessful value cache lookups.  Each
  unsuccessful value cache lookup was followed by a conversion of an XML
  node to a typed value.</dd>
  <dt><span class="xquery">regexp-cache-hits</span>
  <span class="javascript">regexpCacheHits</span></dt>
  <dd>The number of successful regular expression cache
  lookups.  The regular expression cache is a transient cache that exists
  only for the duration of one query.  It holds compiled regular
  expressions, and is used to accelerate the frequent use of regular
  expressions during the evaluation of a query.</dd>
  <dt><span class="xquery">regexp-cache-misses</span>
  <span class="javascript">regexpCacheMisses</span></dt>
  <dd>The number of unsuccessful regular expression cache
  lookups.  Each unsuccessful regular expression cache lookup was followed
  by a compilation of a regular expression from source text.</dd>
  <dt><span class="xquery">link-cache-hits</span>
  <span class="javascript">linkCacheHits</span></dt>
  <dd>The number of successful link cache lookups.  The link
  cache is a transient cache that exists only for the duration of one
  query.  It holds pointers to expanded trees, and is used to accelerate
  the frequent dereferencing of link nodes.</dd>
  <dt><span class="xquery">link-cache-misses</span>
  <span class="javascript">linkCacheMisses</span></dt>
  <dd>The number of unsuccessful link cache lookups.  Each
  unsuccessful link cache lookup was followed by a search for the
  link target tree.</dd>
  <dt><span class="xquery">filter-hits</span>
  <span class="javascript">filterHits</span></dt>
  <dd>The number of successful search filter matches.</dd>
  <dt><span class="xquery">filter-misses</span>
  <span class="javascript">filterMisses</span></dt>
  <dd>The number of unsuccessful search filter matches.</dd>
  <dt><span class="xquery">fragments-added</span>
  <span class="javascript">fragmentsAdded</span></dt>
  <dd>The number of XML fragments added to the database by an
  update.</dd>
  <dt><span class="xquery">fragments-deleted</span>
  <span class="javascript">fragmentsDeleted</span></dt>
  <dd>The number of XML fragments deleted from the database by
  an update.</dd>
  <dt><span class="xquery">fs-program-cache-hits</span>
  <span class="javascript">fsProgramCacheHits</span></dt>
  <dd>The number of module cache hits from the entire program made from
  modules on the file system.</dd>
  <dt><span class="xquery">fs-program-cache-misses</span>
  <span class="javascript">fsProgramCacheMisses</span></dt>
  <dd>The number of module cache misses from the entire program made from
  modules on the file system.</dd>
  <dt><span class="xquery">db-program-cache-hits</span>
  <span class="javascript">dbProgramCacheHits</span></dt>
  <dd>The number of module cache hits from the entire program made from
  modules in a database (may contain library modules from the special
  Modules directory).</dd>
  <dt><span class="xquery">db-program-cache-misses</span>
  <span class="javascript">dbProgramCacheMisses</span></dt>
  <dd>The number of module cache misses from the entire program made from
  modules in a database (may contain library modules from the special
  Modules directory).</dd>
  <dt><span class="xquery">env-program-cache-hits</span>
  <span class="javascript">envProgramCacheHits</span></dt>
  <dd>The number of module cache hits from the entire program made from
  ad hoc XSLT stylesheet nodes.</dd>
  <dt><span class="xquery">env-program-cache-misses</span>
  <span class="javascript">envProgramCacheMisses</span></dt>
  <dd>The number of module cache misses from the entire program made from
  ad hoc XSLT stylesheet nodes.</dd>
  <dt><span class="xquery">fs-main-module-sequence-cache-hits</span>
  <span class="javascript">fsMainModuleSequenceCacheHits</span></dt>
  <dd>The number of main module cache hits from main modules on the
  file system.</dd>
  <dt><span class="xquery">fs-main-module-sequence-cache-misses</span>
  <span class="javascript">fsMainModuleSequenceCacheMisses</span></dt>
  <dd>The number of main module cache misses from main modules on the
  file system.</dd>
  <dt><span class="xquery">db-main-module-sequence-cache-hits</span>
  <span class="javascript">dbMainModuleSequenceCacheHits</span></dt>
  <dd>The number of main module cache hits from main modules in a
  database.</dd>
  <dt><span class="xquery">db-main-module-sequence-cache-misses</span>
  <span class="javascript">dbMainModuleSequenceCacheMisses</span></dt>
  <dd>The number of main module cache misses from main modules in a
  database.</dd>
  <dt><span class="xquery">fs-library-module-cache-hits</span>
  <span class="javascript">fsLibraryModuleCacheHits</span></dt>
  <dd>The number of library module cache hits from library modules on the
  file system.</dd>
  <dt><span class="xquery">fs-library-module-cache-misses</span>
  <span class="javascript">fsLibraryModuleCacheMisses</span></dt>
  <dd>The number of library module cache misses from library modules on the
  file system.</dd>
  <dt><span class="xquery">db-library-module-cache-hits</span>
  <span class="javascript">dbLibraryModuleCacheHits</span></dt>
  <dd>The number of library module cache hits from library modules from the
  modules database.</dd>
  <dt><span class="xquery">db-library-module-cache-misses</span>
  <span class="javascript">dbLibraryModuleCacheMisses</span></dt>
  <dd>The number of library module cache misses from library modules from the
  modules database.</dd>
  </dl>
  </blockquote>
  <p xmlns="http://www.w3.org/1999/xhtml">Some meters are broken down by fragment root and document URI:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
  <dl>
  <dt>fragments</dt>
  <dd>A sequence of fragment elements, each containing:
  <dl>
  <dt>root</dt>
  <dd>The fragment root name.</dd>
  <dt><span class="xquery">expanded-tree-cache-hits</span>
  <span class="javascript">expandedTreeCacheHits</span></dt>
  <dd>A count of successful expanded tree cache lookups for this fragment
  root.</dd>
  <dt><span class="xquery">expanded-tree-cache-misses</span>
  <span class="javascript">expandedTreeCacheMisses</span></dt>
  <dd>A count of unsuccessful expanded tree cache lookups for this
  fragment root.</dd>
  </dl>
  </dd>
  <dt>documents</dt>
  <dd>A sequence of document elements, each containing:
  <dl>
  <dt>uri</dt>
  <dd>The document URI.</dd>
  <dt><span class="xquery">expanded-tree-cache-hits</span>
  <span class="javascript">expandedTreeCacheHits</span></dt>
  <dd>A count of successful expanded tree cache lookups
  for this document URI.</dd>
  <dt><span class="xquery">expanded-tree-cache-misses</span>
  <span class="javascript">expandedTreeCacheMisses</span></dt>
  <dd>A count of unsuccessful expanded tree cache lookups
  for this document URI.</dd>
  </dl>
  </dd>
  </dl>
  </blockquote>
  <p xmlns="http://www.w3.org/1999/xhtml">There are also meters that measure the query activity per host. There is
  a <span class="xquery"><code>qm:hosts</code> element</span>
  <span class="javascript"><code>qm.hosts</code> member</span> with one 
  <code><span class="xquery">qm:host</span>
  <span class="javascript">qm.host</span></code> child per host that 
  participates in the query. Each 
  <span class="xquery"><code>qm:host</code> element</span>
  <span class="javascript"><code>qm.host</code> member</span>
  contains meters showing the <span class="xquery">round-trip-time</span>
  <span class="javascript">roundTripTime</span> and 
  <span class="xquery">round-trip-count</span>
  <span class="javascript">roundTripCount</span> for
  communications between the evaluator host and the host referenced in the
  <code><span class="xquery">xdmp:query-meters</span>
  <span class="javascript">xdmp.queryMeters</span></code> output. 
  The <span class="xquery"><code>qm:hosts</code> element</span>
  <span class="javascript"><code>qm.hosts</code> member</span> is empty for 
  a single-node cluster.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Certain operations are run concurrently with the timing operations,
  and if those operations are not actually used in the query, they might not
  be included in the timings. This occurs for operations like
  <code><span class="xquery">xdmp:estimate</span>
  <span class="javascript">xdmp.estimate</span></code>, 
  <code><span class="xquery">xdmp:exists</span>
  <span class="javascript">xdmp.exists</span></code>, and lexicon calls
  (for example, <code><span class="xquery">cts:element-values</span>
  <span class="javascript">cts.elementValues</span></code>).  If you want to see the
  total timings that include calls that are not used, you can form some other
  expression with the results of the calls.  For example, if you have an
  expression that calls <code><span class="xquery">xdmp:estimate</span>
  <span class="javascript">xdmp.estimate</span></code> 
  <span class="xquery">in a <code>let</code> expression</span>, you can add 
  0 to the output, which causes it to be included in the timings (something 
  like <span class="xquery"><code>xdmp:estimate($query) + 0</code></span>
  <span class="javascript"><code>xdmp.estimate(query) + 0</code></span>).</p>
  </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:query-meters()
  =&gt;
  &lt;qm:query-meters
   xsi:schemaLocation="http://marklogic.com/xdmp/query-meters
       query-meters.xsd"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:qm="http://marklogic.com/xdmp/query-meters"&gt;
    &lt;qm:elapsed-time&gt;PT0.22S&lt;/qm:elapsed-time&gt;
    &lt;qm:requests&gt;1&lt;/qm:requests&gt;
    &lt;qm:list-cache-hits&gt;0&lt;/qm:list-cache-hits&gt;
    &lt;qm:list-cache-misses&gt;0&lt;/qm:list-cache-misses&gt;
    &lt;qm:in-memory-list-hits&gt;0&lt;/qm:in-memory-list-hits&gt;
    &lt;qm:expanded-tree-cache-hits&gt;0
       &lt;/qm:expanded-tree-cache-hits&gt;
    &lt;qm:expanded-tree-cache-misses&gt;0
       &lt;/qm:expanded-tree-cache-misses&gt;
    &lt;qm:compressed-tree-cache-hits&gt;0
       &lt;/qm:compressed-tree-cache-hits&gt;
    &lt;qm:compressed-tree-cache-misses&gt;0
       &lt;/qm:compressed-tree-cache-misses&gt;
    &lt;qm:in-memory-compressed-tree-hits&gt;0
       &lt;/qm:in-memory-compressed-tree-hits&gt;
    &lt;qm:value-cache-hits&gt;0&lt;/qm:value-cache-hits&gt;
    &lt;qm:value-cache-misses&gt;0&lt;/qm:value-cache-misses&gt;
    &lt;qm:regexp-cache-hits&gt;0&lt;/qm:regexp-cache-hits&gt;
    &lt;qm:regexp-cache-misses&gt;0&lt;/qm:regexp-cache-misses&gt;
    &lt;qm:link-cache-hits&gt;0&lt;/qm:link-cache-hits&gt;
    &lt;qm:link-cache-misses&gt;0&lt;/qm:link-cache-misses&gt;
    &lt;qm:fragments-added&gt;0&lt;/qm:fragments-added&gt;
    &lt;qm:fragments-deleted&gt;0&lt;/qm:fragments-deleted&gt;
    &lt;qm:fs-program-cache-hits&gt;1&lt;/qm:fs-program-cache-hits&gt;
    &lt;qm:fs-program-cache-misses&gt;0&lt;/qm:fs-program-cache-misses&gt;
    &lt;qm:db-program-cache-hits&gt;0&lt;/qm:db-program-cache-hits&gt;
    &lt;qm:db-program-cache-misses&gt;0&lt;/qm:db-program-cache-misses&gt;
    &lt;qm:env-program-cache-hits&gt;0&lt;/qm:env-program-cache-hits&gt;
    &lt;qm:env-program-cache-misses&gt;0&lt;/qm:env-program-cache-misses&gt;
    &lt;qm:fs-main-module-sequence-cache-hits&gt;0
       &lt;/qm:fs-main-module-sequence-cache-hits&gt;
    &lt;qm:fs-main-module-sequence-cache-misses&gt;0
       &lt;/qm:fs-main-module-sequence-cache-misses&gt;
    &lt;qm:db-main-module-sequence-cache-hits&gt;0
       &lt;/qm:db-main-module-sequence-cache-hits&gt;
    &lt;qm:db-main-module-sequence-cache-misses&gt;0
       &lt;/qm:db-main-module-sequence-cache-misses&gt;
    &lt;qm:fs-library-module-cache-hits&gt;0
       &lt;/qm:fs-library-module-cache-hits&gt;
    &lt;qm:fs-library-module-cache-misses&gt;0
       &lt;/qm:fs-library-module-cache-misses&gt;
    &lt;qm:db-library-module-cache-hits&gt;0
       &lt;/qm:db-library-module-cache-hits&gt;
    &lt;qm:db-library-module-cache-misses&gt;0
       &lt;/qm:db-library-module-cache-misses&gt;
    &lt;qm:fragments/&gt;
    &lt;qm:documents/&gt;
    &lt;qm:hosts/&gt;
  &lt;/qm:query-meters&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.queryMeters()

// Returns results similar to the following:
// {
//   "elapsedTime": "PT0.007101S",
//   "requests": 0,
//   "listCacheHits": 0,
//   "listCacheMisses": 0,
//   "inMemoryListHits": 0,
//   "tripleCacheHits": 0,
//   "tripleCacheMisses": 0,
//   "tripleValueCacheHits": 0,
//   "tripleValueCacheMisses": 0,
//   "expandedTreeCacheHits": 0,
//   "expandedTreeCacheMisses": 0,
//   "compressedTreeCacheHits": 0,
//   "compressedTreeCacheMisses": 0,
//   "inMemoryCompressedTreeHits": 0,
//   "valueCacheHits": 0,
//   "valueCacheMisses": 0,
//   "regexpCacheHits": 0,
//   "regexpCacheMisses": 0,
//   "linkCacheHits": 0,
//   "linkCacheMisses": 0,
//   "filterHits": 0,
//   "filterMisses": 0,
//   "fragmentsAdded": 0,
//   "fragmentsDeleted": 0,
//   "fsProgramCacheHits": 0,
//   "fsProgramCacheMisses": 1,
//   "dbProgramCacheHits": 0,
//   "dbProgramCacheMisses": 0,
//   "envProgramCacheHits": 0,
//   "envProgramCacheMisses": 0,
//   "fsMainModuleSequenceCacheHits": 0,
//   "fsMainModuleSequenceCacheMisses": 0,
//   "dbMainModuleSequenceCacheHits": 0,
//   "dbMainModuleSequenceCacheMisses": 0,
//   "fsLibraryModuleCacheHits": 0,
//   "fsLibraryModuleCacheMisses": 0,
//   "dbLibraryModuleCacheHits": 0,
//   "dbLibraryModuleCacheMisses": 0,
//   "fragments": [ ],
//   "documents": [ ],
//   "hosts": [ ]
// }
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
declare namespace qm="http://marklogic.com/xdmp/query-meters";

fn:count(collection()),
xdmp:query-meters()/qm:elapsed-time

=&gt; The count of the number of documents in the database followed by
   the elapsed-time element of the xdmp:query-trace XML output:

153
&lt;qm:elapsed-time xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:qm="http://marklogic.com/xdmp/query-meters"&gt;
                 PT0.04S&lt;/qm:elapsed-time&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.count(fn.collection());
xdmp.queryMeters().elapsedTime;

=&gt; PT0.003416S
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="elapsed-time" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the elapsed time since the start of processing of this query.  Gives
  the same information as the <code xmlns="http://www.w3.org/1999/xhtml">elapsed-time</code> element of the
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:query-meters</code> output, but has less overhead than calling
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:query-meters</code>.
</apidoc:summary>
    <apidoc:return>xs:dayTimeDuration</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Certain operations are run concurrently with the timing operations,
  and if those operations are not actually used in the query, they might not
  be included in the timings. This occurs for operations like
  <code>xdmp:estimate</code>, <code>xdmp:exists</code>, and lexicon calls
  (for example, <code>cts:element-values</code>).  If you want to see the
  total timings that include calls that are not used, you can form some other
  expression with the results of the calls.  For example, if you have an
  expression that calls <code>xdmp:estimate</code> in a <code>let</code>
  expression, you can add 0 to the output, which causes it to be included in
  the timings (something like <code>xdmp:estimate($query) + 0</code>).</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

fn:count(collection()),
xdmp:elapsed-time()

=&gt; The count of the number of documents in the database followed by
   the elapsed-time of the query:

   153
   PT0.04S
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.count(fn.collection());
xdmp.elapsedTime();

=&gt; PT0.006126S

If you want to return both the count and the time, you can do the following:

var res = [];
res.push(fn.count(fn.collection()));
res.push(xdmp.elapsedTime());
res;

=&gt; [28,"PT0.00552S"]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="query-trace" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Enables or disables tracing of this query.
  When query tracing is enabled, "info" level messages
  are logged detailing the search optimizations performed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="enabled" type="xs:boolean">
    Specify true to enable query tracing, false to disenable query tracing.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Search optimizations are performed in three phases:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
  <dl>
  <dt>the path analysis phase</dt>
  <dd>In this phase a path expression is analyzed to determine whether
  it can be executed in whole or in part through an optimized search.
  Each individual component of the path is analyzed to see if it is
  searchable.  The searchablity of each path component is logged.</dd>
  <dt>the search constraint gathering phase</dt>
  <dd>In this phase, search constraints are gathered from the path
  expression components. The number of constraints contributed by
  each path component is logged.</dd>
  <dt>the search execution phase</dt>
  <dd>In this phase, a search is performed using the gathered constraints.
   The actual number of fragments selected for filtering is logged.</dd>
  </dl>
  </blockquote>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:query-trace(true())
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.queryTrace(true);
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-path-namespaces" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the list of path namespaces for the given database id.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dbid" type="xs:unsignedLong" optional="true">
  The id for the database to get the path namespaces for.
  Empty for the current database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">Element()</apidoc:return>
    <apidoc:return class="javascript">Array</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml"></p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

xdmp:database-path-namespaces(xdmp:database("Documents"))

=&gt; List of path-namespaces defined on Documents

&lt;path-namespaces xmlns="http://marklogic.com/xdmp/database"&gt;
  &lt;path-namespace&gt;
    &lt;prefix&gt;wm&lt;/prefix&gt;
    &lt;namespace-uri&gt;http://www.mediawiki.org/xml/export-0.4/&lt;/namespace-uri&gt;
  &lt;/path-namespace&gt;
  &lt;path-namespace&gt;
    &lt;prefix&gt;aaa&lt;/prefix&gt;
    &lt;namespace-uri&gt;http://www.aaa.org/&lt;/namespace-uri&gt;
  &lt;/path-namespace&gt;
&lt;/path-namespaces&gt;

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xdmp.databasePathNamespaces(xdmp.database("Documents"));

=&gt; List of path-namespaces defined on Documents
[
  {
    "prefix": "dc",
    "namespaceUri": "http://purl.org/dc/elements/1.1/"
  },
  {
    "prefix": "pl",
    "namespaceUri": "http://marklogic.com/ns/test/places"
  }
]

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-uri" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns the document-uri property of the parameter or its ancestor.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()">
    The node whose URI is returned.
   </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-uri(doc("http://marklogic.com/document"))
=&gt; "http://marklogic.com/document"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeUri(cts.doc("/dog.json"));
=&gt; "http://marklogic.com/document"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-database" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns the database id where the parameter is stored. If
  the specified node does not come from a document in a database, then
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:node-database</code> returns an empty list.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()">
    The node whose database is returned.
   </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:node-database(doc("http://marklogic.com/document"))
=&gt; 18384173956586417397
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.nodeDatabase(cts.doc("/dog.json"));
=&gt; 18384173956586417397
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="product-edition" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the current MarkLogic product edition.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:product-edition()
=&gt; "Essential Enterprise"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.productEdition();
=&gt; "Essential Enterprise"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="product-environment" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the current MarkLogic product environment.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:product-environment()
=&gt; "production"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.productEnvironment();
=&gt; "production"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-locks" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns the locks for one or more documents or directories.
  Returns the locks for all documents and directories
  in the database if no parameter is given.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*" optional="true">
    A document URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">Note that the locks described here are relatively heavy persistent
document locks for file system emulation through WebDAV, not relatively
light transaction locks for database consistency.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-locks("example.xml")
=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;lock:lock xmlns:lock="http://marklogic.com/xdmp/lock"&gt;
  &lt;lock:lock-type&gt;write&lt;/lock:lock-type&gt;
  &lt;lock:lock-scope&gt;exclusive&lt;/lock:lock-scope&gt;
  &lt;lock:active-locks&gt;
    &lt;lock:active-lock&gt;
      &lt;lock:depth&gt;0&lt;/lock:depth&gt;
      &lt;lock:owner&gt;
        &lt;DAV:href xmlns:DAV="DAV:"&gt;http://example.com/~user&lt;/DAV:href&gt;
      &lt;/lock:owner&gt;
      &lt;lock:timeout&gt;120&lt;/lock:timeout&gt;
      &lt;lock:lock-token&gt;http://marklogic.com/xdmp/locks/1c267a036b8480c3
      &lt;/lock:lock-token&gt;
      &lt;lock:timestamp&gt;1290136652&lt;/lock:timestamp&gt;
      &lt;sec:user-id xmlns:sec="http://marklogic.com/xdmp/security"&gt;
        893641342095093063&lt;/sec:user-id&gt;
    &lt;/lock:active-lock&gt;
  &lt;/lock:active-locks&gt;
&lt;/lock:lock&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentLocks("example.xml");
=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;lock:lock xmlns:lock="http://marklogic.com/xdmp/lock"&gt;
  &lt;lock:lock-type&gt;write&lt;/lock:lock-type&gt;
  &lt;lock:lock-scope&gt;exclusive&lt;/lock:lock-scope&gt;
  &lt;lock:active-locks&gt;
    &lt;lock:active-lock&gt;
      &lt;lock:depth&gt;0&lt;/lock:depth&gt;
      &lt;lock:owner&gt;
        &lt;DAV:href xmlns:DAV="DAV:"&gt;http://example.com/~user&lt;/DAV:href&gt;
      &lt;/lock:owner&gt;
      &lt;lock:timeout&gt;120&lt;/lock:timeout&gt;
      &lt;lock:lock-token&gt;http://marklogic.com/xdmp/locks/1c267a036b8480c3
      &lt;/lock:lock-token&gt;
      &lt;lock:timestamp&gt;1290136652&lt;/lock:timestamp&gt;
      &lt;sec:user-id xmlns:sec="http://marklogic.com/xdmp/security"&gt;
        893641342095093063&lt;/sec:user-id&gt;
    &lt;/lock:active-lock&gt;
  &lt;/lock:active-locks&gt;
&lt;/lock:lock&gt;
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

(:
   The time is in epoch time, which is seconds from the start
   of 1970, so this code does a little math on the values in
   the lock document to figure out how many seconds are left
   for the lock.  Assumes a lock on /example.xml, for example
   by running the following:

xquery version "1.0-ml";
declare namespace DAV="DAV:";

xdmp:lock-acquire("/example.xml",
           "exclusive",
           "0",
           &lt;DAV:href&gt;http://example.com/~user&lt;/DAV:href&gt;,
           xs:unsignedLong(120))

:)
let $lock := xdmp:document-locks("/example.xml")
let $lock-duration :=
   $lock/lock:lock/lock:active-locks/lock:active-lock/
         lock:timeout/fn:data(.)
let $current-epoch-time :=
 fn:round(
  ( fn:current-dateTime() - xs:dateTime("1970-01-01T00:00:00-00:00") )
  div xs:dayTimeDuration('PT1S') )
let $start-time :=
  $lock/lock:lock/lock:active-locks/lock:active-lock/
        lock:timestamp/fn:data(.)
let $end-time := $start-time + $lock-duration
let $seconds-left := $end-time - $current-epoch-time
return
 ($current-epoch-time, $start-time, $seconds-left)
=&gt;
1290136837
1290136832
115
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   The time is in epoch time, which is seconds from the start
//   of 1970, so this code does a little math on the values in
//   the lock document to figure out how many seconds are left
//   for the lock.  Assumes a lock on /example.json, for example
//   by running the following:
//
//  declareUpdate();
//  xdmp.lockAcquire("/example.json", "exclusive", "0", [], 120);

var lock = fn.head(xdmp.documentLocks("/example.json")).root;
var lockDuration = new Number;
lockDuration = fn.head(lock.xpath(
  "/lock:lock/lock:active-locks/lock:active-lock/lock:timeout/fn:data(.)",
  {"lock": "http://marklogic.com/xdmp/lock"}));
var currentEpochTime =
     fn.round(fn.currentDateTime().toObject().getTime() / 1000) ; 
     // divide by 1000 to convert miliseconds to seconds
var startTime = new Number;
startTime = fn.head(lock.xpath(
  "/lock:lock/lock:active-locks/lock:active-lock/lock:timestamp/fn:data(.)",
  {"lock": "http://marklogic.com/xdmp/lock"}));
var endTime = new Number;
endTime = startTime + lockDuration;
var secondsLeft = endTime - currentEpochTime;
var res = [currentEpochTime, endTime, secondsLeft];
res;

=&gt;
1290136837
1290136832
115
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-properties" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns a sequence of properties documents, one for each of the specified
  documents that has a corresponding properties document.  If no documents
  are specified, returns a sequence of properties documents for all
  documents in the database that have a corresponding properties document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*" optional="true">
    A sequence of document URIs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-properties("/mydoc.xml")
  =&gt;
&lt;prop:properties xmlns:prop="http://marklogic.com/xdmp/property"&gt;
  &lt;cpf:processing-status xmlns:cpf="http://marklogic.com/cpf"&gt;done
    &lt;/cpf:processing-status&gt;
  &lt;cpf:last-updated xmlns:cpf="http://marklogic.com/cpf"&gt;
    2010-05-24T16:28:11.577608-07:00&lt;/cpf:last-updated&gt;
  &lt;cpf:state xmlns:cpf="http://marklogic.com/cpf"&gt;
    http://marklogic.com/states/final&lt;/cpf:state&gt;
  &lt;prop:last-modified&gt;2010-05-24T16:29:58-07:00&lt;/prop:last-modified&gt;
&lt;/prop:properties&gt;

</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentProperties("/mydoc.xml");
=&gt;
&lt;prop:properties xmlns:prop="http://marklogic.com/xdmp/property"&gt;
  &lt;cpf:processing-status xmlns:cpf="http://marklogic.com/cpf"&gt;done
    &lt;/cpf:processing-status&gt;
  &lt;cpf:last-updated xmlns:cpf="http://marklogic.com/cpf"&gt;
    2010-05-24T16:28:11.577608-07:00&lt;/cpf:last-updated&gt;
  &lt;cpf:state xmlns:cpf="http://marklogic.com/cpf"&gt;
    http://marklogic.com/states/final&lt;/cpf:state&gt;
  &lt;prop:last-modified&gt;2010-05-24T16:29:58-07:00&lt;/prop:last-modified&gt;
&lt;/prop:properties&gt;

</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-properties()
 =&gt; All of the document properties, for example:
    &lt;prop:properties
          xmlns:prop="http://marklogic.com/xdmp/property"&gt;
    Property Node1
    &lt;/prop:properties&gt;
    &lt;prop:properties
          xmlns:prop="http://marklogic.com/xdmp/property"&gt;
    Property Node2
    &lt;/prop:properties&gt;
    &lt;prop:properties
          xmlns:prop="http://marklogic.com/xdmp/property"&gt;
    Property NodeN
    &lt;/prop:properties&gt;
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentProperties();
 =&gt; A Sequence with all of the document properties
    in the current database, for example:
    &lt;prop:properties
          xmlns:prop="http://marklogic.com/xdmp/property"&gt;
    Property Node1
    &lt;/prop:properties&gt;
    &lt;prop:properties
          xmlns:prop="http://marklogic.com/xdmp/property"&gt;
    Property Node2
    &lt;/prop:properties&gt;
    &lt;prop:properties
          xmlns:prop="http://marklogic.com/xdmp/property"&gt;
    Property NodeN
    &lt;/prop:properties&gt;
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="document-get-quality" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns the quality of the specified document if the document exists.
  Otherwise, returns the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document in question.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-get-quality("example.xml")
=&gt; 10
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentGetQuality("example.xml");
=&gt; 10
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-timestamp" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns timestamp of the most recent visible update to a
  document, lock, or property.
  Returns the empty sequence if no document, lock, or property
  exists.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document, lock, or property.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:usage>
  If the current request is part of a multi-statement transaction and
  the most recent visible update was in an earlier statement in the
  transaction, the timestamp for the update has not yet been established,
  so an empty sequence is returned.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-timestamp("example.xml")
=&gt; 13384772182196660
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentTimestamp("example.xml");
=&gt; 13384772182196660
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-forest" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the forest ID of the forest in which a document (or a lock or a
  property) with the specified URI is stored.   Otherwise, returns the empty
  sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document, lock, or property.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    Restricts the ID(s) of the forest(s) in which this function may return.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-forest("example.xml")
=&gt; 12972338785465832200
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentForest("example.xml");
=&gt; 12972338785465832200
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the forest specified as the parameter.  Throws
  XDMP-NOSUCHFOREST if no forest exists for the specified name.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
    The name of the forest.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest("myForest")
=&gt; 15495681647217162987
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forest("myForest");
=&gt; 15495681647217162987
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the database named in the parameter.
  Returns the ID of the current database if no parameter is specified.
  Throws XDMP-NOSUCHDB if no database exists for the specified name.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string" optional="true">
    The name of the database.
    The default value is the name of the current database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database("myDB")
=&gt; 74495681647284736476
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.database("myDB");
=&gt; 74495681647284736476
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-forests" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of forest IDs in the specified database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong" optional="false">
    A database ID.
  </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
    True if replica forest ids should also be included.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-forests(xdmp:database("Documents"))
=&gt; (8456374036761185098, 10615125154705099114)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseForests(xdmp.database("Documents"));
=&gt; a Sequence with the forest IDs for the database, for example:
   8456374036761185098
   10615125154705099114
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-open-replica" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Returns the forest ID for each specified forest or for each forest's replica
  if the forest is currently experiencing a local disk failover.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    The IDs of the forests that may have failed over.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-status(
  xdmp:forest-open-replica(
    xdmp:database-forests(xdmp:database("Documents"))))

=&gt; returns the status for each active and open forest in the Documents
   database, whether the forests are masters or replicas

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestStatus(
  xdmp.forestOpenReplica(
    xdmp.databaseForests(xdmp.database("Documents"))));

=&gt; returns the status for each active and open forest in the Documents
   database, whether the forests are masters or replicas

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-updates-allowed" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return updates allowed state of the forest with the given ID.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-updates-allowed(8456374036761185098)
=&gt; "all"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestUpdatesAllowed(8456374036761185098);
=&gt; "all"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-name" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the name of the database with the given ID.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong">
    A database ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-name(8456374036761185098)
=&gt; "Documents"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseName(8456374036761185098);
=&gt; "Documents"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-is-replica" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Tests if a database is a replica of a foreign database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong">
    A database ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-is-replica(8456374036761185098)
=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseIsReplica(8456374036761185098);
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-nonblocking-timestamp" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the most recent commit timestamp for which a query on the database
  will not block waiting for transactions to commit or journal frames to arrive
  from a foreign master.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong">
    A database ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-nonblocking-timestamp(8456374036761185098)
=&gt; 13155925136769870
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseNonblockingTimestamp(8456374036761185098);
=&gt; 13155925136769870
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-global-nonblocking-timestamp" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the most recent commit timestamp for which a query on the database
  including its foreign database will not block waiting for transactions to commit
  or journal frames to arrive from a foreign master.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong">
    A database ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-global-nonblocking-timestamp(8456374036761185098)
=&gt; 13155925136769870
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseGlobalNonblockingTimestamp(8456374036761185098);
=&gt; 13155925136769870
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-directory-creation" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  This function returns the directory creation setting
  for the specified database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="database-id" type="xs:unsignedLong">
      The ID of the database (for example,
      <code xmlns="http://www.w3.org/1999/xhtml">xdmp:database("myDatabase")</code>).
  </apidoc:param>
      <apidoc:param class="javascript" name="databaseId" type="String">
      The ID of the database (for example,
      <code xmlns="http://www.w3.org/1999/xhtml">xdmp.database("myDatabase")</code>).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:string</apidoc:return>
    <apidoc:return class="javascript">String</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:database-directory-creation(xdmp:database("Documents"))
(: returns the directory creation setting :)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseDirectoryCreation(xdmp.database("Documents"))
(: returns the directory creation setting :)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-is-forest-retired" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  This function returns true if the specificed forest is
  retired and false the specificed forest is not retired.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
      <apidoc:param class="javascript" name="databaseId" type="String">
    The ID of the database.
    </apidoc:param>
      <apidoc:param class="xquery" name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
      <apidoc:param class="javascript" name="forestId" type="String">
    The ID of the forest.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:boolean</apidoc:return>
    <apidoc:return class="javascript">Boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xquery version "1.0-ml";
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  xdmp:database-is-forest-retired($dbid, $forestid)
  (: returns true if the specificed forest is retired and
     false if it is not retired. :)
    </pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  var dbId = xdmp.database("myDatabase");
  var forestId = xdmp.forest("myForest");
  xdmp.databaseIsForestRetired(dbId, forestId)
  // returns true if the specificed forest is retired and
     false if it is not retired.
    </pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-assignment-policy" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  This function returns the assignment policy for
  the specified database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="database-id" type="xs:unsignedLong">
    The ID of the database.
  </apidoc:param>
      <apidoc:param class="javascript" name="databaseId" type="String">
    The ID of the database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(db:assignment-policy)</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:database-assignment-policy(xdmp:database())
(: returns the assignment policy for the database :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseAssignmentPolicy(xdmp.database())
=&gt; returns the assignment policy for the database
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group-get-audit-event-type-enabled" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server" hidden="false">
    <apidoc:summary>
  This function returns the audit event type's enabled setting for the audit configuration.
  A value of true is returned if both audit has been enabled for group setting and the audit event type has been enabled,
  Otherwise false is returned.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="group-id" type="xs:unsignedLong">
    The ID of the group.
  </apidoc:param>
      <apidoc:param class="javascript" name="groupId" type="String">
    The ID of the group.
  </apidoc:param>
      <apidoc:param class="xquery" name="event-type" type="xs:string">
    The event type to check.
  </apidoc:param>
      <apidoc:param class="javascript" name="eventType" type="String">
    The event type to check.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:boolean</apidoc:return>
    <apidoc:return class="javascript">Boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $group-id := xdmp:group()
return
xdmp:group-get-audit-event-type-enabled($group-id, "mlsp-start")
(: returns the audit event type's enabled setting :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var groupId = xdmp.group()
xdmp.groupGetAuditEventTypeEnabled(groupId, "mlcp-copy-export-start");
=&gt;
true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-is-rebalancer-enable" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
This function returns the rebalancer enable setting
for the specified database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="database-id" type="xs:unsignedLong">
  The ID of the database.
  </apidoc:param>
      <apidoc:param class="javascript" name="databaseId" type="String">
  The ID of the database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:boolean</apidoc:return>
    <apidoc:return class="javascript">Boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $dbid := admin:database-get-id($config, "myDatabase")
return
xdmp:database-is-rebalancer-enable($dbid)
(: returns the rebalancer enable setting :)
  </pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var dbId := xdmp.database("myDatabase");
xdmp.databaseIsRebalancerEnable(dbId)
// returns the rebalancer enable setting
  </pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-encryption-key-id" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the encryption key ID for the database identified by database-id
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong">
  The ID of the database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $dbid := xdmp:database("Documents")
return xdmp:database-encryption-key-id($dbid)
==&gt; 4ba7bc6a-dbd6-4d5f-b573-f874c72c0c79
(: returns the encryption key ID:)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseEncryptionKeyId(xdmp.database("Documents"));
==&gt; 4ba7bc6a-dbd6-4d5f-b573-f874c72c0c79
(: returns the encryption key ID:)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-encryption-at-rest" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the encryption at rest setting for the database identified by database-id
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="database-id" type="xs:unsignedLong">
  The ID of the database.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $dbid := xdmp:database("Documents")
return xdmp:database-encryption-at-rest($dbid)
==&gt; on
(: returns the encryption at rest setting :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseEncryptionAtRest(xdmp.database("Documents"));
==&gt; on
(: returns the encryption at rest setting :)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="mimetypes" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  This function returns all the mimetypes specifications of the cluster.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return class="xquery">element(mt:mimetype)*</apidoc:return>
    <apidoc:return class="javascript">Array</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:mimetypes()
(: returns the mimetypes specifications for the cluster :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.mimetypes()
// returns the mimetypes specifications for the cluster
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="server-name" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the name of the App Server, XDBC Server, ODBC Server, or Task Server
  with the given ID.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-name(845637403676198)
=&gt; "Docs"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.serverName(845637403676198);
=&gt; "Docs"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="server-kind" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the kind of the App Server, XDBC Server, ODBC Server, or Task Server
  with the given ID.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-kind(845637403676198)
=&gt; "http-server"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.serverKind(845637403676198);
=&gt; "http-server"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="server-group" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the ID of the group for an App Server, XDBC Server, ODBC Server, 
  or Task Server.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-group(845637403676198)
=&gt; 9876543212344
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.serverGroup(845637403676198);
=&gt; "987654321234"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="server-port" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the port of the App Server, XDBC Server, ODBC Server, or Task Server
  with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-port(845637403676198)
=&gt; 8080
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-ssl-certificate-template" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the SSL certificate template ID of the App Server, XDBC Server, 
  ODBC Server, or Task Server with the given ID.
  If none, return 0.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-ssl-certificate-template(845637403676198)
=&gt; 987654345654321
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the database ID of the App Server, XDBC Server, ODBC Server, or 
  Task Server with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-database(845637403676198)
=&gt; 12345678901234
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-modules-database" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the modules database ID of the App Server, XDBC Server, ODBC Server, 
  or Task Server with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-modules-database(845637403676198)
=&gt; 12345678901234
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-collation" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the default collation of the App Server, XDBC Server, ODBC Server, 
  or Task Server with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-collation(845637403676198)
=&gt; "http://marklogic.com/collation/"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-coordinate-system" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the default coordinate system of the App Server, XDBC Server, ODBC Server,
  or Task Server with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-coordinate-system(69149624358175859)
=&gt; "wgs84"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-root" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the root of the App Server, XDBC Server, ODBC Server, 
  or Task Server with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-root(845637403676198)
=&gt; "Docs"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="server-default-xquery-version" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the default xquery version of the App Server, XDBC Server, 
  ODBC Server, or Task Server with the given ID.
  For a Task Server, return the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    An App Server, XDBC Server, ODBC Server, or Task Server ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server-default-xquery-version(845637403676198)
=&gt; "1.0-ml"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="forest-name" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the name of the forest with the given ID.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-name(8456374036761185098)
=&gt; "Documents"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestName(8456374036761185098);
=&gt; "Documents"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-host" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the host of the forest with the given id.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-host(xdmp:forest("Documents"))
=&gt; 628308917998312873
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestHost(xdmp.forest("Documents"));
=&gt; 628308917998312873
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="forest-failover-info" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return a sequence of pair of the forest IDs and host IDs for the failover forests and hosts
  of the given forest.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-failover-info(xdmp:forest("Documents"))
=&gt; (628308917998312873,12928854608961648882)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestFailoverInfo(xdmp.forest("Documents"));
=&gt; (628308917998312873,12928854608961648882)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="databases" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all the databases in the system.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:databases()
 =&gt; (14389140626518478220,
     8456374036761185098,
    10615125154705099114)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databases();
 =&gt; A Sequence with the IDs of the databases, for example:
    14389140626518478220
    8456374036761185098
    10615125154705099114
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forests" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all the forests in the system.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forests()
=&gt; 18263538320779601865
   2760886727871312968
   1551965607977434000
   2714941248661564752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forests();
=&gt; A Sequence with the IDs of all the forests, for example:
   18263538320779601865
   2760886727871312968
   1551965607977434000
   2714941248661564752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-databases" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the database ID corresponding to the database to which
  the specified forest belongs, or empty sequence if the forest 
  belongs to no database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-databases(xdmp:forest("Documents"))
=&gt; 2032458498523149048
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestDatabases(xdmp.forest("Documents"));
=&gt; 2032458498523149048
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-get" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the document in the file specified by $location.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="location" type="xs:string" optional="false">
    The location of the input document.  If the scheme of the location is
    HTTP (that is, if the string starts with "http://"), then the document is
    requested over HTTP. If the scheme is file (that is, if the string starts
    with "file://"), then the document is requested over file protocol from
    the local filesystem.
     Otherwise, the document is fetched from the local
    filesystem. On the filesystem, the path can be fully qualifed or relative.
    Relative pathnames are resolved from the directory in which
    MarkLogic Server is installed.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:document-get" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, as well as options from
    <a class="xquery" href="#xdmp:httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp:httpGet</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a> when
    retrieving content via an HTTP request. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">Options
    from <code>xdmp:http-get</code> must be in the <code>xdmp:http</code>
    namespace.</span>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt class="xquery"><p>&lt;default-namespace&gt;</p></dt>
    <dt class="javascript"><p>defaultNamespace</p></dt>
    <dd>The namespace to use if there is no namespace at the root node of
    the document. The default value is "".</dd>
    <dt class="xquery"><p>&lt;repair&gt;</p></dt>
    <dt class="javascript"><p>repair</p></dt>
    <dd>A value of <code>full</code> specifies that malformed XML content be
        repaired.  A value of <code>none</code> specifies that malformed
        XML content is rejected.
        <p class="xquery">If no repair option is explicitly specified, the default
        is implicitly specified by the XQuery version of the caller.
        In XQuery <code>1.0</code> and <code>1.0-ml</code> the default
        is <code>none</code>.  In XQuery <code>0.9-ml</code> the
        default is <code>full</code>.</p>
        <p class="javascript">If no repair option is explicitly specified, the default
        is <code>none</code>.</p>
        This option has no effect on binary, text or JSON documents.</dd>
    <dt class="xquery"><p>&lt;format&gt;</p></dt>
    <dt class="javascript"><p>format</p></dt>
    <dd>A value of <code>text</code> specifies to get the document as a
        text document, regardless of the URI specified. A value of
        <code>binary</code> specifies to get the document as a binary
        document, regardless of the URI specified. A value of <code>xml</code>
        specifies to get the document as an XML document, regardless of the
        URI specified. A value of <code>json</code> specifies to get the document
        as a JSON document, regardless of the URI specified.</dd>
    <dt class="xquery"><p>&lt;default-language&gt;</p></dt>
    <dt class="javascript"><p>defaultLanguage</p></dt>
    <dd>The language to specify in an <code>xml:lang</code> attribute on the
    root element node if the root element node does not already have an
    <code>xml:lang</code> attribute. This option applies only to XML documents.
    If this option is not specified, then nothing is added to the root element node.</dd>
    <dt class="xquery"><p>&lt;encoding&gt;</p></dt>
    <dt class="javascript"><p>encoding</p></dt>
    <dd>Specifies the encoding to use when reading the document into MarkLogic
    Server. The value must either be "auto" or match an encoding name 
    according to the Unicode Charset Alias Matching rules
    (<a href="http://www.unicode.org/reports/tr22/#Charset_Alias_Matching">http://www.unicode.org/reports/tr22/#Charset_Alias_Matching</a>).
    When the value is "auto", MarkLogic guesses the encoding from
    the document content. For a list of character set encodings by language, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340354'>Collations and Character Sets By Language</a> in the <em>Search Developer's Guide</em>. 
    If you do not set this option, MarkLogic uses the encoding
    specified in the HTTP headers, if present. If you do not set this option
    and no encoding is available from HTTP headers, the encoding
    defaults to UTF-8. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2387576'>Character Encoding</a> in the <em>Search Developer's Guide</em>.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If no format is specified in $options, and the document is from
  an HTTP server, the format is specified by the document content type
  from the HTTP response.
  If no format is specified in $options, and the document is from
  the filesystem, the format is specified by the document content type
  from the filename extension.
  The mimetype extensions and corresponding content types are set in the
  Admin Interface.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">When the document is from an HTTP server,
  <code class="xquery">xdmp:document-get</code>
  <code class="javascript">xdmp.documentGet</code> will always return the response
  from the HTTP server, even if it is an error response such as 404 or 500.  If you
  want to be able to examine the response header in your application, use
  the <a class="xquery" href="#xdmp:http-get"><code>xdmp:http-get</code></a>
  <a class="javascript" href="#xdmp.httpGet"><code>xdmp.httpGet</code></a> instead,
  which returns both the response header and the response.</p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-document-get</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-get("myDocument.xml")
  =&gt; the xml contained in myDocument.xml,
        for example, &lt;myDocument/&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.documentGet("myDocument.json")
  =&gt; A Sequence containg the JSON document 
        in myDocument.json, for example, {"foo" : "bar"};
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-get("myDocument.html",
       &lt;options xmlns="xdmp:document-get"&gt;
           &lt;repair&gt;full&lt;/repair&gt;
       &lt;/options&gt;)
  =&gt; myDocument.html as an XML document that has gone
     through any needed tag repair
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-get("http://myCompany.com/file.xml",
       &lt;options xmlns="xdmp:document-get"
                xmlns:http="xdmp:http"&gt;
           &lt;format&gt;xml&lt;/format&gt;
           &lt;http:authentication&gt;
              &lt;http:username&gt;user&lt;/http:username&gt;
              &lt;http:password&gt;pass&lt;/http:password&gt;
           &lt;/http:authentication&gt;
       &lt;/options&gt;)
  =&gt; gets an XML document named file.xml, sending the
     authentication credentials user/pass to the
     http://myCompany.com server

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  fn.head(xdmp.documentGet("http://myCompany.com/file.json",
       {
         "format" : "json",
         "authentication" : {
           "username" : "user",
           "password" : "pass"
         }
       })).root;
  =&gt; gets a JSON document named file.json, sending the
     authentication credentials user/pass to the
     http://myCompany.com server.  Note the fn.head 
     gets you to the first item in the Sequence, and the 
     .root gets you past the document node into the json object.

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server" class="xquery">
    <apidoc:summary>
  [DEPRECATED: use
  <a href="#xdmp:document-get" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:document-get</code></a> instead]
  Returns the document in the XML file specified by $path.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is deprecated and will be removed from a future release.
  Use <a href="#xdmp:document-get"><code>xdmp:document-get</code></a>
  instead.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The path to the input file.  The path can be fully qualifed or relative.
    Relative pathnames are resolved from the directory in which MarkLogic
    Server is installed.
  </apidoc:param>
      <apidoc:param name="default-namespace" type="xs:string?" optional="true">
    Default namespace for nodes in the first parameter. If $default-namespace is
    specified and the root node of the loaded document does not explicitly
    specify a namespace, $default-namespace will be applied to the root node.
    The default value for $default-namespace is "".
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    The options for getting this document.
    The default value is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>"repair-full"</dt>
    <dd>Specifies that malformed XML content be repaired.
        This option has no effect on binary or text documents.</dd>
    <dt>"repair-none"</dt>
    <dd>Specifies that malformed XML content be rejected.
        This option has no effect on binary or text documents.</dd>
    <dt>"format-text"</dt>
    <dd>Specifies to get the document as a text document,
        regardless of the URI specified.</dd>
    <dt>"format-binary"</dt>
    <dd>Specifies to get the document as a binary document,
        regardless of the URI specified.</dd>
    <dt>"format-xml"</dt>
    <dd>Specifies to get the document as an XML document,
        regardless of the URI specified.</dd>
    <dt>"format-json"</dt>
    <dd>Specifies to get the document as a JSON document,
        regardless of the URI specified.</dd>
    <dt>"lang=en"</dt>
    <dd>Specifies that the document is in english.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()?</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If no format is specified in $options, it is specified by the
  document content type specified by the extension of the document URI.
  The mimetype extensions and corresponding content types are set in the
  Admin Interface.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If neither "repair-full" nor "repair-none" is present,
  the default is specified by the XQuery version of the caller.
  In XQuery version <code>1.0</code> and <code>1.0-ml</code> the default is
  "repair-none".  In XQuery version <code>0.9-ml</code> the default is
  "repair-full".</p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:get("foo.xml")
  =&gt; &lt;foo/&gt;
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:get("foo.html", "", ("repair-full", "format-xml"))
  =&gt; foo.html as an XML document that has gone through any
        needed tag repair
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="directory" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns the documents from the database in a directory.  Note that these are
  database documents, not from the filesystem; if you want documents from a 
  filesystem directory, use <a href="#xdmp:filesystem-directory" class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:filesystem-directory</a><a href="#xdmp.filesystemDirectory" class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.filesystemDirectory</a> instead.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*">
    The URI of the directory.  Typically, directory URIs end with a forward
    slash (/).
  </apidoc:param>
      <apidoc:param name="depth" type="xs:string?" optional="true">
    "1" for immediate children, "infinity" for all.
    If not supplied, depth is "1".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
for $d in xdmp:directory("http://example.com/foo/","1")
return xdmp:node-uri($d)
  =&gt; http://example.com/foo/bar.xml
     http://example.com/foo/baz.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
for (var d of xdmp.directory("http://example.com/foo/","1")) {
 xdmp.nodeUri(d);
};
  =&gt; http://example.com/foo/bar.xml
     http://example.com/foo/baz.xml
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="directory-properties" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns a sequence of properties documents, one for each document in
  the specified directory that has a corresponding properties document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*">
    The URI of the directory.  Typically, directory URIs end with a forward
    slash (/).
  </apidoc:param>
      <apidoc:param name="depth" type="xs:string?" optional="true">
    "1" for immediate children, "infinity" for all children.
    If not supplied, depth is "1".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:directory-properties("http://example.com/dir/","1")
=&gt; &lt;prop:properties
            xmlns:prop="http://marklogic.com/xdmp/property"&gt;
         &lt;prop:directory/&gt;
     &lt;/prop:properties&gt;

   The properties document returned has one directory element, indicating
   that there is a single directory that is an immediate child of the
   specified directory.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.directoryProperties("http://example.com/dir/","1");
=&gt; &lt;prop:properties
            xmlns:prop="http://marklogic.com/xdmp/property"&gt;
         &lt;prop:directory/&gt;
     &lt;/prop:properties&gt;

   The properties document returned has one directory element, indicating
   that there is a single directory that is an immediate child of the
   specified directory.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="collection-properties" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns a sequence of properties documents, one for each document in the
  specified collection(s) that has a corresponding properties document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*" optional="true">
    The URI(s) of the collection(s).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xquery version "1.0-ml";
  declare namespace cpf="http://marklogic.com/cpf";

  for $d in xdmp:collection-properties(
                   ("http://example.com/col1/",
                    "http://example.com/col2/"))
  where $d/property::cpf:error
  return xdmp:node-uri($d)

  =&gt; A list of document URIs of documents that have a
     cpf:error property in their corresponding properties
     documents.  For example:

     http://example.com/bar.xml http://example.com/baz.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
for (var d of xdmp.collectionProperties(
                   ["http://example.com/col1/",
                    "http://example.com/col2/"])) {
  if ( d.root.xpath("/property::cpf:error",
                    {"cpf": "http://marklogic.com/cpf"}) ) {
    xdmp.nodeUri(d);
  };
};

  =&gt; A list of document URIs of documents that have a
     cpf:error property in their corresponding properties
     documents.  For example:

     http://example.com/bar.xml http://example.com/baz.xml
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="directory-locks" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns locks of documents in a directory.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*">
    The URI of the directory.  Typically, directory URIs end with a forward
    slash (/).
  </apidoc:param>
      <apidoc:param name="depth" type="xs:string?" optional="true">
    "1" for immediate children, "infinity" for all.
    If not supplied, depth is "1".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  for $d in xdmp:directory-locks("http://example.com/foo/","1")
  return xdmp:node-uri($d)
  =&gt; http://example.com/foo/bar.xml
     http://example.com/foo/baz.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
for (var d in xdmp.directoryLocks("http://example.com/foo/","1")) {
  if (d.value) {
    xdmp.nodeUri(d);
  };
}
  =&gt; http://example.com/foo/bar.xml
     http://example.com/foo/baz.xml
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="collection-locks" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns locks of documents in a collection.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*" optional="true">
    The input URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  for $d in xdmp:collection-locks(
                     ("http://example.com/col1/",
                      "http://example.com/col2/"))
  return xdmp:node-uri($d)
  =&gt; http://example.com/bar.xml
     http://example.com/baz.xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
for (var d of xdmp.collectionLocks(
                     ["http://example.com/col1/",
                      "http://example.com/col2/"]) ) {
 if (d.value) {
 xdmp.nodeUri(d); }
};
  =&gt; http://example.com/bar.xml
     http://example.com/baz.xml
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="uri-content-type" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the content type of the given URI as matched in the mimetypes
  configuration. xdmp:content-type continues to work too.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:uri-content-type("example.txt")
  =&gt; text/plain
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:uri-content-type("example.xml")
  =&gt; application/xml
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:uri-content-type("example.doc")
  =&gt; application/msword
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.uriContentType("example.txt");
  =&gt; text/plain
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.uriContentType("example.xml");
  =&gt; application/xml
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.uriContentType("example.doc");
  =&gt; application/msword
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="uri-format" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the format of the given URI as matched in the mimetypes
  configuration.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:uri-format("example.txt")
  =&gt; text
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.uriFormat("example.txt");
  =&gt; text
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:uri-format("example.xml")
  =&gt; xml
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:uri-format("example.json")
  =&gt; json
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.uriFormat("example.json");
  =&gt; json
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.uriFormat("example.xml");
  =&gt; xml
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-get-properties" type="builtin" lib="xdmp" category="Extension" subcategory="Documents, Directories, Properties, and Locks">
    <apidoc:summary>
  Returns the property values for a document's property.  Throws
  XDMP-DOCNOTFOUND if there is no document at the specifed URI.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="property" type="xs:QName">
    The property name. This is the QName of the top-level property element
    in the specified properties document.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-get-properties(
         "http://example.com/foo.xml",
         fn:QName("http://examples.com/","priority"))
   =&gt; &lt;priority xmlns="http://examples.com/"&gt;5&lt;/priority&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.documentGetProperties(
         "http://example.com/foo.xml",
         fn.QName("http://examples.com/","priority"))
   =&gt; &lt;priority xmlns="http://examples.com/"&gt;5&lt;/priority&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="access" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns whether a given action on the specified document URI would succeed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="action" type="xs:string">
    The type of access: "create", "insert", "update", "node-update" or "execute".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:access(
         "http://example.com/foo.xml",
         "create")
   =&gt; true()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.access(
         "http://example.com/foo.xml",
         "create");
   =&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="http-get" type="builtin" lib="xdmp" category="Extension" subcategory="HTTP">
    <apidoc:summary>
  Sends the http GET method to the specified URI. Returns the http response
  as well as whatever information is identified by the specified URI
  (for example, an html document).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="false">
   The URI of the requested document.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:http" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus certain options from the
    <a class="xquery" href="#xdmp:document-load" xmlns="http://www.w3.org/1999/xhtml">xdmp:document-load</a>
    <a class="javascript" href="#xdmp.documentLoad" xmlns="http://www.w3.org/1999/xhtml">xdmp.documentLoad</a>
    and
    <a class="xquery" href="#xdmp:document-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:document-get</a>
    <a class="javascript" href="#xdmp.documentGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.documentGet</a>
    functions. For example, you can use the <code xmlns="http://www.w3.org/1999/xhtml">repair</code> and
    <code xmlns="http://www.w3.org/1999/xhtml">encoding</code> options from these functions.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">When including an option from another
    function in an XML options node, use the namespace appropriate to
    that function in the option element.</span>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt class="xquery"><p>&lt;headers&gt;</p></dt>
    <dt class="javascript"><p>headers</p></dt>
    <dd class="xquery">A sequence of &lt;name&gt;value&lt;/name&gt; pairs. The
    names can be anything, but many HTTP servers understand HTTP names such as
    <code>content-type</code>. These are turned into name:value HTTP
    headers. An error is raised if the child elements of the
    &lt;headers&gt; option are not of the form
    &lt;name&gt;value&lt;/name&gt;.</dd>
    <dd class="javascript">An object with each of its properties representing 
    one HTTP header. The name of the property is the header's name and the value
    of the property is the header's value.  The names can be anything, but
    many HTTP servers understand HTTP names such as
    <code>content-type</code>.</dd>
    <dt class="xquery"><p>&lt;credential-id&gt;</p></dt>
    <dt class="javascript"><p>credentialId</p></dt>
    <dd>The credential id to use for authentication. This is 
     the preferred way of providing authentication credentials because they
     are stored securely in the security database. When a credential id is
     specified, the other authentication information fields should be left
     empty and will be ignored. For details on obtaining a credential id,
     see the Usage Notes, below.</dd>
    <dt class="xquery"><p>&lt;authentication&gt;</p></dt>
    <dt class="javascript"><p>authentication</p></dt>
    <dd class="xquery">The credentials and the authentication method to use
    for this request. This element can contain the following child elements:
    <ul>
		<li><code>username</code>: The username of the user to be authenticated 
        on the http server</li>
		<li><code>password</code>: The password for <code>username</code>.</li>
	      </ul>
    The authentication element can also include an optional 
    <code>method</code> attribute with one of the following values: 
    <code>basic</code>, <code>digest</code>, <code>aws</code>, <code>aws4</code>,
    <code>negotiate</code>.
    If the authentication method is specified and the HTTP server requests 
    a different type of authentication, then an error is raised.</dd>
    <dd class="javascript">The credentials and the authentication method to use
    for this request. This property can contain the following child properties:
    <ul>
		<li><code>username</code>: The username of the user to be authenticated 
        on the http server</li>
		<li><code>password</code>: The password for <code>username</code>.</li>
		<li><code>method</code>: Optional. The authentication method. Allowed
        values: <code>basic</code>, <code>digest</code>, <code>aws</code>,
        <code>aws4</code>. If a method is specified and the HTTP server 
        requests a different type of authentication, then an error is 
        raised.</li>
	      </ul></dd>
    <dt class="xquery"><p>&lt;timeout&gt;</p></dt>
    <dt class="javascript"><p>timeout</p></dt>
    <dd>The amount of time, in seconds, to wait until the HTTP connection
    times out. The default value is the <code>http timeout</code> for the
    group.</dd>
    <dt class="xquery"><p>&lt;ciphers&gt;</p></dt>
    <dt class="javascript"><p>ciphers</p></dt>
    <dd>A standard cipher string. For details on legal ciper strings, see
    <a href="http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS</a>.
    </dd>
    <dt class="xquery"><p>&lt;client-cert&gt;</p></dt>
    <dt class="javascript"><p>client-cert</p></dt>
    <dd>A PEM encoded client certificate for identifying the client to
    the remote server.</dd>
    <dt class="xquery"><p>&lt;client-key&gt;</p></dt>
    <dt class="javascript"><p>clientKey</p></dt>
    <dd>The private key that corresponds to
    <code class="xquery">client-cert</code><code class="javascript">clientCert</code>.</dd>
    <dt class="xquery"><p>&lt;pass-phrase&gt;</p></dt>
    <dt class="javascript"><p>passPhrase</p></dt>
    <dd>A pass phrase, if one is needed to decrypt client-key.</dd>
    <dt class="xquery"><p>&lt;allow-sslv3&gt;</p></dt>
    <dt class="javascript"><p>allowSslv3</p></dt>
    <dd>A boolean value to specify whether to communicate using the SSL
     v3 protocol.
     The default is <code>true</code>, which indicates communication using the
     SSL v3 protocol.</dd>
    <dt class="xquery"><p>&lt;allow-tls&gt;</p></dt>
    <dt class="javascript"><p>allowTls</p></dt>
    <dd>A boolean value to specify whether to communicate using the TLS
     protocol.
     The default is <code>true</code>, which indicates communication using the
     TLS protocol.</dd>
    <dt class="xquery"><p>&lt;verify-cert&gt;</p></dt>
    <dt class="javascript"><p>verifyCert</p></dt>
    <dd>A boolean value to specify whether the server's certificate should be
    verified. The default value is <code>true</code>. A value of
    <code>false</code>
    should only be specfied after careful consideration of the security
    risks since it
    permits communication with servers whose certificates are expired, revoked,
    or signed by unknown or untrusted authorities. A value of <code>false</code>
    also removes protection against a man-in-the-middle attack.</dd>
    <dt class="xquery"><p>&lt;ssl-session-cache&gt;</p></dt>
    <dt class="javascript"><p>sslSessionCache</p></dt>
    <dd>A boolean value to specify whether ssl session should be cached and
    reused. The default value is <code>true</code>. A value of
    <code>false</code>
    should only be specfied if ssl session cache causes problem with
    a url.</dd>
    </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()+</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The http functions only operate on URIs that use the http or https
   schemes; specifying a URI that does not begin with <code>http://</code>
   or <code>https://</code> throws an exception.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If an http function times out, it throws a socket received
   exception (SVC-SOCRECV).</p>
   <p xmlns="http://www.w3.org/1999/xhtml">An automatic encoding detector will be used if the value <code>auto</code>
   is specified for the <code>encoding</code> option
   <span class="xquery">(in the <code>xdmp:document-get</code>
   namespace)</span>.  If no option is specified, the encoding defaults to
   the encoding specified
   in the http header. If there is no encoding in the http header, the encoding
   defaults to UTF-8.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">The first node in the output of this function is the
   response header from the http server.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">The second node in the output of this function is the
   response from the http server.  The response is treated as
   text, XML, JSON or binary, depending on the content-type header sent from
   the http server.  If the node is html, the header should indicate
   <code>text/html</code>, which is returned as a text document by default.
   The type of document is determined by the mimetypes mappings, and
   you can change the mappings in the Admin Interface as needed.
   <p class="xquery">If you happen to know that the response is XML, even
   if the header
   does not specify it as XML, and want to process the response as XML,
   you can wrap the response in an <code>xdmp:unquote</code> call to
   parse the response as XML.  You could also use the
   <code>&lt;format&gt;xml&lt;/format&gt;</code> option (in the
   <code>xdmp:document-get</code> namespace) to tell the API to treat the
   document as XML.  Also, if you know the response is an HTML document,
   you can wrap the response in an <code>xdmp:tidy</code> call, which
   will treat the text as HTML, clean it up, and return an XHTML XML
   document.</p></p>
   <p class="xquery" xmlns="http://www.w3.org/1999/xhtml">Note that for "options", you can pass it in also as a
   map:map.  Each map entry represents one option and the naming convention
   of the options is
   the same as the one used when calling the function from JavaScript.</p>
   <p class="xquery" xmlns="http://www.w3.org/1999/xhtml">
   To use this function with a proxy, you need to translate the URI to the
   proxy uri. For example:
   <pre xml:space="preserve">
declare function local:http-get-proxy($proxy, $uri) {
let $host := fn:tokenize($uri,'/')[3]
(: you might need to modify the next line based on your proxy server config :)
let $proxyuri := fn:concat($proxy,$uri)
return
xdmp:http-get($proxyuri,
  &lt;options xmlns="xdmp:http"&gt;
    &lt;headers&gt;
      &lt;Host&gt;{$host}&lt;/Host&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)
};
  
local:http-get-proxy('http://some.proxy.com:8080','http://www.google.com')
   </pre>
   </p>
    <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">
   To use this function with a proxy, you need to translate the URI to the
   proxy uri. For example:
   <pre xml:space="preserve">
function httpGetProxy(proxy, uri) {
var host = fn.subsequence(fn.tokenize(uri,'/'), 3, 3);
// you might need to modify the next line based on your proxy server config 
var proxyuri = fn.concat(proxy, uri);
return xdmp.httpGet(proxyuri,
               {headers:{host: host}});
};
  
httpGetProxy('http://some.proxy.com:8080','http://www.google.com');
   </pre>
   </p>
   <p class="xquery" xmlns="http://www.w3.org/1999/xhtml">
    If you use the <code>credential-id</code> option, you can use
    <a href="#xdmp:credential-id">xdmp:credential-id</a> to obtain
    the id of a previously stored credential. For example:
   <pre xml:space="preserve">
     xdmp:http-get($someuri
       &lt;options xmlns="xdmp:http"&gt;
         &lt;credential-id&gt;{xdmp:credential-id("my-credential-name)}&lt;/credential-id&gt;
       &lt;/options&gt;)
   </pre>
   </p>
   <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">
    If you use the <code class="javascript">credentialId</code> option,
    you can use <a href="#xdmp.credentialId">xdmp.credentialId</a>
    to obtain the id of a previously stored credential. For example:
   <pre xml:space="preserve">
     xdmp.httpGet(
       someuri,
       { credentialId: xdmp.credentialId('myCredentialName') })
   </pre>
   </p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-http-get</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:http-get("http://www.my.com/document.xhtml",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="basic"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
     &lt;/options&gt;)
=&gt; the response from the server as well as the specified document


</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.httpGet("http://www.my.com/document.xhtml",
     {
       "authentication": {
         "method" : "basic",
         "username" : "myname",
         "password" : "mypassword"
       }
     })
=&gt; the response from the server as well as the specified document


</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:http-get("http://www.my.com/iso8859document.html",
     &lt;options xmlns="xdmp:document-get"&gt;
       &lt;encoding&gt;iso-8859-1&lt;/encoding&gt;
     &lt;/options&gt;)[2]
=&gt; The specified document, transcoded from ISO-8859-1
   to UTF-8 encoding.  This assumes the document is
   encoded in ISO-8859-1. Note that the encoding option
   is in the "xdmp:document-get" namespace.

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.subsequence(
  xdmp.httpGet("http://www.marklogic.com",
     {
       "encoding" : "iso-8859-1"
     }), 2, 1)
=&gt; The specified document, transcoded from ISO-8859-1
   to UTF-8 encoding.  This assumes the document is
   encoded in ISO-8859-1.

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:unquote(
  xdmp:http-get("http://www.my.com/somexml.xml")[2])
=&gt; The specified xml document, parsed as XML by
   xdmp:unquote.  If the header specifies a
   mimetype that is configured to be treated as
   XML, the xdmp:unquote call is not needed.
   Alternately, you can treat the response as XML
   by specifying XML in the options node as
   follows (note that the format option is in
   the "xdmp:document-get" namespace:

xdmp:http-get("http://www.my.com/somexml.xml",
        &lt;options xmlns="xdmp:http-get"&gt;
           &lt;format xmlns="xdmp:document-get"&gt;xml&lt;/format&gt;
        &lt;/options&gt;)[2]

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:tidy(
  xdmp:http-get("http://www.my.com/somehtml.html")[2])[2]
=&gt; The specified html document, cleaned and transformed
   to xhtml by xdmp:tidy.  The second node of the tidy
   output is the xhtml node (the first node is the status).
   You could then perform XPath on the output to return
   portions of the document. Note that the document (and
   all of its elements) will be in the XHTML namespace, so
   you need to specify the namespace in the XPath steps.
   For example:

xquery version "1.0-ml";
declare namespace xh="http://www.w3.org/1999/xhtml";

xdmp:tidy(
  xdmp:http-get("http://www.my.com/somehtml.html")[2])[2]//xh:title

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="http-head" type="builtin" lib="xdmp" category="Extension" subcategory="HTTP">
    <apidoc:summary>
  Sends the http HEAD method to the specified URI. Returns the http response
  header for the specified URI.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="false">
   The URI of the document whose response header is being requested.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:http" namespace, or as a <code>map:map</code>.</span>
    For details on the supported options, see 
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a><a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()+</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The http functions only operate on URIs that use the http or https
   schemes; specifying a URI that does not begin with <code>http://</code>
   or <code>https://</code> throws an exception.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If an http function times out, it throws a socket received
   exception (SVC-SOCRECV).</p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-http-head</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:http-head("http://www.my.com/document.xhtml",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="basic"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
     &lt;/options&gt;)
=&gt; the response header from the server

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.httpHead("http://www.my.com/document.xhtml",
     {
       "authentication" : {
         "method" : "basic",
         "username" : "myname",
         "password" : "mypassword"
       }
     })
=&gt; the response header from the server


</pre></apidoc:example>
  </apidoc:function><apidoc:function name="http-options" type="builtin" lib="xdmp" category="Extension" subcategory="HTTP">
    <apidoc:summary>
  Sends the http OPTIONS method to the specified URI. Returns the http response
  for the specified URI.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="false">
   The URI of the document whose options response is being requested.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:http" namespace, or as a <code>map:map</code>.</span>
    For details on the supported options, see 
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a><a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()+</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The http functions only operate on URIs that use the http or https
   schemes; specifying a URI that does not begin with <code>http://</code>
   or <code>https://</code> throws an exception.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If an http function times out, it throws a socket received
   exception (SVC-SOCRECV).</p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-http-options</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:http-options("http://localhost:8000/",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="digest"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
     &lt;/options&gt;)
=&gt; the response from the HTTP server, for example:

&lt;response xmlns="xdmp:http"&gt;
  &lt;code&gt;302&lt;/code&gt;
  &lt;message&gt;Found&lt;/message&gt;
  &lt;headers&gt;
    &lt;location&gt;/use-cases/&lt;/location&gt;
    &lt;server&gt;MarkLogic&lt;/server&gt;
    &lt;content-length&gt;0&lt;/content-length&gt;
    &lt;connection&gt;close&lt;/connection&gt;
  &lt;/headers&gt;
&lt;/response&gt;



</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.httpOptions("http://localhost:8000/",
     {
       "authentication" : {
         "method" : "digest",
         "username" : "myname",
         "password" : "mypassword"
       }
     })
=&gt; the response from the HTTP server, for example:

&lt;response xmlns="xdmp:http"&gt;
  &lt;code&gt;302&lt;/code&gt;
  &lt;message&gt;Found&lt;/message&gt;
  &lt;headers&gt;
    &lt;location&gt;/use-cases/&lt;/location&gt;
    &lt;server&gt;MarkLogic&lt;/server&gt;
    &lt;content-length&gt;0&lt;/content-length&gt;
    &lt;connection&gt;close&lt;/connection&gt;
  &lt;/headers&gt;
&lt;/response&gt;



</pre></apidoc:example>
  </apidoc:function><apidoc:function name="http-delete" type="builtin" lib="xdmp" category="Extension" subcategory="HTTP">
    <apidoc:summary>
  Sends an http DELETE request to the http server specified in the URI
  to delete the specified resource. The server should respond if the
  request is to be completed, but a response is not guaranteed.
  Also, even if the server does respond, it
  does not guarantee that the request has been or will be completed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="false">
    The URI of the document to delete.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:http" namespace, or as a <code>map:map</code>.</span>
    For details on the supported options, see 
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a><a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()+</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The http functions only operate on URIs that use the http or https
   schemes; specifying a URI that does not begin with <code>http://</code>
   or <code>https://</code> throws an exception.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If an http function times out, it throws a socket received
   exception (SVC-SOCRECV).</p>
   <p class="xquery" xmlns="http://www.w3.org/1999/xhtml">Note the <code>xdmp:http-delete</code> function simply
   sends a DELETE request to the specified web server; what happens with the
   DELETE request depends on the web server.  The request does not delete a
   document from a MarkLogic Server database. To delete a document
   from a database, use the
   <a href="#xdmp:document-delete">
   <code>xdmp:document-delete</code></a>
   function.</p>
   <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">Note the <code>xdmp.httpDelete</code> function simply
   sends a DELETE request to the specified web server; what happens with the
   DELETE request depends on the web server.  The request does not delete a
   document from a MarkLogic Server database. To delete a document
   from a database, use the
   <a href="#xdmp.documentDelete">
   <code>xdmp.documentDelete</code></a>
   function.</p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-http-delete</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:http-delete("http://www.my.com/document.xhtml",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="basic"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
     &lt;/options&gt;)
=&gt; an optional response from the server


</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.httpDelete("http://www.my.com/document.xhtml",
     {
       "authentication" : {
         "method" : "basic",
         "username" : "myname",
         "password" : "mypassword"
       }
     })
=&gt; an optional response from the server


</pre></apidoc:example>
  </apidoc:function><apidoc:function name="http-post" type="builtin" lib="xdmp" category="Extension" subcategory="HTTP">
    <apidoc:summary>
  Sends an http POST request to the server.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="false">
  The URI to which the data is to be posted.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:http" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>
    function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt class="xquery"><p>&lt;data&gt;</p></dt>
    <dt class="javascript"><p>data</p></dt>
    <dd>This option can contain any string. Anything in the <code>data</code>
    option is sent as a string in the PUT or POST body. When POSTing to a web
    service, the data may need to be a SOAP XML structure, a JSON structure,
    or binary content.
    The optional third argument can be used to specify the body instead.
    </dd>
    <dt><p>The other options are the same as the other
    <code class="xquery">xdmp:http-*</code><code class="javascript">xdmp.http*</code>
    functions, and the options are documented with the
    <a class="xquery" href="#xdmp:http-get"><code>xdmp:http-get</code></a>
    <a class="javascript" href="#xdmp.httpGet"><code>xdmp.httpGet</code></a>
    $options parameter.</p></dt>
    </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="data" type="node()?" optional="true">
    The data for this request. This is an alternative to the
    <code xmlns="http://www.w3.org/1999/xhtml">data</code> option for the second parameter that allows binary
    content to be specified for the body of the POST.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()+</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The http functions only operate on URIs that use the http or https
   schemes; specifying a URI that does not begin with <code>http://</code>
   or <code>https://</code> throws an exception.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If an http function times out, it throws a socket received
   exception (SVC-SOCRECV).</p>
   <p xmlns="http://www.w3.org/1999/xhtml">The function returns a sequence containing the request response.
   If the reponse is multi-part, then the sequence contains multiple items.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If you expect the request body from this http function to be
   processed by another application (via a web service, for example),
   you should specify a content-type header. If no content-type header is
   specified, the content type defaults to text/plain.</p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-http-post</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:http-post("http://www.my.com/document.xhtml",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="basic"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
     &lt;/options&gt;)
=&gt; the response from the server as well as the specified document

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.httpPost("http://www.my.com/document.xhtml",
     {
       "authentication" : {
         "method" : "basic",
         "username" : "myname",
         "password" : "mypassword"
       }
     });
=&gt; the response from the server as well as the specified document

</pre></apidoc:example>
    <apidoc:example class="xquery"><a id="http-data-payload" xmlns="http://www.w3.org/1999/xhtml"></a><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Use xdmp:quote to encode the XML as a string
   because the &lt;data&gt; options element is a string :)
let $payload := xdmp:quote(
&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
  xmlns:xsd='http://www.w3.org/2001/XMLSchema'
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
  xmlns:my='urn:MyConnection'&gt;
 &lt;SOAP-ENV:Body&gt;
   &lt;my:LogOn&gt;
     &lt;my:User&gt;user&lt;/my:User&gt;
     &lt;my:Password&gt;pass&lt;/my:Password&gt;
     &lt;my:Ticket&gt;abc123&lt;/my:Ticket&gt;
     &lt;my:newData&gt;1234&lt;/my:newData&gt;
   &lt;/my:LogOn&gt;
 &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
)
return
xdmp:http-post("http://www.my.com/document.xhtml",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="basic"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
       &lt;data&gt;{$payload}&lt;/data&gt;
       &lt;headers&gt;
         &lt;content-type&gt;application/xml&lt;/content-type&gt;
       &lt;/headers&gt;
     &lt;/options&gt;)
=&gt; the response from the server as well as the specified document

</pre></apidoc:example>
    <apidoc:example class="javascript"><a id="http-data-payload" xmlns="http://www.w3.org/1999/xhtml"></a><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  Use xdmp.quote to encode the JSON as a string
//  because the "data" option is a string 

var payload = xdmp.quote({"foo":"bar"})
xdmp.httpPost("http://www.my.com/document.xhtml",
     {
       "authentication" : {
          "method" : "basic",
          "username" : "myname",
          "password" : "mypassword"
       },
       "data" : payload,
       "headers" : {
         "content-type" : "application/xml"
       }
     });
=&gt; the response from the server as well as the specified document

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $payload := 
 '{ "user-name": "joe",
       "password": "cool"
       ,"role": [ "rest-reader" , "rest-writer" ]
  }' 
return
xdmp:http-post("http://localhost:8002/manage/v2/users?format=json",
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="digest"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
       &lt;data&gt;{$payload}&lt;/data&gt;
     &lt;/options&gt;)
=&gt; the response from the server, and in this example, the new user (joe) is 
   created

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var payload = xdmp.quote({"userName": "joe", "password": "cool" , 
	"role": [ "rest-reader" , "rest-writer" ] }); 
xdmp.httpPost("http://localhost:8002/manage/v2/users?format=json",
     {
       "authentication" : {
          "method" : "digest",
          "username" : "myname",
          "password" : "mypassword"
       },
       "data" : payload,
       "headers" : {
         "content-type" : "application/json"
       }
     })
=&gt; the response from the server, and in this example, the new user (joe) is 
   created

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="http-put" type="builtin" lib="xdmp" category="Extension" subcategory="HTTP">
    <apidoc:summary>
  Sends an HTTP PUT request to an HTTP server.
  The HTTP server should return a response, which will differ depending on
  the action the HTTP server takes for the PUT.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string" optional="false">
    The URI to which the data is to be put.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:http" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>
    function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
     <dt><p>data</p></dt>
    <dd>This option can contain any string. Anything in the <code>data</code>
    option is sent as a string in the PUT body. To put binary data in the
    request body, use the optional third parameter instead.</dd>
    </dl></blockquote>
    <p xmlns="http://www.w3.org/1999/xhtml">The other options are the same as the other
    <code class="xquery">xdmp:http-*</code><code class="javascript">xdmp.http*</code>
    functions, and the options are documented with the
    <a class="xquery" href="#xdmp:http-get"><code>xdmp:http-get</code></a>
    <a class="javascript" href="#xdmp.httpGet"><code>xdmp.httpGet</code></a>
    $options parameter.</p>
  </apidoc:param>
      <apidoc:param name="data" type="node()?" optional="true">
    Data to put in the request body. This is an alternative to the
    <code xmlns="http://www.w3.org/1999/xhtml">data</code> option for the second parameter that allows binary
    content to be specified for the body of the PUT.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()+</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The http functions only operate on URIs that use the http or https
   schemes; specifying a URI that does not begin with <code>http://</code>
   or <code>https://</code> throws an exception.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If an http function times out, it throws a socket received
   exception (SVC-SOCRECV).</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If you expect the request body from this http function to be
   processed by another application (via a web service, for example),
   you should specify a content-type header. If no content-type header is
   specified, the content type defaults to text/plain.</p>
</apidoc:usage>
    <apidoc:privilege>
   <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-http-put</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Send a PUT request to insert a document into the database
 : using the MarkLogic REST Client API /documents endpoint. The
 : PUT body contains serialized XML that becomes the content of
 : the new document. The data for the PUT body is passed as 
 : serialized XML in the options parameter.
 :)
xdmp:http-put("http://example.com:8000/v1/documents?uri=my.xml"
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="digest"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
       &lt;headers&gt;
         &lt;Content-type&gt;application/xml&lt;/Content-type&gt;
         &lt;Accept&gt;application/xml&lt;/Accept&gt;
       &lt;/headers&gt;
       &lt;data&gt;{
         xdmp:quote(&lt;mydata&gt;this is my content&lt;/mydata&gt;)
       }&lt;/data&gt;
     &lt;/options&gt;)

(: MarkLogic returns the response from the HTTP server. In this case,
 : a response similar to the following:
 :
 : &lt;response xmlns="xdmp:http"&gt;
 :   &lt;code&gt;204&lt;/code&gt;
 :   &lt;message&gt;Content Updated&lt;/message&gt;
 :   &lt;headers&gt;
 :     &lt;server&gt;MarkLogic&lt;/server&gt;
 :     &lt;content-length&gt;0&lt;/content-length&gt;
 :     &lt;connection&gt;Keep-Alive&lt;/connection&gt;
 :     &lt;keep-alive&gt;timeout=5&lt;/keep-alive&gt;
 :   &lt;/headers&gt;
 : &lt;/response&gt;
 :)

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Send a PUT request to insert a document into the database
 : using the MarkLogic REST Client API /documents endpoint. The
 : PUT body contains serialized XML that becomes the content of
 : the new document. The data for the PUT body is passed as 
 : an XML node in the 3rd parameter.
 :)
xdmp:http-put("http://example.com:8000/v1/documents?uri=my.xml"
     &lt;options xmlns="xdmp:http"&gt;
       &lt;authentication method="digest"&gt;
         &lt;username&gt;myname&lt;/username&gt;
         &lt;password&gt;mypassword&lt;/password&gt;
       &lt;/authentication&gt;
       &lt;headers&gt;
         &lt;Content-type&gt;application/xml&lt;/Content-type&gt;
         &lt;Accept&gt;application/xml&lt;/Accept&gt;
       &lt;/headers&gt;
     &lt;/options&gt;,
     &lt;mydata&gt;this is xml for the PUT body&lt;/mydata&gt;)

(: MarkLogic returns the response from the HTTP server. In this case,
 : a response similar to the following:
 :
 : &lt;response xmlns="xdmp:http"&gt;
 :   &lt;code&gt;204&lt;/code&gt;
 :   &lt;message&gt;Content Updated&lt;/message&gt;
 :   &lt;headers&gt;
 :     &lt;server&gt;MarkLogic&lt;/server&gt;
 :     &lt;content-length&gt;0&lt;/content-length&gt;
 :     &lt;connection&gt;Keep-Alive&lt;/connection&gt;
 :     &lt;keep-alive&gt;timeout=5&lt;/keep-alive&gt;
 :   &lt;/headers&gt;
 : &lt;/response&gt;
 :)

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Send a PUT request to insert a JSON document into the database
// using the MarkLogic REST Client API /documents endpoint. The
// PUT body contains serialized JSON that becomes the content of
// the new document. The data for the PUT body is passed as serialized
// JSON in the options parameter.

'use strict';
fn.head(
  xdmp.httpPut(
    'http://example.com:8000/v1/documents?uri=my.json',
    { authentication : {
        method : 'digest',
        username : 'myusername',
        password : 'mypassword'
      },
      headers: {
        'Content-type': 'application/json',
        Accept: "application/json"
      },
      data: xdmp.quote({this: 'is my document content'})
    }
));

// MarkLogic returns the response from the HTTP server. In this case,
// a response similar to the following:
//
// {"code":201, 
//  "message":"Created", 
//  "headers":{
//    "location":"/v1/documents?uri=my.json", 
//    "server":"MarkLogic", 
//    "content-length":"0", 
//    "connection":"Keep-Alive", 
//    "keep-alive":"timeout=5"
//  }}

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Send a PUT request to insert a JSON document into the database
// using the MarkLogic REST Client API /documents endpoint. The
// PUT body contains serialized JSON that becomes the content of
// the new document. The data for the PUT body is passed as a 
// JavaScript object in the data parameter. The JavaScript will be
// converted to serialized JSON when MarkLogic constructs the body;
// You could also pass a JSON node or other node type.

'use strict';
fn.head(
  xdmp.httpPut(
    'http://example.com:8000/v1/documents?uri=my.json',
    { authentication : {
        method : 'digest',
        username : 'myusername',
        password : 'mypassword'
      },
      headers: {
        'Content-type': 'application/json',
        Accept: "application/json"
      }
    },
    {this: 'is my document content'}
));

// MarkLogic returns the response from the HTTP server. In this case,
// a response similar to the following:
//
// {"code":201, 
//  "message":"Created", 
//  "headers":{
//    "location":"/v1/documents?uri=my.json", 
//    "server":"MarkLogic", 
//    "content-length":"0", 
//    "connection":"Keep-Alive", 
//    "keep-alive":"timeout=5"
//  }}

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="base64-encode" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Converts plaintext into base64-encoded string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="plaintext" type="xs:string">
    Plaintext to be encoded.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:base64-encode("slings and arrows of outrageous fortune")
=&gt; c2xpbmdzIGFuZCBhcnJvd3Mgb2Ygb3V0cmFnZW91cyBmb3J0dW5l
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.base64Encode("slings and arrows of outrageous fortune");
=&gt; c2xpbmdzIGFuZCBhcnJvd3Mgb2Ygb3V0cmFnZW91cyBmb3J0dW5l
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="base64-decode" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Converts base64-encoded string to plaintext.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="encoded" type="xs:string">
     Encoded text to be decoded.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:base64-decode(
     "c2xpbmdzIGFuZCBhcnJvd3Mgb2Ygb3V0cmFnZW91cyBmb3J0dW5l")
=&gt; slings and arrows of outrageous fortune
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.base64Decode(
     "c2xpbmdzIGFuZCBhcnJvd3Mgb2Ygb3V0cmFnZW91cyBmb3J0dW5l");
=&gt; slings and arrows of outrageous fortune
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="subbinary" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a binary node made up of a subset of the given binary node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="source" type="binary()">
    A binary node whose subset will be returned
  </apidoc:param>
      <apidoc:param name="starting-location" type="xs:double" optional="false">
    The new binary node starts at the byte position indicated by starting-location.
    The first byte is at location 1.
  </apidoc:param>
      <apidoc:param name="length" type="xs:double" optional="true">
    The length in bytes of the new binary node.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>binary()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Usage is exactly like fn:substring except that it applies to a binary
  node rather than a string.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  data(xdmp:subbinary(binary { xs:hexBinary("DEADBEEF") }, 3, 2))
  =&gt; xs:hexBinary("BEEF")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var node = new NodeBuilder();
var bin = node.addBinary( "DEADBEEF" ).toNode();
xdmp.describe(fn.data(xdmp.subbinary(bin, 3, 2)));
  =&gt; xs:hexBinary("BEEF")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="external-binary" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns an external binary node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    Filesystem path to the external binary file.
  </apidoc:param>
      <apidoc:param name="starting-location" type="xs:double" optional="true">
    The new binary node starts at the byte position indicated by
    <code xmlns="http://www.w3.org/1999/xhtml">starting-location</code>. The first byte is at location 1.
    The default value is 1.
  </apidoc:param>
      <apidoc:param name="length" type="xs:double" optional="true">
    The length in bytes of the content in the new binary node. Omitting
    the length has performance implications; see usage notes.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>binary()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
   If no length is provided, the length is calculated from the starting
   position and the filesystem length of the external file. If the file
   does not exist when the length is calculated, <code>XDMP-MISSINGFILE</code>
   is thrown.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
   If a length is provided, the length is trusted. That is, no attempt is
   made to confirm the existence or read the length of the external file.
   Therefore, including the length in the call (if known) results in the
   best performance during document creation.
  </p>
</apidoc:usage>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-external-binary</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:external-binary("/testdata1/logo.gif", 1, 2456)

  =&gt; A binary node representing the external file at
     /testdata1/logo.gif, beginning at offset 1, with
     a length of 2456 bytes.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.externalBinary("/testdata1/logo.gif", 1, 2456);

  =&gt; A binary node representing the external file at
     /testdata1/logo.gif, beginning at offset 1, with
     a length of 2456 bytes.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="binary-size" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the size of the data, in bytes, represented by a binary node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="source" type="binary()?" optional="true">
    A binary node whose data size will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:binary-size(fn:doc("example.mpeg")/binary())
  =&gt; the size (in bytes) of "example.mpeg"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var bin = xdmp.documentGet("http://www.my-stuff.com/example.mpeg");
xdmp.binarySize(fn.head(bin).root);

  =&gt; the size (in bytes) of "example.mpeg"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="binary-is-external" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Test whether or not a binary node represents an external binary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="source" type="binary()">
    The binary mode to be tested.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
   An external binary node is one created using
   <a href="#xdmp:external-binary"><code>xdmp:external-binary</code></a>.
   For more details, see "Working With Binary Documents" in the
   <em>Application Developer's Guide</em>.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $n := xdmp:external-binary("/testdata1/logo.gif", 1, 2456))
  return xdmp:binary-is-external($n)

  =&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var n = xdmp.externalBinary("/testdata1/logo.gif", 1, 2456);
xdmp.binaryIsExternal(n);

  =&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="binary-is-small" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Check whether a binary node is a small binary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="source" type="binary()">
    A binary node
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
   A small binary is one whose size is below the large size threshold. See
   <a href="#admin:database-set-large-size-threshold">
   <code>admin:database-set-large-size-threshold</code></a>.
   For details, see "Working With Binary Documents" in the
   <em>Application Developer's Guide</em>.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:binary-is-small(doc("/logo.gif")/binary())

  =&gt; true if the binary content is below the large size threshold.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.binaryIsSmall(cts.doc("/logo.gif").root)

  =&gt; true if the binary content is below the large size threshold.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="binary-is-large" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Check whether a binary node is a large binary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="source" type="binary()">
    The binary node to test.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
   A large binary is one whose size is above the large size threshold.
   See <a href="#admin:database-set-large-size-threshold">
   <code>admin:database-set-large-size-threshold</code></a>. This function
   returns false for small and external binary nodes. For details, see
   "Working With Binary Documents" in the
   <em>Application Developer's Guide</em>.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:binary-is-large(doc("/logo.gif")/binary())
  =&gt; false
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.binaryIsLarge(cts.doc("/logo.gif").root)
  =&gt; false
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="external-binary-path" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the path to the external file associated with an external
  binary document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="source" type="binary()">
    The external binary node for which to retrieve the external file path.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">
   If the source binary node does not represent an external binary
   binary document, <code>XDMP-ARG</code> is thrown. That is, the
   source binary node must have been created by
   <a href="#xdmp:external-binary"><code>xdmp:external-binary</code></a>. Use
   <a href="#xdmp:binary-is-external"><code>xdmp:binary-is-external</code></a>
   to test whether or not a node represents an external binary.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:external-binary-path(doc("/movies/external-movie-1.mp4")/binary())

  =&gt; /space/binaries/movies/movie-1.mp4
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.externalBinaryPath(
  cts.doc("/movies/external-movie-1.mp4").xpath("/binary()"));

  =&gt; /space/binaries/movies/movie-1.mp4
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="trace" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Signal a trace event.
  If trace events are activated and the event is enabled,
  the trace event is logged.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
    The trace event name.
  </apidoc:param>
      <apidoc:param name="value" type="item()*">
    The trace event data.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:trace("My Application Event",$my-application-data)
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.trace("My Application Event",myApplicationData);
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Set the value of a variable to the specified expression. The
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:set</code> command allows you to introduce changes to the
  state (side effects) of a query by changing the value of a variable to
  something other than what it is bound to.
 </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="variable" type="item()*">
     A variable to set.
  </apidoc:param>
      <apidoc:param name="expr" type="item()*">
     A value to set the variable.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  When a variable is bound to a sequence in a <code xmlns="http://www.w3.org/1999/xhtml">for</code> loop, and when
  that variable is changed by <code xmlns="http://www.w3.org/1999/xhtml">xdmp:set</code> in the <code xmlns="http://www.w3.org/1999/xhtml">return</code>
  clause, the change only affects the value for one iteration of the
  <code xmlns="http://www.w3.org/1999/xhtml">for</code> loop at a time; when the next value is sent to the return
  clause, it is set to the next value in the sequence specified in the
  <code xmlns="http://www.w3.org/1999/xhtml">for</code> clause.  The value changes only after the
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:set</code> call is made.
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: set the value of the variable $x
   to 1234 and then print out $x :)

let $x := 12
return
(xdmp:set($x, 1234), $x)

=&gt; 1234
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: set the value of the variable $x
   to 5 and then print out $x for
   each value of $y :)

for $x in (1, 2)
  for $y in ($x, $x)
return
($y, xdmp:set($x, 5), $x)

=&gt; (1, 5, 1, 5, 2, 5, 2, 5)

</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: note the effect on $z of changing the
   value of $x :)

for $x in (1, 2)
  for $y in (3,4)
    for $z in ($x, $x)
return
($z, xdmp:set($x, 5))

=&gt; (1, 1, 5, 5, 2, 2, 5, 5)

</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: every time the name of the input node changes,
   output the new name  :)

let $n := ()
for $i in (&lt;x&gt;1&lt;/x&gt;, &lt;x&gt;2&lt;/x&gt;, &lt;y&gt;3&lt;/y&gt;)
return (
   if (name($i) eq $n)
   then ()
   else (xdmp:set($n, name($i)), $n)
  , data($i)
)

=&gt; (x, 1, 2, y, 3)

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="host" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the host named in the parameter.
  Returns the ID of the current host if no parameter is specified.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string" optional="true">
    The name of the host.
    The default value is the name of the current host.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:host("foo.example.com")
=&gt; 15495681647217162987
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.host("foo.example.com");
=&gt; 15495681647217162987
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="host-name" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the name of the specified host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="ID" type="xs:unsignedLong" optional="true">
    A host ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:host-name(15495681647217162987)
=&gt; foo.example.com
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hostName(15495681647217162987);
=&gt; foo.example.com
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="host-group" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the group that the specified host belongs to.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="ID" type="xs:unsignedLong" optional="true">
    A host ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:host-group(15495681647217162987)
=&gt; 9876543211234
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hostGroup(15495681647217162987);
=&gt; "9876543211234"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="software-version" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns this host's software version
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:software-version()
=&gt; 8000400
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.softwareVersion();
=&gt; 8000400
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="effective-version" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the effective version of this host 
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:effective-version()
=&gt; 8000400
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.effectiveVersion();
=&gt; 8000400
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="host-mode" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns this host mode
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:host-mode()
=&gt;  normal
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hostMode();
=&gt;  normal
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="host-mode-description" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the description string for this host mode setting
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="ID" type="xs:unsignedLong" optional="true">
    A host ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:host-mode-description(15495681647217162987)
=&gt;  "Storage upgrade"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.modeDescription(15495681647217162987);
=&gt;  "Storage upgrade"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="hosts" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all the hosts in the cluster.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:hosts()
=&gt; 18263538320779601865
   2760886727871312968
   1551965607977434000
   2714941248661564752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hosts()
=&gt; 18263538320779601865
   2760886727871312968
   1551965607977434000
   2714941248661564752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="bootstrap-hosts" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all the bootstrap hosts in the cluster.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:bootstrap-hosts()
=&gt; 2760886727871312968
   1551965607977434000
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.bootstrapHosts()
=&gt; 2760886727871312968
   1551965607977434000
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cluster" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the cluster named in the parameter.
  Returns the ID of the current cluster if no parameter is specified.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string" optional="true">
    The name of the cluster.
    The default value is the name of the current cluster.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:cluster()
=&gt; 15495681647217162987
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.cluster()
=&gt; 15495681647217162987
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cluster-name" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the name of the cluster with the specified ID.
  Returns the name of the current cluster if no ID is specified.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong" optional="true">
    The ID of the cluster.
    The default value is the ID of the current cluster.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:cluster-name()
=&gt; "San Francisco"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.clusterName();
=&gt; "San Francisco"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="foreign-clusters" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the IDs of the foreign clusters.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:foreign-clusters()
=&gt; 15495681647217162987
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.foreignClusters()
=&gt; 15495681647217162987
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="server" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Return the ID(s) of the App Servers, XDBC Servers, ODBC Servers, 
  or Task Servers with the given name.
  Returns the ID of the current server if no parameter is specified.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string" optional="true">
    A server name.
  </apidoc:param>
      <apidoc:param name="group" type="xs:unsignedLong" optional="true">
    A group to search.
    If not specified, all groups are searched.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong+</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:server("MyAppServer")
=&gt; 15495681647217162987
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.server("MyAppServer");
=&gt; 15495681647217162987
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="servers" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all the App Servers (HTTP, XDBC, ODBC, 
  and TaskServer) in the system.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:servers()
=&gt; 18263538320779601865
   2760886727871312968
   1551965607977434000
   2714941248661564752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.servers();
=&gt; 18263538320779601865
   2760886727871312968
   1551965607977434000
   2714941248661564752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="groups" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all the groups in the system.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:groups()
=&gt; 12363538320723601865
   2350822345151312968
   7891965607973455300
   2314941134541564752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.groups();
=&gt; 12363538320723601865
   2350822345151312968
   7891965607973455300
   2314941134541564752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the group specified in the parameter.
  Returns the ID of the current group if no parameter is specified.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string" optional="true">
    The name of the group.
    The default value is the name of the group the current host belongs to.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:group("Default")
=&gt; 134722342511344334243
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.group("Default");
=&gt; 134722342511344334243
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group-name" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the name of the group with the given ID.
  Returns the name of the current group if no parameter is specified.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="groupID" type="xs:unsignedLong" optional="true">
    The ID of the group.
    The default value is the ID of the group to which the current host belongs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:group-name(134722342511344334243)
=&gt; "Default"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.groupName(134722342511344334243);
=&gt; "Default"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group-hosts" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the IDs of all hosts belonging to the group with the given ID.
  If no parameter is specified, it uses the group of the current host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="groupID" type="xs:unsignedLong" optional="true">
    The ID of the group.
    The default value is the ID of the group to which the current host belongs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:group-hosts(134722342511344334243)
=&gt; 18263538320779601865
   2760886727871312968
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.groupHosts(134722342511344334243);
=&gt; 18263538320779601865
   2760886727871312968
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group-servers" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the IDs of all App Servers belonging to the group with
  the given ID.
  If no parameter is specified, it uses the group of the current host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="groupID" type="xs:unsignedLong" optional="true">
    The ID of the group.
    The default value is the ID of the group to which the current host belongs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:group-servers(xdmp:group("Default"))
=&gt; 18263538320779601865
   2760886727871312968
   2714941248661564752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.groupServers(xdmp.group("Default"));
=&gt; 18263538320779601865
   2760886727871312968
   2714941248661564752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group-port-servers" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the IDs of all port App Servers belonging to the group with
  the given ID.
  If no parameter is specified, it uses the group of the current host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="groupID" type="xs:unsignedLong" optional="true">
    The ID of the group.
    The default value is the ID of the group to which the current host belongs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:group-port-servers(xdmp:group("Default"))
=&gt; 18263538320779601865
   2760886727871312968
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.groupPortServers(xdmp.group("Default"));
=&gt; 18263538320779601865
   2760886727871312968
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="group-task-server" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the ID of the Task Server belonging to the group with
  the given ID.
  If no parameter is specified, it uses the group of the current host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="groupID" type="xs:unsignedLong" optional="true">
    The ID of the group.
    The default value is the ID of the group to which the current host belongs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:group-task-server(xdmp:group("Default"))
=&gt; 2714941248661564752
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.groupTaskServer(xdmp.group("Default"));
=&gt; 2714941248661564752
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="request" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the unique key of the current request.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:request()
=&gt; 18263538320779601865
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.request();
=&gt; 18263538320779601865
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="modules-root" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the current root path for modules.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:modules-root()
=&gt; Docs
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.modulesRoot();
=&gt; Docs
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="diacritic-less" type="builtin" lib="xdmp" category="Extension" subcategory="Search">
    <apidoc:summary>
Returns the specified string, converting all of the characters with diacritics
to characters without diacritics.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
  The string to convert.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:diacritic-less("José")
=&gt; Jose
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.diacriticLess("José");
=&gt; Jose
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="collation-canonical-uri" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns the canonical URI for the given URI, if it represents a
  valid collation.  A canonical URI is the unique string MarkLogic Server
  uses to identify a given collation.  The canonical URI string places any
  attributes that occur in the URI in a predefined order, and it removes
  any attributes that are redundant due to locale defaults.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collation-uri" type="xs:string">
  A collation URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
  If the specified collation URI is not a valid URI, an exception is thrown.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:collation-canonical-uri("http://marklogic.com/collation/en/S3")
=&gt; http://marklogic.com/collation/en
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.collationCanonicalUri("http://marklogic.com/collation/en/S3");
=&gt; http://marklogic.com/collation/en
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="map" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Creates a map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="element(map:map)" optional="true">
    A serialized map element.</apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:map()
  =&gt; map:map(&lt;map xmlns="http://marklogic.com/xdmp/map"/&gt;)
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $map :=
&lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
 &lt;map:entry key="2"&gt;
   &lt;map:value xsi:type="xs:string"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    &gt;world&lt;/map:value&gt;
 &lt;/map:entry&gt;
 &lt;map:entry key="1"&gt;
   &lt;map:value xsi:type="xs:string"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    &gt;hello&lt;/map:value&gt;
 &lt;/map:entry&gt;
&lt;/map:map&gt;
return
map:get(map:map($map), "2")
=&gt;
world
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="new" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Constructs a new map by combining the keys from the maps given as an argument.
  If a given key exists in more than one argument map, the value from the
  last such map is used.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="maps" type="map:map*" optional="true">
    The argument maps.</apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:new(())
  =&gt; map:map(&lt;map xmlns="http://marklogic.com/xdmp/map"/&gt;)
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
&lt;result&gt;{
  map:new((
    map:entry("a","aardvark"),
    map:entry("b","badger")
  ))
}&lt;/result&gt;

=&gt;
&lt;result&gt;
  &lt;map:map xmlns:map="http://marklogic.com/xdmp/map" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;map:entry key="b"&gt;
      &lt;map:value xsi:type="xs:string"&gt;badger&lt;/map:value&gt;
    &lt;/map:entry&gt;
    &lt;map:entry key="a"&gt;
      &lt;map:value xsi:type="xs:string"&gt;aardvark&lt;/map:value&gt;
    &lt;/map:entry&gt;
  &lt;/map:map&gt;
&lt;/result&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="entry" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Constructs a new map with a single entry consisting of the key and value
  specified as arguments. This is particularly helpful when
  used as part of an argument to map:new().
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="key" type="xs:string">
    The map key.</apidoc:param>
      <apidoc:param name="value" type="item()*">
    The map value.</apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
&lt;result&gt;{ map:entry("a","aardvark") }&lt;/result&gt;

=&gt;
&lt;result&gt;
  &lt;map:map xmlns:map="http://marklogic.com/xdmp/map" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;map:entry key="a"&gt;
      &lt;map:value xsi:type="xs:string"&gt;aardvark&lt;/map:value&gt;
    &lt;/map:entry&gt;
  &lt;/map:map&gt;
&lt;/result&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="put" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Put a value into a map at the given key.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
      <apidoc:param name="key" type="xs:string">
    A key. If the key is not unique, it will overwrite the existing key.
    </apidoc:param>
      <apidoc:param name="value" type="item()*">
    A value.  If the value is the empty sequence, it will remove the
    key from the map.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $map := map:map()
let $put := map:put($map, "some-key",
                  &lt;info&gt;45683&lt;/info&gt;)
return
&lt;result&gt;{$map}&lt;/result&gt;

=&gt;
&lt;result&gt;
  &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;map:entry key="some-key"&gt;
      &lt;map:value&gt;
        &lt;info&gt;45683&lt;/info&gt;
      &lt;/map:value&gt;
    &lt;/map:entry&gt;
  &lt;/map:map&gt;
&lt;/result&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="with" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Updates a map, inserting a value into it at the given key. The map is returned as the result.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
      <apidoc:param name="key" type="xs:string">
    A key. If the key is not unique, it will overwrite the existing key.
    </apidoc:param>
      <apidoc:param name="value" type="item()*">
    A value.  If the value is the empty sequence, it will remove the
    key from the map.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $map := map:map()
  =&gt;map:with("some-key",&lt;info&gt;45683&lt;/info&gt;)
return
&lt;result&gt;{$map}&lt;/result&gt;

=&gt;
&lt;result&gt;
  &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;map:entry key="some-key"&gt;
      &lt;map:value&gt;
        &lt;info&gt;45683&lt;/info&gt;
      &lt;/map:value&gt;
    &lt;/map:entry&gt;
  &lt;/map:map&gt;
&lt;/result&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Get a value from a map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
      <apidoc:param name="key" type="xs:string">
    A key.</apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $table := map:map()
let $_ := map:put($table, "some-key", &lt;info&gt;45683&lt;/info&gt;)
return map:get($table, "some-key")
=&gt; &lt;info&gt;45683&lt;/info&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="contains" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Returns true if the key exists in the map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
      <apidoc:param name="key" type="xs:string">
    A key.</apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:contains($table, "some-key")
  =&gt; fn:true()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="keys" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Get the keys used in the map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:keys($table)
  =&gt; ("some-key", "another key", "and another one")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="clear" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Clear a map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:clear($table)
  =&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="count" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Returns the number of keys used in the map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  (: assume $table is bound to a map with 15 keys :)
  map:count($table)
  =&gt; 15
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $map := map:map()
let $_map := map:put($map, "a", 1)
let $_map := map:put($map, "a", 2)
let $_map := map:put($map, "b", 1)
let $_map := map:put($map, "b", 2)
return
($map, map:count($map))
=&gt;
map:map(
  &lt;map:map xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:map="http://marklogic.com/xdmp/map"&gt;
    &lt;map:entry key="b"&gt;
      &lt;map:value xsi:type="xs:integer"&gt;2&lt;/map:value&gt;
    &lt;/map:entry&gt;
    &lt;map:entry key="a"&gt;
      &lt;map:value xsi:type="xs:integer"&gt;2&lt;/map:value&gt;
    &lt;/map:entry&gt;
  &lt;/map:map&gt;)
2

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="delete" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  Delete a value from a map.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
      <apidoc:param name="key" type="xs:string">
    A key.</apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:delete($table, "some-key")
  =&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-javascript-by-ref" type="builtin" lib="map" category="map" class="xquery">
    <apidoc:summary>
  If true is specified, sets a map:map to be passed to JavaScript by reference.
  By default, a map:map is passed to JavaScript by value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="map:map">
    A map.</apidoc:param>
      <apidoc:param name="key" type="xs:boolean">
    True or false.</apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  map:set-javascript-by-ref($table, fn:true())
  =&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="binding" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Creates a <code xmlns="http://www.w3.org/1999/xhtml">sem:binding</code> object, which is a sub-type of
  <code xmlns="http://www.w3.org/1999/xhtml">json:object</code> (and map:map).
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="element(json:object)" optional="true">
    A serialized sem:binding object.</apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:binding</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  &lt;a&gt;{ sem:binding() }&lt;/a&gt;
  =&gt; &lt;a&gt;
  &lt;json:object xmlns:json="http://marklogic.com/xdmp/json"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"/&gt;
&lt;/a&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sem.binding()
  =&gt; {}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="object" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Creates a JSON object, which is a kind of map with a fixed and ordered set of
  keys.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="map" type="element(json:object)" optional="true">
    A serialized JSON object.</apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  json:object()
  =&gt; json:object(&lt;json xmlns="http://marklogic.com/xdmp/json"/&gt;)
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $obj :=
&lt;json:object xmlns:json="http://marklogic.com/xdmp/json"&gt;
 &lt;json:entry&gt;
   &lt;json:key&gt;2&lt;/json:key&gt;
   &lt;json:value xsi:type="xs:string"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    world&lt;/json:value&gt;
 &lt;/json:entry&gt;
 &lt;json:entry&gt;
   &lt;json:key&gt;1&lt;/json:key&gt;
   &lt;json:value xsi:type="xs:string"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    hello&lt;/json:value&gt;
 &lt;/json:entry&gt;
&lt;/json:object&gt;
return
map:keys(json:object($obj))
=&gt;
2 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="object-define" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Creates a JSON object.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="keys" type="xs:string*" optional="true">
    The sequence of keys in this object.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>json:object</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $obj := json:object-define(("a","b","c"))
  return map:keys($obj)
  =&gt; "a","b","c"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Creates a (JSON) array, which is like a sequence of values, but allows
  for nesting.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="element(json:array)" optional="true">
    A serialized array element.</apidoc:param>
    </apidoc:params>
    <apidoc:return>json:array</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

json:array(
  &lt;json:array xmlns:json="http://marklogic.com/xdmp/json"
              xmlns:xs="http://www.w3.org/2001/XMLSchema"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
   &lt;json:value xsi:type="xs:string"&gt;hello&lt;/json:value&gt;
   &lt;json:value xsi:type="xs:string"&gt;world&lt;/json:value&gt;
   &lt;json:array&gt;
     &lt;json:value xsi:type="xs:string"&gt;one&lt;/json:value&gt;
     &lt;json:value xsi:type="xs:string"&gt;two&lt;/json:value&gt;
   &lt;/json:array&gt;
  &lt;/json:array&gt;
)
=&gt; ["hello", "world", ["one", "two"]]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="to-array" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
   Constructs <code xmlns="http://www.w3.org/1999/xhtml">json:array</code> from a sequence of items.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="items" type="item()*" optional="true">
    A sequence of items.</apidoc:param>
      <apidoc:param name="limit" type="xs:double?" optional="true">
    The size of the array to construct. If the size is less than the length
    of the item sequence, only as "limit" items are put into the array. If
    the size is more than the length of the sequence, the array is filled
    with null values up to the limit.
  </apidoc:param>
      <apidoc:param name="zero" type="item()?" optional="true">
    The value to use to pad out the array, if necessary. By default the empty
    sequence is used.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>json:array</apidoc:return>
    <apidoc:usage>
  Use this function to construct an in-memory object that represents
  a JSON array, suitable for use with <a href="#xdmp:to-json" xmlns="http://www.w3.org/1999/xhtml">xdmp:to-json</a>.
  This function does not produce an array node. To construct an array node, 
  use the <code xmlns="http://www.w3.org/1999/xhtml">array-node</code> constructor.
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

json:to-array(1 to 2)
=&gt;
  json:array(
    &lt;json:array xmlns:json="http://marklogic.com/xdmp/json"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
     &lt;json:value xsi:type="xs:integer"&gt;1&lt;/json:value&gt;
     &lt;json:value xsi:type="xs:integer"&gt;2&lt;/json:value&gt;
    &lt;/json:array&gt;
  )
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-values" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
   Returns the array values as an XQuery sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.</apidoc:param>
      <apidoc:param name="flatten" type="xs:boolean?" optional="true">
    Include values from subarrays in the sequence. The default is false,
    meaning that subarrays are returned as array values.</apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $array :=
  json:array(
    &lt;json:array xmlns:json="http://marklogic.com/xdmp/json"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
     &lt;json:value xsi:type="xs:string"&gt;hello&lt;/json:value&gt;
     &lt;json:value xsi:type="xs:string"&gt;world&lt;/json:value&gt;
     &lt;json:array&gt;
       &lt;json:value xsi:type="xs:string"&gt;one&lt;/json:value&gt;
       &lt;json:value xsi:type="xs:string"&gt;two&lt;/json:value&gt;
     &lt;/json:array&gt;
    &lt;/json:array&gt;
  )
return json:array-values($array)
=&gt; ("hello", "world", ["one", "two"])
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $array :=
  json:array(
    &lt;json:array xmlns:json="http://marklogic.com/xdmp/json"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
     &lt;json:value xsi:type="xs:string"&gt;hello&lt;/json:value&gt;
     &lt;json:value xsi:type="xs:string"&gt;world&lt;/json:value&gt;
     &lt;json:array&gt;
       &lt;json:value xsi:type="xs:string"&gt;one&lt;/json:value&gt;
       &lt;json:value xsi:type="xs:string"&gt;two&lt;/json:value&gt;
     &lt;/json:array&gt;
    &lt;/json:array&gt;
  )
return json:array-values($array, fn:true())
=&gt; ("hello", "world", "one", "two")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="arrayValues" type="builtin" lib="xdmp" category="Extension" subcategory="JSON" class="javascript">
    <apidoc:summary>
   Returns the array values as a Sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="Array" type="json:array">
    An array.</apidoc:param>
      <apidoc:param name="flatten" type="Boolean" optional="true">
    Include values from subarrays in the sequence. The default is false,
    meaning that subarrays are returned as array values.</apidoc:param>
    </apidoc:params>
    <apidoc:return>Sequence</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

var a = ["hello","world",["one","two"]];
xdmp.arrayValues(a);
=&gt; A Sequence with the following values:
hello
world
["one", "two"]
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var a = ["hello","world",["one","two"]];
xdmp.arrayValues(a,true);
=&gt; A Sequence with the following values: 
hello
world
one
two
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-size" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Returns the size of the array.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array?">
    An array.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  json:array-size(json:to-array(("a","b")))
  =&gt; 2
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-item-at" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Sets a value in an array at a specified position.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.</apidoc:param>
      <apidoc:param name="pos" type="xs:double">
    The position to update. Invalid positions throw XDMP-ARRAYINDEXOUTOFBOUNDS
    </apidoc:param>
      <apidoc:param name="value" type="item()*">
    A value.  Empty sequences are allowed.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $array := json:to-array( ("a","b","c"), 5 )
let $put := json:set-item-at($array, 5 , &lt;info&gt;45683&lt;/info&gt;)
return
&lt;result&gt;{$array}&lt;/result&gt;

=&gt;
&lt;result&gt;
  &lt;json:array xmlns:json="http://marklogic.com/xdmp/json"&gt;
    &lt;json:value xsi:type="xs:string"&gt;a&lt;/json:value&gt;
    &lt;json:value xsi:type="xs:string"&gt;b&lt;/json:value&gt;
    &lt;json:value xsi:type="xs:string"&gt;c&lt;/json:value&gt;
    &lt;json:value xsi:nil="true"/&gt;
    &lt;json:value&gt;&lt;info&gt;45683&lt;/info&gt;&lt;/json:value&gt;
  &lt;/json:array&gt;
&lt;/result&gt;
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $array := json:to-array(("a", "z", "c"))
return (
    $array[2],
    json:set-item-at($array, 2, "b"),
    $array[2]
    )
=&gt;
z
b

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-resize" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Resize the array to the new size. If the new size is greater than the old
  size, the new entries will be null. If the new size if smaller than the old
  size, the extra entries will be removed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.
  </apidoc:param>
      <apidoc:param name="newSize" type="xs:unsignedLong">
    New size.
  </apidoc:param>
      <apidoc:param name="zero" type="item()?" optional="true">
    The value to use to pad out the array, if necessary. By default the
    empty sequence is used.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $a := json:to-array(1 to 3)
  let $_ := json:array-resize($a, 4)
  return xdmp:to-json($a)
  =&gt; [1, 2, 3, null]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-push" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Push a value to the end of the array, increasing the size of the array
  by one.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.
  </apidoc:param>
      <apidoc:param name="item" type="item()*">
    New entries.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $a := json:to-array(1 to 3)
  let $_ := json:array-push($a, 4)
  return xdmp:to-json($a)
  =&gt; [1, 2, 3, 4]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-with" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Push a value to the end of the array, increasing the size of the array
  by one. Returns the array as the result.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.
  </apidoc:param>
      <apidoc:param name="item" type="item()*">
    New entries.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>json:array</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $a := json:to-array(1 to 3)
    =&gt;json:array-with(4)
  return xdmp:to-json($a)
  =&gt; [1, 2, 3, 4]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-pop" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
   Pop a value from the end of the array.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $a := json:to-array((1, 2, 3))
  let $v := json:array-pop($a)
  return (xdmp:to-json($a), $v)
  =&gt; [1, 2] 3
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="subarray" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
   Extract a subarray from an array, producing a new array.
   The second and third arguments to this function operate similarly to
   those of fn:subsequence for XQuery sequences.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    An array.
  </apidoc:param>
      <apidoc:param name="startingLoc" type="xs:double">
The starting position of the start of the subarray.
  </apidoc:param>
      <apidoc:param name="length" type="xs:double" optional="true">
The length of the subarray.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>json:array</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:to-json(json:subarray(json:to-array(1 to 6), 2, 4))
  =&gt; [2, 3, 4, 5]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="array-set-javascript-by-ref" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  If true is specified, sets a json:array to be passed to JavaScript by
  reference.  By default, a map:map is passed to JavaScript by value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="array" type="json:array">
    A json array.</apidoc:param>
      <apidoc:param name="key" type="xs:boolean">
    True or false.</apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  json:array-set-javascript-by-ref($table, fn:true())
  =&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="null" type="builtin" lib="json" category="Extension" subcategory="JSON" class="xquery">
    <apidoc:summary>
  Returns the JSON null value, which is an empty sequence to XQuery,
  but not a Sequence when passed to JavaScript.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
json:null()
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sleep" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Delays for a specific amount of time.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="msec" type="xs:unsignedInt">
    The amount of time to sleep, in milliseconds.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: sleep for 1 second :)
xdmp:sleep(1000)
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// sleep for 1 second
xdmp.sleep(1000);
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="with-namespaces" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Evaluates the expression in the context of a specific set of namespace
  bindings.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="nsbindings" type="(xs:string*|map:map)">
  A set of namespace prefix bindings, expressed as either a sequence of
  alternating (prefix,uri) pairs, or a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code> where the
  keys are prefixes and the values are namespace URIs. If the prefix is 
  the empty string, the following URI becomes the default namespace of the 
  resulting item(s).
  </apidoc:param>
      <apidoc:param name="expr" type="item()*">
    An expression to evaluate in the context of the given namespace bindings.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:privilege>
  <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-with-namespaces</code>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a sequence of prefix-URI pairs to define the bindings :)
let $version := "1.2" return
xdmp:with-namespaces(("p", fn:concat("http://marklogic.com/p/",$version)),
   &lt;p:bar/&gt;
)

(: Returns: &lt;p:bar xmlns:p="http://marklogic.com/p/1.2"/&gt; :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a map:map to define the bindings :)
let $version := "1.2" 
return xdmp:with-namespaces(
  map:map() =&gt; map:with("p", fn:concat("http://marklogic.com/p/",$version)),
  &lt;p:bar/&gt;
)

(: Returns: &lt;p:bar xmlns:p="http://marklogic.com/p/1.2"/&gt; :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:with-namespaces(
   ('', 'x'),
   &lt;test&gt;
      &lt;test1&gt;hello&lt;/test1&gt;
   &lt;/test&gt;
=&gt;
&lt;test xmlns="x"&gt;
  &lt;test1&gt;hello&lt;/test1&gt;
&lt;/test&gt;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-content-type" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the schema-defined content-type of an element
  ("empty", "simple", "element-only", or "mixed").
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element" type="element()">
    An element node.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:element-content-type(&lt;html xmlns="http://www.w3.org/1999/xhtml"/&gt;)
  =&gt; "element-only"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.elementContentType(
  fn.head(xdmp.unquote('&lt;html xmlns="http://www.w3.org/1999/xhtml"/&gt;')).root);
=&gt; "element-only"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="pretty-print" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a well-formatted XQuery module.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="xquery" type="xs:string" optional="false">
    An XQuery module to be reformatted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:pretty-print("for $x in 1 to 10 return $x")
=&gt; "for $x in 1 to 10
    return $x"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.prettyPrint("for $x in 1 to 10 return $x");
=&gt; "for $x in 1 to 10
    return $x"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="key-from-QName" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
   Construct a context-independent string from a QName.  This string is
   of the form "{namespaceURI}localname" and is suitable for use as a map
   key.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:QName">
  The QName to compute a key for.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a QName with an in-scope namespace prefix :)
xquery version "1.0-ml";
xdmp:key-from-QName(xs:QName("xs:string"))

(: Returns output of the following form:
     {http://www.w3.org/2001/XMLSchema}string

   The generated key includes the XMLSchema namespace URI because the
   "xs" namespace binding is implicitly defined in MarkLogic.
:)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a QName with an arbitrary namespace :)
xquery version "1.0-ml";
xdmp:key-from-QName(fn:QName("/my/namespace","thing"))

(: Returns output of the following form: 
     {/my/namespace}thing
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Using a QName with an in-scope namespace prefix
'use strict';
xdmp.keyFromQName('xs:string');

// Returns output of the following form:
//   {http://www.w3.org/2001/XMLSchema}string
//
// The generated key includes the XMLSchema namespace URI because the
// "xs" namespace binding is implicitly defined in MarkLogic.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Using a key based on an arbitrary namespace
'use strict';
xdmp.keyFromQName(fn.QName('/my/namespace', 'thing'));

// Returns output of the following form:
//   {/my/namespace}thing
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="QName-from-key" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
   Construct a QName from a string of the form "{namespaceURI}localname".
   This function is useful for constructing Clark notation
   parameters for the <a href="#xdmp:xslt-eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:xslt-eval</a>
   and <a href="#xdmp:xslt-invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp:xslt-invoke</a>
   functions.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="key" type="xs:string">
  The string from which to construct a QName.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a key based on a QName with an in-scope namespace prefix :)
xquery version "1.0-ml";
let $key := xdmp:key-from-QName(xs:QName("xs:string"))
let $qname := xdmp:QName-from-key($key)
return ($key, $qname)

(: Returns output of the following form:
     ( {http://www.w3.org/2001/XMLSchema}string, xs:string )
   The generated QName uses the "xs" namespace prefix because
   this binding is implicitly defined in MarkLogic.
:)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a key based on an arbitrary namespace :)
xquery version "1.0-ml";
xdmp:QName-from-key("{/my/namespace}thing")

(: Returns output of the following form: 
     thing
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Using a key based on a QName with an in-scope namespace prefix
'use strict';
const key = xdmp.keyFromQName('xs:string');
const qname = xdmp.QNameFromKey(key);
[key, qname];

// Returns output of the following form:
//   ["{http://www.w3.org/2001/XMLSchema}string", "xs:string"]
//
// The generated key uses the "xs" namespace prefix because
// this binding is implicitly defined in MarkLogic.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Using a key based on an arbitrary namespace
'use strict';
xdmp.QNameFromKey('{/my/namespace}thing');

// Returns output of the following form:
//   thing
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="multipart-encode" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Create a multipart encoding of the specified node. The returned binary
  node can be passed to <a href="#xdmp:http-post">xdmp:http-post</a>.
  The manifest is modeled after the
  manifest that is passed to <a href="#xdmp:zip-create">zip:create</a>,
  with the headers element being
  the same as is described for <a href="#xdmp:http-get">xdmp:http-get</a>
  allowing users to add arbitrary
  headers to each part. If a content-type header is not specified for a part,
  it will be determined if possible from the content.</p>

  <p xmlns="http://www.w3.org/1999/xhtml">There should be one part element for each node in the content sequence.</p>

  <p xmlns="http://www.w3.org/1999/xhtml">Each part also has an optional options node to control how xml or text
  will be serialized. The two options are the same as for
  <a href="#xdmp:save">xdmp:save</a>.</p>

  <pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">&lt;part&gt;
    &lt;headers&gt;
      &lt;Content-Type&gt;image/jpeg&lt;/Content-Type&gt;
    &lt;headers&gt;
    &lt;options&gt;
      &lt;output-encoding&gt;...&lt;/output-encoding&gt;
      &lt;output-sgml-character-entities&gt;...&lt;/output-sgml-character-entities&gt;
    &lt;/options&gt;
  &lt;/part&gt;</pre>

  <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">The manifest can also be defined as a JSON array.</p>
  <pre class="javascript" xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">[
    {
      "headers": {
        "Content-Type":"image/jpeg"
      },
      "options": {
       "outputEncoding": ...,
       "outputSgmlCharacterEntities" : ...
      }
    },
    {
      "headers": {
        "Content-Type":"text/html"
      }
    }
  ]</pre>

</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="separator" type="xs:string">
    The string that is to be used as a separator.
  </apidoc:param>
      <apidoc:param class="xquery" name="manifest" type="element()">
    The manifest.
  </apidoc:param>
      <apidoc:param class="xquery" name="content" type="node()*">
    The nodes that are to be encoded.
  </apidoc:param>
      <apidoc:param class="javascript" name="manifest" type="Array|Node">
    The manifest.
  </apidoc:param>
      <apidoc:param class="javascript" name="content" type="Array|Sequence">
    The nodes that are to be encoded.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>binary()</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $html := document{ &lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt; }
let $xml := document{ &lt;root&gt;&lt;a&gt;Some other stuff in a .xml document&lt;/a&gt;&lt;/root&gt; }
let $json := xdmp:to-json(("a",fn:false()))
let $boundary-string := "gc0p4Jq0M2Yt08jU534c0p"
return
xdmp:multipart-encode(
   $boundary-string,
   &lt;manifest&gt;
     &lt;part&gt;
       &lt;headers&gt;
         &lt;Content-Type&gt;application/xml&lt;/Content-Type&gt;
         &lt;boundary&gt;gc0p4Jq0M2Yt08jU534c0p&lt;/boundary&gt;
       &lt;/headers&gt;
     &lt;/part&gt;
     &lt;part&gt;
       &lt;headers&gt;
         &lt;Content-Type&gt;text/html&lt;/Content-Type&gt;
       &lt;/headers&gt;
     &lt;/part&gt;
     &lt;part&gt;
       &lt;headers&gt;
         &lt;Content-Type&gt;application/json&lt;/Content-Type&gt;
       &lt;/headers&gt;
     &lt;/part&gt;
   &lt;/manifest&gt;,
   ($xml,$html,$json) )
=&gt;
--gc0p4Jq0M2Yt08jU534c0p
Content-Type: application/xml
boundary: gc0p4Jq0M2Yt08jU534c0p
Content-Length: 94

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;&lt;a&gt;Some other stuff in a .xml document&lt;/a&gt;&lt;/root&gt;
--gc0p4Jq0M2Yt08jU534c0p
Content-Type: text/html
Content-Length: 90

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;
--gc0p4Jq0M2Yt08jU534c0p
Content-Type: application/json
Content-Length: 12

["a", false]
--gc0p4Jq0M2Yt08jU534c0p--

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var html = fn.head(xdmp.unquote(
		'&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;'));
var xml = fn.head(xdmp.unquote('&lt;root&gt; \n\
		          &lt;a&gt;Some other stuff in a .xml document&lt;/a&gt; \n\
			&lt;/root&gt;'));
var json = xdmp.toJSON(["a",false]);
var boundaryString = "gc0p4Jq0M2Yt08jU534c0p";
var manifest = fn.head(xdmp.unquote(
  '&lt;manifest&gt;'
+   '&lt;part&gt;&lt;headers&gt;'
+     '&lt;Content-Type&gt;application/xml&lt;/Content-Type&gt;'
+     '&lt;boundary&gt;gc0p4Jq0M2Yt08jU534c0p&lt;/boundary&gt;'
+      '&lt;/headers&gt;'
+    '&lt;/part&gt;'
+    '&lt;part&gt;&lt;headers&gt;&lt;Content-Type&gt;text/html&lt;/Content-Type&gt; &lt;/headers&gt;&lt;/part&gt; '
+    '&lt;part&gt;&lt;headers&gt;&lt;Content-Type&gt;application/json&lt;/Content-Type&gt;&lt;/headers&gt;&lt;/part&gt;'
+ '&lt;/manifest&gt;')).root;
xdmp.multipartEncode(
   boundaryString,
   manifest,
   [xml,html,json] );

=&gt;
--gc0p4Jq0M2Yt08jU534c0p
Content-Type: application/xml
boundary: gc0p4Jq0M2Yt08jU534c0p
Content-Length: 94

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;&lt;a&gt;Some other stuff in a .xml document&lt;/a&gt;&lt;/root&gt;
--gc0p4Jq0M2Yt08jU534c0p
Content-Type: text/html
Content-Length: 90

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;
--gc0p4Jq0M2Yt08jU534c0p
Content-Type: application/json
Content-Length: 12

["a", false]
--gc0p4Jq0M2Yt08jU534c0p--

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var html = fn.head(xdmp.unquote(
		'&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;'));
var xml = fn.head(xdmp.unquote('&lt;root&gt; \n\
              &lt;a&gt;Some other stuff in a .xml document&lt;/a&gt; \n\
      &lt;/root&gt;'));
var json = xdmp.toJSON(["a",false]);
var boundaryString = "gc0p4Jq0M2Yt08jU534c0p";
var manifest_json = [
  {
    "headers": {
      "Content-Type":"application/xml",
      "boundary":"gc0p4Jq0M2Yt08jU534c0p"
    }
    ,
    "options": {
     "outputEncoding": "utf-8",
     "outputSgmlCharacterEntities" : false
    }
  },
  {
    "headers": {
      "Content-Type":"text/html"
    }
  },
    {
    "headers": {
      "Content-Type":"application/json"
    }
  }
];
xdmp.multipartEncode(
   boundaryString,
   manifest_json,
   [xml,html,json] );

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="multipart-decode" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Extract the parts from a multipart encoding. The first item in the
  sequence is a manifest, and the remaining items are the decoded parts.</p>

  <p xmlns="http://www.w3.org/1999/xhtml">An attempt will be made to determine the type of content based on
  headers such as the part's content-type. If possible, an element will be
  returned, falling back to an xs:string, and finally binary().</p>

  <p xmlns="http://www.w3.org/1999/xhtml">The options control how the parts are unpacked, and are similar to
  <a href="#xdmp:zip-get">xdmp:zip-get</a> - default-namespace, repair,
  format, default-language,
  and encoding. The options apply to all parts, so specifying a format of
  binary will cause all parts to be returned as binary, and specifying text
  will cause all parts to be returned as xs:string if possible, falling back
  to binary() if necessary. This is useful if different parts need different
  options, in which case the resulting strings can each be passed to
  xdmp:unquote() with appropriate options.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="separator" type="xs:string">
    The string that is to be used as a separator.
  </apidoc:param>
      <apidoc:param name="data" type="binary()">
    The data (as a binary node) to be decoded.
  </apidoc:param>
      <apidoc:param name="options" type="element()" optional="true">
    Decode options.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $html := document{ &lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt; }
let $xml := document{ &lt;root&gt;&lt;a&gt;Some other stuff in a .xml document&lt;/a&gt;&lt;/root&gt; }
let $json := xdmp:to-json(("a",fn:false()))
let $boundary-string := "gc0p4Jq0M2Yt08jU534c0p"
let $mpe := xdmp:multipart-encode(
   $boundary-string,
   &lt;manifest&gt;
     &lt;part&gt;
       &lt;headers&gt;
         &lt;Content-Type&gt;application/xml&lt;/Content-Type&gt;
         &lt;boundary&gt;gc0p4Jq0M2Yt08jU534c0p&lt;/boundary&gt;
       &lt;/headers&gt;
     &lt;/part&gt;
     &lt;part&gt;
       &lt;headers&gt;
         &lt;Content-Type&gt;text/html&lt;/Content-Type&gt;
       &lt;/headers&gt;
      &lt;/part&gt;
     &lt;part&gt;
       &lt;headers&gt;
         &lt;Content-Type&gt;application/json&lt;/Content-Type&gt;
       &lt;/headers&gt;
     &lt;/part&gt;
   &lt;/manifest&gt;,
   ($xml,$html,$json) )
return xdmp:multipart-decode($boundary-string, $mpe)
=&gt;
&lt;manifest&gt;
  &lt;part&gt;
    &lt;headers&gt;
      &lt;Content-Type&gt;application/xml&lt;/Content-Type&gt;
      &lt;boundary&gt;gc0p4Jq0M2Yt08jU534c0p&lt;/boundary&gt;
      &lt;Content-Length&gt;94&lt;/Content-Length&gt;
    &lt;/headers&gt;
  &lt;/part&gt;
  &lt;part&gt;
    &lt;headers&gt;
      &lt;Content-Type&gt;text/html&lt;/Content-Type&gt;
      &lt;Content-Length&gt;90&lt;/Content-Length&gt;
    &lt;/headers&gt;
  &lt;/part&gt;
  &lt;part&gt;
    &lt;headers&gt;
      &lt;Content-Type&gt;application/json&lt;/Content-Type&gt;
      &lt;Content-Length&gt;12&lt;/Content-Length&gt;
    &lt;/headers&gt;
  &lt;/part&gt;
&lt;/manifest&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;&lt;a&gt;Some other stuff in a .xml document&lt;/a&gt;&lt;/root&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;
["a", false]

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var html = fn.head(xdmp.unquote(
	       '&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;'));
var xml = fn.head(xdmp.unquote('&lt;root&gt; \n\
                          &lt;a&gt;Some other stuff in a .xml document&lt;/a&gt; \n\
                        &lt;/root&gt;'));
var json = xdmp.toJSON(["a",false]);
var boundaryString = "gc0p4Jq0M2Yt08jU534c0p";
var manifest = fn.head(xdmp.unquote(
  '&lt;manifest&gt;'
+   '&lt;part&gt;&lt;headers&gt;'
+     '&lt;Content-Type&gt;application/xml&lt;/Content-Type&gt;'
+     '&lt;boundary&gt;gc0p4Jq0M2Yt08jU534c0p&lt;/boundary&gt;'
+      '&lt;/headers&gt;'
+    '&lt;/part&gt;'
+    '&lt;part&gt;&lt;headers&gt;&lt;Content-Type&gt;text/html&lt;/Content-Type&gt; &lt;/headers&gt;&lt;/part&gt; '
+    '&lt;part&gt;&lt;headers&gt;&lt;Content-Type&gt;application/json&lt;/Content-Type&gt;&lt;/headers&gt;&lt;/part&gt;'
+ '&lt;/manifest&gt;')).root;
var mpe = xdmp.multipartEncode(
   boundaryString,
   manifest,
   [xml,html,json] );
xdmp.multipartDecode(boundaryString, mpe);
=&gt;
[
  {
    "headers": {
                 "Content-Type": "application/xml",
                 "boundary": "gc0p4Jq0M2Yt08jU534c0p",
                 "Content-Length": "148"
               }
  },
  {
    "headers": {
                 "Content-Type": "text/html",
                 "Content-Length": "90"
               }
  },
  {
    "headers": {
                 "Content-Type": "application/json",
                 "Content-Length": "12"
               }
  }
]
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;&lt;a&gt;Some other stuff in a .xml document&lt;/a&gt;&lt;/root&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;&lt;p&gt;Some stuff in an .html document&lt;/p&gt;&lt;/html&gt;
["a", false]

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="encoding-language-detect" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Analyzes binary, text, or XML data and suggests possible pairs of encoding
  and language, with a confidence score for each pair. Scores of 10 and
  above are high confidence recommendations.
  The results are given in order of decreasing score.
  Accuracy may be poor for short documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="document" type="node()" optional="false">
    Node to be analyzed for possible encodings and languages.  If the node is
    an XML element or document node, the function takes the string value
    of the specified node (equivalent of <code xmlns="http://www.w3.org/1999/xhtml">fn:string($node)</code>) to
    detect the encoding and language.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()*</apidoc:return>
    <apidoc:return class="javascript">Array</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If the input is very small (for example, less than two words), then
  this built-in returns the empty sequence.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For best results, the input should be at least several hundred bytes.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:encoding-language-detect(xdmp:document-get("/tmp/unknown.dat"))
=&gt;
&lt;encoding-language xmlns="xdmp:encoding-language-detect"&gt;
  &lt;encoding&gt;windows-1252&lt;/encoding&gt;
  &lt;language&gt;en&lt;/language&gt;
  &lt;score&gt;9.834&lt;/score&gt;
&lt;/encoding-language&gt;
&lt;encoding-language xmlns="xdmp:encoding-language-detect"&gt;
  &lt;encoding&gt;windows-1252&lt;/encoding&gt;
  &lt;language&gt;it&lt;/language&gt;
  &lt;score&gt;8.976&lt;/score&gt;
&lt;/encoding-language&gt;
&lt;encoding-language xmlns="xdmp:encoding-language-detect"&gt;
  &lt;encoding&gt;windows-1250&lt;/encoding&gt;
  &lt;language&gt;sl&lt;/language&gt;
  &lt;score&gt;8.265&lt;/score&gt;
&lt;/encoding-language&gt;
...
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.encodingLanguageDetect(xdmp.documentGet("/space/appserver/test.sjs"));
=&gt;
[
  {"encoding":"utf-8","language":"en","score":10.4685125490417},
  {"encoding":"utf-8","language":"ro","score":10.2732191159561},
  {"encoding":"utf-8","language":"fr","score":9.73656934079629},
  ...
]
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="binary-decode" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Converts an encoded byte sequence, passed in as a binary node, from the
  specified encoding to a unicode string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="encoded" type="node()">
     A binary node containing the encoded stream.
  </apidoc:param>
      <apidoc:param name="encoding-name" type="xs:string">
    Specifies the encoding to use when decoding the document.
    Supported values include <code xmlns="http://www.w3.org/1999/xhtml">UTF-8</code> and <code xmlns="http://www.w3.org/1999/xhtml">ISO-8859-1</code>.
    The string specifed for the <code xmlns="http://www.w3.org/1999/xhtml">encoding</code> option will be matched
    to a registered encoding name using the Unicode Charset Alias Matching rules
    (<a href="http://www.unicode.org/reports/tr22/#Charset_Alias_Matching" xmlns="http://www.w3.org/1999/xhtml">http://www.unicode.org/reports/tr22/#Charset_Alias_Matching</a>).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:binary-decode(
   fn:doc("binary_doc_encoded_as_ShiftJIS.dat")/node(),
          "UTF-8")
=&gt; contents of document after decoding, in unicode characters
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.binaryDecode(
   cts.doc("binary_doc_encoded_as_ShiftJIS.dat").root,
          "UTF-8");
=&gt; contents of document after decoding, in unicode characters
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="host-forests" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of forest IDs in the specified host.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="ID" type="xs:unsignedLong" optional="false">
    A host ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:host-forests(xdmp:group-hosts(xdmp:group("Default")))
=&gt; (8456374036761185098, 10615125154705099114)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.hostForests(xdmp.groupHosts(xdmp.group("Default")));
=&gt; (8456374036761185098, 10615125154705099114)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="validate" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns an element containing a summary of validation errors in a node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()" optional="false">
  The node to validate.
  </apidoc:param>
      <apidoc:param name="mode" type="xs:string" optional="true">
  The validation mode, either "strict", "lax", or "type".
  </apidoc:param>
      <apidoc:param name="typeName" type="xs:QName" optional="true">
  The name of the type to validate against, if the mode is "type".  An error
  is raised if a typeName is given with a different validation mode, or if
  no type is given if the mode is "type".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(xdmp:validation-errors)</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declare namespace t="http://marklogic.com/xdmp/thesaurus";
xdmp:validate(
document {
&lt;t:thesaurus&gt;
  &lt;t:entry&gt;
     &lt;t:term&gt;one&lt;/t:term&gt;
     &lt;t:notes&gt;unexpected stuff&lt;/t:notes&gt;
     &lt;t:part-of-speech&gt;expl&lt;/t:part-of-speech&gt;
     &lt;t:synonym&gt;
        &lt;t:term&gt;unique&lt;/t:term&gt;
     &lt;/t:synonym&gt;
  &lt;/t:entry&gt;
&lt;/t:thesaurus&gt;
} )
=&gt;

&lt;xdmp:validation-errors&gt;
  &lt;error:error xmlns:error="http://marklogic.com/xdmp/error"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;error:code&gt;XDMP-VALIDATEUNEXPECTED&lt;/error:code&gt;
    &lt;error:name&gt;err:XQDY0027&lt;/error:name&gt;
    &lt;error:xquery-version&gt;1.0-ml&lt;/error:xquery-version&gt;
    &lt;error:message&gt;Invalid node&lt;/error:message&gt;
    &lt;error:format-string&gt;XDMP-VALIDATEUNEXPECTED:
    (err:XQDY0027) validate full { () } -- Invalid node: Found t:notes but
    expected (t:part-of-speech?,t:qualifiers?,t:scope-notes?,t:synonym*) at
    fn:doc("")/t:thesaurus/t:entry/t:notes using schema
    "thesaurus.xsd"&lt;/error:format-string&gt;
    &lt;error:retryable&gt;false&lt;/error:retryable&gt;
    &lt;error:expr&gt;validate full { () }&lt;/error:expr&gt;
    &lt;error:data&gt;
      &lt;error:datum&gt;t:notes&lt;/error:datum&gt;
      &lt;error:datum&gt;(t:part-of-speech?,t:qualifiers?,t:scope-notes?,t:synonym*)
      &lt;/error:datum&gt;
      &lt;error:datum&gt;fn:doc("")/t:thesaurus/t:entry/t:notes&lt;/error:datum&gt;
      &lt;error:datum&gt;"thesaurus.xsd"&lt;/error:datum&gt;
    &lt;/error:data&gt;
    &lt;error:stack&gt;
      &lt;error:frame&gt;
        &lt;error:line&gt;2&lt;/error:line&gt;
        &lt;error:column&gt;0&lt;/error:column&gt;
        &lt;error:xquery-version&gt;1.0-ml&lt;/error:xquery-version&gt;
      &lt;/error:frame&gt;
    &lt;/error:stack&gt;
  &lt;/error:error&gt;&lt;error:error xmlns:error="http://marklogic.com/xdmp/error"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;error:code&gt;XDMP-VALIDATEBADTYPE&lt;/error:code&gt;
    &lt;error:name&gt;err:XQDY0027&lt;/error:name&gt;
    &lt;error:xquery-version&gt;1.0-ml&lt;/error:xquery-version&gt;
    &lt;error:message&gt;Invalid node type&lt;/error:message&gt;
    &lt;error:format-string&gt;XDMP-VALIDATEBADTYPE: (err:XQDY0027) validate
    full { () } -- Invalid node type: t:part-of-speech lexical value "expl"
    invalid for expected type #t:part-of-speech at
    fn:doc("")/t:thesaurus/t:entry/t:part-of-speech using schema
    "thesaurus.xsd"&lt;/error:format-string&gt;
    &lt;error:retryable&gt;false&lt;/error:retryable&gt;
    &lt;error:expr&gt;validate full { () }&lt;/error:expr&gt;
    &lt;error:data&gt;
      &lt;error:datum&gt;t:part-of-speech&lt;/error:datum&gt;
      &lt;error:datum&gt;"expl"&lt;/error:datum&gt;
      &lt;error:datum&gt;#t:part-of-speech&lt;/error:datum&gt;
      &lt;error:datum&gt;fn:doc("")/t:thesaurus/t:entry/t:part-of-speech&lt;/error:datum&gt;
      &lt;error:datum&gt;"thesaurus.xsd"&lt;/error:datum&gt;
    &lt;/error:data&gt;
    &lt;error:stack&gt;
      &lt;error:frame&gt;
        &lt;error:line&gt;2&lt;/error:line&gt;
        &lt;error:column&gt;0&lt;/error:column&gt;
        &lt;error:xquery-version&gt;1.0-ml&lt;/error:xquery-version&gt;
      &lt;/error:frame&gt;
    &lt;/error:stack&gt;
  &lt;/error:error&gt;
&lt;/xdmp:validation-errors&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.validate(
xdmp.unquote('&lt;t:thesaurus xmlns:t="http://marklogic.com/xdmp/thesaurus"&gt;'
+  '&lt;t:entry&gt; \n \
     &lt;t:term&gt;one&lt;/t:term&gt; \n \
     &lt;t:notes&gt;unexpected stuff&lt;/t:notes&gt; \n \
     &lt;t:part-of-speech&gt;expl&lt;/t:part-of-speech&gt; \n \
     &lt;t:synonym&gt; \n \
        &lt;t:term&gt;unique&lt;/t:term&gt; \n \
     &lt;/t:synonym&gt; \n \
  &lt;/t:entry&gt; \n \
&lt;/t:thesaurus&gt;' ) );
=&gt;

&lt;xdmp:validation-errors xmlns:xdmp="http://marklogic.com/xdmp"&gt;
 &lt;error:error xmlns:error="http://marklogic.com/xdmp/error"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;error:code&gt;XDMP-VALIDATEUNEXPECTED&lt;/error:code&gt;
    &lt;error:name&gt;err:XQDY0027&lt;/error:name&gt;
    &lt;error:xquery-version&gt;JavaScript&lt;/error:xquery-version&gt;
    &lt;error:message&gt;Invalid node&lt;/error:message&gt;
    &lt;error:format-string&gt;XDMP-VALIDATEUNEXPECTED: validate full { () } --
    Invalid node: Found {http://marklogic.com/xdmp/thesaurus}notes but
    expected ({http://marklogic.com/xdmp/thesaurus}part-of-speech?,
		    {http://marklogic.com/xdmp/thesaurus}qualifiers?,
		    {http://marklogic.com/xdmp/thesaurus}scope-notes?,
		    {http://marklogic.com/xdmp/thesaurus}synonym+) at
    fn:doc('')/t:thesaurus/t:entry/t:notes using schema
		"thesaurus.xsd"&lt;/error:format-string&gt;
    &lt;error:retryable&gt;false&lt;/error:retryable&gt;
    &lt;error:expr&gt;validate full { () }&lt;/error:expr&gt;
    &lt;error:data&gt;
      &lt;error:datum&gt;{http://marklogic.com/xdmp/thesaurus}notes&lt;/error:datum&gt;
      &lt;error:datum&gt;({http://marklogic.com/xdmp/thesaurus}part-of-speech?,
		      {http://marklogic.com/xdmp/thesaurus}qualifiers?,
		      {http://marklogic.com/xdmp/thesaurus}scope-notes?,
		      {http://marklogic.com/xdmp/thesaurus}synonym+)
      &lt;/error:datum&gt;
      &lt;error:datum&gt;fn:doc('')/t:thesaurus/t:entry/t:notes&lt;/error:datum&gt;
      &lt;error:datum&gt;"thesaurus.xsd"&lt;/error:datum&gt;
    &lt;/error:data&gt;
    &lt;error:stack&gt;
      &lt;error:frame&gt;
  &lt;error:operation&gt;xdmp:eval("xdmp.validate(\nxdmp.unquote('&amp;lt;t:thesaurus
  xmlns:t=\"http://mark...", {}, &amp;lt;options
  xmlns="xdmp:eval"&amp;gt;&amp;lt;database&amp;gt;18210430083193679484&amp;lt;/database&amp;gt;
  &amp;lt;root&amp;gt;/space/appserver&amp;lt;...&amp;lt;/options&amp;gt;)
  &lt;/error:operation&gt;
  &lt;error:xquery-version&gt;JavaScript&lt;/error:xquery-version&gt;
      &lt;/error:frame&gt;
      &lt;error:frame&gt;
  &lt;error:uri&gt;/qconsole/endpoints/evaljs.sjs&lt;/error:uri&gt;
  &lt;error:xquery-version&gt;JavaScript&lt;/error:xquery-version&gt;
      &lt;/error:frame&gt;
    &lt;/error:stack&gt;
  &lt;/error:error&gt;&lt;error:error xmlns:error="http://marklogic.com/xdmp/error"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;error:code&gt;XDMP-VALIDATEBADTYPE&lt;/error:code&gt;
    &lt;error:name&gt;err:XQDY0027&lt;/error:name&gt;
    &lt;error:xquery-version&gt;JavaScript&lt;/error:xquery-version&gt;
    &lt;error:message&gt;Invalid node type&lt;/error:message&gt;
    &lt;error:format-string&gt;XDMP-VALIDATEBADTYPE: validate full { () } --
    Invalid node type: {http://marklogic.com/xdmp/thesaurus}part-of-speech
    lexical value "expl" invalid for expected type
    #{http://marklogic.com/xdmp/thesaurus}part-of-speech at fn:doc('')
    /t:thesaurus/t:entry/t:part-of-speech using schema "thesaurus.xsd"
    &lt;/error:format-string&gt;
    &lt;error:retryable&gt;false&lt;/error:retryable&gt;
    &lt;error:expr&gt;validate full { () }&lt;/error:expr&gt;
    &lt;error:data&gt;
      &lt;error:datum&gt;
        {http://marklogic.com/xdmp/thesaurus}part-of-speech
      &lt;/error:datum&gt;
      &lt;error:datum&gt;"expl"&lt;/error:datum&gt;
      &lt;error:datum&gt;
        #{http://marklogic.com/xdmp/thesaurus}part-of-speech
      &lt;/error:datum&gt;
      &lt;error:datum&gt;fn:doc('')/t:thesaurus/t:entry/t:part-of-speech&lt;/error:datum&gt;
      &lt;error:datum&gt;"thesaurus.xsd"&lt;/error:datum&gt;
    &lt;/error:data&gt;
    &lt;error:stack&gt;
      &lt;error:frame&gt;
  &lt;error:operation&gt;xdmp:eval("xdmp.validate(\nxdmp.unquote('&amp;lt;t:thesaurus
  xmlns:t=\"http://mark...", {}, &amp;lt;options xmlns="xdmp:eval"&amp;gt;&amp;lt;database
  &amp;gt;18210430083193679484&amp;lt;/database&amp;gt;&amp;lt;root&amp;gt;/space/appserver
  &amp;lt;...&amp;lt;/options&amp;gt;)&lt;/error:operation&gt;
  &lt;error:xquery-version&gt;JavaScript&lt;/error:xquery-version&gt;
      &lt;/error:frame&gt;
      &lt;error:frame&gt;
  &lt;error:uri&gt;/qconsole/endpoints/evaljs.sjs&lt;/error:uri&gt;
  &lt;error:xquery-version&gt;JavaScript&lt;/error:xquery-version&gt;
      &lt;/error:frame&gt;
    &lt;/error:stack&gt;
  &lt;/error:error&gt;
&lt;/xdmp:validation-errors&gt;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="timestamp-to-wallclock" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Converts a 64 bit timestamp value to an xs:dateTime.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="timestamp" type="xs:unsignedLong">
    The timestamp.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dateTime</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:timestamp-to-wallclock(9476208600000000)
=&gt; 2000-01-11T12:01:00
 </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.timestampToWallclock(9476208600000000);
=&gt; 2000-01-11T12:01:00
 </pre></apidoc:example>
  </apidoc:function><apidoc:function name="wallclock-to-timestamp" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Converts an xs:dateTime to a 64 bit timestamp value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="timestamp" type="xs:dateTime">
    The xs:datetime value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:wallclock-to-timestamp(xs:dateTime("2000-01-11T12:01:00"))
=&gt; 9476208600000000
 </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.wallclockToTimestamp(xs.dateTime("2000-01-11T12:01:00"));
=&gt; 9476208600000000
 </pre></apidoc:example>
  </apidoc:function><apidoc:function name="configuration-timestamp" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns timestamp of last configuration changed
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string" optional="true">
    The name of configuration file.
    The default value is empty string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:configuration-timestamp("databases.xml")
=&gt; 15495681647217162987
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.configurationTimestamp("databases.xml");
=&gt; 15495681647217162987
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="eager" type="builtin" lib="xdmp" category="Extension" subcategory="Extension" class="xquery">
    <apidoc:summary>
  Returns the value of its argument, evaluated eagerly.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="item()*">
    The value to return
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $eager := xdmp:eager(cts:search(fn:doc(), "hello"))
let $complex := xdmp:lazy(my:bigCalculation())
return
  if (fn:count($eager) &gt; 10 )
  then $complex
  else ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var eager = xdmp.eager(cts.search("hello"));
var complex = xdmp.lazy(my.bigCalculation());
if (fn.count(eager) &gt; 10 ) {
    complex; }
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="lazy" type="builtin" lib="xdmp" category="Extension" subcategory="Extension" class="xquery">
    <apidoc:summary>
  Returns the value of its argument, evaluated lazily.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="item()*">
    The value to return
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $eager := xdmp:eager(cts:search(fn:doc(), "hello"))
let $complex := xdmp:lazy(my:bigCalculation())
return
  if (fn:count($eager) &gt; 10 )
  then $complex
  else ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var eager = xdmp.eager(cts.search("hello"));
var complex = xdmp.lazy(my.bigCalculation());
if (fn.count(eager) &gt; 10 ) {
    complex; }
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="caller-dialect" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the dialect (e.g., "javascript", "1.0-ml", etc) of the caller
  or the empty sequence if no dialect information is available.
  Note that the return is not the language the function that calls
  this built-in is written in; it is the dialect the function is called from.
  For example, if a JavaScript program calls function "foo",
  which uses xdmp:caller-dialect, then the return from xdmp:caller-dialect
  will be “javascript” even if "foo" is implemented in XQuery.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string?</apidoc:return>
  </apidoc:function><apidoc:function name="ldap-search" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns ldap search result.  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">The function
  returns a Sequence containing objects, where each object is 
  an ldap attribute with its value.</span>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="xs:string">
    The query is a string representation of the filter to apply in the search.
    The string should conform to the format specified in RFC 4515 as
    extended by RFC 4526. For example, "(cn=Jane Doe)".
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:ldap" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code>key.</span>
    This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>"username"</dt>
    <dd>ldap username.</dd>
    <dt>"password"</dt>
    <dd>ldap password.</dd>
    <dt class="xquery">"server-uri"</dt>
    <dt class="javascript">"serverUri"</dt>
    <dd>ldap server uri.</dd>
    <dt class="xquery">"search-base"</dt>
    <dt class="javascript">"searchBase"</dt>
    <dd>search-base is the DN of the entry at which to start the search.</dd>
    <dt class="xquery">"use-appserver-config"</dt>
    <dt class="javascript">"useAppserverConfig"</dt>
    <dd>Use appserver config as default. Specify true or false. The default
    is false.</dd>
    <dt class="xquery">"bind-method"</dt>
    <dt class="javascript">"bindMethod"</dt>
    <dd>ldap bind method. Specify <code>simple</code>, <code>MD5</code> or <code>external</code>.</dd>
    <dt class="xquery">"credential-id"</dt>
    <dt class="javascript">"credentialId"</dt>
    <dd>The credential to be used to sign the generated certificate.</dd>
    <dt class="xquery">"start-tls"</dt>
    <dt class="javascript">"startTls"</dt>
    <dd>start tls (Transport Layer Security) extended operation. Specify true or false. The default
    is false.</dd>
    <dt class="xquery">"certificate"</dt>
    <dt class="javascript">"certificate"</dt>
    <dd>client certificate.</dd>
    <dt class="xquery">"private-key"</dt>
    <dt class="javascript">"privateKey"</dt>
    <dd>private key for the client certificate.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()*</apidoc:return>
    <apidoc:return class="javascript">Sequence</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:ldap-search(
  "(cn=Jane Doe)",
   &lt;options xmlns="xdmp:ldap"&gt;
  &lt;username&gt;admin&lt;/username&gt;
  &lt;password&gt;admin&lt;/password&gt;
  &lt;server-uri&gt;ldap://dc1.mltest1.local:389&lt;/server-uri&gt;
  &lt;search-base&gt;CN=Users,DC=MLTEST1,DC=LOCAL&lt;/search-base&gt;
 &lt;/options&gt;)

=&gt;
&lt;ldap-object xmlns="http://marklogic.com/xdmp/ldap/object"&gt;
&lt;ldap-attribute id="DN"&gt;CN=Jane Doe,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;top&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;person&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;organizationalPerson&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;user&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="cn"&gt;Jane Doe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="sn"&gt;Tsoi&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="givenName"&gt;Jane&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="distinguishedName"&gt;CN=Jane Doe,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="instanceType"&gt;4&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="whenCreated"&gt;20120418134913.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="whenChanged"&gt;20130423001215.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="displayName"&gt;Jane Doe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="uSNCreated"&gt;21173&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="memberOf"&gt;CN=TestGroup Admin,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="memberOf"&gt;CN=Domain Admins,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="memberOf"&gt;CN=Remote Desktop Users,CN=Builtin,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="uSNChanged"&gt;82727&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="name"&gt;Jane Doe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="userAccountControl"&gt;66048&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="badPwdCount"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="codePage"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="countryCode"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="badPasswordTime"&gt;130112986222890625&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="lastLogoff"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="lastLogon"&gt;130117512192890625&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="pwdLastSet"&gt;129792305530986328&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="primaryGroupID"&gt;513&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="adminCount"&gt;1&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="accountExpires"&gt;9223372036854775807&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="logonCount"&gt;205&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="sAMAccountName"&gt;jdoe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="sAMAccountType"&gt;805306368&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="userPrincipalName"&gt;jdoe@MLTEST1.LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectCategory"&gt;CN=Person,CN=Schema,CN=Configuration,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="dSCorePropagationData"&gt;20120530014553.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="dSCorePropagationData"&gt;16010101000000.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="lastLogonTimestamp"&gt;130111495353203125&lt;/ldap-attribute&gt;
&lt;/ldap-object&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.ldapSearch(
  "(cn=Jane Doe)",
  {"username":"admin",
   "password": "password",
   "serverUri":"ldap://dc1.mltest1.local:389",
   "searchBase":"CN=Users,DC=MLTEST1,DC=LOCAL"})

=&gt; (Sequence of ldap attributes)
{"DN":"CN=TestUser 1,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"objectClass":"top"}
{"objectClass":"person"}
{"objectClass":"organizationalPerson"}
{"objectClass":"user"}
{"cn":"TestUser 1"}
{"sn":"1"}
{"givenName":"TestUser"}
{"distinguishedName":"CN=TestUser 1,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"instanceType":"4"}
{"whenCreated":"20120403202513.0Z"}
{"whenChanged":"20141110215113.0Z"}
{"displayName":"TestUser 1"}
{"uSNCreated":"16424"}
{"memberOf":"CN=TestGroup Admin,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"memberOf":"CN=Domain Admins,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"memberOf":"CN=Enterprise Admins,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"uSNChanged":"821482"}
{"name":"TestUser 1"}
{"userAccountControl":"66048"}
{"badPwdCount":"0"}
{"codePage":"0"}
{"countryCode":"0"}
{"badPasswordTime":"130603927417675781"}
{"lastLogoff":"0"}
{"lastLogon":"130604945508720703"}
{"pwdLastSet":"129779583138125000"}
{"primaryGroupID":"513"}
{"adminCount":"1"}
{"accountExpires":"9223372036854775807"}
{"logonCount":"384"}
{"sAMAccountName":"test1"}
{"sAMAccountType":"805306368"}
{"userPrincipalName":"test1@MLTEST1.LOCAL"}
{"objectCategory":"CN=Person,CN=Schema,CN=Configuration,DC=MLTEST1,DC=LOCAL"}
{"dSCorePropagationData":"20120403203538.0Z"}
{"dSCorePropagationData":"16010101000000.0Z"}
{"lastLogonTimestamp":"130601298735058594"}
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="ldap-lookup" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns an ldap entry.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="DN" type="xs:string">
    The DN of the entry to be returned.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML element
    in the "xdmp:ldap" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code>key.</span>
    This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>username</dt>
    <dd>ldap username.</dd>
    <dt>password</dt>
    <dd>ldap password.</dd>
    <dt class="xquery">server-uri</dt>
    <dt class="javascript">serverUri</dt>
    <dd>ldap server uri.</dd>
    <dt class="xquery">use-appserver-config</dt>
    <dt class="javascript">useAppserverConfig</dt>
    <dd>Use appserver config as default. Specify true or false. The default
    is false.</dd>
    <dt class="xquery">bind-method</dt>
    <dt class="javascript">bindMethod</dt>
    <dd>ldap bind method. Specify <code>simple</code>, <code>MD5</code> or <code>external</code>.</dd>
    <dt class="xquery">credential-id</dt>
    <dt class="javascript">credentialId</dt>
    <dd>The credential to be used to sign the generated certificate.</dd>
    <dt class="xquery">"start-tls"</dt>
    <dt class="javascript">"startTls"</dt>
    <dd>start tls (Transport Layer Security) extended operation. Specify true or false. The default
    is false.</dd>
    <dt class="xquery">"certificate"</dt>
    <dt class="javascript">"certificate"</dt>
    <dd>client certificate.</dd>
    <dt class="xquery">"private-key"</dt>
    <dt class="javascript">"privateKey"</dt>
    <dd>private key for the client certificate.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()*</apidoc:return>
    <apidoc:return class="javascript">Sequence</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:ldap-lookup(
  "CN=Jane Doe,CN=Users,DC=MLTEST1,DC=LOCAL",
   &lt;options xmlns="xdmp:ldap"&gt;
  &lt;username&gt;admin&lt;/username&gt;
  &lt;password&gt;admin&lt;/password&gt;
  &lt;server-uri&gt;ldap://dc1.mltest1.local:389&lt;/server-uri&gt;
 &lt;/options&gt;)

=&gt;
&lt;ldap-object xmlns="http://marklogic.com/xdmp/ldap/object"&gt;
&lt;ldap-attribute id="DN"&gt;CN=Jane Doe,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;top&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;person&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;organizationalPerson&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectClass"&gt;user&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="cn"&gt;Jane Doe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="sn"&gt;Tsoi&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="givenName"&gt;Jane&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="distinguishedName"&gt;CN=Jane Doe,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="instanceType"&gt;4&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="whenCreated"&gt;20120418134913.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="whenChanged"&gt;20130423001215.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="displayName"&gt;Jane Doe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="uSNCreated"&gt;21173&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="memberOf"&gt;CN=TestGroup Admin,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="memberOf"&gt;CN=Domain Admins,CN=Users,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="memberOf"&gt;CN=Remote Desktop Users,CN=Builtin,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="uSNChanged"&gt;82727&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="name"&gt;Jane Doe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="userAccountControl"&gt;66048&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="badPwdCount"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="codePage"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="countryCode"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="badPasswordTime"&gt;130112986222890625&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="lastLogoff"&gt;0&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="lastLogon"&gt;130117512192890625&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="pwdLastSet"&gt;129792305530986328&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="primaryGroupID"&gt;513&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="adminCount"&gt;1&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="accountExpires"&gt;9223372036854775807&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="logonCount"&gt;205&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="sAMAccountName"&gt;jdoe&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="sAMAccountType"&gt;805306368&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="userPrincipalName"&gt;jdoe@MLTEST1.LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="objectCategory"&gt;CN=Person,CN=Schema,CN=Configuration,DC=MLTEST1,DC=LOCAL&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="dSCorePropagationData"&gt;20120530014553.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="dSCorePropagationData"&gt;16010101000000.0Z&lt;/ldap-attribute&gt;
&lt;ldap-attribute id="lastLogonTimestamp"&gt;130111495353203125&lt;/ldap-attribute&gt;
&lt;/ldap-object&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.ldapLookup(
  "CN=Jane Doe,CN=Users,DC=MLTEST1,DC=LOCAL",
  {"username":"admin",
   "password":"admin",
   "serverUri":"ldap://dc1.mltest1.local:389"});

=&gt; (Sequence of ldap attributes)
{"DN":"CN=TestUser 1,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"objectClass":"top"}
{"objectClass":"person"}
{"objectClass":"organizationalPerson"}
{"objectClass":"user"}
{"cn":"TestUser 1"}
{"sn":"1"}
{"givenName":"TestUser"}
{"distinguishedName":"CN=TestUser 1,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"instanceType":"4"}
{"whenCreated":"20120403202513.0Z"}
{"whenChanged":"20141110215113.0Z"}
{"displayName":"TestUser 1"}
{"uSNCreated":"16424"}
{"memberOf":"CN=TestGroup Admin,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"memberOf":"CN=Domain Admins,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"memberOf":"CN=Enterprise Admins,CN=Users,DC=MLTEST1,DC=LOCAL"}
{"uSNChanged":"821482"}
{"name":"TestUser 1"}
{"userAccountControl":"66048"}
{"badPwdCount":"0"}
{"codePage":"0"}
{"countryCode":"0"}
{"badPasswordTime":"130603927417675781"}
{"lastLogoff":"0"}
{"lastLogon":"130604939565429688"}
{"pwdLastSet":"129779583138125000"}
{"primaryGroupID":"513"}
{"adminCount":"1"}
{"accountExpires":"9223372036854775807"}
{"logonCount":"384"}
{"sAMAccountName":"test1"}
{"sAMAccountType":"805306368"}
{"userPrincipalName":"test1@MLTEST1.LOCAL"}
{"objectCategory":"CN=Person,CN=Schema,CN=Configuration,DC=MLTEST1,DC=LOCAL"}
{"dSCorePropagationData":"20120403203538.0Z"}
{"dSCorePropagationData":"16010101000000.0Z"}
{"lastLogonTimestamp":"130601298735058594"}
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="aws-region" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary class="xquery">
  Returns the current Amazon Web Services region.
  If MarkLogic is not running on Amazon web Services, returns an empty sequence.
</apidoc:summary>
    <apidoc:summary class="javascript">
  Returns the current Amazon Web Services region.
  If MarkLogic is not running on Amazon web Services, returns null.
</apidoc:summary>
    <apidoc:return class="xquery">string?</apidoc:return>
    <apidoc:return class="javascript">String?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:aws-region() =&gt; "us-east-1"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.awsRegion() =&gt; "us-east-1"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="aws-services-domain" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary class="xquery">
  Returns the current Amazon Web Services services domain.
  If MarkLogic is not running on Amazon Web Services, returns an empty sequence.
</apidoc:summary>
    <apidoc:summary class="javascript">
  Returns the current Amazon Web Services services domain.
  If MarkLogic is not running on Amazon Web Services, returns null.
</apidoc:summary>
    <apidoc:return class="xquery">string?</apidoc:return>
    <apidoc:return class="javascript">String?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:aws-services-domain() =&gt; "amazonaws.com"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.awsServicesDomain() =&gt; "amazonaws.com"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="aws-services-partition" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary class="xquery">
  Returns the current Amazon Web Services services partition.
  If MarkLogic is not running on Amazon Web Services, returns an empty sequence.
</apidoc:summary>
    <apidoc:summary class="javascript">
  Returns the current Amazon Web Services services partition.
  If MarkLogic is not running on Amazon Web Services, returns null.
</apidoc:summary>
    <apidoc:return class="xquery">string?</apidoc:return>
    <apidoc:return class="javascript">String?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:aws-services-partition() =&gt; "aws"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.awsServicesPartition() =&gt; "aws"
</pre></apidoc:example>
  </apidoc:function></apidoc:module>