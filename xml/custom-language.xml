<apidoc:module name="CustomLanguageModule" 
	category="Custom Language Management" 
	bucket="XQuery Library Modules" 
        xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
        xmlns="http://www.w3.org/1999/xhtml" lib="clang">
  <apidoc:summary access="public" category="Custom Language Management"
	  bucket="XQuery Library Modules">
  <p>Use the custom language management functions to configure plugin
   stemmers and tokenizers for specific languages in MarkLogic Server.
   The custom language module is installed as the following file:</p>
  <ul><li><code><em>install_dir</em>/Modules/MarkLogic/custom-language.xqy</code></li></ul>
  <p>where <code><em>install_dir</em></code> is the directory in which 
  MarkLogic Server is installed.</p>
  <p>Many of these functions provide new configuration information. You must
   explictly update the configuration by calling
   <code><a class="xquery" href="#clang:language-config-write">clang:language-config-write</a><a class="javascript" href="#clang.languageConfigWrite">clang.languageConfigWrite</a></code>
   in the same statement that you use the functions in order for them to take 
   effect.</p>
  <span class="xquery"><p>To use the this module in your own code, include 
   the following line in your XQuery prolog:</p>
  <p><code>import module namespace clang = "http://marklogic.com/xdmp/custom-language"
		  at "/MarkLogic/custom-language.xqy";
     </code></p>
  <p>The library namespace prefix <code>clang</code> is <em>not</em> predefined in
  the server.</p></span>
  <span class="javascript"><p>
   To use this module in your own code, use a <code>require</code>
   statement similar to the following:</p>
   <p><code>const clang = require('/MarkLogic/custom-language.xqy');</code></p>
  </span>
  <p>Calling <span class="xquery"><code>clang:language-config-write</code>
   </span><span class="javascript"><code>clang.languageConfigWrite</code>
   </span> restarts the server so that your changes can take effect.</p>
  <p>For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>.</p>
  </apidoc:summary>

  <apidoc:function name="lexer" type="clang" lib="clang" 
	category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function constructs a custom lexer configuration item, suitable
      for use with 
      <a class="xquery" href="#clang:user-language-plugin">clang:user-language-plugin</a><a 
        class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>.
    </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="variant" type="xs:string">
        The name of the lexer plugin, either the name of one of the built-in
        lexers, or the name of a user-defined lexer capability. The latter
        should be the name of a <code>LexerUDF</code> capability registered by
        your plugin when MarkLogic calls  <code>Registry::registerLexer</code>.
	    </apidoc:param>
	    <apidoc:param name="normalization" type="xs:string?" optional="true">
        The normalization that should be used to present text runs to the
        plugin lexer. Either "NFC" or "NFD". Default: NFC.
	    </apidoc:param>
	    <apidoc:param name="args" type="item()*" optional="true">
        A sequence of arguments that will be passed to the initialization of
        the plugin lexer as a sequence of strings.
	    </apidoc:param>
	    <apidoc:param name="library" type="xs:string" optional="true">
        The name of the library containing <code>variant</code>. You should
        use an empty string when configuring a built-in plugin. If you omit
        this parameter, the <code>library</code> from the enclosing
        plugin configuration is used. See the Usage Notes for details.
        </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(lang:lexer)</apidoc:return>
    <apidoc:usage>
     If you specify a library name in 
     <code class="xquery">clang:lexer</code><code class="javascript">clang.lexer</code> 
     and when passing a lexer to
     <a class="xquery" href="#clang:user-language-plugin">clang:user-language-plugin</a>
     <a class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>
     then the value in the lexer takes precedence over the value in the
     plugin configuration.
     <p>For a built-in lexer, specify an empty string for the library name,
      or omit the <code>library</code> parameter and specify an empty string in 
      <code class="xquery">clang:user-language-plugin</code><code class="javascript">clang.userLanguagePlugin</code>.
     </p><p>For a user-defined plugin, the library name should be of the form
       <code>plugin_path/plugin_id</code>, such as "native/sample_plugin".
       If you omit this parameter, then the <code>library</code> value from
       <code class="xquery">clang:user-language-plugin</code><code class="javascript">clang.userLanguagePlugin</code> will be used.
     </p>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
        <a class="xquery" href="#clang:user-language-plugin">clang:user-language-plugin</a>
        <a class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2376708'>Built-in Lexer Plugin Reference</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/custom-tokenization.xml%2366167'>User-Defined Lexer Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: Create a lexer config item from a user-defined plugin. :)
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
    at "/MarkLogic/custom-language.xqy";

clang:lexer("special_lexer", "NFD", (), "native/sample_plugin")
  ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
// Create a lexer config item for a user-defined plugin.
'use strict';
const clang = require('/MarkLogic/custom-language');

clang.lexer('special_lexer','NFD', (), 'native/sample_plugin');
    ]]></pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: Create a lexer config item from a built-in plugin (atilika),
 : and pass in some configuration options. :)
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
    at "/MarkLogic/custom-language.xqy";

clang:lexer("atilika", (), ("normal-mode"), "")
  ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
// Create a lexer config item from a built-in plugin (atilika), and
// pass in a configuration option.
'use strict';
const clang = require('/MarkLogic/custom-language');

clang:lexer('atilika', null, 
            Sequence.from(['normal-mode']), '')
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="stemmer" type="clang" lib="clang" 
	category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function constructs a custom stemmer configuration item, suitable
      for use with
      <a class="xquery" href="#clang:user-language-plugin">clang:user-language-plugin</a><a 
        class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>.
    </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="variant" type="xs:string">
        The name of a stemmer plugin, either one of the built-in stemmers or
        a user-defined lexer capability. The latter should be the name of a 
        <code>StemmerUDF</code> capability registered by your plugin
        when MarkLogic calls <code>Registry::registerStemmer</code>.
	    </apidoc:param>
	    <apidoc:param name="normalization" type="xs:string?" optional="true">
        The normalization that should be used to present text runs to the
        plugin stemmer. Either "NFC" or "NFKD". Default: NFC.
	    </apidoc:param>
	    <apidoc:param name="args" type="item()*" optional="true">
        A sequence of arguments that will be passed to the initialization of
        the plugin stemmer as a sequence of strings.
	    </apidoc:param>
	    <apidoc:param name="library" type="xs:string" optional="true">
        The name of the library containing <code>variant</code>. You should
        use an empty string when configuring a built-in plugin. If you omit
        this parameter, the <code>library</code> from the enclosing
        plugin configuration element is used. See the Usage Notes for details.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(lang:stemmer)</apidoc:return>
    <apidoc:usage>
     If you specify a library name in 
     <code class="xquery">clang:stemmer</code><code class="javascript">clang.stemmer</code> 
     and when passing a stemmer to
     <a class="xquery" href="#clang:user-language-plugin">clang:user-language-plugin</a>
     <a class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>
     then the library in the stemmer configuration takes precedence over the 
     library in the plugin configuration.
     <p>For a built-in stemmer, specify an empty string for the library name,
      or omit the <code>library</code> parameter and specify an empty string in 
      <code class="xquery">clang:user-language-plugin</code><code class="javascript">clang.userLanguagePlugin</code>.
     </p><p>For a user-defined plugin, the library name should be of the form
       <code>plugin_path/plugin_id</code>, such as "native/sample_plugin".
       If you omit this parameter, then the <code>library</code> value from
       <code class="xquery">clang:user-language-plugin</code><code class="javascript">clang.userLanguagePlugin</code> will be used.
     </p>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
        <a class="xquery" href="#clang:user-language-plugin">clang:user-language-plugin</a>
        <a class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2346695'>Built-in Stemmer Plugin Reference</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/stemming.xml%2320822'>Using a User-Defined Stemmer Plugin</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: Create a stemmer config item for a user-defined plugin, and pass
 : in a configuration option (keep-short-vowels). :)
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
  at "/MarkLogic/custom-language.xqy";

clang:stemmer("special_stemmer", "NFC",
              ("keep-short-vowels=true"), "native/sampleplugin")
    ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
// Create a stemmer config item for a user-defined plugin, and pass
// in a configuration option (keep-short-vowels).
'use strict';
const clang = require('/MarkLogic/custom-language');

clang.stemmer('special_stemmer', 'NFC', 
              Sequence.from(['keep-short-vowels=true']), 'native/sampleplugin');
    ]]></pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: Create a stemmer config item from a built-in plugin (bitext),
 : and pass in some configuration options. :)
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
    at "/MarkLogic/custom-language.xqy";

clang:stemmer("bitext", (), ("algorithm=german2", "lowercase"), "")
  ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
// Create a stemmer config item from a user-defined plugin (bitext), and
// pass in some configuration options.
'use strict';
const clang = require('/MarkLogic/custom-language');

clang:stemmer('bitext', null, 
            Sequence.from(['algorithm=german2', 'lowercase']), '')
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="user-language-plugin" type="clang" lib="clang" 
	category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function constructs a user language plugin configuration item,
      suitable for use with
      <a class="xquery" href="#clang:user-language">clang:user-language</a><a 
        class="javascript" href="#clang.userLanguage">clang.userLanguage</a>.
    </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="library" type="xs:string?">
        The name of the library containing the lexer and stemmer plugins 
        (if they do not explictly specify a library). Use an empty string 
        for built-in plugins. Use a library reference of the form
        <code>plugin_path/plugin_id</code> for user-defined plugins. Any
        library specified within the <code>lexer</code> or <code>stemmer</code>
        parameters takes precedence over this value.
	    </apidoc:param>
	    <apidoc:param name="lexer" type="element(lang:lexer)?">
        A lexer configuration item created using 
	      <a class="xquery" href="#clang:lexer">clang:lexer</a><a 
	        class="javascript" href="#clang.lexer">clang.lexer</a>.
	    </apidoc:param>
	    <apidoc:param name="stemmer" type="element(lang:stemmer)?">
        A stemmer configuration item created using
	      <a class="xquery" href="#clang:stemmer">clang:stemmer</a><a 
	        class="javascript" href="#clang.stemmer">clang.stemmer</a>.
	    </apidoc:param>
	    <apidoc:param name="delegate" type="xs:boolean?" optional="true">
        Whether the stemmer should delegate automatically to the base stemmer.
        Default is true. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2337286'>Understanding Stemming Delegation</a> in the <em>Search Developer's Guide</em>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(lang:plugin)</apidoc:return>
    <apidoc:usage>
      If you have previously installed a custom dictionary for this language,
      and you are changing the stemmer or lexer plugin to a different library,
      you will need to reinstall your dictionary. For example, you will need
      to call <span class="xquery"><code>cdict:dictionary-write</code></span>
      <span class="javascript"><code>cdict.dictionaryWrite</code></span> again.
     <p>
      If no library can be derived from either the <code>library</code> 
      parameter of this function or the configuration of the supplied lexer
      or stemmer, an exception is raised when you try to use the lexer or
      stemmer. For example, if you omit <code>library</code> by setting it 
      to an empty sequence (XQuery) or null (JavaScript)), and also pass in 
      a <code>lexer</code> with no configured library, then an exception is 
      raised when you try to use the lexer.
     </p>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: Create a plugin config item for a custom user-defined lexer and stemmer. :)
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
  at "/MarkLogic/custom-language.xqy";

let $lexer := clang:lexer("special_lexer", "NFD")
let $stemmer := clang:stemmer("special_stemmer", "NFC", ("keep-short-vowels=true"))
return clang:user-language-plugin("native/special", $lexer, $stemmer)
  ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
// Create a plugin config item for a custom user-defined lexer and stemmer.
'use strict';
const clang = require('/MarkLogic/custom-language');

const lexer = clang.lexer('special_lexer','NFD');
const stemmer = clang.stemmer(
    'special_stemmer', 'NFC', Sequence.from(['keep-short-vowels=true']));
clang.userLanguagePlugin('native/special', lexer, stemmer);
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="user-language" type="clang" lib="clang" 
	 category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function constructs a user language configuration item,
      suitable for use with
      <a class="xquery" href="#clang:language-config-update">clang:language-config-update</a><a 
        class="javascript" href="#clang.languageConfigUpdate">clang.languageConfigUpdate</a>.
    </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="lang" type="xs:string">
        The language this configuration applies to. An ISO language code, such as "en".
	    </apidoc:param>
	    <apidoc:param name="plugin" type="element(lang:plugin)">
        A language plugin configuration item constructed by 
	     <a class="xquery" href="#clang:user-language-plugin">clang:userLanguagePlugin</a><a 
	      class="javascript" href="#clang.userLanguagePlugin">clang.userLanguagePlugin</a>.
	    </apidoc:param>
      <apidoc:param name="tokenType" type="xs:string" optional="true">
        The token type key for this language. Allowed values:
        one of the digit characters ('0','1',...,'9'). This only applies for 
        languages that do not already have advanced support. Languages
        with advanced support already have a distinct token type that 
        cannot be overridden. You should usually omit this parameter.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(lang:user-language)</apidoc:return>
    <apidoc:usage>
      The <code>tokenType</code> parameter is sometimes needed to distinguish
      between multiple user-defined languages. This is an advanced feature
      that is not required by most users. If you think you need to use this 
      capability, please contact MarkLogic Technical Support.
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
  at "/MarkLogic/custom-language.xqy";

let $lexer := clang:lexer("special_lexer","NFD")
let $stemmer := clang:stemmer("special_stemmer","NFC",("keep-short-vowels=true"))
let $plugin := lang:user-language-plugin("native/special",$lexer,$stemmer)
return clang:user-language("ca", $plugin, "1")
  ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
'use strict';
const clang = require('/MarkLogic/custom-language');

const lexer = clang.lexer('special_lexer','NFD');
const stemmer = clang.stemmer('special_stemmer', 'NFC', Sequence.from(['keep-short-vowels=true']));
const plugin = clang.userLanguagePlugin('native/special', lexer, stemmer);
clang.userLanguage('ca', plugin, '1');
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="update-user-language" type="clang" lib="clang" 
	category="Custom Language Management" 
	bucket="XQuery Library Modules">
    <apidoc:summary>
      Add or replace a configuration item for a language in the given
      language configuration item, and return the new configuration.
    </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="config" type="element(lang:user-languages)">
		  A custom language configuration specification, typically as returned
	  	from one of the custom language module functions.
	    </apidoc:param>
	    <apidoc:param name="user-lang" type="element(lang:user-language)">
	    The configuration definition for a language, as constructed by   
	    <a class="xquery" href="#clang:user-language">clang:user-language</a><a 
	      class="javascript" href="#clang.userLanguage">clang.userLanguage</a>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(lang:user-languages)</apidoc:return>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
  at "/MarkLogic/custom-language.xqy";

let $lexer := clang:lexer("special_lexer","NFD")
let $stemmer := clang:stemmer("special_stemmer","NFC",("keep-short-vowels=true"))
let $plugin := lang:user-language-plugin("native/special",$lexer,$stemmer)
let $lang := clang:user-language("ca",$plugin)
let $config := clang:language-config-read()
let $config := clang:update-user-language($config,$lang)

(: NOTE: calling clange:language-config-write causes a restart :)
return clang:language-config-write($config)
    ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
'use strict';
const clang = require('/MarkLogic/custom-language');

const lexer = clang.lexer('special_lexer','NFD');
const stemmer = clang.stemmer('special_stemmer', 'NFC', Sequence.from(['keep-short-vowels=true']));
const plugin = clang.userLanguagePlugin('native/special', lexer, stemmer);
const catalanConfig = clang.userLanguage('ca', plugin);

// NOTE: Calling clang.languageConfigWrite causes a restart
clang.languageConfigWrite(
  clang.updateUserLanguage(
    clang.languageConfigRead(), catalanConfig));
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="delete-user-language" type="clang" lib="clang" 
	  category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function returns user languages configuration with any existing
      configuration item for a given language removed.
    </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="config" type="element(lang:user-languages)">
		    A custom language configuration specification, typically as returned
		    from one of the custom language module functions.
	    </apidoc:param>
	    <apidoc:param name="lang" type="xs:string">
	      An ISO language code, such as "en".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(lang:user-languages)</apidoc:return>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
  at "/MarkLogic/custom-language.xqy";

let $config := clang:language-config-read()
let $config := clang:delete-user-language($config,"ca")

(: NOTE: Calling clang:language-config-write causes a restart :)
return clang:language-config-write($config)
    ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
'use strict';
const clang = require('/MarkLogic/custom-language');

// NOTE: Calling clang.languageConfigWrite causes a restart
clang.languageConfigWrite(
  clang.deleteUserLanguage(
    clang.languageConfigRead(), 'ca'));
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="language-config-read" type="clang" lib="clang" 
	category="Custom Language Management" 
	bucket="XQuery Library Modules">
    <apidoc:summary>
      This function reads the custom language configuration specification from
	    the cluster configuration files.
    </apidoc:summary>
    <apidoc:return>element(lang:user-languages)</apidoc:return>
	<apidoc:privilege>
     This operation requires the <code>custom-language-admin-read</code>
     role or the following privileges:
     <p><code>
       http://marklogic.com/xdmp/privileges/custom-language-read
     </code></p>
     <p><code>
       http://marklogic.com/xdmp/privileges/xdmp-read-cluster-config-file/languages.xml
      </code></p>
	</apidoc:privilege>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
  at "/MarkLogic/custom-language.xqy";

clang:language-config-read()//lang:user-language[*:name="ca"]
    ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
'use strict';
const clang = require('/MarkLogic/custom-language');

clang.languageConfigRead();
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="language-config-delete" type="clang" lib="clang" 
	category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function removes all custom language configuration from
	  the cluster configuration files. Calling this function restarts 
      MarkLogic Server.
    </apidoc:summary>
    <apidoc:return>empty-sequence()</apidoc:return>
	<apidoc:privilege>
     This function requires the <code>custom-language-admin-write</code>
     role or the following privileges:
	 <p><code>
      http://marklogic.com/xdmp/privileges/custom-language-write
     </code></p>
	 <p><code>
      http://marklogic.com/xdmp/privileges/xdmp-write-cluster-config-file/languages.xml
     </code></p>
	</apidoc:privilege>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
		at "/MarkLogic/custom-language.xqy";

(: NOTE: This call causes a restart. :)
clang:language-config-delete()
    ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
'use strict';
const clang = require('/MarkLogic/custom-language');

// NOTE: This call causes a restart.
clang.languageConfigDelete();
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="language-config-write" type="clang" lib="clang" 
	category="Custom Language Management" bucket="XQuery Library Modules">
    <apidoc:summary>
      This function saves a custom language configuration specification to 
	  the cluster configuration files. Calling this function restarts 
      MarkLogic Server.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(lang:user-languages)">
   	    A custom language configuration specification, typically as returned
        from one of the custom language module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
	<apidoc:privilege>
     This function requires the <code>custom-language-admin-write</code>
     role or the following privileges:
	 <p><code>
      http://marklogic.com/xdmp/privileges/custom-language-write
     </code></p>
	 <p><code>
      http://marklogic.com/xdmp/privileges/xdmp-write-cluster-config-file/languages.xml
     </code></p>
	</apidoc:privilege>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/languages.xml%2314714'>Configuring Tokenization and Stemming Plugins</a> in the <em>Search Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace clang = "http://marklogic.com/xdmp/custom-language" 
	 at "/MarkLogic/custom-language.xqy";

let $config := clang:language-config-read()
let $config := clang:delete-user-language($config,"ca")

(: NOTE: This call causes a restart. :)
return clang:language-config-write($config)
    ]]></pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
'use strict';
const clang = require('/MarkLogic/custom-language');

// NOTE: This call causes a restart.
clang.languageConfigWrite(
  clang.deleteUserLanguage(clang.languageConfigRead(), 'ca'));
    ]]></pre></apidoc:example>
  </apidoc:function>

</apidoc:module>
