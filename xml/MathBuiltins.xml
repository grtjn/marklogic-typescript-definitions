<apidoc:module name="MathBuiltins" category="MathBuiltins" lib="math" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
The math built-in functions.
</apidoc:summary><apidoc:function name="acos" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the arc cosine of x, in radians,
  in the range from 0 to pi (inclusive).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The fraction to be evaluated. Must be in the range of -1 to +1 (inclusive).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:acos(.5)

  =&gt; 1.0471975511966
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.acos(.5)

  =&gt; 1.0471975511966
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="asin" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the arc sine of x, in radians,
  in the range from -pi/2 to +pi/2 (inclusive).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The fraction to be evaluated. Must be in the range of -1 to +1 (inclusive).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:asin(.5)

  =&gt; 0.523598775598299
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.asin(.5)

  =&gt; 0.523598775598299
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="atan" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the arc tangent of x, in radians.
  in the range from -pi/2 to +pi/2 (inclusive).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:atan(3.14159)

  =&gt; 1.26262701154934
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.atan(3.14159)

  =&gt; 1.26262701154934
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="atan2" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the arc tangent of y/x, in radians, 
  in the range from -pi/2 to +pi/2 (inclusive),
  using the signs of y and x to determine the apropriate quadrant.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="y" type="xs:double">
  The floating point dividend.
  </apidoc:param>
      <apidoc:param name="x" type="xs:double">
  The floating point divisor.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:atan2(36.23, 5.234) 

  =&gt; 1.42732303452594 
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.atan2(36.23, 5.234) 

  =&gt; 1.42732303452594 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cos" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the cosine of x,
  in the range from -1 to +1 (inclusive).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated. 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:cos(11) 

  =&gt; 0.00442569798805079
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.cos(11) 

  =&gt; 0.00442569798805079
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cosh" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the hyperbolic cosine of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point number to be evaluated. 
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:cosh(11)

  =&gt; 29937.0708659498
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.cosh(11)

  =&gt; 29937.0708659498
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sin" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the sine of x,
  in the range from -1 to +1 (inclusive).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:sin(1.95)

  =&gt; 0.928959715003869
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.sin(1.95)

  =&gt; 0.928959715003869
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sinh" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the hyperbolic sine of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:sinh(1.95) 

  =&gt; 3.44320675450139
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.sinh(1.95) 

  =&gt; 3.44320675450139
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="tan" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the tangent of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:tan(19.5) 

  =&gt; 0.760905351982977
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.tan(19.5) 

  =&gt; 0.760905351982977
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="cot" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the cotangent of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
math:cot(19.5)

  =&gt; 1.3142239
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
math.cot(19.5)

  =&gt; 1.3142239
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="tanh" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the hyperbolic tangent of x,
  in the range from -1 to +1 (inclusive).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:tanh(.95) 

  =&gt; 0.739783051274004
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.tanh(.95) 

  =&gt; 0.739783051274004
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="exp" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns e (approximately 2.71828182845905) to the xth power.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The exponent to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:exp(.01) 

  =&gt; 1.01005016708417
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.exp(.01) 

  =&gt; 1.01005016708417
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="frexp" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns x broken up into mantissa and exponent, where
  x = mantissa*2^exponent.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The exponent to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">(xs:double,xs:integer)</apidoc:return>
    <apidoc:return class="javascript">ValueIterator</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:frexp(10) 

  =&gt; 0.625
     4
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.frexp(10) 

  =&gt; 0.625
     4
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="ldexp" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns x*2^i.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="y" type="xs:double">
  The floating-point number to be multiplied.
  </apidoc:param>
      <apidoc:param name="i" type="xs:integer">
  The exponent integer.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:ldexp(1.333, 10)

  =&gt; 1364.992
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.ldexp(1.333, 10)

  =&gt; 1364.992
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="log" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the base-e logarithm of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:log(1000)

  =&gt; 6.90775527898214
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.log(1000)

  =&gt; 6.90775527898214
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="log10" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the base-10 logarithm of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:log10(1000)) 

  =&gt; 3
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.log10(1000)) 

  =&gt; 3
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="modf" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns x broken up into fraction and integer.
  x = fraction+integer.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">(xs:double,xs:integer)</apidoc:return>
    <apidoc:return class="javascript">Sequence</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:modf(1.333)

  =&gt; 0.333
     1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.modf(1.333)

  =&gt; 0.333
     1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="pow" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns x^y.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating-point base number.
  </apidoc:param>
      <apidoc:param name="y" type="xs:double">
  The exponent to be applied to x.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:pow(2, 10)

  =&gt; 1024
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.pow(2, 10)

  =&gt; 1024
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sqrt" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the square root of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:sqrt(4) 

  =&gt; 2
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.sqrt(4) 

  =&gt; 2
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="ceil" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the smallest integer greater than or equal to x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:ceil(36.00001) 

  =&gt; 37
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.ceil(36.00001) 

  =&gt; 37
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="fabs" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the absolute value of x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:fabs(4.013)

  =&gt; 4.013
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.fabs(4.013)

  =&gt; 4.013
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="floor" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the largest integer less than or equal to x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
    The floating point number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:floor(4.013)

  =&gt; 4
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.floor(4.013)

  =&gt; 4
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="fmod" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the remainder of x/y.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The floating point dividend.
  </apidoc:param>
      <apidoc:param name="y" type="xs:double">
  The floating point divisor.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:fmod(10, 3)

  =&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.fmod(10, 3)

  =&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="degrees" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns numeric expression converted from radians to degrees.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
   An angle expressed in radians.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:degrees(math:pi() div 2)

  =&gt; 90
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.degrees(math.pi()/2)

  =&gt; 90
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="radians" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns numeric expression converted from degrees to radians.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
   An angle expressed in degrees.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
   math:radians(90)

  =&gt; 1.5707963267949
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
   math.radians(90)

  =&gt; 1.5707963267949
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="pi" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the value of pi.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:pi()

  =&gt; 3.14159265358979323946
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.pi()

  =&gt; 3.14159265358979323946
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="variance-p" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the population variance of a sequence of values. The function
  returns the empty sequence if the input is the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
  The sequence of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:variance-p((122, 100, 23))

  =&gt; 1801.55555555555
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.varianceP([122, 100, 23])

  =&gt; 1801.55555555555
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="variance" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the sample variance of a sequence of values. The function returns
  the empty sequence if the length of the input sequence is less than 2.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
  The sequence of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:variance((122, 100, 23))

  =&gt; 2702.33333333333
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.variance([122, 100, 23])

  =&gt; 2702.33333333333
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="stddev-p" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the standard deviation of a population. The function
  returns the empty sequence if the input is the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
  The sequence of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:stddev-p((122, 100, 23))

  =&gt; 42.4447353102308
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.stddevP([122, 100, 23])

  =&gt; 42.4447353102308
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="stddev" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the sample standard deviation of a sequence of values. The function
  returns the empty sequence if the length of the input sequence is less
  than 2.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
  The sequence of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:stddev((122, 100, 23))

  =&gt; 51.9839718887787
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.stddev([122, 100, 23])

  =&gt; 51.9839718887787
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="covariance-p" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">
  Returns the population covariance of a data set. The size of the input array
  should be 2. The function eliminates all pairs for which either the first
  element or the second element is empty. After the elimination, if the length
  of the input is 0, the function returns the empty sequence.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">For the version of this that uses range indexes, see 
  <a href="#cts:covariance-p" class="xquery">cts:covariance-p</a><a href="#cts.covarianceP" class="javascript">cts.covarianceP</a>.
  </p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="json:array*">
  The input data set. Each array should contain a pair of values.
  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Use <a href="#xdmp.arrayValues">xdmp.arrayValues</a>
  to produce a Sequence of array values.</span>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $array :=
    for $i in (1 to 10)
    let $j := 2*$i
    return json:to-array(($i,$j))

  return math:covariance-p($array)

  =&gt; 16.5
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i;
  x.push(i, j);
  arr.push(x); };
math.covarianceP(arr);

  =&gt; 16.5
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="covariance" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">
  Returns the sample covariance of a data set. The size of the input array
  should be 2. The function eliminates all pairs for which either the first
  element or the second element is empty. After the elimination, if the
  length of the input is less than 2, the function returns the empty sequence.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">For the version of this that uses range indexes, see 
  <a href="#cts:covariance" class="xquery">cts:covariance</a><a href="#cts.covariance" class="javascript">cts.covariance</a>.
  </p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="json:array*">
  The input data set. Each array should contain a pair of values. 
  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Use <a href="#xdmp.arrayValues">xdmp.arrayValues</a>
  to produce a Sequence of array values.</span>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $array :=
    for $i in (1 to 10)
    let $j := 2*$i
    return json:to-array(($i,$j))

  return math:covariance($array)

  =&gt; 18.3333333333333
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i;
  x.push(i, j);
  arr.push(x); };
math.covariance(arr);


  =&gt; 18.3333333333333
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="correlation" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the Pearson correlation coefficient of a data set. The size of
  the input array should be 2. The function eliminates all pairs for which
  either the first element or the second element is empty. After the
  elimination, if the length of the input is less than 2, the function
  returns the empty sequence. After the elimination, if the standard deviation
  of the first column or the standard deviation of the second column is 0,
  the function returns the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="json:array*">
  The input data set. Each array should contain a pair of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $array :=
    for $i in (1 to 10)
    let $j := 2*$i
    return json:to-array(($i,$j))

  return math:correlation($array)

  =&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i;
  x.push(i, j);
  arr.push(x); };
math.correlation(arr);

  =&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="linear-model" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Returns a linear model that fits the given data set. The size of the input
  array should be 2, as currently only simple linear regression model is
  supported. The first element of the array should be the value of the
  dependent variable while the other element should be the value of the
  independent variable.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The function eliminates all pairs for which either the first element or
  the second element is empty. After the elimination, if the length of the
  input is less than 2, the function returns the empty sequence. After the
  elimination, if the standard deviation of the independent variable is 0,
  the function returns a linear model with intercept = the mean of the
  dependent variable, coefficients = NaN and r-squared = NaN. After the
  elimination, if the standard deviation of the dependent variable is 0,
  the function returns a linear model with r-squared = NaN.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For the version of this function that uses Range Indexes, see
  <a href="#cts:linear-model">cts:linear-model</a>.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="json:array*">
  The input data set. Each array should contain a pair of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>math:linear-model?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $array :=
    for $i in (1 to 10)
    let $j := 2*$i + 1
    return json:to-array(($j,$i))
return math:linear-model($array)
=&gt;
math:linear-model(
  &lt;math:linear-model intercept="1" coefficients="2" rsquared="1"
        xmlns:xs="http://www.w3.org/2001/XMLSchema" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:math="http://marklogic.com/xdmp/math"/&gt;)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i + 1;
  x.push(j, i);
  arr.push(x); };
math.linearModel(arr);
=&gt;
math:linear-model(
  &lt;math:linear-model intercept="1" coefficients="2" rsquared="1"
        xmlns:xs="http://www.w3.org/2001/XMLSchema" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:math="http://marklogic.com/xdmp/math"/&gt;)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="linear-model-intercept" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the intercept of the linear model.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="linear-model" type="math:linear-model">
    A linear model.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $array :=
    for $i in (1 to 10)
    let $j := 2*$i + 1
    return json:to-array(($j,$i))
  let $lm := math:linear-model($array)
  return math:linear-model-intercept($lm)

  =&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i + 1;
  x.push(j, i);
  arr.push(x); };
var lm = math.linearModel(xdmp.arrayValues(arr));
math.linearModelIntercept(lm);

  =&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="linear-model-rsquared" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the R^2 value of the linear model.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="linear-model" type="math:linear-model">
    A linear model.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $array :=
    for $i in (1 to 10)
    let $j := 2*$i + 1
    return json:to-array(($j,$i))
  let $lm := math:linear-model($array)
  return math:linear-model-rsquared($lm)

  =&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i;
  x.push(j, i);
  arr.push(x); };
var lm = math.linearModel(xdmp.arrayValues(arr));
math.linearModelRsquared(lm);

  =&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="linear-model-coeff" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the coefficients of the linear model.  Currently only simple
  linear regression model is supported so the return should contain only
  one coefficient (also called "slope").
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="linear-model" type="math:linear-model">
    A linear model.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $array :=
    for $i in (1 to 10)
    let $j := 2*$i + 1
    return json:to-array(($j,$i))
  let $lm := math:linear-model($array)
  return math:linear-model-coeff($lm)

  =&gt; 2
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var arr = new Array();
for (i=1; i &lt; 11; i++) { 
  var x = new Array();
  var j = 2 * i + 1;
  x.push(j, i);
  arr.push(x); };
var lm = math.linearModel(xdmp.arrayValues(arr));
math.linearModelCoeff(lm);

  =&gt; 2
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="percentile" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns a sequence of percentile(s) given a sequence of percentage(s).
  The function returns the empty sequence if either <code xmlns="http://www.w3.org/1999/xhtml">$arg</code> or 
  <code xmlns="http://www.w3.org/1999/xhtml">$p</code> is the
  empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
  The sequence of values to calculate the percentile(s) on.
  </apidoc:param>
      <apidoc:param name="p" type="xs:double*">
  The sequence of percentage(s).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:percentile((2, 3, 1, 1.1, 2.2, 4),(0.25,0.75))

  =&gt; 1.05 3.5
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.percentile([2, 3, 1, 1.1, 2.2, 4],[0.25,0.75])

  =&gt; 1.05 3.5
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="median" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the median of a sequence of values. The function returns the empty
  sequence if the input is the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
  The sequence of values.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:median((2, 3, 1, 1.1, 2.2, 4))

  =&gt; 2.1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.median([2, 3, 1, 1.1, 2.2, 4])

  =&gt; 2.1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="percentile" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Math Lexicon">
    <apidoc:summary>
  Returns a sequence of percentile(s) given a sequence of percentage(s).
  This function works like <code xmlns="http://www.w3.org/1999/xhtml">math:percentile</code> except each item in
  the sequence is repeated <code xmlns="http://www.w3.org/1999/xhtml">cts:frequency</code> times before calculating
  the percentiles(s). The function returns the empty sequence if either $arg
  or $p is the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
   The sequence of values. The values should be the result of a lexicon lookup.
  </apidoc:param>
      <apidoc:param name="p" type="xs:double*">
  The sequence of percentage(s).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double*</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">This function is designed to take a sequence of values returned
 by a lexicon function (for example, <code>cts:element-values</code>); if you
 input non-lexicon values, the result will be the empty sequence.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

(:
   This query assumes an element range index of type 'int'
   is configured for the 'int' element in the database. It
   generates some sample data and then performs the aggregation
   in a separate transaction.
:)
for $x in 1 to 10
return
xdmp:document-insert(fn:concat($x, ".xml"),
&lt;my-element&gt;{
  for $y in 1 to $x
  return &lt;int&gt;{$x}&lt;/int&gt;
}&lt;/my-element&gt;);

cts:percentile(cts:element-values(xs:QName("int"), (),
               ("type=int", "item-frequency")), (0.25,0.5,0.75))
=&gt;
5,7,9


</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// This query assumes an element range index of type 'int'
// is configured for the 'int' element in the database. It
// generates some sample data and then performs the aggregation
// in a separate transaction.

declareUpdate();
for (x=1; x &lt; 11; x++) {
  var obj = new Object();
     for (y=0; y &lt; x; y++){
      {obj.int = y}; };
xdmp.documentInsert(fn.concat(x, ".json"), obj);} 

// After creating the above document, run the following:
//
cts.percentile(
  cts.values([cts.jsonPropertyReference("int", ["type=int"])]),
  [0.25,0.5,0.75])
=&gt;
1.5
4.5
7.5

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="median" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Math Lexicon">
    <apidoc:summary>
  Returns a frequency-weighted median of a sequence.
  This function works like <code xmlns="http://www.w3.org/1999/xhtml">math:median</code> except each item in the
  sequence is repeated <code xmlns="http://www.w3.org/1999/xhtml">cts:frequency</code> times before calculating
  the median. If $arg is the empty sequence, the function returns the empty
  sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:double*">
   The sequence of values. The values should be the result of a lexicon lookup.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">This function is designed to take a sequence of values returned
 by a lexicon function (for example, <code>cts:element-values</code>); if you
 input non-lexicon values, the result will be the empty sequence.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

(:
   This query assumes an element range index of type 'int'
   is configured for the 'int' element in the database. It
   generates some sample data and then performs the aggregation
   in a separate transaction.
:)
for $x in 1 to 10
return
xdmp:document-insert(fn:concat($x, ".xml"),
&lt;my-element&gt;{
  for $y in 1 to $x
  return &lt;int&gt;{$x}&lt;/int&gt;
}&lt;/my-element&gt;);

cts:median(cts:element-values(xs:QName("int"), (),
           ("type=int", "item-frequency"))),
cts:median(cts:element-values(xs:QName("int"), (),
           ("type=int", "fragment-frequency")))
=&gt;
7
5.5


</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  This query assumes an element range index of type 'int'
//  is configured for the 'int' element in the database. It
//  generates some sample data and then performs the aggregation
//  in a separate transaction.

declareUpdate();

for (x=1; x&lt;11; x++) {
  var o = new Object();
  o.int = [];
  for (y=x; y&lt;11; y++) { 
    o.int.push(y);    
  };
  xdmp.documentInsert((x + ".json"), o); 
};

******
// Run the following query:

var res = new Array();
res.push(cts.median(cts.values(
  cts.jsonPropertyReference("int", "type=int"), null,
                            ["item-frequency"])));
res.push(cts.median(cts.values(
  cts.jsonPropertyReference("int", "type=int"), null,
                            ["fragment-frequency"])));
res;
=&gt;
[7, 7]


</pre></apidoc:example>
  </apidoc:function><apidoc:function name="rank" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the rank of a value in a data set. Ranks are skipped in the event
  of ties. If the given value is not equal to any item in the sequence, the
  function returns the empty sequence. The function can be used on numeric
  values, <code xmlns="http://www.w3.org/1999/xhtml">xs:yearMonthDuration</code>, <code xmlns="http://www.w3.org/1999/xhtml">xs:dayTimeDuration</code>, 
  <code xmlns="http://www.w3.org/1999/xhtml">xs:string</code>, <code xmlns="http://www.w3.org/1999/xhtml">xs:anyURI</code>,
  <code xmlns="http://www.w3.org/1999/xhtml">xs:date</code>, <code xmlns="http://www.w3.org/1999/xhtml">xs:dateTime</code>, <code xmlns="http://www.w3.org/1999/xhtml">xs:time</code>,
  and <code xmlns="http://www.w3.org/1999/xhtml">cts:point</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg1" type="xs:anyAtomicType*">
  The sequence of values.
  </apidoc:param>
      <apidoc:param name="arg2" type="xs:anyAtomicType">
  The value to be "ranked".
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"(default)</dt>
        <dd>Rank the value as if the sequence was sorted in ascending order.
        </dd>
        <dt>"descending"</dt>
        <dd>Rank the value as if the sequence was sorted in descending order.
        </dd>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>Applies only when $arg is of the xs:string type. If no specified,
        the default collation is used.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Applies only when $arg is of the cts:point type. If no specified,
        the default coordinate system is used.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:rank((1, 7, 5, 5, 10, 9),9)

  =&gt; 5
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.rank([1, 7, 5, 5, 10, 9],9)

  =&gt; 5
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="percent-rank" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  Returns the rank of a value in a data set as a percentage of the data set.
  If the given value is not equal to any item in the sequence, the function
  returns the empty sequence. See <code xmlns="http://www.w3.org/1999/xhtml">math:rank</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:anyAtomicType*">
  The sequence of values.
  </apidoc:param>
      <apidoc:param name="value" type="xs:anyAtomicType">
  The value to be "ranked".
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"(default)</dt>
        <dd>Rank the value as if the sequence was sorted in ascending order.
        </dd>
        <dt>"descending"</dt>
        <dd>Rank the value as if the sequence was sorted in descending order.
        </dd>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>Applies only when $arg is of the xs:string type. If no specified,
        the default collation is used.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Applies only when $arg is of the cts:point type. If no specified,
        the default coordinate system is used.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:percent-rank((1, 7, 5, 5, 10, 9),9)

  =&gt; 0.833333333333333
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.percentRank([1, 7, 5, 5, 10, 9],9)

  =&gt; 0.833333333333333
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="rank" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Math Lexicon">
    <apidoc:summary>
  Returns the rank of a value in a data set. This function works like
  <code xmlns="http://www.w3.org/1999/xhtml">math:rank</code> except each item in the sequence is repeated
  <code xmlns="http://www.w3.org/1999/xhtml">cts:frequency</code> times before calculating the rank.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:anyAtomicType*">
  The sequence of values.
  </apidoc:param>
      <apidoc:param name="value" type="xs:anyAtomicType">
  The value to be "ranked".
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"(default)</dt>
        <dd>Rank the value as if the sequence was sorted in ascending order.
        </dd>
        <dt>"descending"</dt>
        <dd>Rank the value as if the sequence was sorted in descending order.
        </dd>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>Applies only when $arg is of the xs:string type. If no specified,
        the default collation is used.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Applies only when $arg is of the cts:point type. If no specified,
        the default coordinate system is used.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">This function is designed to take a sequence of values returned
 by a lexicon function (for example, <code>cts:element-values</code>); if you
 input non-lexicon values, the result will be the empty sequence.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xquery version "1.0-ml";

  (:
     This query assumes an int range index
     is configured in the database. It
     generates some sample data and then
     performs the aggregation in a separate
     transaction.
  :)
  for $x in 1 to 10
  return
    xdmp:document-insert(fn:concat($x, ".xml"),
      &lt;my-element&gt;{
        for $y in 1 to $x
        return &lt;int&gt;{$x}&lt;/int&gt;
    }&lt;/my-element&gt;);

  cts:rank(cts:element-values(
    xs:QName("int"), (), ("type=int", "item-frequency")), 9)

  =&gt; 37
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  This query assumes an element range index of type 'int'
//  is configured for the 'int' element in the database. It
//  generates some sample data and then performs the aggregation
//  in a separate transaction.

declareUpdate();

for (x=1; x&lt;11; x++) {
  var o = new Object();
  o.int = [];
  for (y=x; y&lt;11; y++) { 
    o.int.push(y);    
  };
  xdmp.documentInsert((x + ".json"), o); 
};

******
// Run the following query:

cts.rank(cts.values(
  cts.jsonPropertyReference("int", "type=int"), null,
                            ["item-frequency"]), 9);
=&gt; 37


</pre></apidoc:example>
  </apidoc:function><apidoc:function name="percent-rank" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Math Lexicon">
    <apidoc:summary>
  Returns the rank of a value in a data set as a percentage of the data set.
  This function works like <code xmlns="http://www.w3.org/1999/xhtml">math:percent-rank</code> except each item in
  the sequence is repeated <code xmlns="http://www.w3.org/1999/xhtml">cts:frequency</code> times before calculating
  the rank.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:anyAtomicType*">
  The sequence of values.
  </apidoc:param>
      <apidoc:param name="value" type="xs:anyAtomicType">
  The value to be "ranked".
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"(default)</dt>
        <dd>Rank the value as if the sequence was sorted in ascending order.
        </dd>
        <dt>"descending"</dt>
        <dd>Rank the value as if the sequence was sorted in descending order.
        </dd>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>Applies only when $arg is of the xs:string type. If no specified,
        the default collation is used.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Applies only when $arg is of the cts:point type. If no specified,
        the default coordinate system is used.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double?</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">This function is designed to take a sequence of values returned
 by a lexicon function (for example, <code>cts:element-values</code>); if you
 input non-lexicon values, the result will be the empty sequence.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xquery version "1.0-ml";

  (:
     This query assumes an int range index
     is configured in the database. It
     generates some sample data and then
     performs the aggregation in a separate
     transaction.
  :)
  for $x in 1 to 10
  return
    xdmp:document-insert(fn:concat($x, ".xml"),
      &lt;my-element&gt;{
        for $y in 1 to $x
        return &lt;int&gt;{$x}&lt;/int&gt;
    }&lt;/my-element&gt;);

  cts:percent-rank(
    cts:element-values(
      xs:QName("int"), (), ("type=int", "item-frequency")), 9)

  =&gt; 0.672727272727273
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  This query assumes an element range index of type 'int'
//  is configured for the 'int' element in the database. It
//  generates some sample data and then performs the aggregation
//  in a separate transaction.

declareUpdate();

for (x=1; x&lt;11; x++) {
  var o = new Object();
  o.int = [];
  for (y=x; y&lt;11; y++) { 
    o.int.push(y);    
  };
  xdmp.documentInsert((x + ".json"), o); 
};

******
// Run the following query:

cts.percentRank(cts.values(
  cts.jsonPropertyReference("int", "type=int"), null,
                            ["item-frequency"]), 9);
=&gt; 0.672727272727273


</pre></apidoc:example>
  </apidoc:function><apidoc:function name="mode" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">
  Returns the mode of a sequence.  The mode is the value that occurs most
  frequently in a data set. If no value occurs more than once in the data
  set, the function returns the empty sequence. If the input is the empty
  sequence, the function returns the empty sequence.
  </p><p xmlns="http://www.w3.org/1999/xhtml">
  Note that a data set can have multiple “modes”. The order of multiple
  modes in the returned sequence is undefined.
  </p><p xmlns="http://www.w3.org/1999/xhtml">
  Also note that values from a lexicon lookup are repeated
  <code>cts:frequency</code> times before calculating the mode.
   </p><p xmlns="http://www.w3.org/1999/xhtml">
  The function can be used on numeric values, <code>xs:yearMonthDuration</code>,
  <code>xs:dayTimeDuration</code>, <code>xs:string</code>, 
  <code>xs:anyURI</code>, <code>xs:date</code>, 
  <code>xs:dateTime</code>, <code>xs:time</code>,
  and <code>cts:point</code>.
   </p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:anyAtomicType*">
  The sequence of values.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>Applies only when $arg is of the xs:string type. If no specified,
        the default collation is used.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Applies only when $arg is of the cts:point type. If no specified,
        the default coordinate system is used.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:anyAtomicType*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math:mode((1,2,2,3,2,3,4,6,7,7,7))

  =&gt; 2 7
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  math.mode([1,2,2,3,2,3,4,6,7,7,7])

  =&gt; 2 7
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="trunc" type="builtin" lib="math" category="MathBuiltins">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns the number truncated to a certain number of decimal places.
If type of $arg is one of the four numeric types xs:float,
xs:double, xs:decimal or xs:integer the type of the result is the same as the
type of $arg. If the type of $arg is a type derived from one of the numeric
types, the result is an instance of the base numeric type.
</p><p xmlns="http://www.w3.org/1999/xhtml">
For xs:float and xs:double arguments, if the argument is positive infinity,
then positive infinity is returned. If the argument is negative infinity, then
negative infinity is returned. If the argument is positive zero, then positive
zero is returned. If the argument is negative zero, then negative zero is
returned. 
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="numeric?">
A numeric value to truncate.
  </apidoc:param>
      <apidoc:param name="n" type="xs:integer" optional="true">
The numbers of decimal places to truncate to. The default is 0. Negative values
cause that many digits to the left of the decimal point to be truncated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>numeric?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
math:trunc(125.815)	returns 125
math:trunc(125.815, 0)	returns 125
math:trunc(125.815, 1)	returns 125.8
math:trunc(125.815, 2)	returns 125.81
math:trunc(125.815, 3)	returns 125.815
math:trunc(-125.815, 2)	returns -125.81
math:trunc(125.815, -1)	returns 120
math:trunc(125.815, -2)	returns 100
math:trunc(125.815, -3)	returns 0
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
math.trunc(125.815)	returns 125
math.trunc(125.815, 0)	returns 125
math.trunc(125.815, 1)	returns 125.8
math.trunc(125.815, 2)	returns 125.81
math.trunc(125.815, 3)	returns 125.815
math.trunc(-125.815, 2)	returns -125.81
math.trunc(125.815, -1)	returns 120
math.trunc(125.815, -2)	returns 100
math.trunc(125.815, -3)	returns 0
</pre></apidoc:example>
  </apidoc:function></apidoc:module>