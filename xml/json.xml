<?xml version="1.0" encoding="UTF-8"?>
<apidoc:module xmlns:apidoc="http://marklogic.com/xdmp/apidoc" name="JSON" 
	xmlns="http://www.w3.org/1999/xhtml" category="JSON" 
	bucket="XQuery Library Modules" lib="json">
	<apidoc:summary category="JSON" bucket="XQuery Library Modules">
    <p>This is the JSON module used for customized tranformation 
			from XML to and from JSON.</p>
    <p>To use the JSON module as part of your own XQuery 
			module, include the following line in your 
			XQuery prolog: </p>
<p><code>import module namespace json = "http://marklogic.com/xdmp/json"
         at "/MarkLogic/json/json.xqy";</code></p>
    <p>The JSON module employs a concept of 'strategies'.  Strategies 
		    are different methods of transforming XML to JSON or JSON 
		    to XML.  Different strategies tackle different use 
		    cases.</p>
    <p>The <code>basic</code> strategy is used by the REST API and 
		    handles the use case of transforming arbitrary JSON into a 
		    fixed XML structure which is designed to be efficiently 
		    stored and indexed in MarkLogic.  
		    The <code>basic</code> strategy is semantically 
		    roundtrippable from JSON to XML back to JSON.  The 
		    <code>basic</code> strategy is 
		    used when no configuration object is specified.</p>
    <p>The <code>full</code> strategy targets the opposite use case 
		    as the default (<code>basic</code>) strategy.  
		    The <code>full</code> strategy
		    takes arbitrary XML and produces a fixed JSON structure 
		    which preserves most of the semantics of the XML 
		    document.</p>
    <p>The <code>custom</code> strategy allows customization of the 
		    JSON and XML transformation and produces more reasonable 
		    looking XML or JSON at the expense of supporting a 
		    smaller subset of XML document structures.</p>
  </apidoc:summary>


	<apidoc:function name="config" lib="json" category="JSON" 
		bucket="XQuery Library Modules">
    <apidoc:summary>This function creates a configuration object 
			for a specified strategy.</apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="strategy" type="xs:string">The name of 
		    the strategy.  One of <code>basic</code> (simple default JSON  
        conversion, starting from JSON), <code>full</code> (starting from
        XML), or <code>custom</code>.</apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:usage>
	    Use this function to when you want to use a custom strategy.   
	    Supported strategies are <code>basic</code>, <code>full</code>, 
	    <code>custom</code>.  
	    The <code>basic</code> strategy is used if you supply no 
	    parameters and has no user customizable properties.
	    The following properties are user customizable to configure the 
	    behavior of the transformation.
    <h2><code>full</code> strategy properties</h2>
      <table>
        <thead>
          <tr>
            <th><p>Property</p></th>
            <th><p>Description</p></th>
            <th><p>Default value</p></th>
        </tr>
        </thead>
        <tbody>
          <tr>
            <td><p><code>json-attributes</code></p></td>
            <td><p>The member named used to contain 
			    attributes </p></td>
            <td><p><code>_attributes</code></p></td>
          </tr>
          <tr>
            <td><p><code>json-children</code></p></td>
            <td><p>The member named used to contain the 
			    children array </p></td>
            <td><p><code>_children</code></p></td>
          </tr>
          <tr>
            <td><p><code>whitespace</code></p></td>
            <td><p>How to handle XML text values that only contain
			    whitespace when converting to JSON. Set to "ignore"
                to ignore such values. By default, whitespace-only
                text values are included.</p></td>
            <td><p>empty string</p></td>
          </tr>
        </tbody>
      </table>
      <h2><code>custom</code> strategy properties</h2>
      <table>
        <thead>
          <tr>
            <th><p>Property</p></th>
            <th><p>Description</p></th>
            <th><p>Direction</p></th>
            <th><p>Type</p></th>
            <th><p>Default value</p></th>
        </tr>
        </thead>
        <tr>
          <td><p><code>array-element-names</code></p></td>
          <td><p>A list of XML element names which will be 
			  treated as an Array in JSON. These can be 
			  <code>xs:QName</code> or <code>xs:string</code>. 
			  If an <code>xs:string</code> is used then the 
			  default namespace is used to construct the 
			  QName.</p></td>
          <td><p>XML to JSON </p></td>
          <td><p><code>(xs:QName | xs:string)*</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>ignore-element-names</code></p></td>
          <td><p>A list of XML element names which will be 
            ignored when transformed to JSON. These can be 
            <code>xs:QName</code> or <code>xs:string</code>. 
            If an <code>xs:string</code> is used then the 
            default namespace is used to construct the 
            QName.</p></td>
          <td><p>XML to JSON </p></td>
          <td><p><code>(xs:QName | xs:string)*</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>ignore-attribute-names</code></p></td>
          <td><p>A list of XML attribute names which will be 
            ignored when transformed to JSON. These can be 
            <code>xs:QName</code> or <code>xs:string</code>. 
            If an <code>xs:string</code> is used then the 
            default namespace is used to construct the 
            QName.</p></td>
          <td><p>XML to JSON </p></td>
          <td><p><code>(xs:QName | xs:string)*</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>text-value</code></p></td>
          <td><p>When converting from XML to JSON, the JSON property
            name to use for the text value of an element that contains
            both attributes and text. When converting from JSON to XML,
            the JSON property name whose value should become the element
            text value for an element that contains both attributes and
            text.</p></td>
          <td><p>BOTH </p></td>
          <td><p>xs:string </p></td>
          <td><p><code>"_value"</code></p></td>
        </tr>
        <tr>
          <td><p><code>attribute-names</code></p></td>
          <td><p>A list of JSON names which are converted to 
			  XML attribute. </p></td>
          <td><p>JSON to XML </p></td>
          <td><p><code>xs:string*</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>camel-case</code></p></td>
          <td><p>A boolean value indicating if camel case 
			  transformation is applied to all element and 
			  attribute names when translating to and from
			  JSON. </p></td>
          <td><p>BOTH </p></td>
          <td><p><code>xs:boolean</code></p></td>
          <td><p><code>fn:false()</code></p></td>
        </tr>
        <tr>
          <td><p><code>element-namespace</code></p></td>
          <td><p>The default namespace for elements </p></td>
          <td><p>JSON to XML </p></td>
          <td><p><code>xs:string</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>element-namespace-prefix</code></p></td>
          <td><p>The default prefix for elements </p></td>
          <td><p>JSON to XML </p></td>
          <td><p><code>xs:string</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>attribute-namespace</code></p></td>
          <td><p>The default namespace for attributes </p></td>
          <td><p>JSON to XML </p></td>
          <td><p><code>xs:string</code></p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>atribute-namespace-prefix</code></p></td>
          <td><p>The default prefix for attributes </p></td>
          <td><p>JSON to XML </p></td>
          <td><p>xs:string</p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
          <td><p><code>attribute-prefix</code></p></td>
          <td><p>If specified then when converting to 
			  JSON attributes are prefixed with this string. 
			  When converting to XML all names starting with 
			  this prefix are converted to attributes with 
			  the prefix removed. </p></td>
          <td><p>BOTH </p></td>
          <td><p>xs:string </p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
		<td><p><code>full-element-names</code> </p></td>
          <td><p>A list of XML element names which will 
			  be treated as an <code>full expansion</code> in 
			  JSON similar to the <code>full</code> strategy. 
			  These can be <code>xs:QName</code> or 
			  <code>xs:string</code>. If an <code>xs:string</code> 
			  is used then the default namespace is used to 
			  construct the QName. </p></td>
          <td><p>BOTH </p></td>
          <td><p> (xs:QName | xs:string)* </p></td>
          <td><p>() </p></td>
        </tr>
        <tr>
		<td><p><code>json-attributes</code> </p></td>
          <td><p>The member named used to contain 
				attributes when using the 
				<code>full-element-names</code> 
				expansion. </p></td>
          <td><p></p></td>
          <td><p/><code>xs:string</code></td>
	  <td><p><code>"_attributes"</code> </p></td>
        </tr>
        <tr>
          <td><p><code>json-children</code></p></td>
          <td><p>The member named used to 
				contain the children array when using the 
				<code>full-element-names</code> 
				expansion </p></td>
          <td><p/></td>
          <td><p><code>xs:string</code></p></td>
          <td><p><code>"_children"</code></p></td>
        </tr>
        <tr>
          <td><p><code>whitespace</code></p></td>
          <td><p>How to handle XML text values that only contain
		    whitespace when converting to JSON. Set to "ignore"
            to ignore such values. By default, whitespace-only
            text values are included.</p></td>
          <td><p> </p></td>
          <td><p><code>xs:string</code></p></td>
          <td><p>""</p></td>
        </tr>
      </table>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2355967'>Converting JSON to XML and XML to JSON</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: sample.xml must be inserted first. 
For reference: 
xdmp:document-insert("/sample.xml", <a><b><attr>d</attr><LABEL>c</LABEL></b></a>) :)

xquery version "1.0-ml";
import module namespace json="http://marklogic.com/xdmp/json"
 at "/MarkLogic/json/json.xqy";

let $c := json:config("full")
return json:transform-to-json( fn:doc("/sample.xml") , $c )

(: The following output is produced: 
{
  "a": {
    "_children": [ { "b": {
          "_children": [
          { "attr": {
                "_children": ["d"] } },
            { "LABEL": {
                "_children": ["c"] } 
            } 
          ]
        }
      }
    ]
  }
} :)
]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace json = "http://marklogic.com/xdmp/json"
    at "/MarkLogic/json/json.xqy";

declare variable $doc :=   <a><b attr="d">c</b></a>;
    
let $c := json:config("custom") ,
    $_ := map:put( $c, "array-element-names", (xs:QName("a"),xs:QName("b")) ),
    $_ := map:put( $c, "attribute-names", ("attr" ) ), 
    $_ := map:put( $c, "text-value", "LABEL" ),
    $j := json:transform-to-json($doc ,$c ),
    $x := json:transform-from-json($j,$c) 
return ($j, $x)

(: The JSON property name "LABEL" is used to hold the text value from
    the element <b/>. Without the "text-value" option, the property name
    would be "_value". The query produces the following output: 

{"a":[{"b":[{"attr":"d", "LABEL":"c"}]}]}
<a><b attr="d">c</b></a> :)
    ]]></pre></apidoc:example>

    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
/* sample.xml must be inserted first. 
For reference: 
declareUpdate();
xdmp.documentInsert('/sample.xml', fn.head(xdmp.unquote('<a><b><attr>d</attr><LABEL>c</LABEL></b></a>'))); */

const json = require('/MarkLogic/json/json.xqy');

let c = json.config('full');

json.transformToJson( cts.doc('/sample.xml').root, c)

/* The following output is produced:
{
  "a": {
    "_children": [ { "b": {
          "_children": [
            {
              "attr": {
                "_children": ["d"] } },
            {
              "LABEL": {
                "_children": ["c"] }
            } 
          ]
        }
      }
    ]
  }
}
 */

]]></pre></apidoc:example>

    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const json = require('/MarkLogic/json/json.xqy');

const doc =  {'a':[{'b':[{'attr':'d', 'LABEL':'c'}]}]};

const config = json.config('custom')

config['array-element-names'] = [xs.QName('a'),xs.QName('b')]
config['attribute-names'] = 'attr'
config['text-value'] = 'LABEL'
var j = json.transformFromJson(doc, config);
[json.transformFromJson(doc, config), json.transformToJson(j, config)]

/* The JSON property name "LABEL" is used to hold the text value from
    the element <b/>. Without the "text-value" option, the property name
    would be "_value". The query produces the following output:
=>
[
"<a><b attr=\"d\">c</b></a>", 
{"a": [{"b": [{"attr": "d", "LABEL": "c"}]}]}
]
]]></pre></apidoc:example>

  </apidoc:function>
  <apidoc:function name="check-config" lib="json" category="JSON" 
	  bucket="XQuery Library Modules">
    <apidoc:summary>This function checks a json configuration object and returns a report.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" optional="false" type="map:map">The configuration object representing the strategy.</apidoc:param>
    </apidoc:params>
    <apidoc:return>element(json:report)*</apidoc:return>
    <apidoc:usage>The supplied configuration object<span class="xquery"> (a map:map)</span> is checked for validity and any errors found returned.</apidoc:usage>

    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace json="http://marklogic.com/xdmp/json"
 at "/MarkLogic/json/json.xqy";

let $config := json:config("full") ,
    $cx := map:put( $config, "whitespace"     , "ignore" )

return 
json:check-config($config)
  ]]></pre>
    </apidoc:example>
        <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const json = require('/MarkLogic/json/json.xqy');

let config = json.config('full') ,
    cx = ( config, 'whitespace'     , 'ignore' );

json.checkConfig(config)
]]></pre>
    </apidoc:example>
  </apidoc:function>


  <apidoc:function name="transform-to-json" lib="json" category="JSON" 
	  bucket="XQuery Library Modules">
    <apidoc:summary>This function transforms an XML document to JSON 
		  using the default ("basic") strategy if none is 
		  supplied.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" optional="false" type="node()">The node to 
		    transform. The node must be a node that was
		    transformed from JSON  (for example, as the result of a 
		    <code>json:transform-from-json</code>  call with the
		    <code>basic</code> strategy or from JSON
		    that was loaded using the REST API).
	   </apidoc:param>
      <apidoc:param name="config" optional="true" type="map:map">The 
	      configuration object representing the strategy.</apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()?</apidoc:return>
    <apidoc:usage>
      <p>The supplied document (element or document node) is transformed to JSON
      using the default ("basic") strategy and returned as a document node containing a
      JSON node (object-node() or array-node()).</p>
      <p>When the default "basic" strategy is used, the XML node
	    must be in the <code>http://marklogic.com/xdmp/json/basic</code> 
	    namespace.  </p>
    <p>Note: Version of MarkLogic prior to 8.0.1 returned an xs:string.
    See <a xmlns="http://www.w3.org/1999/xhtml"
    href="https://docs.marklogic.com/guide/relnotes/chap4#id_92312">
    https://docs.marklogic.com/guide/relnotes/chap4#id_92312</a>
      </p>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2355967'>Converting JSON to XML and XML to JSON</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
(: sample.xml must be inserted first. 
For reference: 
xdmp:document-insert("/sample.xml", <a><b><attr>d</attr><LABEL>c</LABEL></b></a>) :)

xquery version "1.0-ml";
import module namespace json="http://marklogic.com/xdmp/json"
 at "/MarkLogic/json/json.xqy";
 
let $config := json:config("full") ,
    $cx := map:put( $config, "whitespace"     , "ignore" )
return 
  json:transform-to-json( fn:doc("/sample.xml") , $config )
(: The following output is produced:
{
  "a": {
    "_children": [ { "b": {
          "_children": [
            {
              "attr": {
                "_children": ["d"]}
            },
            {
              "LABEL": {
                "_children": ["c"] }
            }
          ]
        }
      }
    ]
  }
}
:)
  ]]></pre>
    </apidoc:example>
        <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
/* sample.xml must be inserted first. 
For reference: 
declareUpdate();
xdmp.documentInsert('/sample.xml', fn.head(xdmp.unquote('<a><b><attr>d</attr><LABEL>c</LABEL></b></a>'))); */

const json = require('/MarkLogic/json/json.xqy');
 
let config = json.config('full') ,
    cx = (config, 'whitespace'     , 'ignore' )

  json.transformToJson( cts.doc('/sample.xml') , config )

/* The following output is produced: 
{
  "a": {
    "_children": [ { "b": {
          "_children": [
            {
              "attr": {
                "_children": ["d"] } },
            {
              "LABEL": {
                "_children": ["c"] }
            }
          ]
        }
      }
    ]
  }
}
*/
  ]]></pre>
    </apidoc:example>
  </apidoc:function>


  <apidoc:function name="transform-to-json-object" lib="json" category="JSON" 
	  bucket="XQuery Library Modules">
    <apidoc:summary>This function transforms an XML document to JSON 
		  and returns an object.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" optional="false" type="node()">The node to 
		    transform. The node must be a node that was
		    transformed from JSON  (for example, as the result of a 
		    <code>json:transform-from-json</code> call with the
		    <code>basic</code> strategy or from JSON
		    that was loaded using the REST API).
	   </apidoc:param>
      <apidoc:param name="config" optional="false" type="map:map">The 
	      configuration object representing the strategy.</apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
      <p>The supplied document (element or document node) is 
	    transformed to JSON using the default (<code>basic</code>) strategy 
	    and returned as an object.  The object will be either a 
	    <code>json:object</code> or <code>json:array</code>.</p>
      <p>When the default "basic" strategy is used, the XML node
	    must be in the <code>http://marklogic.com/xdmp/json/basic</code> 
	    namespace.  </p>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2355967'>Converting JSON to XML and XML to JSON</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2380625'>How MarkLogic Represents JSON Documents</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
      <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version '1.0-ml';
import module namespace json = "http://marklogic.com/xdmp/json"
    at "/MarkLogic/json/json.xqy";

json:transform-to-json-object(
  <root>
    <key>value</key>
  </root>, 
  json:config("full"))

(: The following JSON Object is produced: 

{
  "root": {
    "_children": [
      {
        "key": { 
        "_children": ["value"]
        }
      }
    ]
  }
} :)
   ]]></pre>
    </apidoc:example>
     <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const json = require('/MarkLogic/json/json.xqy');

json.transformToJsonObject( xdmp.unquote('<root><key>value</key></root>'), json.config('full'))

/* The following JSON Object is produced:
{
  "root": {
    "_children": [
      {
        "key": { 
        "_children": ["value"]
        }
      }
    ]
  }
} */
   ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="transform-to-json-xml" lib="json" 
	  category="JSON" bucket="XQuery Library Modules">
    <apidoc:summary>This function transforms an XML document to 
		  JSON and returns an xml element.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="node" type="node()">The node to transform. 
         If the config parameter is not supplied, or it is created from 
         <code>json:config('basic')</code> then the node must be a document 
         conforming to the schema produced by 
         <code>json:transform-from-json</code> when called with the
		 <code>basic</code>. 
      </apidoc:param>
      <apidoc:param name="config" optional="true" type="map:map">
        If present, the configuration object representing the strategy, 
        otherwise the 'basic' strategy is used.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element()</apidoc:return>
    <apidoc:usage><p>The supplied document (element or document node) is 
	    transformed to JSON using the default (<code>basic</code>) 
	    strategy and returned as an element.  The element will be 
	    either a <code>json:object</code> or <code>json:array</code> 
	    element.</p>
      <p>When the default "basic" strategy is used, the XML node
	    must be in the <code>http://marklogic.com/xdmp/json/basic</code> 
	    namespace.  </p>
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2355967'>Converting JSON to XML and XML to JSON</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2380625'>How MarkLogic Represents JSON Documents</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
      <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version '1.0-ml';
import module namespace json = "http://marklogic.com/xdmp/json"
    at "/MarkLogic/json/json.xqy";

json:transform-to-json-xml(
  <root>
    <key>value</key>
  </root>, 
  json:config("full"))

(:
The following JSON XML is produced:
<json:object xmlns:json="http://marklogic.com/xdmp/json" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <json:entry key="root">
    <json:value>
      <json:object>
	<json:entry key="_children">
	  <json:value>
	    <json:array>
	      <json:value>
		<json:object>
		  <json:entry key="key">
		    <json:value>
		      <json:object>
			<json:entry key="_children">
			  <json:value>
			    <json:array>
			     <json:value xsi:type="xs:string">value
			     </json:value>
			    </json:array>
			  </json:value>
			</json:entry>
		      </json:object>
		    </json:value>
		  </json:entry>
		</json:object>
	      </json:value>
	    </json:array>
	  </json:value>
	</json:entry>
      </json:object>
    </json:value>
  </json:entry>
</json:object> :)
    ]]></pre>
    </apidoc:example>
          <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const json = require('/MarkLogic/json/json.xqy');

json.transformToJsonXml( xdmp.unquote('<root><key>value</key></root>'), json.config('full'))

/* The following JSON XML is produced:
<json:object xmlns:json="http://marklogic.com/xdmp/json" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <json:entry key="root">
    <json:value>
      <json:object>
  <json:entry key="_children">
    <json:value>
      <json:array>
        <json:value>
    <json:object>
      <json:entry key="key">
        <json:value>
          <json:object>
      <json:entry key="_children">
        <json:value>
          <json:array>
           <json:value xsi:type="xs:string">value
           </json:value>
          </json:array>
        </json:value>
      </json:entry>
          </json:object>
        </json:value>
      </json:entry>
    </json:object>
        </json:value>
      </json:array>
    </json:value>
  </json:entry>
      </json:object>
    </json:value>
  </json:entry>
</json:object>
 */
    ]]></pre>
    </apidoc:example>
  </apidoc:function>


  <apidoc:function name="transform-from-json" lib="json" 
	  category="JSON" bucket="XQuery Library Modules">
    <apidoc:summary>This function transforms a JSON document to 
		  XML using the default ("basic") strategy.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="json" type="item()">The JSON document to transform.
      This is typically an xs:string but also accepts a document, object-node(),
      array-node(), map:map, json:array,element(map:map) ,
      element(json:array) and element(json:object)</apidoc:param>
      <apidoc:param name="config" optional="true" type="map:map">The 
		      configuration object</apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>The supplied JSON document (as a string, element, 
      object or array) is transformed to XML using the default 
      (<code>basic</code>) strategy and returned as an element.
    </apidoc:usage>
    <apidoc:see-also-list>
      <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2355967'>Converting JSON to XML and XML to JSON</a> in the <em>Application Developer's Guide</em>
      </apidoc:see-also>
    </apidoc:see-also-list>
      <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace json="http://marklogic.com/xdmp/json"
 at "/MarkLogic/json/json.xqy";
 
 declare variable $j :=  '{
    "first Key":"first value",
    "secondKey":["first item","second item",null,"third item",false],
    "thirdKey":3,
    "fourthKey":{"subKey":"sub value", "boolKey" : true, "empty" : null }
    ,"fifthKey": null,
    "sixthKey" : []
    }'  ;
 json:transform-from-json( $j)
 
(: The following output is produced:

<json type="object" xmlns="http://marklogic.com/xdmp/json/basic">
  <first_20_Key type="string">first value</first_20_Key>
  <secondKey type="array">
    <item type="string">first item</item>
    <item type="string">second item</item>
    <item type="null"/>
    <item type="string">third item</item>
    <item type="boolean">false</item>
  </secondKey>
  <thirdKey type="number">3</thirdKey>
  <fourthKey type="object">
    <subKey type="string">sub value</subKey>
    <boolKey type="boolean">true</boolKey>
    <empty type="null"/>
  </fourthKey>
  <fifthKey type="null"/>
  <sixthKey type="array"/>
</json> :)
]]></pre>
    </apidoc:example>
      <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace json="http://marklogic.com/xdmp/json"
 at "/MarkLogic/json/json.xqy";
 
 declare variable $j :=  '{
   "object" : {
    "firstKey":"first value",
    "secondKey":["first item","second item","","third item",false],
    "thirdKey":3,
    "fourthKey":{"subKey":"sub value", "boolKey" : true, "empty" : null }
    ,"fifthKey": null,
    "sixthKey" : []
     }}'  ;

 let $config := json:config("custom") ,
          $cx := map:put( $config, "attribute-names" , ("subKey" , "boolKey" , "empty" ) )
 return 

json:transform-from-json( $j, $config )

(: The following output is produced:
<object>
  <firstKey>first value</firstKey>
  <secondKey>first item</secondKey>
  <secondKey>second item</secondKey>
  <secondKey/>
  <secondKey>third item</secondKey>
  <secondKey>false</secondKey>
  <thirdKey>3</thirdKey>
  <fourthKey subKey="sub value" boolKey="true" empty=""/>
  <fifthKey/>
</object> :)
]]></pre>
    </apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const json = require('/MarkLogic/json/json.xqy');
 
let j =  {
    'first Key': 'first value',
    'secondKey': ['first item','second item',null,'third item',false],
    'thirdKey': 3,
    'fourthKey': {'subKey':'sub value', 'boolKey' : true, 'empty' : null }
    ,'fifthKey': null,
    'sixthKey' : []
    };
    
 json.transformFromJson(j)

 /* The following output is produced:
 <json type="object" xmlns="http://marklogic.com/xdmp/json/basic">
<first_20_Key type="string">first value</first_20_Key>
<secondKey type="array">
    <item type="string">first item</item>
    <item type="string">second item</item>
    <item type="null">
    </item>
    <item type="string">third item</item>
    <item type="boolean">false</item>
</secondKey>
<thirdKey type="number">3</thirdKey>
<fourthKey type="object">
    <subKey type="string">sub value</subKey>
    <boolKey type="boolean">true</boolKey>
    <empty type="null">
    </empty>
</fourthKey>
<fifthKey type="null">
</fifthKey>
<sixthKey type="array">
</sixthKey>
</json>
 */
]]></pre>
    </apidoc:example>
        <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const json = require('/MarkLogic/json/json.xqy');
 
 let j = {
   'object' : {
    'firstKey': 'first value',
    'secondKey': ['first item','second item','','third item',false],
    'thirdKey': 3,
    'fourthKey': {'subKey':'sub value', 'boolKey' : true, 'empty' : null }
    ,'fifthKey': null,
    'sixthKey' : []
     }};

 let config = json.config('custom'),
          cx = (config, 'attribute-names' , ('subKey' , 'boolKey' , 'empty' ))

json.transformFromJson(j, config)

/* The following output is produced:
<object>
    <firstKey>first value</firstKey>
    <secondKey>first item</secondKey>
    <secondKey>second item</secondKey>
    <secondKey>
    </secondKey>
    <secondKey>third item</secondKey>
    <secondKey>false</secondKey>
    <thirdKey>3</thirdKey>
    <fourthKey>
        <subKey>sub value</subKey>
        <boolKey>true</boolKey>
        <empty>
        </empty>
    </fourthKey>
    <fifthKey>
    </fifthKey>
</object>
 */
]]></pre>
    </apidoc:example>
  </apidoc:function>
</apidoc:module>
