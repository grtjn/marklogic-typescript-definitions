<apidoc:module name="Extensions" category="Extension" lib="sem" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:function name="sparql" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Executes a SPARQL query against the database.
  <p xmlns="http://www.w3.org/1999/xhtml">SPARQL "SELECT" queries return a solution as a sequence of map objects
  in the form of a table, where each map represents a set of bindings that
  satisfies the query.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">SPARQL "CONSTRUCT" queries return triples as a sequence of
  sem:triple values in an RDF graph.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">SPARQL "DESCRIBE" queries return a sequence of sem:triple values as an RDF
  graph that describes the resources found by the query.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">SPARQL "ASK" queries return a single xs:boolean value (true or false)
  indicating whether a query pattern matches in the dataset.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="sparql" type="xs:string">
    The SPARQL query to be executed.
  </apidoc:param>
      <apidoc:param name="bindings" type="map:map?" optional="true">
    A map containing initial values for variables from the query, or the
    empty sequence if no query variables are to be initially bound. This
    is a way to parameterize the query.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options as a sequence of string values. Available options are:
    <dl xmlns="http://www.w3.org/1999/xhtml">
    <dt>"base=<em>IRI</em>"</dt>
    <dd>The initial base IRI for the query.</dd>
    <dt>"default-graph=<em>IRI</em>*"</dt>
    <dd>Add the named graph or graphs specified by the IRI to the default graph for
    the query.</dd>
    <dt>"named-graph=<em>IRI</em>*"</dt>
    <dd>Add the named graph or graphs specified by the IRI to the list of named graphs
    available in the query.</dd>
    <dt>"parse-check"</dt>
    <dd>Parse the query, but don't perform static checks or execute it.
    The default is false.</dd>
    <dt>"prepare"</dt>
    <dd>Parse and optimize the query, caching the result. No execution is
    performed. Default is false.</dd>
    <dt>"optimize=N"</dt>
    <dd>Sets the optimization level to use. Levels of 0 (off), 1, and 2 are
    recognized. The default is 1.</dd>
    <dt>"dedup=N"</dt>
    <dd>Sets de-duplication of triples results to "on" or "off". The default, 
    standards-compliant behavior is "on".</dd>
    <dt><p>array</p></dt><dd>Return the result as a sequence of array
    values (<code>json:array</code>).</dd>
    <dt><p>map</p></dt><dd>Return the result as a sequence of map values,
    where the key is the column name (<code>sem:binding</code>).</dd>
    </dl>
  </apidoc:param>
      <apidoc:param name="store" type="sem:store*" optional="true">
    A <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructor to use as the source of the triples 
	for the SPARQL query. If multiple <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructors are 
	supplied, the triples from all the sources are merged and queried together. 
	The default	for <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> is the current database's triple index, 
	restricted by the options and the cts:query argument (for instance, "triples in documents matching this query").
	<p xmlns="http://www.w3.org/1999/xhtml">
    Options for "any", "document", "properties", "locks", "checked", or
    "unchecked", which used to be part of the <code>sem:sparql</code> signature, 
	must be specified as part of <a href="#sem:store"><code>sem:store</code></a>, 
	not as part of <code>sem:sparql</code>. The <code>sem:sparql</code> query 
	will run with the locking option specified in <code>sem:store</code>. 
	Locking is ignored in a query transaction.
	</p>
	<p xmlns="http://www.w3.org/1999/xhtml">
    If a <code>sem:store</code> value is not supplied, then the default
    <code>sem:store</code> for the statement will be used. This is the same 
	as calling <code>sem:store()</code> with all arguments omitted, which 
	will access the current database's triple index, using the default 
	rulesets configured for that database. The default for locking is 
	<code>read-write</code>.
	</p>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:privilege>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/sem-sparql</code></p>
</apidoc:privilege>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The options <code>parse-check</code> and <code>prepare</code> cannot be
   used at the same time.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace sem = "http://marklogic.com/semantics"
  at "/MarkLogic/semantics.xqy";

(: load an rdf triple that will match the SPARQL query :)

sem:rdf-insert(
  sem:triple(sem:iri("http://www.example.org/dept/108/invoices/20963"),
	           sem:iri("http://www.example.org/dept/108/invoices/paid"),
             "true")) ;
(: returns the URI of the document that contains the triple :)

sem:sparql('
PREFIX inv: &lt;http://www.example.org/dept/108/invoices/&gt;

SELECT ?predicate ?object
WHERE
{ inv:20963 ?predicate ?object }
')
(:
 returns the predicate(s) and object(s) for the matching triple(s)
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var sem = require("/MarkLogic/semantics.xqy");

// load an rdf triple that will match the SPARQL query :)

sem.rdfInsert(
  sem.triple(sem.iri("http://www.example.org/dept/108/invoices/20963"),
	     sem.iri("http://www.example.org/dept/108/invoices/paid"),
             "true")) ;
// returns the URI of the document that contains the triple

******

// run SPARQL against above triple

sem.sparql('\n\
PREFIX inv: &lt;http://www.example.org/dept/108/invoices/&gt;\n\
\n\
SELECT ?predicate ?object\n\
WHERE \n\
{ inv:20963 ?predicate ?object }\n\
');

// returns the predicate(s) and object(s) for the matching triple(s)
{
  "predicate": "http://www.example.org/dept/108/invoices/paid",
  "object": "true"
}

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

(:
   this query uses the data from the previous query and shows how to
   pass bindings in a parameter to sem:sparql
:)
let $params :=
  map:new(map:entry("subject",
		sem:iri("http://www.example.org/dept/108/invoices/20963")))
return
sem:sparql("
  SELECT ?predicate ?object
  WHERE
  { ?subject ?predicate ?object } ",
  $params)

(:
 returns the predicate(s) and object(s) for the matching triple(s)
 :)
 [{"predicate":"&lt;http://www.example.org/dept/108/invoices/paid&gt;",
   "object":"\"true\""}]
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace sem = "http://marklogic.com/semantics"
  at "/MarkLogic/semantics.xqy";

(: load sample data triples and ontology triple in turtle format :)

sem:rdf-insert(sem:rdf-parse('
@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix p0: &lt;http://www.example.org/products/&gt; .
@prefix p2: &lt;http://www.example.com/&gt; .

p2:Henley       &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt;
                                p2:shirt .

p0:prod:1001    p2:color        "blue" ;
                a               p2:Henley .

p0:prod:1002    p2:color        "blue" ;
                a               p2:shirt .', ("graph=graph-1", "turtle")));

(: create a store that uses an RDFS ruleset for inferencing :)

let $rdfs-store := sem:ruleset-store("rdfs.rules",sem:store() )
return

(: use the store you just created - pass it in to sem:sparql() :)

sem:sparql('
    prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
    prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
    prefix p0: &lt;http://www.example.org/products/&gt;
    prefix p2: &lt;http://www.example.com/&gt;

    SELECT ?product
    FROM &lt;graph-1&gt;
    WHERE
    {
      ?product rdf:type p2:shirt ;
      p2:color "blue"
    }',
    (),
    (),
    $rdfs-store
  )

(:
 returns the triples you inserted and the triples that match the query
 :)
 /triplestore/5766e26a98b19b21.xml

                      product
&lt;http://example.org/products/prod:1001&gt;
&lt;http://example.org/products/prod:1002&gt;
}]
 </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   this query uses the data from the previous query and shows how to
//   pass bindings in a parameter to sem:sparql

var params = {"subject":
		sem.iri("http://www.example.org/dept/108/invoices/20963")};
sem.sparql("\n\
  SELECT ?predicate ?object\n\
  WHERE\n\
  { ?subject ?predicate ?object } ",
  params);

// returns the predicate(s) and objects(s) that match the query
{
  "predicate":"&lt;http://www.example.org/dept/108/invoices/paid&gt;",
  "object":"true"
}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var sem = require("/MarkLogic/semantics.xqy");

// load sample data triples and ontology triple
var string ='\
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .\
@prefix p0: &lt;http://www.example.org/products/&gt; .\
@prefix p2: &lt;http://www.example.com/&gt; .\
\
p2:Henley       &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt;\
                                p2:shirt .\
p0:prod:1001    p2:color        "blue" ;\
                a               p2:Henley .\
p0:prod:1002    p2:color        "blue" ;\
                a               p2:shirt .\
';
sem.rdfInsert(sem.rdfParse(string, ["graph=graph-1", "turtle"]))

// create a store that uses an RDFS ruleset for inference
var rdfsStore = sem.rulesetStore("rdfs.rules", sem.store());

// use the store you just created - pass it into sem.sparql()
var sparqlQuery = '\
    prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\
    prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\
    prefix p0: &lt;http://www.example.org/products/&gt;\
    prefix p2: &lt;http://www.example.com/&gt;\
 \
    SELECT ?product\
    FROM &lt;graph-1&gt;\
    WHERE\
    {\
      ?product rdf:type p2:shirt ;\
      p2:color "blue"\
    }';
sem.sparql(
    sparqlQuery,
    [],
    [],
    rdfsStore
  )
//returns the triples that match the query
{
"product": "http://example.org/products/1001"
}
{
"product": "http://example.org/products/1002"
}</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sparql-update" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Executes a SPARQL Update operation against the database.
    <p xmlns="http://www.w3.org/1999/xhtml">Graph Update - addition and removal of triples from some graphs within
    the Graph Store.</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Graph Management - creating and deletion of graphs within the Graph
    Store, as well as convenient shortcuts for graph update operations often
    used during graph management (to add, move, and copy graphs).</p>
	<p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="sparql" type="xs:string">
    The SPARQL Update to be executed.
  </apidoc:param>
      <apidoc:param name="bindings" type="map:map?" optional="true">
    A map containing initial values for variables from the query, or the
    empty sequence if no query variables are to be initially bound. This is
    a way to parameterize the query.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options as a sequence of string values. Available options are:
    <dl xmlns="http://www.w3.org/1999/xhtml">
    <dt>"base=<em>IRI</em>"</dt>
    <dd>The initial base IRI for the query.</dd>
    <dt>"default-graph=<em>IRI</em>*"</dt>
    <dd>Add the named graph or graphs specified by the IRI to the default graph for
    the query.</dd>
    <dt>"named-graph=<em>IRI</em>*"</dt>
    <dd>Add the named graph or graphs specified by the IRI to the list of named graphs
    available in the query.</dd>
    <dt>"parse-check"</dt>
    <dd>Parse the query, but don't perform static checks or execute it.</dd>
    <dt>"prepare"</dt>
    <dd>Parse and optimize the query, caching the result. No execution is
    performed.</dd>
    <dt>"optimize=N"</dt>
    <dd>Sets the optimization level to use. Levels of 0 (off), 1, and 2 are
    recognized, with 1 as the default.</dd>
    <dt>"dedup=N"</dt>
    <dd>Sets de-duplication of triples results to "on" or "off". The default, 
    standards-compliant behavior is "on".</dd>
    <dt>"directory=URI"</dt>
    <dd>Sets The database directory path of triples document. Default location
    is /triplestore.</dd>
    <dt>"triples-document-size=xs:nonNegativeInteger"</dt>
    <dd>The number of triples in a triples document. Default is 100.</dd>
    <dt>"existing-graph"</dt>
    <dd>Update fails if the specified destination graph does not already
    exist.</dd>
    <dt>"isolation=ISOLATION_LEVEL"</dt>
    <dd>ISOLATION_LEVEL can be different-transaction or same-statement.
    Default is different-transaction, which will not change the transaction
    mode of the calling transaction. If isolation is same-statement, the
    calling transaction should be run in update mode and the $sparql cannot
    contain multiple statements.</dd>
    <dt>"transaction-id=TXN_ID"</dt>
    <dd>TXN_ID is the transaction ID which the SPARQL program is in.
    Setting transaction-id implies isolation to be different-transaction.
    Transaction-id cannot coexist with isolation same-statement.</dd>
    </dl>
  </apidoc:param>
      <apidoc:param name="store" type="sem:store*" optional="true">
    A <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructor to use as the source of the triples for
    SPARQL Update. If multiple <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructors are supplied,
    the triples from all the sources are merged and queried together. The
	default for <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> the current database's triple index. 
	The locking option specified in <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> will be used by <code xmlns="http://www.w3.org/1999/xhtml">sem:sparql-update</code>.	
	<p xmlns="http://www.w3.org/1999/xhtml">
    If a <code>sem:store</code> value is not supplied, then the default
    <code>sem:store</code> for the statement will be used. This is the same 
	as calling <code>sem:store()</code> with all arguments omitted, which 
	will access the current database's triple index, using the default 
	rulesets configured for that database. The default for locking is 
	<code>read-write</code>.
	</p>
	
	<p xmlns="http://www.w3.org/1999/xhtml">Note: You cannot use an in-memory store with SPARQL Update.</p>
  </apidoc:param>
      <apidoc:param class="xquery" name="default-permissions" type="element(sec:permission)*" optional="true">
    Security permission elements corresponding to the permissions for the
    graph during graph creation. If not supplied, the current user's default
    permissions are applied.  The default value used for this parameter can
    be obtained by calling <code xmlns="http://www.w3.org/1999/xhtml">xdmp:default-permissions()</code>. A RDF
    graph that is created by a non-admin user (that is, by any user who does
    not have the admin role) must have at least one update permission,
    otherwise the creation will throw an XDMP-MUSTHAVEUPDATE exception.
    Parameter is ignored if the operation does not involve graph creation.
  </apidoc:param>
      <apidoc:param class="javascript" name="default-permissions" type="Object[]" optional="true">
    Security permission objects corresponding to the permissions for the
    graph during graph creation. If not supplied, the current user's
    default permissions are applied.  The default value used for this
    parameter can be obtained by calling
    <code xmlns="http://www.w3.org/1999/xhtml">xdmp.defaultPermissions()</code>. A RDF graph that is created by
    a non-admin user (that is, by any user who does not have the admin
    role) must have at least one update permission, otherwise the creation
    will throw an XDMP-MUSTHAVEUPDATE exception.  The parameter is ignored if
    the operation does not involve graph creation.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">You cannot use an in-memory store with SPARQL Update.</p>
</apidoc:usage>
    <apidoc:privilege>
<p xmlns="http://www.w3.org/1999/xhtml">Requires the <code>sparql-update-user</code> role, or the following
privileges:</p>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/sem-sparql-update</code></p>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/any-uri</code></p>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/unprotected-collections</code></p>
</apidoc:privilege>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The options <code>parse-check</code> and <code>prepare</code> cannot be
   used at the same time.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
      at "/MarkLogic/semantics.xqy";

(: Insert a triple into default graph and three triples into graph &lt;BOOKS&gt;. :)
sem:sparql-update('
PREFIX dc: &lt;http://marklogic.com/dc/elements/1.1/&gt;
INSERT DATA
{
   &lt;http://example/book0&gt; dc:title "A default book"
  GRAPH &lt;BOOKS&gt; {&lt;http://example/book1&gt; dc:title "A new book" }
  GRAPH &lt;BOOKS&gt; {&lt;http://example/book2&gt; dc:title "A second book" }
  GRAPH &lt;BOOKS&gt; {&lt;http://example/book3&gt; dc:title "A third book" }
}
');

(: Update any book title which is "A new book" to be "Insert MarkLogic Server". :)

sem:sparql-update('
PREFIX dc: &lt;http://marklogic.com/dc/elements/1.1/&gt;
WITH &lt;BOOKS&gt;
DELETE {?b dc:title "A new book" }
INSERT {?b dc:title "Inside MarkLogic Server" }
WHERE {
  ?b dc:title "A new book" .
}
')

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var sem = require("/MarkLogic/semantics.xqy");

// Insert a triple into default graph and three triples into graph &lt;BOOKS&gt;.
sem.sparqlUpdate('\n\
PREFIX dc: &lt;http://marklogic.com/dc/elements/1.1/&gt;\n\
INSERT DATA\n\
{\n\
   &lt;http://example/book0&gt; dc:title "A default book"\n\
  GRAPH &lt;BOOKS&gt; {&lt;http://example/book1&gt; dc:title "A new book" }\n\
  GRAPH &lt;BOOKS&gt; {&lt;http://example/book2&gt; dc:title "A second book" }\n\
  GRAPH &lt;BOOKS&gt; {&lt;http://example/book3&gt; dc:title "A third book" }\n\
}\n\
');
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Update any book title which is "A new book" to be "Insert MarkLogic Server".

declareUpdate();
sem.sparqlUpdate('\n\
PREFIX dc: &lt;http://marklogic.com/dc/elements/1.1/&gt;\n\
WITH &lt;BOOKS&gt;\n\
DELETE {?b dc:title "A new book" }\n\
INSERT {?b dc:title "Inside MarkLogic Server" }\n\
WHERE {\n\
  ?b dc:title "A new book" .\n\
}\n\
');

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="in-memory-store" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns a <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructor that queries from the sequence 
  of <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> values passed in as an argument. The 
  <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructor returned from this function will raise an 
  error if it is passed as part of the options argument to a call to 
  <code xmlns="http://www.w3.org/1999/xhtml">sem:sparql-update()</code>.
  <p xmlns="http://www.w3.org/1999/xhtml">
  The default rulesets configured on the current database have no effect on a
  <code>sem:store</code> constructor created with <code>sem:in-memory-store()</code>.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  This should be used along with <code>sem:sparql()</code> in preference to the
  deprecated <code>sem:sparql-triples()</code> function. We will remove documentation
  of <code>sem:sparql-triples()</code>, but leave the function for backwards
  compatibility.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dataset" type="sem:triple*">
    A set of triple values representing the dataset for the
    store.
    <p xmlns="http://www.w3.org/1999/xhtml">The results from a SPARQL construct query or call to <code>sem:rdf-parse()</code>
    can be used directly as the value for this argument.</p>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:store</apidoc:return>
    <apidoc:privilege>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/sem-sparql</code></p>
</apidoc:privilege>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace sem = "http://marklogic.com/semantics"
      at "/MarkLogic/semantics.xqy";

let $turtle-document := '
    @prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
    @prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .
    @prefix ex: &lt;http://example.org/people/1.0/&gt; .
  &lt;http://www.w3.org/TR/rdf-syntax-grammar&gt;
    dc:title "RDF/XML Syntax Specification (Revised)" ;
    ex:editor [
      ex:fullname "Dave Beckett";
      ex:homePage &lt;http://purl.org/net/dajobe/&gt;
    ] .'
let $triples := sem:rdf-parse($turtle-document, ("turtle", "repair") )
return
sem:in-memory-store($triples)
=&gt;
sem:store() :  Use the value to pass into a function that
requires a sem:store (like sem:sparql-update).

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");
var turtleDocument = '\n\
    @prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .\n\
    @prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .\n\
    @prefix ex: &lt;http://example.org/people/1.0/&gt; .\n\
  &lt;http://www.w3.org/TR/rdf-syntax-grammar&gt;\n\
    dc:title "RDF/XML Syntax Specification (Revised)" ;\n\
    ex:editor [\n\
      ex:fullname "Dave Beckett";\n\
      ex:homePage &lt;http://purl.org/net/dajobe/&gt;\n\
    ] .';
var triples = sem.rdfParse(turtleDocument, ["turtle", "repair"] );
sem.inMemoryStore(triples);
=&gt;
sem.store() :  Use the value to pass into a function that
requires a sem.store (like sem.sparqlUpdate).

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="store" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  The <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> function defines a set of criteria, that when evaluated,
  selects a set of triples to be passed in to <code xmlns="http://www.w3.org/1999/xhtml">sem:sparql()</code>,
  <code xmlns="http://www.w3.org/1999/xhtml">sem:sparql-update()</code>, or <code xmlns="http://www.w3.org/1999/xhtml">sem:sparql-values()</code> as part
  of the options argument. The <code xmlns="http://www.w3.org/1999/xhtml">sem:store</code> constructor queries from the
  current database's triple index, restricted by the options and the <code xmlns="http://www.w3.org/1999/xhtml">cts:query</code>
  argument (for instance, "triples in documents matching this query").

  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options as a sequence of string values. Available options are:
    <dl xmlns="http://www.w3.org/1999/xhtml">
    <dt>"any"</dt>
    <dd>Values from any fragment should be included.</dd>
    <dt>"document"</dt>
    <dd>Values from document fragments should be included.</dd>
    <dt>"properties"</dt>
    <dd>Values from properties fragments should be included.</dd>
    <dt>"locks"</dt>
    <dd>Values from locks fragments should be included.</dd>
    <dt>"checked"</dt>
    <dd>Word positions should be checked when resolving the query.</dd>
    <dt>"unchecked"</dt>
    <dd>Word positions should not be checked when resolving the query.</dd>
    <dt>"size=<em>number of MB</em>"</dt>
    <dd>The maximum size of the memory used to cache inferred triples. This
    defaults to the default inference size set for the app-server. If the
    value provided is bigger than the maximum inference size set for the
    App Server, an error is raised [XDMP-INFSIZE].</dd>
    <dt>"no-default-rulesets"</dt>
    <dd>Don't apply the database's default rulesets to the sem:store.</dd>
    <dt>"locking=read-write/write"</dt>
    <dd><code>read-write</code>: Read-lock documents containing triples being accessed,
    write-lock documents being updated; <code>write</code>: Only write-lock documents
    being updated. Default is <code>locking=read-write</code>. Locking is ignored in
    query transaction. </dd>
    </dl>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include triples in fragments selected by the <code xmlns="http://www.w3.org/1999/xhtml">cts:query</code>.
    The triples do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as <a href="#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.  If a string
    is entered, the string is treated as a <code xmlns="http://www.w3.org/1999/xhtml">cts:word-query</code> of the
    specified string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:store</apidoc:return>
    <apidoc:usage>
    <p xmlns="http://www.w3.org/1999/xhtml">
    Only one of "any", "document", "properties", or "locks" may be specified
    in the options parameter. If none of "any", "document", "properties", or
    "locks" are specified and there is a <code>$query</code> parameter, then
    the default is "document". If there is no <code>$query</code> parameter
    then the default is "any". </p>
    <p xmlns="http://www.w3.org/1999/xhtml">
    Options for "any", "document", "properties", "locks", "checked", or
    "unchecked" must be specified as part of <code>sem:store</code>, not
    as part of <code>sem:sparql</code>, <code>sem:sparql-update</code>, or
	<code>sem:sparql-values</code>.
    </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace sem = "http://marklogic.com/semantics"
      at "/MarkLogic/semantics.xqy";

sem:store((), cts:word-query("Alfa Romeo"))
=&gt;
Returns a sem:store() containing all of the triples that exist in documents
that match a query for "Alfa Romeo".

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

sem.store(null, cts.wordQuery("Alfa Romeo"));
=&gt;
Returns a sem:store() containing all of the triples that exist in documents
that match a query for "Alfa Romeo".

</pre></apidoc:example>
  </apidoc:function></apidoc:module>