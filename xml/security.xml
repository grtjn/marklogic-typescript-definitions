<apidoc:module name="SecurityModule" category="Security-sec" 
  bucket="XQuery Library Modules" 
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml" lib="sec" class="xquery">
  <apidoc:summary access="public" category="Security-sec">
    <p>The security function module is installed as the following file:</p>
    <code><em>install_dir</em>/Modules/MarkLogic/security.xqy</code> 
    <p>where <code><em>install_dir</em></code> is the directory in which 
    MarkLogic Server is installed.</p>
    <p> To use the security.xqy module in your own XQuery modules, include the 
    following line in your XQuery prolog:</p>
    <p><code>import module "http://marklogic.com/xdmp/security" at 
             "/MarkLogic/security.xqy"</code></p>
    <p>The library uses the <code>sec:</code> namespace, predefined in the 
    server.</p>
    <p><b>NOTE:</b>&#160;&#160;When using these functions to administer 
    security for an application, be sure to execute them against the security 
    database configured for your application's database.  Function calls 
    in this library can only be executed against a a security 
    database (for example, <em>Security</em>); the database named
    <em>Security</em> is automatically configured when MarkLogic Server 
    is installed, and it is the default security database. To execute  
    these functions against the security database, 
    you can specify the <code>database</code> option in <code>xdmp:eval</code> 
    or <code>xdmp:invoke</code>, or you can run it in an App Server that 
    has your security database configured as its database.  </p>
  </apidoc:summary>

<apidoc:function name="create-user" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Creates a new user in the system database for the context database. 
  Returns the user ID of the created user.
  </apidoc:summary>

  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string"> A unique username. 
    If $user-name is not unique, an error is returned. </apidoc:param>
    <apidoc:param name="description" type="xs:string?">A description of the 
    user.
    </apidoc:param>
    <apidoc:param name="password" type="xs:string">The initial password
    for this user.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">The roles (if any) 
    assigned to this user. If one of the $role-names names a role that does 
    not exist, an error is returned.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    The default permissions granted to this user. 
    </apidoc:param>
    <apidoc:param name="collections" type="xs:string*">
    The URIs for the default collections to which this user has access.  
    </apidoc:param>
    <apidoc:param name="external-names" type="xs:string*" optional="true">
    One or more external names used to match the user with one or more 
    Distinguished Names in an LDAP server or User Principals in a 
    Kerberos server.  
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:create-user(
    "Jim",
    "Jim the temp",
    "newtemp",
    "Temporary",
    (xdmp:permission("security", "read")),
    ("http://marklogic.com/dev_modules"))
 
 (: Creates a new user, named "Jim," with the role, "Temporary."  "Jim" 
    is assigned the default permission, security(read), and the default 
    collection, "http://marklogic.com/dev_modules". :)  
  ]]></pre></apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/create-user</code><br />
  and, for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
    </apidoc:usage>
</apidoc:function>

<apidoc:function name="create-user-with-role" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Creates a new user in the system database for the context database. 
  Returns the user ID of the created user. Also creates a role by the 
  same name and assigns the newly-created user to the newly-created role.
  Parameters that define roles, permissions, and collections are only applied
  to the new user.
  </apidoc:summary>

  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string"> A unique username. 
    If $user-name is not unique, an error is returned. </apidoc:param>
    <apidoc:param name="description" type="xs:string?">A description of the 
    user.
    </apidoc:param>
    <apidoc:param name="password" type="xs:string">The initial password
    for this user.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">Additional roles (if any) 
    assigned to this user. If one of the $role-names names a role that does 
    not exist, an error is returned.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    The default permissions granted to this user. 
    </apidoc:param>
    <apidoc:param name="collections" type="xs:string*">
    The URIs for the default collections to which this user has access.  
    </apidoc:param>
    <apidoc:param name="external-names" type="xs:string*">
    One or more external names used to match the user with one or more 
    Distinguished Names in an LDAP server or User Principals in a 
    Kerberos server.  
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:create-user-with-role(
    "Jim",
    "Jim the temp",
    "newtemp",
    "Temporary",
    (xdmp:permission("security", "read"),
     xdmp:permission("security", "update")),
    ("http://marklogic.com/dev_modules"))
 
(: Creates a new user, named Jim, with the roles, Jim and Temporary.  
   Jim is assigned the default permissions, security(read) and security(update),
   and the default collection, "http://marklogic.com/dev_modules". :)  

  ]]></pre></apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/create-user</code><br />
	  <code>http://marklogic.com/xdmp/privileges/create-role</code><br />
  and, for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
	  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="user-set-name" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the name of the user from $user-name to $new-user-name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">
    The existing name of the user.
    </apidoc:param>
    <apidoc:param name="new-user-name" type="xs:string">
    The new name of the user.
    </apidoc:param>
    <apidoc:param name="password" type="xs:string">
    The password to set for the user. This can be either the original password
    for the user or a new password.  
    </apidoc:param>  
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:user-set-name(
    "William",
    "Bill",
    "temp")
   
(: Changes the username from "Wiiliam" to "Bill" and resets the password to
   "temp". :)  

  ]]></pre></apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/user-set-name</code> if 
  the currrent user is not $user-name.
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a user with name equal to $user-name is not found, an error is 
		  returned.</p>
	  <p> If $new-user-name is not unique, an error is returned.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="user-set-password" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the password for the user identified by $user-name to $password.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of the user.
    </apidoc:param>
    <apidoc:param name="password" type="xs:string">The new password.
    If $password is the empty string, an error is returned.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/user-set-password</code>
  if the currrent user is not $user-name.  
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:user-set-password("Jim", "temp")

(: Changes the password for the user, "Jim," to "temp." :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-set-description" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the description of the user identified by $user-name to 
  $description.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of the user.
    </apidoc:param>
    <apidoc:param name="description" type="xs:string">
    A description of the user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:user-set-description(
    "Bill",
    "Senior QA Engineer")
  
(:  Changes the description of the user, "Bill." :)  
  ]]></pre></apidoc:example>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/user-set-description</code> 
  if the current user is not $user-name.
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="role-set-description" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the description of the role identified by $role-name to $description.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of the role.
    </apidoc:param>
    <apidoc:param name="description" type="xs:string">A description of the role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-set-description</code> 
  if the currrent role is not $role-name.
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:role-set-description(
    "Developer",
    "Developer-level access")
  
(:  Changes the description of the role, "Developer." :)   
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-get-description" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns the description for the specified role.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of the role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> xs:string </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-get-description</code> 
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role with name equal to $role-name is not found, an error 
		  is returned.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:role-get-description("Developer")

=> Developer-level access
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-role-ids" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
	  <p>Returns a sequence of unique <code>sec:role-id</code> elements 
	  that corresponds to the sequence of role names 
	  <code>$role-names</code>.  </p>
          <p>Duplicate names return a single ID.</p>
	  <p>If <code>$role-names</code> is omitted, returns all of the 
		  <code>sec:role-id</code> elements in the database.</p>
	  <p>If a role name in <code>$role-names</code> does not correspond 
		  to an existing role, an error is returned.</p>
  </apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="role-names" type="xs:string*" optional="true">A 
		  sequence of role names. If omitted, returns all of the 
		  <code>sec:role-id</code> elements in the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> element(sec:role-id)*</apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/get-role-ids</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
   "/MarkLogic/security.xqy";
   
sec:get-role-ids(("writer", "editor"))

=>

<sec:role-id xmlns:sec="http://marklogic.com/xdmp/security">6629014463670416824</sec:role-id>
<sec:role-id xmlns:sec="http://marklogic.com/xdmp/security">6615337390848046012</sec:role-id>
]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="get-role-names" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns sequence of unique sec:role-name's that corresponds to the 
  sequence of role IDs $role-ids.  Duplicate IDs return a single
  name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-ids" type="xs:unsignedLong*">
    A sequence of role IDs.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> element(sec:role-name)* </apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/get-role-names</code> 
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role ID in $role-ids does not correspond to an existing
		  role, an error is returned.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:get-role-names((6629014463670416824, 
  	             6615337390848046012)) 
=>

<sec:role-name xmlns:sec="http://marklogic.com/xdmp/security">editor</sec:role-name>
<sec:role-name xmlns:sec="http://marklogic.com/xdmp/security">writer</sec:role-name>  
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-set-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Assigns the user with name $user-name to have the roles identified by
  $role-names.  Removes previously assigned roles.<br /><br />

  If a user with name equal to $user-name is not found, an error is 
  returned.<br /><br />

  If a role name in $role-names does not correspond to an existing role,
  an error is returned.<br /><br />

  If $role-names is the empty sequence, all existing roles for the user are 
  removed.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-names is not a subset of the current user's roles or one
  of the removed roles is not a subset of the current user's roles,
  then an error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">A sequence of role names.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example> <pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:user-set-roles("Jim", ("Developer", "Temporary"))

(:  Resets the roles for "Jim" to "Developer" and "Temporary. :)  
  ]]></pre>
  </apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/user-set-roles</code><br />
   and for role assignment ($role-names not empty sequence):<br />
   <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
	  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="user-add-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
	  <p>Adds the roles ($role-names) to the list of roles granted to the 
		  user ($user-name).</p>
	  <p> If a user with name equal to $user-name is not found, an 
		  error is returned.</p>
	  <p> If one of the $role-names does not correspond to an 
		  existing role, an error is returned.</p>
	  <p> If the current user is limited to granting only his/her roles,
		  and $role is not a subset of the current user's roles, then 
		  an error is returned. </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">A sequence of role names.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example> <pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:user-add-roles("Jim", ("merge", "alert-user"))

(:  Adds the roles, "merge" and "alert-user," to Jim's existing roles. :)  
  ]]></pre>
  </apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/user-add-roles</code><br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="user-remove-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  <p>Removes the roles ($role-names) from the list of roles granted to the 
	  user ($user-name).</p>

  <p>If a user with name equal to $user-name is not found, an error is 
	  returned.</p>
 
  <p>If one of $role-names does not correspond to an existing role, 
	  an error is returned.</p>

  <p>If the current user is limited to granting only his/her roles,
  and one of $role-names is not a subset of the current user's roles, 
  then an error is returned. </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">A sequence of role names.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-role-from-user</code><br />
   and for role removal:<br />
   <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
   <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:user-remove-roles("Jim", ("admin", "admin-builtins"))
 
(: Removes the "admin" and "admin-builtins" roles from the user, "Jim." :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of role names for the roles directly assigned to the 
  user ($user-name).  Does not flatten the roles to include "inherited
  roles."<br /><br />

  If a user with name equal to $user-name is not found, an error is 
  returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> xs:string*</apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/user-get-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:user-get-roles("Jim")

=>

Developer
admin
admin-builtins
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-description" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
	  Returns the user's description.  If a user with name equal to 
	  $user-name is not found, an error is returned.
  </apidoc:summary>
    <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/user-get-description</code><br />
  or the current user is the same as the $user-name.
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:user-get-description("Jim")

=>

Jim the temp
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-user" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the user with name $user-name.<br /><br />

  If a user with name equal to $user-name is not found, an error is 
  returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:remove-user("Jim")
 
(: Removes the user, named Jim. :)  
  ]]></pre></apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/remove-user</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="create-role" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Creates a new role in the system database for the context 
  database.<br /><br />

  If $role-name is not unique, an error is returned.<br /><br />
 
  If one of the $role-names does not identify a role, an error
  is returned.<br /><br />
 
  If the current user is limited to granting only his/her roles,
  and $role-names is not a subset of the current user's roles, then an 
  error is returned.<br /><br />

  Returns the role-id.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">
    The name of the role to be created.
    </apidoc:param>
    <apidoc:param name="description" type="xs:string?">
    A description of the role to be created.
    </apidoc:param>    
    <apidoc:param name="role-names" type="xs:string*">
    A sequence of role names to which the role is assigned.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    The default permissions for the role.
    </apidoc:param>
    <apidoc:param name="collections" type="xs:string*">
    The default collections for the role.
    </apidoc:param>
    <apidoc:param name="compartment" type="xs:string?" optional="true">
    The compartment to assign to the role.
    </apidoc:param>
    <apidoc:param name="external-names" type="xs:string*" optional="true">
    The external names for the role.  Or an empty sequence, if no external names are used.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong </apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:create-role(
    "Temporary",
    "Temporary worker access",
    ("filesystem-access"),
    (),
    ("testDocument"))
   
(: Creates a new role, named "Temporary," with the default collection, 
   named testDocument. :)  
  ]]></pre></apidoc:example>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/create-role</code><br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="role-set-name" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the sec:role-name of a role from $role-name to 
  $new-role-name.<br /><br />

  If $new-role-name is not unique, an error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">
    The name of the role to change.
    </apidoc:param>
    <apidoc:param name="new-role-name" type="xs:string">
    The new name for the role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/role-set-name</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:role-set-name("Temporary", "Contractor")  

(: Changes the name of the "Temporary" role to "Contractor."  :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-set-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Assigns roles (named $role-names) to be the set of included roles for the
  role ($role-name). Removes previously assigned roles.<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  If a role name in $role-names does not correspond to an existing role,
  an error is returned.<br /><br />

  If $role-names is the empty sequence, all included roles for the role are 
  removed.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-names is not a subset of the current user's roles, then an error 
  is returned.<br /><br />
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
     A sequence containing the names of roles to assign to $role-name.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-set-roles</code> <br />
  and for role assignment ($role-names not empty sequence):<br /> 
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:role-set-roles("Contractor", ("Developer", "alert-internal"))

(: Assigns the "Developer" and "alert-internal" roles to the "Contractor" 
   role and removes any other roles previously assigned to "Contractor." :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-add-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Adds new roles ($new-roles) to the role specified by
  <code>$role-name</code>.<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />
 
  If one of $new-roles does not correspond to an existing role, 
  an error is returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $new-role is not a subset of the current user's roles, then an error is
  returned. 
 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of the role.
    </apidoc:param>
    <apidoc:param name="new-roles" type="xs:string*">
    The roles to add to the role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-add-roles</code> <br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:role-add-roles("Contractor", "filesystem-access")

(: Adds the "filesystem-access" role to the "Contractor" role and leaves
   any previously assigned roles intact. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-remove-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the roles ($role-names) from the set of roles included by the 
  role ($role-name).<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  If one of $role-names does not correspond to an existing role, an error is
  returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $old-role is not a subset of the current user's roles, then an error is
  returned. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    The name of the roles to remove from the role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-remove-roles</code><br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:role-remove-roles("Contractor", ("Developer", "alert-internal"))

(: Removes the "Developer" and "alert-internal" roles from the "Contractor" role. :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-role" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the role ($role-name).<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  This function also removes all references to the role 
  (privileges, amps, permissions and users).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:remove-role("Temporary")
 
(: Removes the role, named Temporary. :)  
  ]]></pre></apidoc:example>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-role</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="remove-role-from-users" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes references to the role ($role-name) from all users.<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-name is not a subset of the current user's roles, then an 
  error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-role-from-users</code><br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:remove-role-from-users("Contractor")

(: Removes the "Contractor" role from all users. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-role-from-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes references to the role ($role-name) from all other roles.<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-name is not a subset of the current user's roles, then an 
  error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-role-from-users</code><br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:remove-role-from-roles("Developer")

(: Removes the "Developer" role from all other roles. :) 
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-role-from-privileges" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes references to the role ($role-name) from all privileges.<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-name is not a subset of the current user's roles, then an 
  error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-role-from-privileges</code><br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:remove-role-from-privileges("Developer")

(: Removes the "Developer" role from all privileges. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-role-from-amps" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes references to the role ($role-name) from all amps.<br /><br />

  If a role with name equal to $role-name is not found, an error is 
  returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-name is not a subset of the current user's roles, then an 
  error is returned.

  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-role-from-amps</code><br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:remove-role-from-amps("Developer")

(: Removes the "Developer" role from all amps. :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="create-privilege" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Creates a new privilege and returns the new privilege-id.  
  <br /><br />
  For execute privileges,
  the privilege is initially nothing more than a name.  Use the 
  <code>xdmp:security-assert()</code>
  function in your code to associate the privilege with a protected operation.
  <br /><br />
  For URI privleges, the <code>$action</code> parameter identifies the 
  base URI to be protected.  Users must have this privilege to access any of the
  documents or code under the specified URI.
  <br /><br />
  If $action is not unique, an error is returned.<br /><br />
 
  If $kind is not one of ("execute", "uri") then en error is 
  returned.<br /><br />

  If one of the $role-names names a role that does not exist, an error
  is returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-names is not a subset of the current user's roles, then an 
  error is returned.

  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="privilege-name" type="xs:string">
    The name of the privilege to create (unique within security database).
    </apidoc:param>
    <apidoc:param name="action" type="xs:string">Action protected by this 
    privilege.  For an Execute Privilege, this is usually a URI describing 
    an activity.  For a URI Privilege, this is a base URI used to filter 
    database activities  with certain document URIs.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    The names of the roles which can perform this action.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/create-privilege</code> <br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:create-privilege("mypriv", 
                     "http://marklogic.com/xdmp/privileges/mypriv", 
                     "execute", 
                     "Developer")

(: Creates an execute privilege, named "mypriv," and assigns it to the
   "Developer" role. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="privilege-set-name" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the sec:privilege-name of a sec:privilege to 
  $new-privilege-name.<br /><br />

  If a privilege with the given $action and $kind is not found, 
  an error is returned.<br /><br />

  If $new-privilege-name is not unique, an error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">The action URI for the 
	    privilege.  If $kind is a URI privilege, then use the URI to 
	    protect for the action parameter.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
    <apidoc:param name="new-privilege-name" type="xs:string">The new name for
    the privilege.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/privilege-set-name</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:privilege-set-name(
    "http://marklogic.com/xdmp/privileges/mypriv", 
    "execute", 
    "new_name")

(: Renames the execute privilege with the specified action to "new_name." :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-privilege" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the privilege identified by ($action,$kind).<br /><br />

  If a privilege identified by ($action,$kind) is not found, an error is 
  returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">The action URI for the 
	    privilege.  If $kind is a URI privilege, then use the URI to 
	    protect for the action parameter.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-privilege</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:remove-privilege(
    "http://marklogic.com/xdmp/privileges/mypriv", 
    "execute")
 
(: Removes the execute privilege with the specified action. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="privilege-get-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of role names for the roles assigned to the 
  privilege ($action,$kind). <br /><br />

  If a privilege with action equal to $action is not found, an error is 
  returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">The action URI for the 
	    privilege.  If $kind is a URI privilege, then use the URI to 
	    protect for the action parameter.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/privilege-get-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:privilege-get-roles(
    "http://marklogic.com/xdmp/privileges/create-role", 
     "execute")
=>

security
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="privilege-set-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Assigns the privilege ($action,$kind) to have the roles identified by
  $role-names.  Removes the prviously assigned roles.<br /><br />

  If a privilege identified by ($action,$kind) is not found, an error is 
  returned.<br /><br />

  If a role name in $role-names does not correspond to an existing role,
  an error is returned.<br /><br />

  If $role-names is the empty sequence, all existing roles for the privilege
  are removed.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-names is not a subset of the current user's roles, then an error 
  is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">The action URI for the 
	    privilege.  If $kind is a URI privilege, then use the URI to 
	    protect for the action parameter.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    New roles that can perform this action.  All previously assigned roles 
    will be removed.  If $role-names is the empty sequence, the privilege 
    will have no roles assigned.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/privilege-set-roles</code> <br />
  and for role assignment ($role-names not empty sequence):<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:privilege-set-roles(
    "http://marklogic.com/xdmp/privileges/mypriv", 
     "execute", "Contractor")

(: Assigns the privilege with the specified action to the "Contractor" role.
   The privilege is removed from any other roles that had previously been  
   assigned the privilege. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="privilege-add-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Adds the roles ($role-names) to the list of roles assigned to the 
  privilege ($action,$kind).<br /><br />

  If a privilege identified by ($action,$kind) is not found, an error is 
  returned.<br /><br />
 
  If one of $role-names does not correspond to an existing role,
  an error is returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role is not a subset of the current user's roles, then an error is
  returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">The action URI for the 
	    privilege.  If $kind is a URI privilege, then use the URI to 
	    protect for the action parameter.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    Additional roles for the privilege.  If $role-names is the empty sequence, 
    the function has no effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:privilege-add-roles(
    "http://marklogic.com/xdmp/privileges/unprotected-collections",
    "execute",
    ("Temporary"))
   
(: Adds the unprotected-collection execute privilege to the Temporary role. :)  
   ]]></pre></apidoc:example>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/privilege-add-roles</code> <br />
  and for role assignment:
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
</apidoc:function>

<apidoc:function name="privilege-remove-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes roles ($role-names) from the roles assigned to the privilege
  ($action,$kind).<br /><br />

  If a privilege identified by ($action,$kind) is not found, an error is 
  returned.<br /><br />
 
  If one of $role-names does not correspond to an existing role,
  an error is returned.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role is not a subset of the current user's roles, then an error
  is returned. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">The action URI for the 
	    privilege.  If $kind is a URI privilege, then use the URI to 
	    protect for the action parameter.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    Additional roles for the privilege.  If $role-names is the empty sequence, 
    the function has no effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/privilege-remove-roles</code>
	  <br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:privilege-remove-roles(
    "http://marklogic.com/xdmp/privileges/mypriv", 
    "execute", "Contractor")
  
(: Removes the specified privilege from the "Contractor" role. :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="create-amp" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
	  <p>Creates a new amp in the system database for the context 
		  database.</p>
	  <p> If the tuple ($namespace, $local-name, $document-uri, $database) 
		  is not unique, an error is returned.</p>
	  <p> If one of the $role-names does not identify a role, an error
		  is returned.</p>
	  <p> If the current user is limited to granting only his/her roles, 
		  and $role-names is not a subset of the current user's roles,
		  then an error is returned.</p>
	  <p> Returns the amp-id.</p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    Namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    Name of function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    URI of the module in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    Roles that should be temporarily assumed while the amp is in effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/create-amp</code><br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:create-amp(
    "http://marklogic.com/my_modules/myspace",
    "my-amp",
    "/MarkLogic/MyModule.xqy",
    0,
    "Developer")
    
 (: Creates an amp for the function "my-amp" in the MyModule.xqy module that
    temporarily grants users the "Developer" role. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="amp-set-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Assigns the amp identified by $namespace, $local-name and $document-uri
  to have the roles identified by $roles-names.  Removes previously
  assigned roles.<br /><br />

  If an amp with the given identifiers does not exist, an error is 
  returned.<br /><br />

  If a role name in $role-names does not correspond to an existing role,
  an error is returned.<br /><br />

  If $role-names is the empty sequence, all roles assigned to the amp are 
  removed.<br /><br />

  If the current user is limited to granting only his/her roles,
  and $role-names is not a subset of the current user's roles, then an
  error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    Namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    Name of function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    URI of the document in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    Roles that should be temporarily assumed while the amp is in effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/amp-set-roles</code><br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:amp-set-roles(
    "http://marklogic.com/my_modules/myspace",
    "my-amp",
    "/MarkLogic/MyModule.xqy",
    0,
    ("Developer", "Temporary"))
 
(: Sets the "Developer" and "Temporary" rolea as the roles granted to the "my-amp" amp. 
   Any other roles previously in the list are removed. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="amp-add-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Adds the roles ($role-names) to the list of roles granted to the amp
  ($namespace, $local-name, $document-uri).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    Namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    Name of function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    URI of the document in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    Roles that should be temporarily assumed while the amp is in effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/amp-add-roles</code><br />
  and for role assignment:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
  <p>If an amp with the given identifiers ($namespace, $local-name, 
  $document-uri) is not found, an error is returned.</p>

  <p>If one of $role-names does not correspond to an existing role, 
  an error is returned.</p>

  <p>If the current user is limited to granting only his/her roles,
  and $role is not a subset of the current user's roles, then an error is
  returned.</p> 
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:amp-add-roles(
    "http://marklogic.com/my_modules/myspace",
    "my-amp",
    "/MarkLogic/MyModule.xqy",
    0,
    "Contractor")

(: Adds the "Contractor" role to the list of roles granted to the "my-amp" amp. :)	
 ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="amp-get-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of role names for the roles directly assigned to the 
  amp ($namespace, $local-name, $document-uri).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    Namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    Name of function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    URI of the document in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string* </apidoc:return>
  <apidoc:privilege>
  <p> <code>http://marklogic.com/xdmp/privileges/amp-get-roles</code></p>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If an amp is not found with the given identifiers, an error is 
		  returned.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:amp-get-roles(
    "http://marklogic.com/my_modules/myspace",
    "my-amp",
    "/MarkLogic/MyModule.xqy",
    0)
=>

Contractor
Developer
Temporary
  ]]></pre>
  </apidoc:example>
  </apidoc:function>

<apidoc:function name="role-get-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of role names for the roles directly assigned to 
  the given role ($role-name).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-get-roles</code>
  </apidoc:privilege>
  <apidoc:usage>
  <p>If a role with name equal to $role-name is not found, an error is 
  returned.</p>
  <p>If a role is assigned to itself, the sequence returned from
	  <code>sec:role-get-roles</code> does not include itself.</p>
  <p>To find all of the roles this role inherits (that is, the
  roles assigned directly to this role, the roles assigned to those 
  roles, and so on), use the <code>xdmp:role-roles</code> built-in
  function.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
 xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
   
sec:role-get-roles("Developer")

=>

filesystem-access
pipeline-execution
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="amp-remove-roles" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes a role ($role-name) from the set of roles included by the amp
  ($namespace, $local-name, $document-uri).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    Namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    Name of function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    URI of the document in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
    <apidoc:param name="role-names" type="xs:string*">
    Roles that should be temporarily assumed while the amp is in effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/amp-remove-roles</code><br />
  and for role removal:<br />
  <code>http://marklogic.com/xdmp/privileges/grant-all-roles</code> or<br />
  <code>http://marklogic.com/xdmp/privileges/grant-my-roles</code> 
 
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If one of $role-names does not correspond to an existing role,
		  an error is returned.</p>
 
	  <p>If an amp idnetified by ($namespace, $local-name, $document-uri) 
		  is not found then an error is returned.</p>

	  <p>If the current user is limited to granting only his/her roles,
  and $role-name is not a subset of the current user's roles, then an
  error is returned.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:amp-remove-roles(
    "http://marklogic.com/my_modules/myspace",
    "my-amp",
    "/MarkLogic/MyModule.xqy",
    0,
    "Developer")

(: Removes the "Developer" role from the list of roles granted to the "my-amp" amp. :)
   ]]></pre>
  </apidoc:example>

</apidoc:function>

<apidoc:function name="remove-amp" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the amp ($namespace, $local-name, $document-uri, $database) and returns 
  true after completion.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    The namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    The name of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    The URI of the module in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>If an amp ($namespace, $local-name, $document-uri) is not found,
		  an error is returned.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:remove-amp(
    "http://marklogic.com/my_modules/myspace",
    "my-amp",
    "/MarkLogic/MyModule.xqy",
    0)
   
(: Removes the "my-amp" amp. :) 
]]></pre>
  </apidoc:example>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/remove-amp</code>
  </apidoc:privilege>
</apidoc:function>

<apidoc:function name="amp-doc-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of strings corresponding to the collection uri's that
  amps belong to.
  </apidoc:summary>

  <apidoc:return> xs:string* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:amp-doc-collections()

=>

http://marklogic.com/xdmp/security
http://marklogic.com/xdmp/amps
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="amp-doc-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements that all newly created amp 
  documents receive.
  </apidoc:summary>

  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
</apidoc:function>

<apidoc:function name="user-doc-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of strings corresponding to the collection uri's that
  users belong to.
  </apidoc:summary>

  <apidoc:return>xs:string* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:user-doc-collections()

=>

http://marklogic.com/xdmp/security
http://marklogic.com/xdmp/users

   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-doc-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements that all newly created user 
  documents receive.
  </apidoc:summary>
  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:user-doc-permissions()

=>

<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>read</sec:capability>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>update</sec:capability>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>insert</sec:capability>
</sec:permission>
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-doc-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of strings corresponding to the collection uri's that
  roles belong to.
  </apidoc:summary>

  <apidoc:return> xs:string* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:role-doc-collections()

=>

http://marklogic.com/xdmp/security
http://marklogic.com/xdmp/roles
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-doc-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements that all newly created role
  documents receive.
  </apidoc:summary>

  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:role-doc-permissions()

=>

<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>read</sec:capability>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>update</sec:capability>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>insert</sec:capability>
</sec:permission>
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-amp" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns an sec:amp element corresponding to an amp identified by
  ($namespace, $local-name, $document-uri).  If no such amp is found,
  an error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace" type="xs:string">
    Namespace of the function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="local-name" type="xs:string">
    Name of function to which the amp applies.
    </apidoc:param>
    <apidoc:param name="document-uri" type="xs:string">
    URI of the document in which the function is located.
    </apidoc:param>
    <apidoc:param name="database" type="xs:unsignedLong">
     Database ID in which the module is located. If the module is on
     the filesystem (in the Modules directory), specify 
     <code>xs:unsignedLong(0)</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:amp)? </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:get-amp(
    "http://marklogic.com/xdmp/alert",
    "action-insert",
    "/MarkLogic/alert.xqy",
    0) 
=>

<sec:amp xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:amp-id>2840630016131588040</sec:amp-id>
  <sec:namespace>http://marklogic.com/xdmp/alert</sec:namespace>
  <sec:local-name>action-insert</sec:local-name>
  <sec:document-uri>/MarkLogic/alert.xqy</sec:document-uri>
  <sec:database>0</sec:database>
  <sec:role-ids>
    <sec:role-id>4235709426772438321</sec:role-id>
  </sec:role-ids>
</sec:amp>
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-privilege" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sec:privilege element corresponding to a privilege identified
  by ($action,$kind).  If no such privilege is found, an error is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="action" type="xs:string">
    Action protected by this privilege.  For an Execute Privilege, this is 
    usually a URI describing an activity.  For a URI Privilege, this is a 
    base URI used to filter database activities  with certain document URIs.
    </apidoc:param>
    <apidoc:param name="kind" type="xs:string">Either "execute" or "uri".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:privilege)? </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:get-privilege(
    "http://marklogic.com/xdmp/privileges/admin-module-read",
    "execute")

=>

<sec:privilege xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:privilege-id>17293336516617295309</sec:privilege-id>
  <sec:privilege-name>admin-module-read</sec:privilege-name>
  <sec:action>http://marklogic.com/xdmp/privileges/admin-module-read</sec:action>
  <sec:role-ids>
    <sec:role-id>5444982746628127945</sec:role-id>
    <sec:role-id>6629014463670416824</sec:role-id>
  </sec:role-ids>
  <sec:kind>execute</sec:kind>
</sec:privilege>
   ]]></pre>
  </apidoc:example>
</apidoc:function>



<apidoc:function name="priv-doc-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of strings corresponding to the collection uri's that
  privileges belong to.
  </apidoc:summary>

  <apidoc:return> xs:string* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:priv-doc-collections()

=>

http://marklogic.com/xdmp/security
http://marklogic.com/xdmp/privileges
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="priv-doc-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements that all newly created privilege
  documents receive.
  </apidoc:summary>

  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:priv-doc-permissions()

=>

<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>read</sec:capability>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>update</sec:capability>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:role-id>16363340809666818373</sec:role-id>
  <sec:capability>insert</sec:capability>
</sec:permission>
   ]]></pre>
  </apidoc:example>
  </apidoc:function>

<apidoc:function name="security-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri for the Security collection.
  </apidoc:summary>

  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:security-collection()

=>

http://marklogic.com/xdmp/security
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="security-namespace" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri of the security namespace.
  </apidoc:summary>

  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:security-namespace()

=>

http://marklogic.com/xdmp/security
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="users-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri for the users collection.
  </apidoc:summary>

  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:users-collection( )

=>

http://marklogic.com/xdmp/users
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="roles-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri for the roles collection.
  </apidoc:summary>

  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:roles-collection( )

=>

http://marklogic.com/xdmp/roles 
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="privileges-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri for the privileges collection.
  </apidoc:summary>

  <apidoc:return> xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:privileges-collection( )

=>

http://marklogic.com/xdmp/privileges    
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="amps-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri for the amps collection.
  </apidoc:summary>

  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:amps-collection( )

=>

http://marklogic.com/xdmp/amps    
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="collections-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a string corresponding to the uri for the protected 
  collections collection.
  </apidoc:summary>

  <apidoc:return>xs:string </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:collections-collection( )

=>

http://marklogic.com/xdmp/collections   
  ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="user-set-default-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Sets the default permissions for a user with name $user-name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of the user.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    New permissions.  If the empty sequence is provided, deletes the 
    existing permissions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/user-set-default-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a user with name $user-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:user-set-default-permissions(
   "Jim", 
    (xdmp:permission("security", "read"),
     xdmp:permission("security", "update")))

(: Sets the security(read) and security(update) permissions for user, "Jim." :)
 ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-distinct-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements made up of a concatenation of
  $output-perms and the distinct permission elements of $input-perms.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="input-perms" type="element(sec:permission)*">
    The input permissions.  
    </apidoc:param>
    <apidoc:param name="output-perms" type="element(sec:permission)*">
    The output permissions. This is typically an empty sequence.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
 
sec:get-distinct-permissions(
    (xdmp:permission("security", "read"), 
     xdmp:permission("security", "update")),
     ())
=>

<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>update</sec:capability>
  <sec:role-id>16363340809666818373</sec:role-id>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>read</sec:capability>
  <sec:role-id>16363340809666818373</sec:role-id>
</sec:permission>
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-set-default-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Sets the default permissions for a role with name $role-name. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">
    The name of the role to which the default permissions are set.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    New permissions.  If the empty sequence is provided, deletes the 
    existing permissions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-set-default-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role with name $role-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:role-set-default-permissions(
    "Developer",
     (xdmp:permission("security", "read"), 
      xdmp:permission("security", "update")))

(: Sets the default permissions for the "Developer" role to security(read) and
   security(update). :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-default-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements correspondinig to the user's
  default permissions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/user-get-default-permission</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a user with name $user-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:user-get-default-permissions("Jim")

=>

<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>update</sec:capability>
  <sec:role-id>16363340809666818373</sec:role-id>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>read</sec:capability>
  <sec:role-id>16363340809666818373</sec:role-id>
</sec:permission>
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-get-default-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements correspondinig to the role's
  default permissions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-get-default-permission</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role with name $role-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:role-get-default-permissions("Developer")

=>

<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>update</sec:capability>
  <sec:role-id>16363340809666818373</sec:role-id>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>read</sec:capability>
  <sec:role-id>16363340809666818373</sec:role-id>
</sec:permission>
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-default-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of strings correspondinig to the uri's of the user's
  default collections.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/user-get-default-collections</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a user with name $user-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:user-get-default-collections("Jim")

=>

http://marklogic.com/jims_modules
http://marklogic.com/jims_docs
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-get-default-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of strings correspondinig to the uri's of the role's
  default collections.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-get-default-collections</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role with name $role-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";

sec:role-get-default-collections("Developer")

=>

http://marklogic.com/dev_modules
http://marklogic.com/dev_docs
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-set-default-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Sets the default collections of a user with name $user-name to
  $collections.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
    <apidoc:param name="collections" type="xs:string*">
    A sequence of collections.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/user-set-default-collections</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a user with name $user-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:user-set-default-collections("Jim", 
    ("http://marklogic.com/jim_modules", 
     "http://marklogic.com/jim_docs"))

(: Sets the default collections for the user, "Jim," to "http://marklogic.com/jim_modules"
   and "http://marklogic.com/jim_docs". Any other previously set collections are removed.
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-set-default-collections" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Sets the default collections of a role with name $role-name to
  $collections.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
    <apidoc:param name="collections" type="xs:string*">
    A sequence of collections.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-set-default-collections</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role with name $role-name is not found, an error is 
		  raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:role-set-default-collections("Developer", 
    ("http://marklogic.com/dev_modules", 
     "http://marklogic.com/dev_docs"))

(: Sets the default collections for the role, "Developer," to 
"http://marklogic.com/dev_modules" and "http://marklogic.com/dev_docs".
 Any other previously set collections are removed.
  ]]></pre> 
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Gets the security document corresponding to a protected collection with
  uri equal to $uri.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">The URI of a collection.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:collection) </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/unprotect-collection</code> 
	  or<br />
  <code>http://marklogic.com/xdmp/privileges/collection-set-permissions</code> 
	   or<br />
   <code>http://marklogic.com/xdmp/privileges/collection-add-permissions</code> 
	   or<br />
 <code>http://marklogic.com/xdmp/privileges/collection-remove-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a protected collection with uri equal to $uri is not found, 
		  an error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";
 
sec:get-collection("http://marklogic.com/cpf/domains")

=>
  
<sec:collection xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:collection-id>403495114666638078</sec:collection-id>
  <sec:uri>http://marklogic.com/cpf/domains</sec:uri>
</sec:collection>
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="protect-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Protects a collection $uri with the given permissions
  ($permissions).  Returns the unique id of the protected collection. 
  If the protected collection at the specified URI does not exist, it is
  created.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">The URI of a collection.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    Permissions governing the collection.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/protect-collection</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If $uri is empty or can not be cast as an xs:AnyURI, an error 
		  is raised.</p>
 
	  <p>If a collection with the same uri is already protected, an 
		  error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:protect-collection("http://marklogic.com/dev_modules", 
                       (xdmp:permission("Developer", "read"), 
                        xdmp:permission("Developer", "insert"))) 

(: Users with the "Developer" role can read and insert files in "dev_modules." :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="unprotect-collection" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the protection of a collection $uri.  This
  does not remove the collection or any of its documents, but it does
  remove the protected collection from the security database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">
    The URI of the collection from which to remove protections.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/unprotect-collection</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a protected collection with uri equal to $uri is not found,
		  an error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:unprotect-collection("http://marklogic.com/dev_modules")

(: Removes protection from the "dev_modules" collection. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="collection-set-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Sets the permissions of a protected collection identified by $uri to 
  $permissions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">The URI of a collection.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    New permissions.  If the empty sequence is provided, deletes the existing 
    permissions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/collection-set-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a protected collection with uri equal to $uri is not found, 
		  an error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:collection-set-permissions("http://marklogic.com/dev_modules",
                               (xdmp:permission("Developer", "read"), 
                                xdmp:permission("Developer", "update")))

(: Sets the permissions on "dev_modules" to Developer(read) and Developer(update).
   Any previous permissions on the collection are removed. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="collection-add-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Add the permissions $permissions to the protected collection identified 
  by $uri.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">The URI of a collection.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    New permissions to add to that protected collection.  If $permissions is 
    the empty sequence, the function will have no effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/collection-add-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a protected collection with uri equal to $uri is not found, 
		  an error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:collection-add-permissions("http://marklogic.com/dev_modules",
                               (xdmp:permission("Developer", "insert")))

(: Adds the Developer(insert) permission to the "dev_modules" collection. :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="collection-remove-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Removes the permissions $permissions from the protected collection 
  identified by $uri.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">The URI of a collection.
    </apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)*">
    Permissions to be removed from that protected collection.  If $permissions 
    is the empty sequence, the function will have no effect.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/collection-remove-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a protected collection with uri equal to $uri is not found, 
		  an error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";
 
sec:collection-remove-permissions("http://marklogic.com/dev_modules",
                                  (xdmp:permission("Developer", "update")))
  
(: Removes the Developer(update) permission from the "dev_modules" collection. :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="collection-get-permissions" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements corresponding to the 
  current permissions granted to the protected collection identified
  by $uri.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">The URI of a collection.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)* </apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/collection-get-permissions</code>
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a protected collection with uri equal to $uri is not found, 
		  an error is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";
  
sec:collection-get-permissions("http://marklogic.com/dev_modules")

=>
 
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>read</sec:capability>
  <sec:role-id>5444982746628127945</sec:role-id>
</sec:permission>
<sec:permission xmlns:sec="http://marklogic.com/xdmp/security">
  <sec:capability>insert</sec:capability>
  <sec:role-id>5444982746628127945</sec:role-id>
</sec:permission>
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-privileges" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a set of privilege elements corresponding to all privileges
  that a user has. (roles are flattened to give a complete set of 
  privileges).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of a user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:privilege)* </apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/user-privileges</code> 
  if the current user is not $user-name.
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a user with name equal to $user-name is not found, an error
		  is raised.</p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:user-privileges("Jim")

=>

<sec:privilege xmlns:sec="http://marklogic.com/xdmp/security">
 <sec:privilege-id>12387631775818383068</sec:privilege-id>
  <sec:privilege-name>xdmp:save</sec:privilege-name>
  <sec:action>http://marklogic.com/xdmp/privileges/xdmp-save</sec:action>
  <sec:role-ids>
    <sec:role-id>13749738523688002780</sec:role-id>
  </sec:role-ids>
  <sec:kind>execute</sec:kind>
</sec:privilege>
(:  ..... and all other privileges assigned to "jim." :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-privileges" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a set of privilege elements corresponding to all privileges
  that a role has. (Roles are flattened to give a complete set of 
  privileges).
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">The name of a role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> element(sec:privilege)*</apidoc:return>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/role-privileges</code>
  if the current role is not $role-name.
  </apidoc:privilege>
  <apidoc:usage>
	  <p>If a role with name equal to $role-name is not found, an 
		  error is raised. </p>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";
 
sec:role-privileges("Developer")
  
=>

<sec:privilege xmlns:sec="http://marklogic.com/xdmp/security">
 <sec:privilege-id>12387631775818383068</sec:privilege-id>
  <sec:privilege-name>xdmp:save</sec:privilege-name>
  <sec:action>http://marklogic.com/xdmp/privileges/xdmp-save</sec:action>
  <sec:role-ids>
    <sec:role-id>13749738523688002780</sec:role-id>
  </sec:role-ids>
  <sec:kind>execute</sec:kind>
</sec:privilege>
(:  ..... and all other privileges assigned to "Developer." :) 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="security-installed" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns fn:true() if security has been installed on the 
  current database.  Otherwise, returns false.
  </apidoc:summary>
  <apidoc:params>
	
  </apidoc:params>
  <apidoc:return>xs:boolean </apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:security-installed()

=> true 
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="uid-for-name" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns the uids for the named user or () if no such user exists.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="xs:string">The named user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:uid-for-name("Jim")

=>

18325468190304151823
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-user-names" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns sequence of unique <code>sec:user-name</code>s that corresponds to the 
  sequence of user IDs <code>$user-ids</code>.  Duplicate IDs return a single
  name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-ids" type="xs:unsignedLong*">
    A sequence of user IDs.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> element(sec:user-name)* </apidoc:return>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/get-user-names</code> 
  </apidoc:privilege>
  <apidoc:usage>
    <p>If a user ID in $user-ids does not correspond to an existing
      user, an error is returned.</p>
    <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
   "/MarkLogic/security.xqy";

sec:get-user-names((18325468190304151823, 
                    5673246250406350379, 
                    11765239768744971597))

=> 

<sec:user-name xmlns:sec="http://marklogic.com/xdmp/security">Jim</sec:user-name>
<sec:user-name xmlns:sec="http://marklogic.com/xdmp/security">Sue</sec:user-name>
<sec:user-name xmlns:sec="http://marklogic.com/xdmp/security">Tom</sec:user-name>
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="set-realm" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Changes the realm of this security database to $realm.
  If the realm is different from the old value this function
  also invalidates all the existing digest passwords since they
  will no longer work with the new realm.  Warning: this invalidates
  all user's digest passwords, including the user running this function 
  and users of the Admin Interface (if the Admin Interface is set to digest
  authentication, which is the default setting); once a user's digest password
  is invalidated, that user will no longer be able to log in with digest
  authentication.  
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="realm" type="xs:string">
    The new realm name to which the security database name is changed.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:set-realm("public")

(: Sets the realm to "public." :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="check-admin" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Throws an error if the current user does not have the admin role.
  </apidoc:summary>
  <apidoc:params>
   
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";

import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:check-admin()

=>  [0.9-ml] SEC-NOADMIN: User does not have admin role.
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="security-version" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns the current version of the security database.
  </apidoc:summary>
  <apidoc:params>
   
  </apidoc:params>
  <apidoc:return>xs:double</apidoc:return>
  <apidoc:privilege>

  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";

import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:security-version()

=> 40100
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-compartments" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns a list of all of the compartments.
	</apidoc:summary>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/get-compartments</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:get-compartments()

      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="role-get-compartment" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns the compartment
		for the specified role.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="role-name" type="xs:string">The name of the role.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/role-get-compartment</code>
  </apidoc:privilege>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:role-get-compartment("my-compartmented-role")
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="compartment-get-roles" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns a list of roles in the
		specifed compartment.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="compartment-name" type="xs:string">The
		  name of the compartment.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:role)*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/compartment-get-roles</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:compartment-get-roles("my-compartment")
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="validate-permissions" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function throws the SEC_NOPERMCAP exception if
		a permission has no capability specified and it throws the 
		SEC-NOPERMROLEID exception if there is no role specified in 
		the permission.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="permissions" type="element(sec:permission)*">Zero
		  or more permission elements to check.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>node()*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:validate-permissions(xdmp:permission("my-role", "read"))
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-exists" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns true if the specified
		role exists in the security database.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="role-name" type="xs:string">The role 
		  name.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/get-role</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:role-exists("my-role")
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="user-exists" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns true if the specified
		user exists in the security database.</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="user-name" type="xs:string">The user
		  name.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/get-user</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:user-exists("my-user")
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="privilege-exists" lib="sec" 
	category="Security-sec" bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns true if the specified
		privilege exists.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="action" type="xs:string">The URI of the 
		  privilege.
	  </apidoc:param>
	  <apidoc:param name="kind" type="xs:string">The kind of privilege:
		  "execute" or uri".
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/get-privilege</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml"; 

(: execute this against the security database :)
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:privilege-exists("http://marklogic.com/xdmp/privileges/get-privilege",
      "execute")

      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="amp-exists" lib="sec" category="Security-sec" 
	bucket="XQuery Library Modules" 
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns true if the specified
		amp exists in the security database.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="namespace" type="xs:string">The namespace for the
		  amped function.
	  </apidoc:param>
	  <apidoc:param name="local-name" type="xs:string">The local-name of 
		  the amped function.
	  </apidoc:param>
	  <apidoc:param name="document-uri" type="xs:string">The URI of the
		  module containing the amped function.
	  </apidoc:param>
	  <apidoc:param name="database" type="xs:unsignedLong">The database ID
		  of the module containing the amped function.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

   sec:amp-exists("my/namespace/uri", "my-function", "/my/module.xqy",
      xdmp:database("my-database"))
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-last-password-date" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function returns the time of the most recent password change for the
  specified user. 
  If the password for the user has not been changed since the upgrade to 4.2, there 
  is no history, so an 
  empty sequence will be returned. If the user does not exist, an exception is thrown.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of the user to check.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:dateTime?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:user-get-last-password-date("Jim") 

  (: Returns the date and time of the last password change for the user "Jim," or
     an empty sequence if the password has not changed since the upgrade to 4.2. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-password-extra" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the extra information for the specified user. If the user does not exist, 
  an exception is thrown.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">
    The name of the user for whom to return the extra information.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:password-extra)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:user-get-password-extra("Jim")

  (: Returns the extra information for the user, Jim. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="user-set-password-extra" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets extra information for the specified user. If the user 
  does not exist, an exception is thrown.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">
    The name of the user for whom to set the extra information.
    </apidoc:param>
    <apidoc:param name="extra" type="element(sec:password-extra)">
    The extra information to be set for the user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  let $extra := <sec:password-extra>
                   <p>Change this password in 30 days</p>
                </sec:password-extra>

  return sec:user-set-password-extra("Jim", $extra)

  (: Sets the extra information for the user, Jim. :)
       ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="credentials-set-aws" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Sets the Amazon Web Services credentials.
  Thse are used when accessing files on the simple storage service.
  If you set both $access-key and $secret-key to the empty string, then the 
  credentials are deleted from the security database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="access-key" type="xs:string">
    An Amazon Web Services access key.
    </apidoc:param>
    <apidoc:param name="secret-key" type="xs:string">
    An Amazon Web Services secret key.
    </apidoc:param>
    <apidoc:param name="session-token" type="xs:string" optional="true">
    An Amazon Web Services session token.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/credentials-set-aws</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
  xquery version "1.0-ml"; 

  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:credentials-set-aws("myaccesskey","mysecretkey")
       ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-set-external-names" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the external names for the named user.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">
    The name of the user for which to set the external name.
    </apidoc:param>
    <apidoc:param name="external-name" type="xs:string*">
    A sequence of one or more external names to be set for the user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:user-set-external-name("Jim", ("CN=TestUser 1,CN=Users,DC=DUDE,DC=LOCAL"))

(: Sets the external name for the user, "Jim", to 
   "CN=TestUser 1,CN=Users,DC=DUDE,DC=LOCAL". :)
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-set-external-names" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets a role to be matched to one or more external LDAP distinguished names.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">
    The role to be set for the external user.
    </apidoc:param>
    <apidoc:param name="external-name" type="xs:string*">
    A sequence of one or more external LDAP distinguished names to be associated with the
    named role.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:role-set-external-name("admin", ("UID=joe,CN=Users,DC=MARKLOGIC1,DC=COM"))

(: Sets the external LDAP distinguished name for the "admin" role to 
   "UID=joe,CN=Users,DC=MARKLOGIC1,DC=COM". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="role-get-external-names" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the external LDAP group names assigned to the named role.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-name" type="xs:string">
    The name of the role for which to return the external LDAP group names.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:role-get-external-names("admin")

(: Returns the external LDAP group names for the "admin" role. :)    ]]></pre>
  </apidoc:example>
</apidoc:function>


 
<apidoc:function name="create-external-security" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function creates an external authentication configuration object and returns the id of the
  configuration.  This configuration is
  used when MarkLogic Server is used with an external Kerberos and/or LDAP server to control 
  user access. 
  <p>
   For more information on external security, 
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2375253'>External Security</a> in the <em>Security Guide</em>.
  </p>	  
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of external authentication configuration.
    </apidoc:param>
    <apidoc:param name="description" type="xs:string">
    The description of external authentication configuration.
    </apidoc:param>
    <apidoc:param name="authentication" type="xs:string">
    The authentication protocol. This can be either <code>ldap</code>, <code>kerberos</code>,
    or <code>certificate</code>.
    <p>
    If authentication is <code>certificate</code>, only certificate authentication will be performed. 
    If authentication is not <code>certificate</code> and if <code>require-client-certificate</code> is set to 
    <code>true</code>, a client certificate is required in addition to some other form of authentication.
    </p>
    </apidoc:param>
    <apidoc:param name="cache-timeout" type="xs:unsignedInt">
    Login cache timeout, in seconds.
    </apidoc:param>
    <apidoc:param name="authorization" type="xs:string">
    The authorization scheme.  Set to <code>ldap</code> for external authorization 
    using an LDAP server, <code>internal</code> to authorize using MarkLogic Server,
    or <code>saml</code> for SAML authorization.
    </apidoc:param>
    <apidoc:param name="ldap-server" type="(sec:ldap-server)?">
    The LDAP server configuration created by the
    <a href="#sec:ldap-server">sec:ldap-server</a> function.  
    </apidoc:param>
    <apidoc:param name="saml-server" type="(sec:saml-server)?">
    The SAML server configuration created by the
    <a href="#sec:saml-server">sec:saml-server</a> function.  
    </apidoc:param>
    <apidoc:param name="client-certificate-authorities" type="xs:unsignedLong*">
    One or more client certificate authority ids.
    </apidoc:param>
    <apidoc:param name="require-client-certificate" type="xs:boolean">
    Whether a client certificate is required.  Set to <code>true</code> to require a client certificate,
    or <code>false</code> to not require a client certificate.  This parameter cannot be null or empty.
    </apidoc:param>

  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: execute this against the security database :)
  xquery version "1.0-ml"; 
 
  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  let $ldap-config := sec:ldap-server(
        "ldap://dc1.mltest1.local:389", 
        "CN=Users,DC=MLTEST1,DC=LOCAL", 
        "sAMAccountName",
        "cn=User1,cn=Users,dc=MLTEST1,dc=local",
	    "password1",
	    "simple")
 
  return sec:create-external-security(
        "ldapconfig", 
        "config for ldap", 
        "ldap", 
        300,
        "ldap",
        $ldap-config,
        (), (), 
        true())

     (: Creates an external authorization configuration object, named "ldapconfig," 
        that uses the 'simple' bind method for an LDAP server. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: execute this against the security database :)
  xquery version "1.0-ml"; 
 
  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  let $saml-config := sec:saml-server("http://id.example.com/example",
           (),(),
           <sec:http-options xmlns="xdmp:http">
             <authentication method="digest">
                <username>admin</username>
                <password>admin</password>
             </authentication>
           </sec:http-options>)
 
  return sec:create-external-security(
        "samlconfig", 
        "config for saml", 
        "ldap", 
        300,
        "saml",
        (), $saml-config, 
        (), true())
 

     (: Creates an external authorization configuration object, named "samlconfig," 
        for a SAML server. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-external-security" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function deletes the named external authentication configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of the external authentication configuration object to be removed.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: execute this against the security database :)
  xquery version "1.0-ml"; 
 
  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
  sec:remove-external-security("ldapconfig")

  (: Removes the external authorization configuration object, named "ldapconfig". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-name" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the name of the external authorization configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Existing name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="new-external-security-name" type="xs:string">
    New name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-name("ldapconfig", "newconfig")

(: Changes the name of the external authorization configuration object
   from "ldapconfig" to "newconfig". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-description" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the description for the named external authorization configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="description" type="xs:string">
    New description for the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-description("ldapconfig", "New Description")

(: Sets the description of the external authorization configuration object,
   named "ldapconfig", to "New Description". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-authentication" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the authentication protocol for the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="authentication" type="xs:string">
    The authentication protocol. This can be either <code>ldap</code> or <code>kerberos</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-authentication("ldapconfig", "kerberos")

(: Sets the authentication protocol in the external authorization configuration object,
   named "ldapconfig", to "kerberos". :)
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="external-security-set-cache-timeout" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the login cache timeout for the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="cache-timeout" type="xs:unsignedInt">
    The login cache timeout, in seconds.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-cache-timeout("ldapconfig", 600)

(: Sets the login cache timeout in the external authorization configuration object,
   named "ldapconfig", to 600 seconds (10 minutes). :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-authorization" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the authentication scheme for the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="authorization" type="xs:string">
    The authorization scheme.  Set to <code>ldap</code> for external authorization using an LDAP
    server, or <code>internal</code> to authorize using MarkLogic Server.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-authorization("ldapconfig", "none")

(: Sets the authorization in the external authorization configuration object,
   named "ldapconfig", to "none" (authorize using MarkLogic Server). :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

 

<apidoc:function name="external-security-set-ldap-server-uri" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the LDAP server uri for the named external authorization 
  configuration object. This setting is required if protocol or authorization is 
    <code>ldap</code>. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="ldap-server-uri" type="xs:string">
    The LDAP server uri.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-ldap-server-uri("ldapconfig", "ldap://newserver:389")

(: Sets the LDAP server URI in the external authorization configuration object,
   named "ldapconfig", to "ldap://newserver:389". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-ldap-base" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the LDAP base for user lookup for the named external authorization 
  configuration object. This setting is required if protocol or authorization is 
    <code>ldap</code>. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="ldap-base" type="xs:string">
    The LDAP base.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-ldap-base("ldapconfig", "CN=Users,DC=FOOBAR,DC=LOCAL")

(: Sets the LDAP base in the external authorization configuration object,
   named "ldapconfig", to "CN=Users,DC=FOOBAR,DC=LOCAL". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-ldap-attribute" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the LDAP attribute for user lookup for the named external authorization 
  configuration object. This setting is required if protocol or authorization is 
    <code>ldap</code>. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="ldap-attribute" type="xs:string">
    The LDAP attribute for user lookup.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-ldap-attribute("ldapconfig", "NewAccountName")

(: Sets the LDAP attribute in the external authorization configuration object,
   named "ldapconfig", to "NewAccountName". :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-ldap-default-user" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the default user name for the named external authorization 
  configuration object.  This parameter is required if the protocol is 
    <code>kerberos</code> and authorization is <code>ldap</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="ldap-default-user" type="xs:string">
    The name of the default user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-ldap-default-user("ldapconfig", "ldapuser1")
 
(: Sets the LDAP default user in the external authorization configuration object,
   named "ldapconfig", to "ldapuser1". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="external-security-set-ldap-password" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the default user password for the named external authorization 
  configuration object.  This parameter is required if the protocol is 
    <code>kerberos</code> and authorization is <code>ldap</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="ldap-password" type="xs:string">
    The default user password.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-ldap-password("ldapconfig", "secretword")

(: Sets the password for the LDAP default user in the external authorization 
   configuration object, named "ldapconfig", to "secretword". :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="external-security-get-description" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the description set in the named external authorization 
  configuration object.  You must have the 
  <code>xdmp/privileges/external-security-get-description</code> privilege
  to execute this function.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-description("ldapconfig")

(: Returns the description set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-authentication" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the authentication protocol set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-authentication("ldapconfig")

(: Returns the authentication protocol set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-cache-timeout" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the login cache timeout (in seconds) set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-cache-timeout("ldapconfig")

(: Returns the login cache timeout set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-authorization" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the authorization scheme set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-authorization("ldapconfig")

(: Returns the authorization scheme set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-server-uri" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the LDAP server uri set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-ldap-server-uri("ldapconfig")

(: Returns the LDAP server uri set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-base" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the LDAP base for user lookup set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-ldap-base("ldapconfig")

(: Returns the LDAP base set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-attribute" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the LDAP attribute for user lookup set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-ldap-attribute("ldapconfig")

(: Returns the LDAP attribute set in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-default-user" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the default LDAP user name set in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-ldap-default-user("ldapconfig")

(: Returns the default LDAP user name set in the external authorization configuration 
   object, named "ldapconfig". :) 
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-clear-cache" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function clears the login cache in the named external authorization 
  configuration object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-clear-cache("ldapconfig")

(: Clears the login cache in the external authorization configuration 
   object, named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="credentials-get-aws" type="security" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns the Amazon Web Services access key, secret key, and session token (if one exists) used 
  to access the Amazon Simple Storage Service.
  </apidoc:summary>
  <apidoc:params>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/credentials-get-aws</code><br />
  </apidoc:privilege>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
    <apidoc:example> <pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
     "/MarkLogic/security.xqy";

sec:credentials-get-aws()
(: Returns the access-key and secret-key as two strings. :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="amps-change-modules-database" lib="sec" 
  category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function changes all amps that refer to one
  modules database to refer to a different database.  This is useful when using
  database replication for disaster recovery and a replica security database is
  being promoted to master during a disaster scenario.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="old-db" type="xs:unsignedLong">
    The ID of the old modules database.
    </apidoc:param>
    <apidoc:param name="new-db" type="xs:unsignedLong">
    The ID of the new modules database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:usage>WARNING: because this function changes the modules 
  database IDs for all the amps stored in the security database, the 
  amps will no longer work with the old modules database.
  If this is being done for the purpose of disaster recovery with   
  a replica modules database, the change will need to be reversed when the 
  original data center reclaims the role as master.
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml"; 
 
(: run this against the new security database :) 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:amps-change-modules-database(
   xdmp:database("Security"),       
   xdmp:database("Security-replica"))       
(: changes the database ID for all of the amps in the system to make the 
   amps function correctly in a disaster recovery scenario.  :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="user-get-external-names" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the external LDAP group names assigned to the named user.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="user-name" type="xs:string">The name of the user.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:user-get-external-names("user1")

(: Returns the external names for the user "user1". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-ldap-bind-method" lib="sec" category="Security-sec" 
	bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the bind method on the named external security object.
  <p>
   For more information on the external security bind method, 
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2335317'>Creating an External Authentication Configuration Object</a> in the <em>Security Guide</em>.
  </p>	 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    Name of the external authorization configuration object.
    </apidoc:param>
    <apidoc:param name="ldap-bind-method" type="xs:string">
    Bind method.  Either <code>MD5</code> or <code>simple</code>.
    When using LDAP with <code>simple</code> bind, the password is not encrypted,
    so it is recommended that you use secure ldaps (LDAP with SSL).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-ldap-bind-method("ldapconfig", "simple")

(: Sets the LDAP bind method to "simple" on the external security object,
   named "ldapconfig". :) 
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-bind-method" lib="sec" 
category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the bind method set on the named external security object.
  <p>
   For more information on the external security bind method, 
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2335317'>Creating an External Authentication Configuration Object</a> in the <em>Security Guide</em>.
  </p>	 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     Name of the external authorization configuration object.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-ldap-bind-method("ldapconfig")

(: Returns the LDAP bind method set on the external security object,
   named "ldapconfig". :) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<!-- Element Level Security -->
<apidoc:function name="protected-paths-collection" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function returns the collection of protected paths.</apidoc:summary>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/protected-paths-collection</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:protected-paths-collection()
=>
http://marklogic.com/xdmp/protected-paths 	  
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="protected-path-doc-collections" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules" hidden="true">
  <apidoc:summary>This function returns the names of documents in the protected 
  path collection. </apidoc:summary>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/protected-path-doc-collections</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy"; 
 
sec:protected-path-doc-collections()
=>
http://marklogic.com/xdmp/security
http://marklogic.com/xdmp/protected-paths

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="protect-path" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function protects the path specified, restricting 
  the ability to view content based on the user's permissions. The function
  returns the unique ID of the protected path. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The name of the path to be 
	protected.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The 
	namespace(s) for the path to be protected.</apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)+">The permissions 
	assigned to the protected path.</apidoc:param>
    <apidoc:param name="path-set" type="xs:string?">The path set 
	assigned to the protected path.</apidoc:param>
  </apidoc:params>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
	  <p>If the protected path has a path set, it can only have read permissions.</p>
          <p>Compartmented-roles in protected paths from the same set should belong to the same compartment.</p>
  </apidoc:usage>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/protect-path</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:protect-path("/root/bar[@baz=1]", (), (xdmp:permission("els-role-2", "read")))  ,
sec:protect-path("test", (), (xdmp:permission("els-role-2", "read")), "set1"),
sec:protect-path("/root/reg[fn:matches(@expr, 'is')]", (), (xdmp:permission("els-role-2", "read")))
    ]]></pre>
  </apidoc:example>
  <apidoc:example>
  <pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:protect-path("/root/ml:bar[@baz=1]", (sec:security-path-namespace("ml", "marklogic.com")),
  (xdmp:permission("els-role-2", "read")))

(: adds a protected path for the element in the ml namespace :)
   ]]></pre>
   </apidoc:example>
</apidoc:function>

<apidoc:function name="unprotect-path" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function removes protection from the specified protected path, 
    without removing the path itself from the Security database. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The name of the path.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The 
	namespace(s) for the path.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/unprotect-path</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:unprotect-path("/root/bar[@baz=1]", ()),
sec:unprotect-path("test", ()),
sec:unprotect-path("/root/reg[fn:matches(@expr, 'is')]", ())
    ]]></pre>
  </apidoc:example>
  <apidoc:example>
  <pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:unprotect-path("/root/bar[@baz=1]", (sec:security-path-namespace("ml", "marklogic.com")))

(: removes the protected path for the element in the ml namespace :)
   ]]></pre>
   </apidoc:example>
</apidoc:function>

<apidoc:function name="protected-path-doc-permissions" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements that all newly created protected-path 
  documents receive.
  </apidoc:summary>
  <apidoc:return>element(sec:permission)*</apidoc:return>
  <apidoc:usage>
    <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:protected-path-doc-permissions()
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="remove-path" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function removes protection from the specified protected path 
     and removes the path from the Security database. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The name of the path to remove.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The 
	namespace(s) for the path to be removed.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/remove-path</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:remove-path("/root/bar[@baz=1]", ()),
sec:remove-path("test", ()),
sec:remove-path("/root/reg[fn:matches(@expr, 'is')]", ())
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="path-set-permissions" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function sets the permissions for a protected path.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The protected path.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The namespace(s) for the path.</apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)+">The permissions 
	to be set.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
	  <p>If the protected path has a path set, it can only have read permissions.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/path-set-permissions</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml";  
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:path-set-permissions("/root/bar[@baz=1]", (
<sec:path-namespace>
<sec:prefix>ml</sec:prefix>
<sec:namespace-uri>marklogic.com</sec:namespace-uri>
</sec:path-namespace>),
(xdmp:permission("els-role-1", "read"), xdmp:permission("els-role-1", "update"))
)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="path-add-permissions" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function adds permissions for a protected path.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The protected path.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The namespace(s)
	for the path.</apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)+">The permissions to add.
	</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
	  <p>If the protected path has a path set, it can only have read permissions.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/path-add-permissions</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml";  
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:path-add-permissions("/a[b=1]/c", (<sec:path-namespace>
<sec:prefix>ml</sec:prefix>
<sec:namespace-uri>marklogic.com</sec:namespace-uri>
</sec:path-namespace>),  
(xdmp:permission("els-user-1", "update"), (), xdmp:permission ("els-user-1", "update")))
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="path-remove-permissions" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function removes permissions for a protected path.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The protected path.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The namespace(s)
	for the path.</apidoc:param>
    <apidoc:param name="permissions" type="element(sec:permission)+">The permissions to 
	remove.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/path-remove-permissions</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml";  
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:path-remove-permissions("/a[b=1]/c", (
<sec:path-namespace><sec:prefix>ml</sec:prefix>
<sec:namespace-uri>marklogic.com</sec:namespace-uri></sec:path-namespace>),  
(xdmp:permission("dls-user", "read"), (), xdmp:permission("dls-user", "update")))
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="path-get-permissions" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function gets a list of permissions for the path named. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="path" type="xs:string">The protected path.</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(sec:path-namespace)*">The namespace(s)
	for the path.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)*</apidoc:return>
   <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/path-get-permissions</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:path-get-permissions("/root/reg[fn:matches(@expr, 'is')]", (
<sec:path-namespace>
<sec:prefix>ml</sec:prefix>
<sec:namespace-uri>marklogic.com</sec:namespace-uri>
</sec:path-namespace>)  
)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="query-roleset-to-string" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules"
				 xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>
    This function....
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="roleset" type="element(sec:query-roleset)">
      Parameter description...
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the Security database :)

xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="query-rolesets-to-string" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules"
				 xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>
    This function....
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="rolesets" type="element(sec:query-rolesets)">
     Parameter description...
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the Security database :)

xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="query-rolesets-collection" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function returns the collection of query rolesets.</apidoc:summary>
  <apidoc:return>xs:string</apidoc:return>
   <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/query-roleset-collection</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";  
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
sec:query-rolesets-collection()
=>
http://marklogic.com/xdmp/query-rolesets 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="query-rolesets-doc-collections" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:return>xs:string*</apidoc:return>
   <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: execute this against the Security database :)
xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="query-rolesets-doc-permissions" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
  Returns a sequence of permission elements that all newly created query-rolesets
  documents receive.
  </apidoc:summary>
  <apidoc:return>element(sec:permission)*</apidoc:return>
  <apidoc:usage>
    <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

(: execute this against the security database :)
xquery version "1.0-ml";
import module namespace sec="http://marklogic.com/xdmp/security" at 
    "/MarkLogic/security.xqy";
  
sec:query-rolesets-doc-permissions()
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="security-path-namespace" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function creates a protected namespace. The result can 
  be passed into other functions as part of the permissions parameter. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="prefix" type="xs:string">Prefix for the namespace to be
	protected.</apidoc:param>
    <apidoc:param name="namespace-uri" type="xs:string">The URI for the namespace.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:path-namespace)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
let $prefix := "ml",
$namespace-uri := "marklogic.com"
return
sec:security-path-namespace($prefix, $namespace-uri)

=>
<path-namespace xmlns="http://marklogic.com/xdmp/security">
<prefix>ml</prefix>
<namespace-uri>marklogic.com</namespace-uri>
</path-namespace>
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="query-roleset" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function creates a query roleset that can be passed into 
  a function used to add or remove rolesets. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="role-names" type="xs:string+">Names of the roles to be 
	included in the roleset.</apidoc:param>
  </apidoc:params>
   <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:return>element(sec:query-roleset)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:query-roleset("els-role-2")
=>
<query-roleset xmlns="http://marklogic.com/xdmp/security">
  <role-id>12006351629398052509
  </role-id>
</query-roleset>
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="query-rolesets" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>
    This is a helper function to return a query-rolesets element from a list of query-roleset elements.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="rolesets" type="element(sec:query-roleset)+">a list of query-roleset elements</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:query-rolesets)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the Security database :)
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:query-rolesets((sec:query-roleset("els-role-1"),sec:query-roleset(("els-role-2","els-role-3"))))
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="add-query-rolesets" lib="sec" 
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function adds query rolesets to the Security database. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="qrss" type="element(sec:query-rolesets)*"> 
	Query rolesets to be added</apidoc:param>
  </apidoc:params>
   <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/add-query-rolesets</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
let $roleset := sec:query-rolesets(sec:query-roleset("els-role-2"))
return
sec:add-query-rolesets($roleset)
=>
11752102537381923938

]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
(: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
	  
let $roleset1 := sec:query-roleset("els-role-1")
let $roleset2 := sec:query-roleset("els-role-2")
return
sec:add-query-rolesets(sec:query-rolesets($roleset1,$roleset2))
=>
12187562349380762165
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="remove-query-rolesets" lib="sec"           
                 category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>This function removes query rolesets from the Security database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="qrss" type="element(sec:query-rolesets)*)"> 
	Query rolesets to be removed.</apidoc:param>
  </apidoc:params>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/remove-query-rolesets</code>
  </apidoc:privilege>
   <apidoc:example><pre xml:space="preserve"><![CDATA[
 (: execute this against the Security database :)
 
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
    at "/MarkLogic/security.xqy";
	
let $roleset := sec:query-rolesets(sec:query-roleset("els-role-2"))
return
sec:remove-query-rolesets($roleset)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<!-- end of Element Level Security -->
<!-- Secure Credentials -->

<apidoc:function name="uri-credential-target" lib="sec" category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function generates a sec:credential-target
		element, for use with <a href="#sec:create-credential">sec:create-credential</a>.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="uri-pattern" type="xs:string">The URI pattern 
		  to match.
	  </apidoc:param>
    <apidoc:param name="authentication" type="xs:string">The authentication 
	    type (for example, "digest").
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:credential-target)</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:uri-credential-target("my-pattern", "digest")      
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="create-credential" lib="sec" category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function creates a new security 
		credential with the specified values.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="name" type="xs:string">A name for this 
		  credential.
	  </apidoc:param>
	  <apidoc:param name="description" type="xs:string">A description
		  for this credential.
	  </apidoc:param>
	  <apidoc:param name="username" type="xs:string?">An optional username
		  for this credential.
	  </apidoc:param>
	  <apidoc:param name="password" type="xs:string?">An optional password 
		  for this credential.
	  </apidoc:param>
	  <apidoc:param name="certificate" type="xs:string?">An optional PEM 
		  encoded certificate for this credential.
	  </apidoc:param>
	  <apidoc:param name="private-key" type="xs:string?">An optional PEM 
		  encoded private key for this credential.
	  </apidoc:param>
	  <apidoc:param name="signing" type="xs:boolean">Whether this 
		  credential may be used for signing certificates.
	  </apidoc:param>
	  <apidoc:param name="targets" 
		  type="element(sec:credential-target)*">Any targets that 
		  this credential may be used to access.
	  </apidoc:param>
	  <apidoc:param name="permissions" 
		  type="element(sec:permission)*">Permissions for who 
		  can access this credential. Read allows viewing of the 
		  credential, including encrypted keys. Execute only allows 
		  use of the credential. Read implies execute.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/create-credential</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:create-credential("my-secure-credential", "a secure credential", 
   "secure-user", "secure-password", (), (), fn:false(), (), 
   xdmp:permission("secure-role", "execute"))
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="get-credential" lib="sec" category="Security-sec"
       	bucket="XQuery Library Modules">
  <apidoc:summary>Gets a credential.</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential to get.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:credential)</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/get-credential</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:get-credential("my-secure-credential")

]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="remove-credential" lib="sec" category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function removes the specified 
	       credential.	
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name 
		  of the credential to remove.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
	  <code>http://marklogic.com/xdmp/privileges/remove-credential</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:remove-credential("my-secure-credential")

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="remove-credential-by-id" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
  <apidoc:summary>This function removes the specified 
	       credential.</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-id" type="xs:unsignedLong">The 
		  ID of the credential to be removed.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
     <code>http://marklogic.com/xdmp/privileges/remove-credential-by-id</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:remove-credential-by-id(4358548373487543876)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="get-credential-ids" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns a list of all of the 
		credential IDs in the security database.
	</apidoc:summary>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
     <code>http://marklogic.com/xdmp/privileges/get-credential-ids</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:get-credential-ids()

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="get-credential-names" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
  <apidoc:summary>This function returns a list of all of the 
	  credential names in the security database.
  </apidoc:summary>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
     <code>http://marklogic.com/xdmp/privileges/get-credential-names</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:get-credential-names()
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-id" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the ID of the 
		specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
     <code>http://marklogic.com/xdmp/privileges/credential-get-id</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-id("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-description" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the description of the 
		specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/credential-get-description</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-description("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-username" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the username for a 
		credential, if it exists.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/credential-get-username</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-username("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-password" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the password for a 
		credential, if it exists.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/credential-get-password</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-password("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-certificate" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the certificate for a 
		credential, if it exists.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
    <code>http://marklogic.com/xdmp/privileges/credential-get-certificate</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-certificate("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-private-key" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the private key for a 
		credential, if it exists.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-get-private-key</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-private-key("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-targets" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the targets for a credential, 
		if they exist.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:credential-target)*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-get-targets</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-targets("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-signing" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the signing flag for a 
		credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-get-signing</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-signing("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-get-permissions" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function returns the permissions for a 
		credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)*</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-get-permissions</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-get-permissions("my-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-name" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the name of a credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential to update.
	  </apidoc:param>
	  <apidoc:param name="new-name" type="xs:string">The new name with 
		  which to update the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-name</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-name("my-secure-credential", "my-new-secure-credential")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-description" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the description for the 
		specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="description" type="xs:string">The new 
		  description.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-description</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-description("my-secure-credential", "new description")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-username" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the username for the 
		specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="username" type="xs:string?">The new 
		  username.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-username</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-username("my-secure-credential", "newuser")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-password" lib="sec"  
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the password for the 
	     specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="password" type="xs:string?">The new 
		  password.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-password</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-password("my-secure-credential", "newpassword")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-certificate" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the certificate for the 
		credential. The private key is set at the same time because 
		the two must be matched and cannot independently 
		change.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="certificate" type="xs:string?">The new 
		  certificate, if any.
	  </apidoc:param>
	  <apidoc:param name="private-key" type="xs:string?">The private key 
		  for $certificate.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-certificate</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-certificate("my-secure-credential", "newcert", "newkey")
(: needs real cert and key :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-targets" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the targets for the 
		specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="targets" 
		  type="element(sec:credential-target)*">The new set of 
		  targets, if any.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-targets</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-targets("my-secure-credential", 
      sec:uri-credential-target("my-pattern", "digest"))
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-signing" lib="sec"  
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the signing flag for the 
		specified credential.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="signing" type="xs:boolean">The new boolean 
		  value for the signing flag.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-signing</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-signing("my-secure-credential", fn:false()) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="credential-set-permissions" lib="sec" 
	category="Security-sec"
       	bucket="XQuery Library Modules">
	<apidoc:summary>This function updates the permission for the 
	       specified credential.</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="credential-name" type="xs:string">The name of 
		  the credential.
	  </apidoc:param>
	  <apidoc:param name="permissions" 
		  type="element(sec:permission)*">The set of permissions to 
		  assign to the credential.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
   <code>http://marklogic.com/xdmp/privileges/credential-set-permissions</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:credential-set-permissions("my-secure-credential", 
      (xdmp:permission("development", "read"),
       xdmp:permission("administrators", "update"))) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<!-- end Secure Credentials -->
<apidoc:function name="external-security-set-ssl-client-certificate-authorities" 
                 lib="sec" category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>Sets the SSL client certificate authorities for the external 
  security identified by <code>$external-security-name</code> to <code>$authorities</code>.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">The name of the 
	external security.</apidoc:param>
    <apidoc:param name="authorities" type="xs:unsignedLong*">The new SSL client 
	certificate authorities.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/external-security-set-ssl-client-certificate-authorities</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml"; 

import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";
import module namespace pki = "http://marklogic.com/xdmp/pki" 
      at "/MarkLogic/pki.xqy";
 
let $cert-id :=
    for $cert in pki:get-certificates(pki:get-trusted-certificate-ids())
      where $cert/commonName eq "Acme Certificate Authority" and
            $cert/organizationName eq "Acme Corporation"
    return
      fn:data($cert/pki:certificate-id)

return sec:external-security-set-ssl-client-certificate-authorities("My-External-Security", $cert-id)
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-set-ssl-require-client-certificate" 
                 lib="sec" category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>Sets the SSL require client certificate flag for the external 
  security identified by <code>$external-security-name</code> to <code>$required</code>.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">The name of the external security.</apidoc:param>
    <apidoc:param name="required" type="xs:boolean">The new SSL require client certificate flag.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/external-security-set-ssl-require-client-certificate</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  
xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";
 
sec:external-security-set-ssl-require-client-certificate(
        "My-External-Security", fn:false())

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-get-ssl-client-certificate-authorities" 
                 lib="sec" category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>Returns the external security's SSL client certificate authorities. 
  If an external security with name equal to <code>$external-security-name</code> 
  is not found, an error is returned.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">The name of an 
	external-security.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
   <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/external-security-get-ssl-client-certificate-authorities</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";

sec:external-security-get-ssl-client-certificate-authorities("My-External-Security")
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-get-ssl-require-client-certificate" 
                 lib="sec" category="Security-sec" bucket="XQuery Library Modules">
  <apidoc:summary>Returns the external security's SSL require client certificate 
  flag. If an external security with name equal to <code>$external-security-name</code> 
  is not found, an error is returned.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">The name of an external-security.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:usage>
	  <p>This function must be executed against the Security database.</p>
  </apidoc:usage>
  <apidoc:privilege>
  <code>http://marklogic.com/xdmp/privileges/external-security-get-ssl-require-client-certificate</code>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
import module namespace sec = "http://marklogic.com/xdmp/security" 
  at "/MarkLogic/security.xqy";

sec:external-security-get-ssl-require-client-certificate("My-External-Security")
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="ldap-server" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function configures an LDAP server for use by the
  <a href="#sec:create-external-security">sec:create-external-security</a> function.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="ldap-server-uri" type="xs:string">
    The URI of the LDAP server.
    </apidoc:param>
    <apidoc:param name="ldap-base" type="xs:string">
    The LDAP base for user lookup. 
    </apidoc:param>
    <apidoc:param name="ldap-attribute" type="xs:string">Parameter description...
    The LDAP attribute for user lookup.  
    </apidoc:param>
    <apidoc:param name="ldap-default-user" type="xs:string">
    The default user.  If you specify an <code>ldap-bind-method</code> of <code>simple</code>,
    this must be a Distinguished Name (DN).  If you specify an <code>ldap-bind-method</code> of 
    <code>MD5</code>, this must be the name of a user registered with the LDAP server.
    </apidoc:param>
    <apidoc:param name="ldap-password" type="xs:string">
    The default user password. 
    </apidoc:param>
    <apidoc:param name="ldap-bind-method" type="xs:string">
    The LDAP bind method to use.  This can be either
    <code>MD5</code>, <code>simple</code>, or <code>external</code>.  
    When <code>simple</code> is specified
    the server will use the LDAP default user to bind to the LDAP server and lookup 
    the DN of the user. Then the server uses the user DN to connect to the LDAP server. 
    If it is successful, the user is authenticated. 
    <p>
    When using LDAP with <code>simple</code> bind, the password is not encrypted,
    so it is recommended that you use secure ldaps (LDAP with SSL).
    </p><p>
    A bind method of <code>external</code> makes use of a certificate to authenticate 
    with the LDAP server. If the bind method is <code>external</code>,
    <code>ldap-start-tls</code> should be set to <code>true</code>.
    </p>
    </apidoc:param>
    <apidoc:param name="ldap-memberof-attribute" type="xs:string" optional="true">
    The memberof LDAP attribute for group lookup.
    </apidoc:param>
    <apidoc:param name="ldap-member-attribute" type="xs:string" optional="true">
    The member LDAP attribute for group lookup.
    </apidoc:param>
    <apidoc:param name="ldap-start-tls" type="xs:boolean?" optional="true">
    When the <code>ldap-bind-method</code> is set to <code>external</code>, this
    parameter specifies whether to start TLS when connecting to an LDAP server. If set to true,
    the LDAP server URI should start with <code>ldap:/</code> instead of <code>ldaps://</code>.
    </apidoc:param>
    <apidoc:param name="ldap-certificate" type="xs:string?" optional="true">
    The MarkLogic client certificate.
    </apidoc:param>
    <apidoc:param name="ldap-private-key" type="xs:string?" optional="true">
    The MarkLogic private key.  
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:ldap-server)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:ldap-server(
        "ldap://dc1.mltest1.local:389", 
        "CN=Users,DC=MLTEST1,DC=LOCAL", 
        "sAMAccountName",
        "cn=User1,cn=Users,dc=MLTEST1,dc=local",
	    "password1",
	    "simple") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-ldap-start-tls" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function updates the <code>ldap-start-tls</code> 
  setting in the external security configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of an external-security configuration.
    </apidoc:param>
    <apidoc:param name="ldap-start-tls" type="xs:boolean?" optional="true">
    When the <code>ldap-bind-method</code> is set to <code>external</code>, this
    parameter specifies whether to start TLS when connecting to an LDAP server. If set to true,
    the LDAP server URI should start with <code>ldap:/</code> instead of <code>ldaps://</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-ldap-start-tls("My-External-Security", fn:true())
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-start-tls" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the <code>ldap-start-tls</code> 
  setting for the named external security configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of an external-security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-ldap-start-tls("My-External-Security") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="external-security-set-ldap-certificate" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the LDAP certificate and private key for the
   named external security configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of an external-security configuration.
    </apidoc:param>
    <apidoc:param name="ldap-certificate" type="xs:string">
     The PEM encoded X509 client certificate for MarkLogic server to connect the 
     LDAP server. It can be used for mutual authentication if bind method 
     is MD5 or simple. Or it can be used for external binding.
    </apidoc:param>
    <apidoc:param name="ldap-private-key" type="xs:string">
     The PEM encoded private key corresponding to the certificate. 
  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-ldap-certificate(
       "My-External-Security", 
       sec:external-security-get-ldap-certificate("My-External-Security")
       sec:external-security-get-ldap-private-key("My-External-Security") 
)
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="get-credential-by-id" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the specified PEM encoded X509 certificate.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="credential-id" type="xs:unsignedLong">
    Credential id.
  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:credential)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:get-credential-by-id(3417729992254373588)
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-ldap-certificate" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the LDAP client certificate set for the name external security
   configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of an external-security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-ldap-certificate("My-External-Security")  
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="external-security-get-ldap-private-key" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the private key set for the name external security
   configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
    The name of an external-security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-ldap-private-key("My-External-Security") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="query-rolesets-id" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function returns the ID of a query-rolesets.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="rolesets" type="element(sec:query-rolesets)">
      the query-rolesets 
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:query-rolesets-id(sec:query-rolesets(sec:query-roleset("els-role-1")))
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="saml-server" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function configures an SAML server for use by the
  <a href="#sec:create-external-security">sec:create-external-security</a> function.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="saml-entity-id" type="xs:string">The SAML entity id.</apidoc:param>
    <apidoc:param name="saml-attribute-names" type="xs:string*">
    The SAML attribute names used for attribute query.
    </apidoc:param>
    <apidoc:param name="saml-privilege-attribute-name" type="xs:string?">
    The SAML privilege attribute name used for query.
    </apidoc:param>
    <apidoc:param name="http-options" type="element()" optional="true">
    The http options.   
    The default value is (). The options node must be in the
    <code>xdmp:http</code> namespace. This parameter can also include
    certain option elements (for example, <code>repair</code>,
    <code>encoding</code>, <code>default-language</code>) in the
    <code>xdmp:document-load</code> and <a href="#xdmp:document-get">
    <code>xdmp:document-get</code></a> namespaces.
    <p>The http options include:</p>
    <blockquote><dl>
    <dt><p>&lt;headers&gt;</p></dt>
    <dd>A sequence of &lt;name&gt;value&lt;/name&gt; pairs. The
    names can be anything, but many HTTP servers understand HTTP names such as
    <code>content-type</code>. These are turned into name:value HTTP
    headers. An error is raised if the child elements of the
    &lt;headers&gt; option are not of the form
    &lt;name&gt;value&lt;/name&gt;.</dd>
    <dt><p>&lt;credential-id&gt;</p></dt>
    <dd>The credential id to use for authentication. This is 
     the preferred way of providing authentication credentials because they
     are stored securely in the security database. When a credential id is
     specified, the other authentication information fields should be left
     empty and will be ignored. For details on obtaining a credential id,
     see the Usage Notes, below.</dd>
    <dt><p>&lt;authentication&gt;</p></dt>
    <dd>The credentials and the authentication method to use
    for this request. This element can contain the following child elements:
    <ul>
      <li><code>username</code>: The username of the user to be authenticated 
        on the http server</li>
      <li><code>password</code>: The password for <code>username</code>.</li>
    </ul>
    The authentication element can also include an optional 
    <code>method</code> attribute with one of the following values: 
    <code>basic</code>, <code>digest</code>, <code>aws</code>, <code>aws4</code>.
    If the authentication method is specified and the HTTP server requests 
    a different type of authentication, then an error is raised.</dd>
    <dt><p>&lt;timeout&gt;</p></dt>
    <dd>The amount of time, in seconds, to wait until the HTTP connection
    times out. The default value is the <code>http timeout</code> for the
    group.</dd>
    <dt><p>&lt;ciphers&gt;</p></dt>
    <dd>A standard cipher string. For details on legal ciper strings, see
    <a href="http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS</a>.
    </dd>
    <dt><p>&lt;client-cert&gt;</p></dt>
    <dd>A PEM encoded client certificate for identifying the client to
    the remote server.</dd>
    <dt><p>&lt;client-key&gt;</p></dt>
    <dd>The private key that corresponds to
    <code>client-cert</code>.</dd>
    <dt><p>&lt;pass-phrase&gt;</p></dt>
    <dd>A pass phrase, if one is needed to decrypt client-key.</dd>
    <dt><p>&lt;allow-sslv3&gt;</p></dt>
    <dd>A boolean value to specify whether to communicate using the SSL
     v3 protocol.
     The default is <code>true</code>, which indicates communication using the
     SSL v3 protocol.</dd>
    <dt><p>&lt;allow-tls&gt;</p></dt>
    <dd>A boolean value to specify whether to communicate using the TLS
     protocol.
     The default is <code>true</code>, which indicates communication using the
     TLS protocol.</dd>
    <dt><p>&lt;verify-cert&gt;</p></dt>
    <dd>A boolean value to specify whether the server's certificate should be
    verified. The default value is <code>true</code>. A value of
    <code>false</code>
    should only be specfied after careful consideration of the security
    risks since it
    permits communication with servers whose certificates are expired, revoked,
    or signed by unknown or untrusted authorities. A value of <code>false</code>
    also removes protection against a man-in-the-middle attack.</dd>
    <dt><p>&lt;ssl-session-cache&gt;</p></dt>
    <dd>A boolean value to specify whether ssl session should be cached and
    reused. The default value is <code>true</code>. A value of
    <code>false</code>
    should only be specfied if ssl session cache causes problem with
    a url.</dd>
    </dl>
    </blockquote>

    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:saml-server)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

  (: execute this against the security database :)
  xquery version "1.0-ml"; 
 
  import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

  sec:saml-server("http://id.example.com/example",
           (),(),
           <sec:http-options xmlns="xdmp:http">
             <authentication method="digest">
                <username>admin</username>
                <password>admin</password>
             </authentication>
           </sec:http-options>)
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-set-saml-entity-id" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>\
   This function sets the SAML entity ID used by other security objects to identify
   the named SAML configuration.

  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
    <apidoc:param name="saml-entity-id" type="xs:string">
     The saml entity id to be set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-saml-entity-id("samlConfig", "samlId") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-saml-attribute-names" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function sets one or more SAML attribute named
   used by other security objects to identify the named SAML configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
    <apidoc:param name="saml-attribute-names" type="xs:string*">
      One or more SAML attribute names.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-saml-attribute-names("samlConfig",("attr1", "attr2"))
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-saml-privilege-attribute-name" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    This function sets the SAML privilege attribute name in the SAML configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
    <apidoc:param name="saml-privilege-attribute-name" type="xs:string?">
     The name of the SAML privilege attribute.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-saml-privilege-attribute-name(
      "samlConfig","xdmp:compressed-tree-cache-size")

 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-http-options" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function sets the http options for the named SAML server
   configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
    <apidoc:param name="http-options" type="element()">
     The http options to be set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-http-options("samlConfig",
  <sec:http-options xmlns="xdmp:http">
      <authentication method="digest">
         <username>admin</username>
         <password>admin</password>
       </authentication>
  </sec:http-options>) 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-get-saml-entity-id" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function returns the SAML entity id set for the 
   named external security configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-saml-entity-id("samlConfig") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-get-saml-attribute-names" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function returns the SAML attribute names set for the 
   named external security configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-saml-attribute-names("samlConfig") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-get-saml-privilege-attribute-name" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function returns the SAML privilege attribute name set for the 
   named external security configuration.
  </apidoc:summary>
  <apidoc:params>
     <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-get-saml-privilege-attribute-name("samlConfig")
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-get-http-options" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function returns the http options for the named SAML server
   configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string">
     The name of the external security configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element()?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-http-options("samlConfig") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="saml-entity-insert" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    This function inserts a SAML entity into the Security database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="entity" type="element(md:EntityDescriptor)">
      The SAML entity to be inserted.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
      
declare namespace md="urn:oasis:names:tc:SAML:2.0:metadata";
declare namespace ds="http://www.w3.org/2000/09/xmldsig#";
 
sec:saml-entity-insert(
<md:EntityDescriptor entityID="http://id.example.com/example4">
  <md:AttributeAuthorityDescriptor
    protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
    <md:AttributeService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP"
                      Location="gordon-2:8005/AttributeQuery.xqy"/>
  </md:AttributeAuthorityDescriptor>
</md:EntityDescriptor>)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="get-saml-entity-ids" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    This function returns the SAML entity ids stored in the Security database.
  </apidoc:summary>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:get-saml-entity-ids() 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="get-saml-entity" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the named SAML entity.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="saml-entity-id" type="xs:string">
     The id of the SAML entity to be returned.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:saml-entity)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:get-saml-entity("http://id.example.com/example") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="saml-entity-delete" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function deletes the named SAML entity.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="saml-entity-id" type="xs:string">
     The id of the SAML entity to be deleted.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:saml-entity-delete("http://id.example.com/example") 
 
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="external-security-set-ldap-memberof-attribute" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the memberof LDAP attribute for
   group lookup.
  </apidoc:summary>
  <apidoc:params>
  <apidoc:param name="external-security-name" type="xs:string">
    The name of external authentication configuration.
  </apidoc:param>
  <apidoc:param name="ldap-memberof-attribute" type="xs:string">
     LDAP attribute for the groups of a user.
  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-set-ldap-memberof-attribute("ldapConfig", "isMemberOf") 
  
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-set-ldap-member-attribute" lib="sec"  category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the member LDAP attribute for
   group lookup.</apidoc:summary>
  <apidoc:params>
  <apidoc:param name="external-security-name" type="xs:string">
    The name of external authentication configuration.
  </apidoc:param>
  <apidoc:param name="ldap-member-attribute" type="xs:string">
     LDAP attribute for the groups of a user.
  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:external-security-set-ldap-member-attribute("ldapConfig", "memberGroup") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="external-security-get-ldap-memberof-attribute" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the memberof attribute for the specified LDAP server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string"> 
      The name of external authentication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-ldap-memberof-attribute("ldapConfig") 
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="external-security-get-ldap-member-attribute" lib="sec" category="Security-sec" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the member attribute for the specified LDAP server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="external-security-name" type="xs:string"> 
      The name of external authentication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";

sec:external-security-get-ldap-member-attribute("ldapConfig")  
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="resecure-credentials" lib="sec" category="Security-sec" 
bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"> 
  <apidoc:summary>This function re-encrypts credentials, if necessary.</apidoc:summary>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace sec = "http://marklogic.com/xdmp/security" 
      at "/MarkLogic/security.xqy";
 
sec:resecure-credentials()
    ]]></pre>
  </apidoc:example>
</apidoc:function>



</apidoc:module>
