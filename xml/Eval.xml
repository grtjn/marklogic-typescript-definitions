<apidoc:module name="Eval" category="Extension" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:function name="eval" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary class="xquery">
  Returns the result of evaluating a string as an XQuery module.
  To evaluate JavaScript, see 
  <a href="#xdmp:javascript-eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:javascript-eval</a>.
</apidoc:summary>
    <apidoc:summary class="javascript">
  Returns the result of evaluating a string as a Javascript program.
  To evaluate XQuery, see <a href="#xdmp.xqueryEval" xmlns="http://www.w3.org/1999/xhtml">xdmp.xqueryEval</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="xquery" type="xs:string" class="xquery">
    A string containing the XQuery code to be evaluated.  If the 
    string contains double quotes ("), surround the string with single 
    quotes (').
  </apidoc:param>
      <apidoc:param name="javascript" type="xs:string" class="javascript">
    A string containing the Javascript code to be evaluated.
  </apidoc:param>
      <apidoc:param name="vars" type="item()* | map:map" class="xquery" optional="true">
    External variable values to make available to the evaluated code,
    expressed as either a sequence of alternating QName-value pairs, or
    a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code>. If you use a sequence, it must contain 
    alternating variable QNames and values. e.g.  
    <code xmlns="http://www.w3.org/1999/xhtml">(xs:QName("var1"), "val1", xs:Qname("var2"), "val2").</code>
    If you use a map, then each key is a string representing the Clark 
    notation of the variable QName ("{namespaceURI}localname"), and its
    value is the corresponding variable value. You can use
    <a href="#xdmp:key-from-QName" xmlns="http://www.w3.org/1999/xhtml">xdmp:key-from-QName</a>
    to generate the Clark notation to use as a key.
  </apidoc:param>
      <apidoc:param name="vars" type="Object" optional="true" class="javascript">
    External variable value to make available to the evaluated code,
    expressed as a JavaScript object, where each property name is a
    variable name and its value is the corresponding variable value.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">Options with which to customize this operation. 
     You can specify options as either an <code>options</code> XML element
     in the namespace "xdmp:eval", or as a <code>map:map</code>. The
     option names below are XML localnames. When using a map, replace any
     hyphens in an option name with camel casing. For example, "an-option"
     becomes "anOption" when used as a <code>map:map</code> entry key.
     This function supports the following options:
    </span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Options with which to customize this operation.
     Specify your options as a JavaScript object, with the option names as
     the object property names. This function supports the following options:
    </span>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>database</dt>
    <dd>The id of the content database. You can use functions such
      as <code class="xquery">xdmp:database</code>
      <code class="javascript">xdmp.database</code> to get a database ID.
      See the Usage Notes for more details. Use of this option to specify
      a database other than the context database requires additional
      privileges. For details, see Required Privileges, below.</dd>
    <dt>modules</dt>
    <dd>The ID of the modules database to use for resolving module imports.
      If you do not specify a <code>modules</code> option, this operation
      uses the current modules database. Use a value of <code>0</code> to
      specify using the file system to resolve module imports. Use of this
      option to specify a modules database other than the one configured
      for the App Server requires additional privileges. For details, see
      Required Privileges, below.</dd>
    <dt>root</dt>
    <dd>The root path for modules. If you do not explicitly specify a
      <code>root</code> option, the current root is used. Use of this
      option to specify a root path other than the one configured for the
      App Server requires additional privileges. For details, see
      Required Privileges, below.</dd>
    <dt>timestamp</dt>
    <dd>The system timestamp to use for this evaluation. If you omit this
      option, the most recent timestamp is used. You may only specify a
      timestamp for a query statement, not for an update statement. Use a
      value of zero to specify the current system timestamp (the value that
      would be returned by <code class="xquery">xdmp:request-timestamp</code>
	  <code class="javascript">xdmp.requestTimestamp</code>). 
	  For more details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/point_in_time.xml%2347946'>Understanding Point-In-Time Queries</a> in the <em>Application Developer's Guide</em>.
      Use of this option requires additional privileges. For 
      details, see Required Privileges, below.
    </dd>
    <dt class="xquery">ignore-amps</dt>
    <dt class="javascript">ignoreAmps</dt>
    <dd>
     Whether or not to evaluate the code without using any Amps from the caller.
     Allowed values: true, false (default). If this option is set to
     <code>true</code>, the code is evaluated without using Amps from the 
     caller.  For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/execute.xml%2354880'>Temporarily Increasing Privileges with Amps</a> in the <em>Security Guide</em>.
     You cannot use this option with <code>dbg:eval</code>.
    </dd>
    <dt>isolation</dt>
    <dd>Specify the transaction isolation for this operation. Allowed values:
     <code>same-statement</code>, <code>different-transaction</code> (default).
     When set to <code>same-statement</code>, the evaluation occurs in the
     same transaction in which this function is called. When set to
     <code>different-transaction</code>, the evaluation occurs in a separate
     transaction from the one in which this function is called. If you use
     <code>same-statement</code> isolation in a query (read-only) statement
     and the eval'd code attempts an update, MarkLogic throws the exception
     <code>XDMP-UPDATEFUNCTIONFROMQUERY</code>. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2324388'>Isolation Option to xdmp:eval/invoke</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>commit</dt>
    <dd>
     The commit mode for the transaction in which the code is evaluated.
     Allowed values: <code>auto</code> (default), <code>explicit</code>.
     In <code>auto</code> mode, a transaction is committed for every statement.
     In <code>explicit</code> mode, the transaction must be explicitely
     committed or rolled back. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2395728'>Commit Mode</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>update</dt>
    <dd>
     Specify the transaction type in which to evaluate this code, or let
     MarkLogic determine the transaction type. Allowed values:
     <code>true</code>, <code>false</code>, <code>auto</code> (default).
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2373171'>Transaction Type Overview</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt class="xquery">static-check</dt>
    <dt class="javascript">staticCheck</dt>
    <dd>
     Whether or not to only perform a static analysis of the code, without
     executing it. Allowed values: <code>true</code>, <code>false</code>
     (default).
    </dd>
    <dt class="xquery">prevent-deadlocks</dt>
    <dt class="javascript">preventDeadlocks</dt>
    <dd>
     Whether or not to disallow update requests from an update transaction.
     Allowed values: <code>true</code>, <code>false</code> (default). This
     option only has an effect when you set the <code>isolation</code> option 
     to <code>different-transaction</code> since there is no possibility of
     deadlock if the isolation is <code>same-statement</code>. When you set
     this option to <code>true</code> in an update request calling another
     update request, MarkLogic throws the exception
     <code>XDMP-PREVENTDEADLOCKS</code>. Setting this option to 
     <code>true</code> prevents deadlocks from occurring when evaluating
     or invoking an update transaction from another update transaction.
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2385082'>Preventing Deadlocks</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt class="xquery">default-xquery-version</dt>
    <dt class="javascript">defaultXqueryVersion</dt>
    <dd>The default XQuery language version to use for the query, if the query
     does not contain an explicit version declaration.  If this option is not
     provided, then MarkLogic uses the default XQuery version for the 
     App Server that called this function. The version may vary from module
     to module if a query consists of modules written in multiple XQuery
     versions. If may also var from run to run if the App Server default
     changes across runs.
     <p>Allowable values for this option are "0.9-ml", "1.0-ml", "1.0", and
     the special value "app-server". The first three are XQuery language
     versions. The last indicates that the default XQuery language
     version set on this App Server should be used.  This is useful if code
     written in an older XQuery version needs to call this function
     on strings that may have been passed as parameters, but should be
     interpreted in the App Server default language version.  A module
     can discover its own XQuery language version with
     <code class="xquery">xdmp:xquery-version()</code>
     <code class="javascript">xdmp.xqueryVersion()</code>.</p>
    </dd>
    <dt class="xquery">user-id</dt>
    <dt class="javascript">userId</dt>
    <dd>The ID of the user under which this operation should be performed.
     If you do not set this option, the operation is performed as the
     current user. Use of htis option requires additional privileges. For
     details, see Required Privileges, below. NOTE: This is a very 
     privileged operation since it enables a user to evaluate requests as 
     any other user. <span class="xquery">For an example, see the 
     <a href="#eval-ex4">fourth example</a> below.</span></dd>
    <dt class="xquery">default-collation</dt>
    <dt class="javascript">defaultCollation</dt>
    <dd>Specifies the collation to use for this operation if a collation
     is not explicitly specified, such as in the XQuery prolog or in a
     function call that allows you to specify a collation. For more
     details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340505'>Encodings and Collations</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt class="xquery">default-coordinate-system</dt>
    <dt class="javascript">defaultCoordinateSystem</dt>
    <dd>Specifies the geospatial coordinate system to use for this operation, 
     if a collation is not explicitly specified, such as in the XQuery prolog
     or in a function call that allows you to specify a coordinate system.
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em> and 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2398149'>Supported Coordinate Systems</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt class="xquery">transaction-mode</dt>
    <dt class="javascript">transactionMode</dt>
    <dd>[DEPRECATED: Use the <code>update</code> and <code>commit</code>
     options instead.] Explicitly set the transaction mode for this context. 
     Allowed values: <code>auto</code> (default), <code>query</code>, 
     <code>update-auto-commit</code>, <code>update</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>.
     <p>For simple updates to be implicitly committed, specify a transaction 
     mode of <code>update-auto-commit</code>. A transaction mode of
     <code>update</code> creates a new multi-statement update 
     transaction and requires an explicit commit in the code.</p>
     <p>Within a session there can be only one active multi-statement 
     transaction at a time. If a new multi-statement transaction is 
     specified nested inside a multi-statement transaction, MarkLogic throws
     the exception <code>XDMP-NESTEDMULTI</code>. If a new multi-statement 
     transaction is specified after another has been concurrently created 
     in the same session by another request, MarkLogic throws the exception
     <code>XDMP-SESSIONTXN</code> and retries the current request.</p>
     <p class="xquery">An <code>xdmp:transaction-mode</code> XQuery prolog 
     option in the evaluated code overrides any transaction mode specified
     with this option.</p></dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">To get the database ID for options that require one, such as
  the <code>database</code> or <code>modules</code> options, you can use
  functions such as the following. Use the function appropriate to the
  database you want to reference.</p>
  <ul class="xquery" xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp:database">xdmp:database</a></li>
	<li><a href="#xdmp:modules-database">xdmp:modules-database</a></li>
	<li><a href="#xdmp:security-database">xdmp:security-database</a></li>
	<li><a href="#xdmp:schema-database">xdmp:schema-database</a></li>
      </ul>
  <ul class="javascript" xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp.database">xdmp.database</a></li>
	<li><a href="#xdmp.modulesDatabase">xdmp.modulesDatabase</a></li>
	<li><a href="#xdmp.securityDatabase">xdmp.securityDatabase</a></li>
	<li><a href="#xdmp.schemaDatabase">xdmp.schemaDatabase</a></li>
      </ul>
</apidoc:usage>
    <apidoc:privilege>
 To use this function, you must have the following privilege:
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>database</code> option to specify a content database 
  other than the default database for the current App Server, you must 
  have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-in</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify a modules database or root other than that configured for the 
  current App Server, you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-modules-change</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify using the file system as the modules database or root path, you
  you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-modules-change-file</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code class="xquery">user-id</code>
  <code class="javascript">userId</code> option, you must have the
  following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-login</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>timestamp</code> option, you must have the following
  privileges:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-timestamp</code></p>
</apidoc:privilege>
    <apidoc:see-also-list>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of 
    <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">JavaScript</code><code class="javascript" xmlns="http://www.w3.org/1999/xhtml">XQuery</code>
    code, see
    <a class="xquery" href="#xdmp:javascript-eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:javascript-eval</a>
    <a class="javascript" href="#xdmp.xqueryEval" xmlns="http://www.w3.org/1999/xhtml">xdmp.xqueryEval</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous module invocation, see
    <a class="xquery" href="#xdmp:invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke</a>
    <a class="javascript" href="#xdmp.invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp.invoke</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For asynchronous module invocation, see
    <a class="xquery" href="#xdmp:spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp:spawn</a>
    <a class="javascript" href="#xdmp.spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp.spawn</a>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:eval("1+1")
=&gt; 2
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.eval("1+1")
=&gt; 2
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
declare namespace my='http://mycompany.com/test';

let $s :=
      "xquery version '1.0-ml';
       declare namespace my='http://mycompany.com/test';
       declare variable $my:x as xs:string external;
       declare variable $my:y as xs:string external := 'goodbye';
       concat('hello ', $my:x, ' ', $my:y)"
return
    (: evaluate the query string $s using the variables
       supplied as the second parameter to xdmp:eval :)
    xdmp:eval($s, (xs:QName("my:x"), "world"))

=&gt; hello world goodbye
   (the "goodbye" comes from the default value specified for $my:y)
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:eval("doc('/docs/mydoc.xml')",  (),
                  &lt;options xmlns="xdmp:eval"&gt;
		    &lt;database&gt;{xdmp:database("otherdb")}&lt;/database&gt;
		  &lt;/options&gt;)
=&gt; The '/docs/mydoc.xml' document from the
   otherdb database.
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.eval("fn.doc('/docs/mydoc.xml')",  null,
  {
    "database" : xdmp.database("otherdb")
  })
=&gt; The '/docs/mydoc.xml' document from the
   otherdb database.
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><a id="eval-ex4" xmlns="http://www.w3.org/1999/xhtml"></a>
<pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:eval('xdmp:get-current-user()', (),
 &lt;options xmlns="xdmp:eval"&gt;
  &lt;user-id&gt;{xdmp:user("someuser")}&lt;/user-id&gt;
 &lt;/options&gt;)
(:
  returns "someuser", assuming "someuser" exists in the
  security database and the user running the eval request has the
  xdmp:login privilege.
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><a id="eval-ex4" xmlns="http://www.w3.org/1999/xhtml"></a>
<pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.eval('xdmp.getCurrentUser()', null,
  {
    "userId" : xdmp.user("someuser")
  })
=&gt;
  returns "someuser", assuming "someuser" exists in the
  security database and the user running the eval request has the
  xdmp:login privilege.
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//pass external variables into JavaScript eval
var q = '"The value of a is:\\n" + a + "\\n\\nThe value of b is:\\n" + b';
// the key in the below object is the external variable name 
// and the value is that variable's value
var ext = {a:"some text", b:"other stuff"};
xdmp.eval(q, ext);
=&gt;
 return the following string:
The value of a is:
some text

The value of b is:
other stuff 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="xquery-eval" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="javascript">
    <apidoc:summary>
  Returns the result of evaluating a string as an XQuery module. Options are
  as per the XQuery function <a href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:eval</code></a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="xquery" type="xs:string">
    A string containing the XQuery code to be evaluated.  If the 
    string contains double quotes ("), surround the string with single 
    quotes (').
  </apidoc:param>
      <apidoc:param name="vars" type="Object?" optional="true">
    External variable values to make available to the evaluated code,
    expressed as a JavaScript Object. Each property name is a variable
    QName, and its value is the corresponding variable value. Use Clark
    notation to represent QNames with a namespace qualifer. That is, use
    a name of the form ('{namespaceURI}localname'). For example,
    { '{http://my/ns}num': 42 } specifies that the value of the variable 
    named 'num' in the namespace 'http://my/ns' is 42. You can use
    the function <a href="#xdmp.keyFromQName" xmlns="http://www.w3.org/1999/xhtml">xdmp.keyFromQName</a>
    to generate Clark notation for a QName.
  </apidoc:param>
      <apidoc:param name="options" type="Object?" optional="true">
     Options with which to customize this operation.
     Specify your options as a JavaScript object, with the option names as
     the object property names. This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>database</dt>
    <dd>The id of the content database. You can use functions such as
      <code>xdmp.database</code> to get a database ID. See the Usage 
      Notes for more details. Use of this option to specify a database 
      other than the context database requires additional privileges.
      For details, see Required Privileges, below.</dd>
    <dt>modules</dt>
    <dd>The ID of the modules database to use for resolving module imports.
      If you do not specify a <code>modules</code> option, this operation
      uses the current modules database. Use a value of <code>0</code> to
      specify using the file system to resolve module imports. Use of this
      option may require additional privileges. For details, see Required
      Privileges, below.</dd>
    <dt>root</dt>
    <dd>The root path for modules. If you do not explicitly specify a
      <code>root</code> option, the current root is used. Use of this
      option may require additional privileges. For details, see Required
      Privileges, below.
     </dd>
    <dt>timestamp</dt>
    <dd>The system timestamp to use for this evaluation. If you omit this
      option, the most recent timestamp is used. You may only specify a
      timestamp for a query statement, not for an update statement. Use a
      value of zero to specify the current system timestamp (the value that
      would be returned by <code>xdmp.requestTimestamp</code>). 
	  For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/point_in_time.xml%2347946'>Understanding Point-In-Time Queries</a> in the <em>Application Developer's Guide</em>.
	  Use of this option requires additional privileges. For details, see 
      Required Privileges, below.
    </dd>
    <dt>ignoreAmps</dt>
    <dd>
     Whether or not to evaluate the code without using any Amps from the caller.
     Allowed values: true, false (default). If this option is set to
     <code>true</code>, the code is evaluated without using Amps from the 
     caller. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/execute.xml%2354880'>Temporarily Increasing Privileges with Amps</a> in the <em>Security Guide</em>.
    </dd>
    <dt>isolation</dt>
    <dd>Specify the transaction isolation for this operation. Allowed values:
     <code>same-statement</code>, <code>different-transaction</code> (default).
     When set to <code>same-statement</code>, the evaluation occurs in the
     same transaction in which this function is called. When set to
     <code>different-transaction</code>, the evaluation occurs in a separate
     transaction from the one in which this function is called. If you use
     <code>same-statement</code> isolation in a query (read-only) statement
     and the eval'd code attempts an update, MarkLogic throws the exception
     <code>XDMP-UPDATEFUNCTIONFROMQUERY</code>. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2324388'>Isolation Option to xdmp:eval/invoke</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>commit</dt>
    <dd>
     The commit mode for the transaction in which the code is evaluated.
     Allowed values: <code>auto</code> (default), <code>explicit</code>.
     In <code>auto</code> mode, a transaction is committed for every statement.
     In <code>explicit</code> mode, the transaction must be explicitely
     committed or rolled back. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2395728'>Commit Mode</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>update</dt>
    <dd>
     Specify the transaction type in which to evaluate this code, or let
     MarkLogic determine the transaction type. Allowed values:
     <code>true</code>, <code>false</code>, <code>auto</code> (default).
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2373171'>Transaction Type Overview</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>staticCheck</dt>
    <dd>
     Whether or not to only perform a static analysis of the code, without
     executing it. Allowed values: <code>true</code>, <code>false</code>
     (default).
    </dd>
    <dt>preventDeadlocks</dt>
    <dd>
     Whether or not to disallow update requests from an update transaction.
     Allowed values: <code>true</code>, <code>false</code> (default). This
     option only has an effect when you set the <code>isolation</code> option 
     to <code>different-transaction</code> since there is no possibility of
     deadlock if the isolation is <code>same-statement</code>. When you set
     this option to <code>true</code> in an update request calling another
     update request, MarkLogic throws the exception
     <code>XDMP-PREVENTDEADLOCKS</code>. Setting this option to 
     <code>true</code> prevents deadlocks from occurring when evaluating
     or invoking an update transaction from another update transaction.
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2385082'>Preventing Deadlocks</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>defaultXqueryVersion</dt>
    <dd>The default XQuery language version to use for the query, if the query
     does not contain an explicit version declaration.  If this option is not
     provided, then MarkLogic uses the default XQuery version for the 
     App Server that called this function. The version may vary from module
     to module if a query consists of modules written in multiple XQuery
     versions. If may also var from run to run if the App Server default
     changes across runs.
     <p>Allowable values for this option are "0.9-ml", "1.0-ml", "1.0", and
      the special value "app-server". The first three are XQuery language
      versions. The last indicates that the default XQuery language
      version set on this App Server should be used.  This is useful if code
      written in an older XQuery version needs to call this function
      on strings that may have been passed as parameters, but should be
      interpreted in the App Server default language version.  A module
      may discover its own XQuery language version with
      <code>xdmp.xqueryVersion()</code>.</p>
    </dd>
    <dt>userId</dt>
    <dd>The ID of the user under which this operation should be performed.
     If you do not set this option, the operation is performed as the
     current user. Use of this option requires additional privileges. For
     details, see Required Privileges, below. NOTE: This is a very 
     privileged operation since it enables a user to evaluate requests 
     as any other user. </dd>
    <dt>defaultCollation</dt>
    <dd>Specifies the collation to use for this operation if a collation
     is not explicitly specified, such as in the XQuery prolog or in a
     function call that allows you to specify a collation. For more
     details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340505'>Encodings and Collations</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt>defaultCoordinateSystem</dt>
    <dd>Specifies the geospatial coordinate system to use for this operation, 
     if a collation is not explicitly specified, such as in the XQuery prolog
     or in a function call that allows you to specify a coordinate system.
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em> and 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2398149'>Supported Coordinate Systems</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt>transactionMode</dt>
    <dd>[DEPRECATED: Use the <code>update</code> and <code>commit</code>
     options instead.] Explicitly set the transaction mode for this context. 
     Allowed values: <code>auto</code> (default), <code>query</code>, 
     <code>update-auto-commit</code>, <code>update</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>.
     <p>For simple updates to be implicitly committed, specify a transaction 
     mode of <code>update-auto-commit</code>. A transaction mode of
     <code>update</code> creates a new multi-statement update 
     transaction and requires an explicit commit in the code.</p>
     <p>Within a session there can be only one active multi-statement 
     transaction at a time. If a new multi-statement transaction is 
     specified nested inside a multi-statement transaction, MarkLogic throws
     the exception <code>XDMP-NESTEDMULTI</code>. If a new multi-statement 
     transaction is specified after another has been concurrently created 
     in the same session by another request, MarkLogic throws the exception
     <code>XDMP-SESSIONTXN</code> and retries the current request.</p>
     <p>An <code>xdmp:transaction-mode</code> declaration in the prolog of
     the evaluated code overrides any transaction mode specified
     with this option.</p></dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">To get the database ID for options that require one, such as
  the <code>database</code> or <code>modules</code> options, you can use
  functions such as the following. Use the function appropriate to the
  database you want to reference.</p>
  <ul xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp.database">xdmp.database</a></li>
	<li><a href="#xdmp.modulesDatabase">xdmp.modulesDatabase</a></li>
	<li><a href="#xdmp.securityDatabase">xdmp.securityDatabase</a></li>
	<li><a href="#xdmp.schemaDatabase">xdmp.schemaDatabase</a></li>
      </ul>
</apidoc:usage>
    <apidoc:privilege>
 To use this function, you must have the following privilege:
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>database</code> option to specify a content database 
  other than the default database for the current App Server, you must 
  have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-in</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify a modules database or root other than that configured for the 
  current App Server, you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-modules-change</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify using the file system as the modules database or root path, you
  you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-modules-change-file</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code class="xquery">user-id</code>
  <code class="javascript">userId</code> option, you must have the
  following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-login</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>timestamp</code> option, you must have the following
  privileges:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-timestamp</code></p>
</apidoc:privilege>
    <apidoc:see-also-list>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of JavaScript code, see
    <a class="xquery" href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</a>
    <a class="javascript" href="#xdmp.eval" xmlns="http://www.w3.org/1999/xhtml">xdmp.eval</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous module invocation, see
    <a class="xquery" href="#xdmp:invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke</a>
    <a class="javascript" href="#xdmp.invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp.invoke</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For asynchronous module invocation, see
    <a class="xquery" href="#xdmp:spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp:spawn</a>
    <a class="javascript" href="#xdmp.spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp.spawn</a>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.xqueryEval(" 'hello world, today is: ', fn:current-dateTime() ");
=&gt;
hello world, today is: 
2015-01-21T14:24:50.453913-08:00
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="javascript-eval" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Returns the result of evaluating a string as a JavaScript module.
  To evaluate XQuery, see <a href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="javascript" type="xs:string">
    A string containing JavaScript code to be evaluated. 
    The JavaScript string to be evaluated. If the JavaScript string contains
    single quotes ('), surround the string with double quotes (").
  </apidoc:param>
      <apidoc:param name="vars" type="item()* | map:map" optional="true">
    External variable values to make available to the evaluated code,
    expressed as either a sequence of alternating variable name-value pairs, 
    or a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code>. If you use a sequence, it must contain 
    alternating variable names and values. e.g.  
    <code xmlns="http://www.w3.org/1999/xhtml">("var1", "val1", "var2", "val2").</code>
    If you use a map, then each map entry has a key corresponding to the
    variable name and a value corresponding to the variable value.
  </apidoc:param>
      <apidoc:param name="options" type="(node()? | map:map)?" optional="true">
     Options with which to customize this operation. 
     You can specify options as either an <code xmlns="http://www.w3.org/1999/xhtml">options</code> XML element
     in the namespace "xdmp:eval", or as a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code>. The
     option names below are XML localnames. When using a map, replace any
     hyphens in an option name with camel casing. For example, "an-option"
     becomes "anOption" when used as a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code> entry key.
     This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>database</dt>
    <dd>The id of the content database. You can use functions such
      as <code>xdmp:database</code> to get a database ID. Using this option
      may require additional privileges. For details, see Required
      Privileges, below.</dd>
    <dt>modules</dt>
    <dd>The ID of the modules database to use for resolving module imports.
      If you do not specify a <code>modules</code> option, this operation
      uses the current modules database. Use a value of <code>0</code> to
      specify using the file system to resolve module imports. Using this
      option may require additional privileges. For details, see Required
      Privileges, below.</dd>
    <dt>root</dt>
    <dd>The root path for modules. If you do not explicitly specify a
      <code>root</code> option, the current root is used. Use of this
      option may require additional privileges. For details, see 
      Required Privileges, below.
     </dd>
    <dt>timestamp</dt>
    <dd>The system timestamp to use for this evaluation. If you omit this
      option, the most recent timestamp is used. You may only specify a
      timestamp for a query statement, not for an update statement. Use a
      value of zero to specify the current system timestamp (the value that
      would be returned by <code>xdmp:request-timestamp</code>). Use of this
	  option requires the privilege 
	  <code>http://marklogic.com/xdmp/privileges/xdmp-timestamp</code> 
	  For more details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/point_in_time.xml%2347946'>Understanding Point-In-Time Queries</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>ignore-amps</dt>
    <dd>
     Whether or not to evaluate the code without using any Amps from the caller.
     Allowed values: true, false (default). If this option is set to
     <code>true</code>, the code is evaluated without using Amps from the caller.
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/execute.xml%2354880'>Temporarily Increasing Privileges with Amps</a> in the <em>Security Guide</em>.
     This option is not usable with <code>dbg:eval</code>.
    </dd>
    <dt>isolation</dt>
    <dd>Specify the transaction isolation for this operation. Allowed values:
     <code>same-statement</code>, <code>different-transaction</code> (default).
     When set to <code>same-statement</code>, the evaluation occurs in the
     same transaction in which this function is called. When set to
     <code>different-transaction</code>, the evaluation occurs in a separate
     transaction from the one in which this function is called. If you use
     <code>same-statement</code> isolation in a query (read-only) statement
     and the eval'd code attempts an update, MarkLogic throws the exception
     <code>XDMP-UPDATEFUNCTIONFROMQUERY</code>. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2324388'>Isolation Option to xdmp:eval/invoke</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>commit</dt>
    <dd>
     The commit mode for the transaction in which the code is evaluated.
     Allowed values: <code>auto</code> (default), <code>explicit</code>.
     In <code>auto</code> mode, a transaction is committed for every statement.
     In <code>explicit</code> mode, the transaction must be explicitely
     committed or rolled back. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2395728'>Commit Mode</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>update</dt>
    <dd>
     Specify the transaction type in which to evaluate this code, or let
     MarkLogic determine the transaction type. Allowed values:
     <code>true</code>, <code>false</code>, <code>auto</code> (default).
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2373171'>Transaction Type Overview</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>static-check</dt>
    <dd>
     Whether or not to only perform a static analysis of the code, without
     executing it. Allowed values: <code>true</code>, <code>false</code>
     (default).
    </dd>
    <dt>prevent-deadlocks</dt>
    <dd>
     Whether or not to disallow update requests from an update transaction.
     Allowed values: <code>true</code>, <code>false</code> (default). This
     option only has an effect when you set the <code>isolation</code> option 
     to <code>different-transaction</code> since there is no possibility of
     deadlock if the isolation is <code>same-statement</code>. When you set
     this option to <code>true</code> in an update request calling another
     update request, MarkLogic throws the exception
     <code>XDMP-PREVENTDEADLOCKS</code>. Setting this option to 
     <code>true</code> prevents deadlocks from occurring when evaluating
     or invoking an update transaction from another update transaction.
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2385082'>Preventing Deadlocks</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>user-id</dt>
    <dd>The ID of the user under which this operation should be performed.
     If you do not set this option, the operation is performed as the
     current user. Use of this option requires additional privileges. For
     details, see Required Privileges, below. NOTE: This is a very 
     privileged operation since it enables a user to
     to evaluate requests as any other user. </dd>
    <dt>default-collation</dt>
    <dd>Specifies the collation to use for this operation if a collation
     is not explicitly specified, such as in the XQuery prolog or in a
     function call that allows you to specify a collation. For more
     details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340505'>Encodings and Collations</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt>default-coordinate-system</dt>
    <dd>Specifies the geospatial coordinate system to use for this operation, 
     if a collation is not explicitly specified, such as in the XQuery prolog
     or in a function call that allows you to specify a coordinate system.
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em> and 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2398149'>Supported Coordinate Systems</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt>transaction-mode</dt>
    <dd>[DEPRECATED: Use the <code>update</code> and <code>commit</code>
     options instead.] Explicitly set the transaction mode for this context. 
     Allowed values: <code>auto</code> (default), <code>query</code>, 
     <code>update-auto-commit</code>, <code>update</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>.
     <p>For simple updates to be implicitly committed, specify a transaction 
     mode of <code>update-auto-commit</code>. A transaction mode of
     <code>update</code> creates a new multi-statement update 
     transaction and requires an explicit commit in the code.</p>
     <p>Within a session there can be only one active multi-statement 
     transaction at a time. If a new multi-statement transaction is 
     specified nested inside a multi-statement transaction, MarkLogic throws
     the exception <code>XDMP-NESTEDMULTI</code>. If a new multi-statement 
     transaction is specified after another has been concurrently created 
     in the same session by another request, MarkLogic throws the exception
     <code>XDMP-SESSIONTXN</code> and retries the current request.</p>
     <p>An <code>xdmp:transaction-mode</code> XQuery prolog 
     option in the evaluated code overrides any transaction mode specified
     with this option.</p></dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">To get the database ID for options that require one, such as
  the <code>database</code> or <code>modules</code> options, you can use
  functions such as the following. Use the function appropriate to the
  database you want to reference.</p>
  <ul xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp:database">xdmp:database</a></li>
	<li><a href="#xdmp:modules-database">xdmp:modules-database</a></li>
	<li><a href="#xdmp:security-database">xdmp:security-database</a></li>
	<li><a href="#xdmp:schema-database">xdmp:schema-database</a></li>
      </ul>
</apidoc:usage>
    <apidoc:privilege>
 To use this function, you must have the following privilege:
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>database</code> option to specify a content database 
  other than the default database for the current App Server, you must 
  have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-in</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify a modules database or root other than that configured for the 
  current App Server, you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-modules-change</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify using the file system as the modules database or root path, you
  you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-eval-modules-change-file</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code class="xquery">user-id</code>
  <code class="javascript">userId</code> option, you must have the
  following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-login</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>timestamp</code> option, you must have the following
  privileges:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-timestamp</code></p>
</apidoc:privilege>
    <apidoc:see-also-list>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of XQuery code, see
    <a class="xquery" href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</a>
    <a class="javascript" href="#xdmp.eval" xmlns="http://www.w3.org/1999/xhtml">xdmp.eval</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous module invocation, see
    <a class="xquery" href="#xdmp:invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke</a>
    <a class="javascript" href="#xdmp.invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp.invoke</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For asynchronous module invocation, see
    <a class="xquery" href="#xdmp:spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp:spawn</a>
    <a class="javascript" href="#xdmp.spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp.spawn</a>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:javascript-eval("1+1")
  =&gt; 2</pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $foo := 
  'var mycars = xdmp.arrayValues(["Saab","Volvo","BMW","BMW"]); 
   fn.distinctValues(mycars);'
return
xdmp:javascript-eval($foo)
  =&gt; Saab,Volvo,BMW
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:javascript-eval("fn.doc('/docs/mydoc.xml')",  (),
          &lt;options xmlns="xdmp:eval"&gt;
            &lt;database&gt;{xdmp:database("otherdb")}&lt;/database&gt;
          &lt;/options&gt;)
  =&gt; The '/docs/mydoc.xml' document from the
     otherdb database.</pre>
</apidoc:example>
    <apidoc:example><a id="js-eval-ex4" xmlns="http://www.w3.org/1999/xhtml"></a><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:javascript-eval('xdmp.getCurrentUser()',
 &lt;options xmlns="xdmp:eval"&gt;
  &lt;user-id&gt;{xdmp:user("someuser")}&lt;/user-id&gt;
 &lt;/options&gt;)
(:
  returns "someuser", assuming "someuser" exists in the
  security database and the user running the eval request has the
  xdmp:login privilege.
:)
</pre>
</apidoc:example>
    <apidoc:example><a id="js-eval-ex5" xmlns="http://www.w3.org/1999/xhtml"></a><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $s := "var h; var w; xdmp.log(h+' '+w);"
return
   xdmp:javascript-eval($s,("h","hello","w","world"))
(:
  logs "hello world" in ErrorLog.
:)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="eval-in" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  [DEPRECATED: use <a href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:eval</code></a> with the
  database option instead] Returns the result of evaluating a string as
  an XQuery module in a given database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="xquery" type="xs:string">
    The XQuery string to be evaluated.  If the XQuery string contains
    double quotes ("), surround the string with single quotes (').
  </apidoc:param>
      <apidoc:param name="ID" type="xs:unsignedLong*">
    The database ID, from <code xmlns="http://www.w3.org/1999/xhtml">xdmp:database("db_name")</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">xdmp:security-database()</code>,
    or <code xmlns="http://www.w3.org/1999/xhtml">xdmp:schema-database()</code>.
  </apidoc:param>
      <apidoc:param name="vars" type="item()*" optional="true">
    The external variable values for this evaluation.
    This must be a sequence of even length, alternating QNames and items.
    Each QName and item pair specify a variable name and value.
  </apidoc:param>
      <apidoc:param name="modules" type="xs:unsignedLong?" optional="true">
    The modules database for processing module imports.
    The empty sequence specifies the current modules database.
  </apidoc:param>
      <apidoc:param name="root" type="xs:string?" optional="true">
    The root path for modules.  
    The empty sequence specifies the current root.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:eval-in("1+1",2348790529)
  =&gt; 2</pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "0.9-ml"
declare namespace my='http://mycompany.com/test'

let $s :=
      "xquery version '0.9-ml'
       declare namespace my='http://mycompany.com/test'
       define variable $my:x as xs:string external
       concat('hello ', $my:x)"
return
    (: evaluate the query string $s using the variables
       supplied as the second parameter to xdmp:eval :)
    xdmp:eval-in($s,
                 xdmp:database("Documents"),
		 (xs:QName("my:x"),
		 "world"))

=&gt; hello world
  </pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="invoke" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns the result of evaluating an XQuery or Server-Side JavaScript
  module at the given path.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The path of an XQuery or JavaScript module to be executed, as a string.
    The path is resolved against the root of the App Server evaluating the 
    query, the Modules directory, or relative to the calling module. 
    For details on module path resolution, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/import_modules.xml%2368169'>Importing XQuery Modules, XSLT Stylesheets, and Resolving Paths</a> in the <em>Application Developer's Guide</em>.
    <p xmlns="http://www.w3.org/1999/xhtml">The module is considered to be JavaScript if the module path ends with 
    a file extension configured for the MIME type
    <code>application/vnd.marklogic-javascript</code> in MarkLogic's
    Mimetypes configuration. Otherwise, it is assumed to be XQuery.</p>
  </apidoc:param>
      <apidoc:param name="vars" type="item()* | map:map" class="xquery" optional="true">
    External variable values to make available to the evaluated code,
    expressed as either a sequence of alternating QName-value pairs, or
    a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code>. If you use a sequence, it must contain 
    alternating variable QNames and values. e.g.  
    <code xmlns="http://www.w3.org/1999/xhtml">(xs:QName("var1"), "val1", xs:Qname("var2"), "val2").</code>
    If you use a map, then each key is a string representing the Clark 
    notation of the variable QName ("{namespaceURI}localname"), and its
    value is the corresponding variable value. You can use
    <a href="#xdmp:key-from-QName" xmlns="http://www.w3.org/1999/xhtml">xdmp:key-from-QName</a>
    to generate the Clark notation to use as a key.
  </apidoc:param>
      <apidoc:param name="vars" type="Object?" optional="true" class="javascript">
    External variable values to make available to the invoked code,
    expressed as a JavaScript Object. Each property name is a variable
    name, and its value is the corresponding variable value. When invoking
    an XQuery module, use Clark notation to represent QNames with a 
    namespace qualifer. That is, use a name of the form 
    ('{namespaceURI}localname'). For example, { '{http://my/ns}num': 42 } 
    specifies that the value of the variable named 'num' in the namespace
    'http://my/ns' is 42. You can use the function
    <a href="#xdmp.keyFromQName" xmlns="http://www.w3.org/1999/xhtml">xdmp.keyFromQName</a> to generate Clark 
    notation for a QName.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">Options with which to customize this operation. 
     You can specify options as either an <code>options</code> XML element
     in the namespace "xdmp:eval", or as a <code>map:map</code>. The
     option names below are XML localnames. When using a map, replace any
     hyphens in an option name with camel casing. For example, "an-option"
     becomes "anOption" when used as a <code>map:map</code> entry key.
     This function supports the following options:
    </span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Options with which to customize this operation.
     Specify your options as a JavaScript object, with the option names as
     the object property names. This function supports the following options:
    </span>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>database</dt>
    <dd>The id of the content database. You can use functions such
      as <code class="xquery">xdmp:database</code>
      <code class="javascript">xdmp.database</code> to get a database ID.
      See the Usage Notes for more details. Use of this option may require
      additional privileges. For details, see Required Privileges, below.</dd>
    <dt>modules</dt>
    <dd>The ID of the modules database to use for resolving module imports.
      If you do not specify a <code>modules</code> option, this operation
      uses the current modules database. Use a value of <code>0</code> to
      specify using the file system to resolve module imports. Use of this
      option may required additional privileges. For details, see Required
      Privileges, below.</dd>
    <dt>root</dt>
    <dd>The root path for modules. If you do not explicitly specify a
      <code>root</code> option, the current root is used. Use of this
      option may require additional privileges. For details, see Required
      Privileges, below.
     </dd>
    <dt>timestamp</dt>
    <dd>The system timestamp to use for this evaluation. If you omit this
      option, the most recent timestamp is used. You may only specify a
      timestamp for a query statement, not for an update statement. Use a
      value of zero to specify the current system timestamp (the value that
      would be returned by <code class="xquery">xdmp:request-timestamp</code>
	  <code class="javascript">xdmp.requestTimestamp</code>). 
	  For more details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/point_in_time.xml%2347946'>Understanding Point-In-Time Queries</a> in the <em>Application Developer's Guide</em>.
      Use of this option requires an additional privilege. For details, see 
      Required Privileges, below.
    </dd>
    <dt class="xquery">ignore-amps</dt>
    <dt class="javascript">ignoreAmps</dt>
    <dd>
     Whether or not to invoke the module without using any Amps from the caller.
     Allowed values: true, false (default). If this option is set to
     <code>true</code>, the code is evaluated without using Amps from the
     caller. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/execute.xml%2354880'>Temporarily Increasing Privileges with Amps</a> in the <em>Security Guide</em>.
     <span class="xquery">This option is not usable with
     <code>dbg:invoke</code>.</span>
    </dd>
    <dt>isolation</dt>
    <dd>Specify the transaction isolation for this operation. Allowed values:
     <code>same-statement</code>, <code>different-transaction</code> (default).
     When set to <code>same-statement</code>, the evaluation occurs in the
     same transaction in which this function is called. When set to
     <code>different-transaction</code>, the evaluation occurs in a separate
     transaction from the one in which this function is called. If you use
     <code>same-statement</code> isolation in a query (read-only) statement
     and the eval'd code attempts an update, MarkLogic throws the exception
     <code>XDMP-UPDATEFUNCTIONFROMQUERY</code>. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2324388'>Isolation Option to xdmp:eval/invoke</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>commit</dt>
    <dd>
     The commit mode for the transaction in which the code is evaluated.
     Allowed values: <code>auto</code> (default), <code>explicit</code>.
     In <code>auto</code> mode, a transaction is committed for every statement.
     In <code>explicit</code> mode, the transaction must be explicitely
     committed or rolled back. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2395728'>Commit Mode</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>update</dt>
    <dd>
     Specify the transaction type in which to evaluate this code, or let
     MarkLogic determine the transaction type. Allowed values:
     <code>true</code>, <code>false</code>, <code>auto</code> (default).
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2373171'>Transaction Type Overview</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt class="xquery">static-check</dt>
    <dt class="javascript">staticCheck</dt>
    <dd>
     Whether or not to only perform a static analysis of the code, without
     executing it. Allowed values: <code>true</code>, <code>false</code>
     (default).
    </dd>
    <dt class="xquery">prevent-deadlocks</dt>
    <dt class="javascript">preventDeadlocks</dt>
    <dd>
     Whether or not to disallow update requests from an update transaction.
     Allowed values: <code>true</code>, <code>false</code> (default). This
     option only has an effect when you set the <code>isolation</code> option 
     to <code>different-transaction</code> since there is no possibility of
     deadlock if the isolation is <code>same-statement</code>. When you set
     this option to <code>true</code> in an update request calling another
     update request, MarkLogic throws the exception
     <code>XDMP-PREVENTDEADLOCKS</code>. Setting this option to 
     <code>true</code> prevents deadlocks from occurring when evaluating
     or invoking an update transaction from another update transaction.
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2385082'>Preventing Deadlocks</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt class="xquery">default-xquery-version</dt>
    <dt class="javascript">defaultXqueryVersion</dt>
    <dd>The default XQuery language version to use for the query, if the query
     does not contain an explicit version declaration.  If this option is not
     provided, then MarkLogic uses the default XQuery version for the 
     App Server that the invocation occurs on. Note that this may be different 
     than the XQuery version of the module calling <code>invoke</code>.
     <p>Allowable values for this option are "0.9-ml", "1.0-ml", "1.0", and
     the special value "app-server". The first three are XQuery language
     versions. The last indicates that the default XQuery language
     version set on this App Server should be used.  This is useful if code
     written in an older XQuery version needs to call this function
     on strings that may have been passed as parameters, but should be
     interpreted in the App Server default language version.  A module
     can discover its own XQuery language version with
     <code class="xquery">xdmp:xquery-version()</code>
     <code class="javascript">xdmp.xqueryVersion()</code>.</p>
    </dd>
    <dt class="xquery">user-id</dt>
    <dt class="javascript">userId</dt>
    <dd>The ID of the user under which this operation should be performed.
     If you do not set this option, the operation is performed as the
     current user. Use of this option requires additional privileges. For
     details, see Required Privileges, below. NOTE: This is a very privileged 
     operation since it enables a user to evaluate requests as any other 
     user. </dd>
    <dt class="xquery">default-collation</dt>
    <dt class="javascript">defaultCollation</dt>
    <dd>Specifies the collation to use for this operation if a collation
     is not explicitly specified, such as in the XQuery prolog or in a
     function call that allows you to specify a collation. For more
     details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340505'>Encodings and Collations</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt class="xquery">default-coordinate-system</dt>
    <dt class="javascript">defaultCoordinateSystem</dt>
    <dd>Specifies the geospatial coordinate system to use for this operation, 
     if a collation is not explicitly specified, such as in the XQuery prolog
     or in a function call that allows you to specify a coordinate system.
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em> and 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2398149'>Supported Coordinate Systems</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt class="xquery">transaction-mode</dt>
    <dt class="javascript">transactionMode</dt>
    <dd>[DEPRECATED: Use the <code>update</code> and <code>commit</code>
     options instead.] Explicitly set the transaction mode for this context. 
     Allowed values: <code>auto</code> (default), <code>query</code>, 
     <code>update-auto-commit</code>, <code>update</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>.
     <p>For simple updates to be implicitly committed, specify a transaction 
     mode of <code>update-auto-commit</code>. A transaction mode of
     <code>update</code> creates a new multi-statement update 
     transaction and requires an explicit commit in the code.</p>
     <p>Within a session there can be only one active multi-statement 
     transaction at a time. If a new multi-statement transaction is 
     specified nested inside a multi-statement transaction, MarkLogic throws
     the exception <code>XDMP-NESTEDMULTI</code>. If a new multi-statement 
     transaction is specified after another has been concurrently created 
     in the same session by another request, MarkLogic throws the exception
     <code>XDMP-SESSIONTXN</code> and retries the current request.</p>
     <p class="xquery">An <code>xdmp:transaction-mode</code> XQuery prolog 
     option in the evaluated code overrides any transaction mode specified
     with this option.</p></dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">To get the database ID for options that require one, such as
  the <code>database</code> or <code>modules</code> options, you can use
  functions such as the following. Use the function appropriate to the
  database you want to reference.</p>
  <ul class="xquery" xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp:database">xdmp:database</a></li>
	<li><a href="#xdmp:modules-database">xdmp:modules-database</a></li>
	<li><a href="#xdmp:security-database">xdmp:security-database</a></li>
	<li><a href="#xdmp:schema-database">xdmp:schema-database</a></li>
      </ul>
  <ul class="javascript" xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp.database">xdmp.database</a></li>
	<li><a href="#xdmp.modulesDatabase">xdmp.modulesDatabase</a></li>
	<li><a href="#xdmp.securityDatabase">xdmp.securityDatabase</a></li>
	<li><a href="#xdmp.schemaDatabase">xdmp.schemaDatabase</a></li>
      </ul>
</apidoc:usage>
    <apidoc:privilege>
 To use this function, you must have the following privilege:
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-invoke</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>database</code> option to specify a content database 
  other than the default database for the current App Server, you must 
  have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-invoke-in</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify a modules database or root other than that configured for the 
  current App Server, you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-invoke-modules-change</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify using the file system as the modules database or root path, you
  you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-invoke-modules-change-file</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code class="xquery">user-id</code>
  <code class="javascript">userId</code> option, you must have the
  following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-login</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>timestamp</code> option, you must have the following
  privileges:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-timestamp</code></p>
</apidoc:privilege>
    <apidoc:see-also-list>
  <apidoc:see-also>
    For asynchronous module invocation, see
    <a class="xquery" href="#xdmp:spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp:spawn</a>
    <a class="javascript" href="#xdmp.spawn" xmlns="http://www.w3.org/1999/xhtml">xdmp.spawn</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of XQuery code, see
    <a class="xquery" href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</a>
    <a class="javascript" href="#xdmp.xqueryEval" xmlns="http://www.w3.org/1999/xhtml">xdmp.xqueryEval</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of JavaScript code, see
    <a class="xquery" href="#xdmp:javascript-eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:javascript-eval</a>
    <a class="javascript" href="#xdmp.eval" xmlns="http://www.w3.org/1999/xhtml">xdmp.eval</a>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:invoke("http://example.com/modules/foo.xqy")
  =&gt; 2</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.invoke("http://example.com/modules/foo.xqy")
  =&gt; 2</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  This example invokes a module using external variables.
 
  Assume you have a module in the modules database with a URI
  "http://example.com/application/module.xqy" containing the
  following code:

  xquery version "1.0-ml";
  declare namespace my="my-namespace-uri";
  declare variable $my:var as xs:string external;
  xdmp:log($my:var)

  Then you can call this module using xdmp:invoke as follows:

  xquery version "1.0-ml";
  declare namespace my="my-namespace-uri";
  xdmp:invoke("module.xqy",
        (xs:QName("my:var"), "log this"),
        &lt;options xmlns="xdmp:eval"&gt;
          &lt;modules&gt;{xdmp:modules-database()}&lt;/modules&gt;
	  &lt;root&gt;http://example.com/application/&lt;/root&gt;
         &lt;/options&gt;)
	
  =&gt; Invokes an XQuery module from the modules database
     with the URI http://example.com/application/module.xqy.
     The invoked module will then be executed, logging the
     message sent in the external variable to the log. </pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  This example invokes a module using external variables.

  Assume you have a module in the modules database with a URI
  "http://example.com/application/log.sjs" containing the
  following code:

  xdmp.log(myvar)

  Then you can call this module using xdmp.invoke as follows:

  xdmp.invoke("log.sjs",
	{myvar: "log this"},
        {
          modules : xdmp.modulesDatabase(),
          root : "http://example.com/application/"
        });

  =&gt; Invokes a JavaScript module from the modules database
     with the URI http://example.com/application/log.sjs.
     The invoked module will then be executed, logging the
     message sent in the external variable to the log.
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="invoke-function" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Returns the result of evaluating 
  <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">an XQuery</span><span class="javascript" xmlns="http://www.w3.org/1999/xhtml">a JavaScript</span>
  function value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="func" type="function()">
    A zero arity function value to execute.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
   Options controlling the evaluation. The default is no options. For
   detailed option information, see
   <a class="xquery" href="#xdmp:invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke</a> 
   <a class="javascript" href="#xdmp.invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp.invoke</a> 
   for detailed option information. NOTE: Some options require additional
   privileges; for details, see the Required Privileges section of
   <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke</code><code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.invoke</code>.
   <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">When expressed as an element, the options node 
    must be in the <code>xdmp:eval</code> namespace.</span>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:privilege>
 Use of this function requires the following privilege:
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-invoke</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">Some options require additional privileges. For details, see the
  Required Privileges for 
  <a class="xquery" href="#xdmp:invoke">xdmp:invoke</a><a class="javascript" href="#xdmp.invoke">xdmp.invoke</a>.</p>
</apidoc:privilege>
    <apidoc:usage>
  The XQuery version of this function (<code xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke-function</code>)
  can only be used to invoke XQuery functions. The Server-Side JavaScript
  version of this function (<code xmlns="http://www.w3.org/1999/xhtml">xdmp.invokeFunction</code>) can only
  be used to invoke JavaScript functions.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xquery version "1.0-ml";
  let $content := &lt;doc/&gt;
  return
    xdmp:invoke-function(
      function() { xdmp:document-insert("doc",$content) },
      &lt;options xmlns="xdmp:eval"&gt;
        &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
      &lt;/options&gt;)
	
  (: Invokes the function value in an update-auto-commit transaction. :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xquery version "1.0-ml";
  let $content := &lt;doc/&gt;
  return
    xdmp:invoke-function(
      function() { xdmp:document-insert("doc",$content), xdmp:commit() },
      &lt;options xmlns="xdmp:eval"&gt;
        &lt;transaction-mode&gt;update&lt;/transaction-mode&gt;
      &lt;/options&gt;)
	
  (: Invokes the function value in a multi-statement update transaction. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  function test29197(uri,doc) {
    return {
      setUri: function setUri(_uri) { uri = _uri; },
      setDoc: function setDoc(_doc) { doc = _doc; },
      insert: function docInsert() { xdmp.documentInsert(uri,doc); }
    };
  };
  var testInvoke = test29197("29197.json",{a:1});
  xdmp.invokeFunction(testInvoke.insert,
    {transactionMode:"update-auto-commit"});
  xdmp.eval("cts.doc('29197.json')");

// Insert a doc and then retrieve it. Returns:
//     {"a":1}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="invoke-in" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  [DEPRECATED: use <a href="#xdmp:invoke" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:invoke</code></a> with the
  database option instead] Returns the result of evaluating a module
  at the given path.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The path of the module to be executed.  The path is resolved against
    the root of the App Server evaluating the query.  The path must
    resolve to a main module (not a library module).
  </apidoc:param>
      <apidoc:param name="ID" type="xs:unsignedLong*">
    The database ID, from <code xmlns="http://www.w3.org/1999/xhtml">xdmp:database("db_name")</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">xdmp:security-database()</code>,
    or <code xmlns="http://www.w3.org/1999/xhtml">xdmp:schema-database()</code>.
  </apidoc:param>
      <apidoc:param name="vars" type="item()*" optional="true">
    The external variable values for this evaluation.
    This must be a sequence of even length, alternating QNames and items.
    Each QName and item pair specify a variable name and value.
  </apidoc:param>
      <apidoc:param name="modules" type="xs:unsignedLong?" optional="true">
    The modules database containing the module to invoke.
    The empty sequence specifies the current modules database.
  </apidoc:param>
      <apidoc:param name="root" type="xs:string?" optional="true">
    The root path for modules.  
    The empty sequence specifies the current root.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:invoke-in("http://example.com/modules/foo.xqy",2348790529)
  =&gt; 2</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="value" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Evaluate an expression in the context of the current evaluating statement.
  This differs from <code xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</code> in that <code xmlns="http://www.w3.org/1999/xhtml">xdmp:value</code>
  preserves all of the context from the calling query, so you do not
  need to re-define namespaces, variables, and so on.  Although the expression
  retains the context from the calling query, it is evaluated in its own
  transaction with same-statement isolation.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expr" type="xs:string">
    The string representing an expression to evaluate.
  </apidoc:param>
      <apidoc:param name="map" type="map:map?" optional="true">
  A map of namespace bindings. The keys should be namespace prefixes and the
  values should be namespace URIs. These namespace bindings will be added to
  the in-scope namespace bindings in the evaluation of the expression.
  </apidoc:param>
      <apidoc:param name="context" type="item()?" optional="true">
    Bind the context item to this value during evaluation of the expression.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">You can only evaluate expressions with <code>xdmp:value</code>; no
  prolog definitions (namespace declarations, function definitions,
  module imports, and so on) are allowed.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If the expression references something not in the context of either
  the calling query or the value expression, then an error is thrown. For
  example, the following throws an undefined variable exception:</p>
  <pre xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:value("$y")</code></pre>
</apidoc:usage>
    <apidoc:privilege>
  <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/xdmp-value</code>
</apidoc:privilege>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $var := 5
  return
  xdmp:value("$var")
  =&gt; 5
  </pre>
</apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:document-insert("/test.xml",
 &lt;root&gt;
   &lt;step1&gt;this is step1&lt;/step1&gt;
   &lt;step2&gt;this is step2&lt;/step2&gt;
 &lt;/root&gt;)
;

(:
use xdmp:value to dynamically specify a step
in an XPath expression
:)
for $x in ("step1", "step2")
return
/root/xdmp:value($x)

=&gt;
&lt;step1&gt;this is step1&lt;/step1&gt;
&lt;step2&gt;this is step2&lt;/step2&gt;
  </pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="unpath" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Evaluate a string as an XPath and return the corresponding node(s).
  Any value that is the result of <code xmlns="http://www.w3.org/1999/xhtml">xdmp:path</code> is a
  valid input to <code xmlns="http://www.w3.org/1999/xhtml">xdmp:unpath</code>.  Any invalid inputs
  throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-UNPATH</code> exception. To evaluate non-XPath
  expressions, use <code xmlns="http://www.w3.org/1999/xhtml">xdmp:value</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expr" type="xs:string">
   The XPath expression string to evaluate. The XPath expression must be
   of the form returned by <code xmlns="http://www.w3.org/1999/xhtml">xdmp:path</code>.
  </apidoc:param>
      <apidoc:param name="map" type="map:map?" optional="true">
  A map of namespace bindings. The keys should be namespace prefixes and the
  values should be namespace URIs. These namespace bindings will be added to
  the in-scope namespace bindings in the evaluation of the path.
  </apidoc:param>
      <apidoc:param name="context" type="node()?" optional="true">
    Bind the context node to this value during evaluation of the expression.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:unpath("/bookstore/book/title")
  =&gt; &lt;title&gt;Querying XML&lt;/title&gt;
  </pre>
</apidoc:example>
    <apidoc:example>
<p xmlns="http://www.w3.org/1999/xhtml">The following example shows how you can use xdmp:unpath
and specify namespace bindings that are not in the current query scope.</p>
<pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $doc := &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
              &lt;body&gt;&lt;p&gt;This is a document&lt;/p&gt;&lt;/body&gt;
            &lt;/html&gt;
let $namespaces := map:map()
let $_ := map:put($namespaces, "xh", "http://www.w3.org/1999/xhtml")
let $xpath-str := "$doc/xh:body/xh:p"
return xdmp:unpath($xpath-str, $namespaces)

=&gt; &lt;p xmlns="http://www.w3.org/1999/xhtml"&gt;This is a document&lt;/p&gt;
  </pre>
</apidoc:example>
    <apidoc:example>
<p xmlns="http://www.w3.org/1999/xhtml">The following example shows that <code>xdmp:unpath</code>
will throw an error if the specified XPath expression
would never be returned by <code>xdmp:path</code>.</p>
<pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:unpath("/bookstore/book/title[@name eq 'Querying XML']")
  =&gt; throws the XDMP-UNPATH exception, because the specified
     path expression would never be the output of xdmp:path.
  </pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="xslt-invoke" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
   Executes an XSLT stylesheet against a node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The path of the stylesheet to be executed.  The path is resolved against
    the root of the App Server evaluating the query, the Modules directory,
    or relative to the calling module.  For details on resolving paths,
    see "Importing XQuery Modules and Resolving Paths" in the
    <em xmlns="http://www.w3.org/1999/xhtml">Application Developer's Guide</em>.
  </apidoc:param>
      <apidoc:param name="input" type="node()?" optional="true">
    The context node to which the stylesheet is applied.
  </apidoc:param>
      <apidoc:param name="params" type="map:map?" optional="true">
    The stylesheet parameter values for this evaluation.
    Each key in the map is a string representing the name of the parameter
    in Clark notation: "{namespaceURI}localname". The function
    <a href="#xdmp:key-from-QName" xmlns="http://www.w3.org/1999/xhtml">xdmp:key-from-QName</a>
    is a convenient way to generate these keys.
    Each entry in the map is the value of the corresponding parameter.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
  <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The options node. The default value is (). The node 
  must be in the
  <code>xdmp:eval</code> namespace.  See the
  <a href="#xdmp:eval"><code>xdmp:eval</code></a> section for a list of 
  options.</span>
  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">The options object. The default value is 
  null. </span>
  Additional options include:
  <dl xmlns="http://www.w3.org/1999/xhtml">
  <dt class="xquery"><p>&lt;mode&gt;</p></dt>
  <dt class="javascript"><p>mode</p></dt>
  <dd>A QName <span class="javascript"> (in clark notation) </span> specifying 
  the
  initial stylesheet mode to use (the <code>&lt;xsl:template&gt;</code> with 
  the specified <code>mode</code> attribute).</dd>
  <dt class="xquery"><p>&lt;template&gt;</p></dt>
  <dt class="javascript"><p>template</p></dt>
  <dd>A QName <span class="javascript"> (in clark notation) </span> specifying 
  the name of the initial template to apply.</dd>
  <dt class="xquery"><p>&lt;encoding&gt;</p></dt>
  <dt class="javascript"><p>encoding</p></dt>
  <dd>Specifies the encoding to use when reading the stylesheet into MarkLogic
  Server. The value must either be "auto" or match an encoding name 
  according to the Unicode Charset Alias Matching rules
  (<a href="http://www.unicode.org/reports/tr22/#Charset_Alias_Matching">http://www.unicode.org/reports/tr22/#Charset_Alias_Matching</a>).
  When the value is "auto", MarkLogic guesses the encoding from
  the document content. For a list of character set encodings by language, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340354'>Collations and Character Sets By Language</a> in the <em>Search Developer's Guide</em>. 
  If you do not set this option, MarkLogic uses the encoding
  specified in the HTTP headers, if present. If you do not set this option
  and no encoding is available from HTTP headers, the encoding
  defaults to UTF-8. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2387576'>Character Encoding</a> in the <em>Search Developer's Guide</em>.</dd>
  </dl>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:privilege>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xslt-invoke</code></p>
</apidoc:privilege>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">When running an XSLT stylesheet in MarkLogic, you pass in a node on
  which the stylesheet operates.  Many stylesheets are written
  to expect the initial node to be a document
  node.  In other XSLT processors, the node you pass to the stylesheet is
  typically read in from the filesystem and is always treated as a document
  node.  In MarkLogic, you often get the node to pass to the stylesheet as
  the result of a query or a search, and the node  is not necessarily a
  document node.  Therefore, if your stylesheet expects
  the context node to be a document node, make sure to pass in a document
  node and not an element node.  If you pass in an element node to a
  stylesheet that has default template rules to expect a document node,
  then you might miss the processing on the element you passed
  in (because the stylesheet might expect the child node to be the root
  element of the XML document, but if you passed in the root element instead of
  its parent document node, then the child nodes would be the children of the
  root element, causing the root element to miss its default processing).</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

(:
this example requires a document named hello.xsl directly
at the App Server root with the following content:

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                  version="2.0"&gt;
    &lt;xsl:template match="/"&gt;
        &lt;xsl:text&gt;hello&lt;/xsl:text&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
:)
xdmp:xslt-invoke("/hello.xsl", document{ &lt;foo/&gt; })
=&gt;
hello
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

// This example requires a document named hello.xsl directly
// at the App Server root with the following content:

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                  version="2.0"&gt;
    &lt;xsl:template match="/"&gt;
        &lt;xsl:text&gt;hello&lt;/xsl:text&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;

fn.head(xdmp.xsltInvoke("/hello.xsl", xdmp.unquote('&lt;foo/&gt;')))
=&gt;
hello
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml" ;

(: Hello World example for xslt:invoke, with a parameter.
   Assumes a stylesheet named params.xsl directly at
   the App Server root with the following content:
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:f="foo" xmlns:b="bar"
      version="2.0"&gt;
    &lt;xsl:param name="f:pName"/&gt;
    &lt;xsl:param name="b:bName"/&gt;
    &lt;xsl:param name="cName"/&gt;
    &lt;xsl:param name="greeting" select="'Hi there '"/&gt;
    &lt;xsl:template match="/"&gt;
       &lt;output&gt;
         &lt;xsl:copy-of select="node"/&gt;
         &lt;greeting&gt;&lt;xsl:value-of select="$greeting"/&gt;&lt;/greeting&gt;
         &lt;param&gt;&lt;xsl:value-of select="$f:pName"/&gt;&lt;/param&gt;
         &lt;param&gt;&lt;xsl:value-of select="$b:bName"/&gt;&lt;/param&gt;
         &lt;param&gt;&lt;xsl:value-of select="$cName"/&gt;&lt;/param&gt;
       &lt;/output&gt;
    &lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;
:)

let $params := map:map()
let $_put := map:put(
                    $params,
                    xdmp:key-from-QName(fn:QName("foo", "pName")),
                    "Stephen")
let $_put := map:put(
                    $params,
                    xdmp:key-from-QName(fn:QName("bar", "bName")),
                    "Ron")
let $_put := map:put(
                    $params,
                    "cName",
                    "Dave")
return
xdmp:xslt-invoke("/params.xsl",
    document { &lt;node&gt;Hello World&lt;/node&gt; },
    $params)
=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;output xmlns:f="foo" xmlns:b="bar"&gt;
  &lt;node&gt;Hello World&lt;/node&gt;
  &lt;greeting&gt;Hi there &lt;/greeting&gt;
  &lt;param&gt;Stephen&lt;/param&gt;
  &lt;param&gt;Ron&lt;/param&gt;
  &lt;param&gt;Dave&lt;/param&gt;
&lt;/output&gt;

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  Hello World example for xslt:invoke, with a parameter.
//  Assumes a stylesheet named params.xsl directly at
//  the App Server root with the following content:

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:f="foo" xmlns:b="bar"
      version="2.0"&gt;
    &lt;xsl:param name="f:pName"/&gt;
    &lt;xsl:param name="b:bName"/&gt;
    &lt;xsl:param name="cName"/&gt;
    &lt;xsl:param name="greeting" select="'Hi there '"/&gt;
    &lt;xsl:template match="/"&gt;
       &lt;output&gt;
         &lt;xsl:copy-of select="node"/&gt;
         &lt;greeting&gt;&lt;xsl:value-of select="$greeting"/&gt;&lt;/greeting&gt;
         &lt;param&gt;&lt;xsl:value-of select="$f:pName"/&gt;&lt;/param&gt;
         &lt;param&gt;&lt;xsl:value-of select="$b:bName"/&gt;&lt;/param&gt;
         &lt;param&gt;&lt;xsl:value-of select="$cName"/&gt;&lt;/param&gt;
       &lt;/output&gt;
    &lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;

// Run this against the above stylesheet:

var params = new Object();
var key1 = xdmp.keyFromQName(fn.QName("foo", "pName"));
params.key1 = "Stephen";
var key2 = xdmp.keyFromQName(fn.QName("bar", "bName"));
params.key2 = "Ron";
params.cName = "Dave";
xdmp.xsltInvoke("/params.xsl",
    fn.head(xdmp.unquote('&lt;node&gt;Hello World&lt;/node&gt;')),
    params);

=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;output xmlns:f="foo" xmlns:b="bar"&gt;
  &lt;node&gt;Hello World&lt;/node&gt;
  &lt;greeting&gt;Hi there &lt;/greeting&gt;
  &lt;param&gt;Stephen&lt;/param&gt;
  &lt;param&gt;Ron&lt;/param&gt;
  &lt;param&gt;Dave&lt;/param&gt;
&lt;/output&gt;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="xslt-eval" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
   Executes an XSLT stylesheet against a node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="stylesheet" type="node()">
    The XSLT stylesheet to be executed.
  </apidoc:param>
      <apidoc:param name="input" type="node()?" optional="true">
    The context node to which the stylesheet is applied.
  </apidoc:param>
      <apidoc:param name="params" type="map:map?" optional="true">
    The stylesheet parameter values for this evaluation.
    Each key in the map is a string representing the name of the parameter
    in Clark notation: "{namespaceURI}localname". The function
    <a href="#xdmp:key-from-QName" xmlns="http://www.w3.org/1999/xhtml">xdmp:key-from-QName</a>
    is a convenient way to generate these keys.
    Each entry in the map is the value of the corresponding parameter.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
  <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The options node. The default value is (). The node 
  must be in the <code>xdmp:eval</code> namespace.  See the
  <a href="#xdmp:eval"><code>xdmp:eval</code></a> section for a list of 
  options.</span>
  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">The options object. The default value is null.</span>
  Additional options include:
  <dl xmlns="http://www.w3.org/1999/xhtml">
  <dt class="xquery"><p>&lt;mode&gt;</p></dt>
  <dt class="javascript"><p>mode</p></dt>
  <dd>A QName <span class="javascript"> (in clark notation) </span> 
  specifying the
  initial stylesheet mode to use (the <code>&lt;xsl:template&gt;</code> with the
  specified <code>mode</code> attribute).</dd>
  <dt class="xquery"><p>&lt;template&gt;</p></dt>
  <dt class="javascript"><p>template</p></dt>
  <dd>A QName <span class="javascript"> (in clark notation) </span> 
  specifying the name of the initial template to apply.</dd>
  </dl>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>document-node()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">When creating the <code>xsl:stylesheet</code> element that is the
  stylesheet parameter to <code>xdmp:xslt-eval</code>, keep in mind that
  it has to first be parsed by XQuery before
  it is evaluated as a stylesheet.  Therefore, any characters in the stylesheet
  that require escaping in XQuery must be escaped, otherwise you get an error
  in the XQuery.  For example, if the stylesheet has any curly braces
  ( { or } ), you must escape the curly braces (with curly braces). For
  an example, see <a href="#xslteval4">the example</a> below.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">When running an XSLT stylesheet in MarkLogic, you pass in a node on
  which the stylesheet operates.  Many stylesheets are written
  to expect the initial node to be a document
  node.  In other XSLT processors, the node you pass to the stylesheet is
  typically read in from the filesystem and is always treated as a document
  node.  In MarkLogic, you often get the node to pass to the stylesheet as
  the result of a query or a search, and the node  is not necessarily a
  document node.  Therefore, if your stylesheet expects
  the context node to be a document node, make sure to pass in a document
  node and not an element node.  If you pass in an element node to a
  stylesheet that has default template rules to expect a document node,
  then you might miss the processing on the element you passed
  in (because the stylesheet might expect the child node to be the root
  element of the XML document, but if you passed in the root element instead of
  its parent document node, then the child nodes would be the children of the
  root element, causing the root element to miss its default processing).</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $foo-to-bar :=
  &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                  version="2.0"&gt;
    &lt;xsl:template match="foo"&gt;
      &lt;bar&gt;
        &lt;xsl:apply-templates select="node()"/&gt;
      &lt;/bar&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="@*|node()"&gt;
      &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select="@*|node()"/&gt;
      &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;
return xdmp:xslt-eval($foo-to-bar,
  &lt;stuff&gt;
   &lt;one/&gt;
   &lt;foo/&gt;
   &lt;two/&gt;
   &lt;foo&gt;&lt;blah&gt;42&lt;/blah&gt;&lt;/foo&gt;
   &lt;bar&gt;22&lt;/bar&gt;
  &lt;/stuff&gt;)/element()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var fooToBar = fn.head(xdmp.unquote(
'  &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n\
                  version="2.0"&gt;\n\
    &lt;xsl:template match="foo"&gt;\n\
      &lt;bar&gt;\n\
        &lt;xsl:apply-templates select="node()"/&gt;\n\
      &lt;/bar&gt;\n\
    &lt;/xsl:template&gt;\n\
    &lt;xsl:template match="@*|node()"&gt;\n\
      &lt;xsl:copy&gt;\n\
        &lt;xsl:apply-templates select="@*|node()"/&gt;\n\
      &lt;/xsl:copy&gt;\n\
    &lt;/xsl:template&gt;\n\
  &lt;/xsl:stylesheet&gt;'));
xdmp.xsltEval(fooToBar, fn.head(xdmp.unquote(
'  &lt;stuff&gt;\n\
   &lt;one/&gt;\n\
   &lt;foo/&gt;\n\
   &lt;two/&gt;\n\
   &lt;foo&gt;&lt;blah&gt;42&lt;/blah&gt;&lt;/foo&gt;\n\
   &lt;bar&gt;22&lt;/bar&gt;\n\
  &lt;/stuff&gt;')).root);
=&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;stuff&gt;
   &lt;one/&gt;
   &lt;bar/&gt;
   &lt;two/&gt;
   &lt;bar&gt;
    &lt;blah&gt;42&lt;/blah&gt;
   &lt;/bar&gt;
   &lt;bar&gt;22&lt;/bar&gt;
&lt;/stuff&gt;
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml" ;

(: Hello World example for xslt:eval, with a parameter :)

let $params := map:map()
let $_put := map:put(
                    $params,
                    xdmp:key-from-QName(fn:QName("foo", "pName")),
                    "Stephen")
let $_put := map:put(
                    $params,
                    xdmp:key-from-QName(fn:QName("bar", "bName")),
                    "Ron")
let $_put := map:put(
                    $params,
                    "cName",
                    "Dave")
return
  xdmp:xslt-eval(
    &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:f="foo" xmlns:b="bar"
      version="2.0"&gt;
    &lt;xsl:param name="f:pName"/&gt;
    &lt;xsl:param name="b:bName"/&gt;
    &lt;xsl:param name="cName"/&gt;
    &lt;xsl:param name="greeting" select="'Hi there '"/&gt;
    &lt;xsl:template match="/"&gt;
       &lt;output&gt;
         &lt;xsl:copy-of select="node"/&gt;
         &lt;greeting&gt;&lt;xsl:value-of select="$greeting"/&gt;&lt;/greeting&gt;
         &lt;param&gt;&lt;xsl:value-of select="$f:pName"/&gt;&lt;/param&gt;
         &lt;param&gt;&lt;xsl:value-of select="$b:bName"/&gt;&lt;/param&gt;
         &lt;param&gt;&lt;xsl:value-of select="$cName"/&gt;&lt;/param&gt;
       &lt;/output&gt;
    &lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;,
  document { &lt;node&gt;Hello World&lt;/node&gt; },
  $params)
=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;output xmlns:f="foo" xmlns:b="bar"&gt;
  &lt;node&gt;Hello World&lt;/node&gt;
  &lt;greeting&gt;Hi there &lt;/greeting&gt;
  &lt;param&gt;Stephen&lt;/param&gt;
  &lt;param&gt;Ron&lt;/param&gt;
  &lt;param&gt;Dave&lt;/param&gt;
&lt;/output&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  Hello World example for xdmp.xsltEval, with a parameter 

var params = new Object();
var key1 = xdmp.keyFromQName(fn.QName("foo", "pName"));
params.key1 = "Stephen";
var key2 = xdmp.keyFromQName(fn.QName("bar", "bName"));
params.key2 = "Ron";
params.cName = "Dave";
xdmp.xsltEval(fn.head(xdmp.unquote(
'    &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n\
      xmlns:f="foo" xmlns:b="bar"\n\
      version="2.0"&gt;\n\
    &lt;xsl:param name="f:pName"/&gt;\n\
    &lt;xsl:param name="b:bName"/&gt;\n\
    &lt;xsl:param name="cName"/&gt;\n\
    &lt;xsl:param name="greeting" select="' + "'Hi there '" +' "/&gt;\n\
    &lt;xsl:template match="/"&gt;\n\
       &lt;output&gt;\n\
         &lt;xsl:copy-of select="node"/&gt;\n\
         &lt;greeting&gt;&lt;xsl:value-of select="$greeting"/&gt;&lt;/greeting&gt;\n\
         &lt;param&gt;&lt;xsl:value-of select="$f:pName"/&gt;&lt;/param&gt;\n\
         &lt;param&gt;&lt;xsl:value-of select="$b:bName"/&gt;&lt;/param&gt;\n\
         &lt;param&gt;&lt;xsl:value-of select="$cName"/&gt;&lt;/param&gt;\n\
       &lt;/output&gt;\n\
    &lt;/xsl:template&gt;\n\
  &lt;/xsl:stylesheet&gt;')),
    fn.head(xdmp.unquote('&lt;node&gt;Hello World&lt;/node&gt;')),
    params);

=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;output xmlns:f="foo" xmlns:b="bar"&gt;
  &lt;node&gt;Hello World&lt;/node&gt;
  &lt;greeting&gt;Hi there &lt;/greeting&gt;
  &lt;param&gt;Stephen&lt;/param&gt;
  &lt;param&gt;Ron&lt;/param&gt;
  &lt;param&gt;Dave&lt;/param&gt;
&lt;/output&gt;
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml" ;

(: example that passes in a QName for a mode :)
xdmp:xslt-eval(
    &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     version="2.0"&gt;
    &lt;xsl:template match="/"&gt;
       &lt;output&gt;this has no mode&lt;/output&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="/" mode="my-mode"&gt;
      &lt;debug&gt;this has a mode&lt;/debug&gt;
    &lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;,
  document { &lt;node&gt;Hello World&lt;/node&gt; },
  (),
  &lt;options xmlns="xdmp:eval"&gt;
    &lt;mode&gt;{fn:QName("", "my-mode")}&lt;/mode&gt;
  &lt;/options&gt;)
=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;debug&gt;this has a mode&lt;/debug&gt;

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// example that passes in a QName for a mode 

xdmp.xsltEval(fn.head(xdmp.unquote(
'    &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n\
     version="2.0"&gt;\n\
    &lt;xsl:template match="/"&gt;\n\
       &lt;output&gt;this has no mode&lt;/output&gt;\n\
    &lt;/xsl:template&gt;\n\
    &lt;xsl:template match="/" mode="my-mode"&gt;\n\
      &lt;debug&gt;this has a mode&lt;/debug&gt;\n\
    &lt;/xsl:template&gt;\n\
  &lt;/xsl:stylesheet&gt;')),
  fn.head(xdmp.unquote('&lt;node&gt;Hello World&lt;/node&gt;')),
  null,
  {mode:"{}my-mode"});

=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;debug&gt;this has a mode&lt;/debug&gt;

</pre></apidoc:example>
    <apidoc:example class="xquery"><a id="xslteval4" xmlns="http://www.w3.org/1999/xhtml"></a>
<pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

(:
  Note the esacped curly braces ( {{ and }} on the name attribute
  of xsl:element), as the stylesheet must first be parsed by XQuery
  before it is evaluated as a stylesheet.  If you do not escape
  the curly braces, the query throws the XQuery exception:
  [1.0-ml] XDMP-CONTEXT: (err:XPDY0002) Expression depends on the context
           where none is defined
  That is because, without the escaped braces, XQuery tries to evaluate
  the expression in the name attribute, but there is no context for it.
:)
xdmp:xslt-eval(
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      version="2.0"&gt;
    &lt;xsl:template match="foo"&gt;
     &lt;xsl:element name="{{name(.)}}"/&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
,
document{ &lt;foo&gt;something goes here&lt;/foo&gt;} )
=&gt;
&lt;?xml version="1.0" encoding="ASCII"?&gt;
&lt;foo/&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="spawn" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context">
    <apidoc:summary>
  Place the specified module on the task queue for evaluation.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The path of an XQuery or JavaScript module to be executed, as a string.
    The path is resolved against the root of the App Server evaluating the 
    query, the Modules directory, or relative to the calling module. 
    For details on module path resolution, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/import_modules.xml%2368169'>Importing XQuery Modules, XSLT Stylesheets, and Resolving Paths</a> in the <em>Application Developer's Guide</em>.
    <p xmlns="http://www.w3.org/1999/xhtml">The module is considered to be JavaScript if the module path ends with 
    a file extension configured for the MIME type
    <code>application/vnd.marklogic-javascript</code> in MarkLogic's
    Mimetypes configuration. Otherwise, it is assumed to be XQuery.</p>
  </apidoc:param>
      <apidoc:param name="vars" type="item()* | map:map" class="xquery" optional="true">
    External variable values to make available to the evaluated code,
    expressed as either a sequence of alternating QName-value pairs, or
    a <code xmlns="http://www.w3.org/1999/xhtml">map:map</code>. If you use a sequence, it must contain 
    alternating variable QNames and values. e.g.  
    <code xmlns="http://www.w3.org/1999/xhtml">(xs:QName("var1"), "val1", xs:Qname("var2"), "val2").</code>
    If you use a map, then each key is a string representing the Clark 
    notation of the variable QName ("{namespaceURI}localname"), and its
    value is the corresponding variable value. You can use
    <a href="#xdmp:key-from-QName" xmlns="http://www.w3.org/1999/xhtml">xdmp:key-from-QName</a>
    to generate the Clark notation to use as a key.
  </apidoc:param>
      <apidoc:param name="vars" type="Object?" optional="true" class="javascript">
    External variable values to make available to the spawned code,
    expressed as a JavaScript Object. Each property name is a variable
    name, and its value is the corresponding variable value. When invoking
    an XQuery module, use Clark notation to represent QNames with a 
    namespace qualifer. That is, use a name of the form 
    ('{namespaceURI}localname'). For example, { '{http://my/ns}num': 42 } 
    specifies that the value of the variable named 'num' in the namespace
    'http://my/ns' is 42. You can use the function
    <a href="#xdmp.keyFromQName" xmlns="http://www.w3.org/1999/xhtml">xdmp.keyFromQName</a> to generate Clark 
    notation for a QName.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">Options with which to customize this operation. 
     You can specify options as either an <code>options</code> XML element
     in the namespace "xdmp:eval", or as a <code>map:map</code>. The
     option names below are XML localnames. When using a map, replace any
     hyphens in an option name with camel casing. For example, "an-option"
     becomes "anOption" when used as a <code>map:map</code> entry key.
     This function supports the following options:
    </span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Options with which to customize this operation.
     Specify your options as a JavaScript object, with the option names as
     the object property names. This function supports the following options:
    </span>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>database</dt>
    <dd>The id of the content database. You can use functions such
      as <code class="xquery">xdmp:database</code>
      <code class="javascript">xdmp.database</code> to get a database ID.
      See the Usage Notes for more details. Using this option to specify
      a database other than the context database requires additional
      privileges. For details, see Required Privileges, below.</dd>
    <dt>modules</dt>
    <dd>The ID of the modules database to use for resolving module imports.
      If you do not specify a <code>modules</code> option, this operation
      uses the current modules database. Use a value of <code>0</code> to
      specify using the file system to resolve module imports. Using this
      option may require additional privileges. For details, see Required
      Privileges, below.</dd>
    <dt>root</dt>
    <dd>The root path for modules. If you do not explicitly specify a
      <code>root</code> option, the current root is used. Use of this
      option may require additional privileges. For details, see Required
      Privileges, below.
     </dd>
    <dt>timestamp</dt>
    <dd>The system timestamp to use for this evaluation. If you omit this
      option, the most recent timestamp is used. You may only specify a
      timestamp for a query statement, not for an update statement. Use a
      value of zero to specify the current system timestamp (the value that
      would be returned by <code class="xquery">xdmp:request-timestamp</code>
	  <code class="javascript">xdmp.requestTimestamp</code>). 
	  For more details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/point_in_time.xml%2347946'>Understanding Point-In-Time Queries</a> in the <em>Application Developer's Guide</em>.
      Use of this option requires additional privileges. For details, see 
      Required Privileges, below.
    </dd>
    <dt>isolation</dt>
    <dd>Specify the transaction isolation for this operation. Allowed values:
     <code>same-statement</code>, <code>different-transaction</code> (default).
     When set to <code>same-statement</code>, the evaluation occurs in the
     same transaction in which this function is called. When set to
     <code>different-transaction</code>, the evaluation occurs in a separate
     transaction from the one in which this function is called. If you use
     <code>same-statement</code> isolation in a query (read-only) statement
     and the eval'd code attempts an update, MarkLogic throws the exception
     <code>XDMP-UPDATEFUNCTIONFROMQUERY</code>. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2324388'>Isolation Option to xdmp:eval/invoke</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>commit</dt>
    <dd>
     The commit mode for the transaction in which the code is evaluated.
     Allowed values: <code>auto</code> (default), <code>explicit</code>.
     In <code>auto</code> mode, a transaction is committed for every statement.
     In <code>explicit</code> mode, the transaction must be explicitely
     committed or rolled back. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2395728'>Commit Mode</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt>update</dt>
    <dd>
     Specify the transaction type in which to evaluate this code, or let
     MarkLogic determine the transaction type. Allowed values:
     <code>true</code>, <code>false</code>, <code>auto</code> (default).
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2373171'>Transaction Type Overview</a> in the <em>Application Developer's Guide</em>.
    </dd>
    <dt class="xquery">static-check</dt>
    <dt class="javascript">staticCheck</dt>
    <dd>
     Whether or not to only perform a static analysis of the code, without
     executing it. Allowed values: <code>true</code>, <code>false</code>
     (default).
    </dd>
    <dt class="xquery">default-xquery-version</dt>
    <dt class="javascript">defaultXqueryVersion</dt>
    <dd>The default XQuery language version to use for the query, if the query
     does not contain an explicit version declaration. By default, MarkLogic
     uses the default XQuery version of the App Server that called 
     <code>spawn</code>. The Task Server has no default XQuery version, so
     the version is passed as part of the task request.
     <p>Allowable values for this option are "0.9-ml", "1.0-ml", "1.0", and
     the special value "app-server". The first three are XQuery language
     versions. The last indicates that the default XQuery language
     version set on this App Server should be used.  This is useful if code
     written in an older XQuery version needs to call this function
     on strings that may have been passed as parameters, but should be
     interpreted in the App Server default language version.  A module
     may discover its own XQuery language version with
     <code class="xquery">xdmp:xquery-version()</code>
     <code class="javascript">xdmp.xqueryVersion()</code>.</p>
    </dd>
    <dt class="xquery">time-limit</dt>
    <dt class="javascript">timeLimit</dt>
    <dd>Override the default time limit with this time limit for this
     operation. Specify the value in seconds. You can set the value up
     to the maximum-time-limit value for the App Server in which the
     request is evaluated or to a lower value than the default time limit.</dd>
    <dt class="xquery">user-id</dt>
    <dt class="javascript">userId</dt>
    <dd>The ID of the user under which this operation should be performed.
     If you do not set this option, the operation is performed as the
     current user. Use of this option requires additional privileges. For
     details, see Required Privileges, below. NOTE: This is a very 
     privileged operation since it enables a user to evaluate requests as 
     any other user.</dd>
    <dt class="xquery">default-collation</dt>
    <dt class="javascript">defaultCollation</dt>
    <dd>Specifies the collation to use for this operation if a collation
     is not explicitly specified, such as in the XQuery prolog or in a
     function call that allows you to specify a collation. For more
     details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340505'>Encodings and Collations</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt class="xquery">default-coordinate-system</dt>
    <dt class="javascript">defaultCoordinateSystem</dt>
    <dd>Specifies the geospatial coordinate system to use for this operation, 
     if a collation is not explicitly specified, such as in the XQuery prolog
     or in a function call that allows you to specify a coordinate system.
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em> and 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2398149'>Supported Coordinate Systems</a> in the <em>Search Developer's Guide</em>.
    </dd>
    <dt>priority</dt>
    <dd>Specify the priority of the spawned task. Allowed values:
     <code>normal</code> (default), <code>higher</code>.</dd>
    <dt>result</dt>
    <dd>Return a value future for the result of the spawned task.
     This value future can bound be to a variable without waiting so
     that work can proceed concurrently with the spawned task. 
     When the calling request uses the value future in any operation,
     it will automatically wait for the spawned task to complete and it will
     use the result. For an example, see
     <a href="#xdmp:spawn#spawnresultex">The second example.</a></dd>
    <dt class="xquery">transaction-mode</dt>
    <dt class="javascript">transactionMode</dt>
    <dd>[DEPRECATED: Use the <code>update</code> and <code>commit</code>
     options instead.] Explicitly set the transaction mode for this context. 
     Allowed values: <code>auto</code> (default), <code>query</code>, 
     <code>update-auto-commit</code>, <code>update</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2325046'>Transaction Mode</a> in the <em>Application Developer's Guide</em>.
     <p>For simple updates to be implicitly committed, specify a transaction 
     mode of <code>update-auto-commit</code>. A transaction mode of
     <code>update</code> creates a new multi-statement update 
     transaction and requires an explicit commit in the code.</p>
     <p>Within a session there can be only one active multi-statement 
     transaction at a time. If a new multi-statement transaction is 
     specified nested inside a multi-statement transaction, MarkLogic throws
     the exception <code>XDMP-NESTEDMULTI</code>. If a new multi-statement 
     transaction is specified after another has been concurrently created 
     in the same session by another request, MarkLogic throws the exception
     <code>XDMP-SESSIONTXN</code> and retries the current request.</p>
     <p class="xquery">An <code>xdmp:transaction-mode</code> XQuery prolog 
     option in the evaluated code overrides any transaction mode specified
     with this option.</p></dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">This function places the specified module
   in the task queue to be processed. The module will be evaluated when the
   task server has the available resources to process it. Tasks are
   processed in the order in which they are added to the queue. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">Once this function is called, it cannot be rolled back,
   even if the transaction from which it is called does not complete.
   Therefore, use care calling this function from an update transaction.
   Once a module is spawned, its evaluation is asynchronous
   of the transaction in which <code>spawn</code> is called.
   Consequently, if you call this function from a module, and if
   the module ends up retrying (for example, if a deadlock is detected), 
   then the entire module is re-evaluated and this function is therefore
   called again. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">To get the database ID for options that require one, such as
   the <code>database</code> or <code>modules</code> options, you can use
   functions such as the following. Use the function appropriate to the
   database you want to reference.</p>
  <ul class="xquery" xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp:database">xdmp:database</a></li>
	<li><a href="#xdmp:modules-database">xdmp:modules-database</a></li>
	<li><a href="#xdmp:security-database">xdmp:security-database</a></li>
	<li><a href="#xdmp:schema-database">xdmp:schema-database</a></li>
      </ul>
  <ul class="javascript" xmlns="http://www.w3.org/1999/xhtml">
	<li><a href="#xdmp.database">xdmp.database</a></li>
	<li><a href="#xdmp.modulesDatabase">xdmp.modulesDatabase</a></li>
	<li><a href="#xdmp.securityDatabase">xdmp.securityDatabase</a></li>
	<li><a href="#xdmp.schemaDatabase">xdmp.schemaDatabase</a></li>
      </ul>
</apidoc:usage>
    <apidoc:privilege>
 To use this function, you must have the following privilege:
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-spawn</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>database</code> option to specify a content database 
  other than the default database for the current App Server, you must 
  have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-spawn-in</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify a modules database or root other than that configured for the 
  current App Server, you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-spawn-modules-change</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>modules</code> or <code>root</code> options to specify
  to specify using the file system as the modules database or root path, you
  you must have the following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-spawn-modules-change-file</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code class="xquery">user-id</code>
  <code class="javascript">userId</code> option, you must have the
  following privilege:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-login</code></p>
 <p xmlns="http://www.w3.org/1999/xhtml">To use the <code>timestamp</code> option, you must have the following
  privileges:</p>
 <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-timestamp</code></p>
</apidoc:privilege>
    <apidoc:see-also-list>
  <apidoc:see-also>
    For synchronous module invocation, see
    <a class="xquery" href="#xdmp:invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp:invoke</a>
    <a class="javascript" href="#xdmp.invoke" xmlns="http://www.w3.org/1999/xhtml">xdmp.invoke</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of XQuery code, see
    <a class="xquery" href="#xdmp:eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</a>
    <a class="javascript" href="#xdmp.xqueryEval" xmlns="http://www.w3.org/1999/xhtml">xdmp.xqueryEval</a>
  </apidoc:see-also>
  <apidoc:see-also>
    For synchronous evaluation of an an in-memory block of JavaScript code, see
    <a class="xquery" href="#xdmp:javascript-eval" xmlns="http://www.w3.org/1999/xhtml">xdmp:javascript-eval</a>
    <a class="javascript" href="#xdmp.eval" xmlns="http://www.w3.org/1999/xhtml">xdmp.eval</a>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:spawn("module.xqy", (),
        &lt;options xmlns="xdmp:eval"&gt;
          &lt;modules&gt;{xdmp:modules-database()}&lt;/modules&gt;
	  &lt;root&gt;http://example.com/application/&lt;/root&gt;
         &lt;/options&gt;)
	
  =&gt; Puts the module from the modules database with the
     URI http://example.com/application/module.xqy
     in the task server queue.</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp.spawn("module.xqy", null,
        {
          "modules" : xdmp.modulesDatabase(),
          "root" : "http://example.com/application/"
        })

  =&gt; Puts the module from the modules database with the
     URI http://example.com/application/module.xqy
     in the task server queue.</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml"><a id="spawnresultex"></a>
(:
   This example uses the &lt;result&gt; option to use the results of a
   spawned task in the query
:)  
let $x := xdmp:spawn("/oneplusone.xqy", (),
  &lt;options xmlns="xdmp:eval"&gt;
    &lt;result&gt;{fn:true()}&lt;/result&gt;
  &lt;/options&gt;
)
return
($x + 2)
(:
   if /oneplusone.xqy has the following body:

   1 + 1

   then this query returns 4
:)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml"><a id="spawnresultex"></a>
// This example uses the "result" option to use the results of a
// spawned task in the query

var x = xdmp.spawn("/oneplusone.sjs", null, {result: true})
// because xdmp.spawn returns a Sequence, 
// use fn.head to get the returned value
fn.head(x) + 2

// If  "/oneplusone.sjs" has following code: 
//    1 + 1 
// then this returns 4 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="spawn-function" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  Place the specified function value on the task queue for evaluation.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function() as item()*">
    A zero arity function value to execute.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
  The options node. The default value is (). The node must be in the
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:eval</code> namespace.  For detailed options information, see
  <a href="#xdmp:spawn" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:spawn</code></a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
    <p xmlns="http://www.w3.org/1999/xhtml">The <code>xdmp:spawn-function</code> function places the specified 
    function value in the task queue to be processed. The function will be 
    executed when the task server has the available resources to process it. 
    The tasks are processed in the order in which they are added to the 
    queue. </p>
    <p xmlns="http://www.w3.org/1999/xhtml">Once <code>xdmp:spawn-function</code> is called, it cannot be rolled 
    back, even if the transaction from which it is called does not complete.
    Therefore, use care calling <code>xdmp:spawn-function</code> from an update
    transaction.  Once a module is spawned, its evaluation is asynchronous
    of the transaction in which <code>xdmp:spawn-function</code> was called. 
    Consequently, if you call <code>xdmp:spawn-function</code> from a module,
    and if the module ends up retrying (for example, if a deadlock is detected), 
    then the entire module is re-evaluated and the <code>xdmp:spawn-function</code>
    call is therefore called again. For details on how transactions work in MarkLogic
    Server, see "Understanding Transactions in MarkLogic Server" in the 
    <em>Application Developer's Guide</em>.</p>
    <p xmlns="http://www.w3.org/1999/xhtml">If your function performs an update, then by default it will run
    in update transaction-mode, which runs as a multi-statement transaction.
    You must put an explicit <code>xdmp:commit()</code> with a 
    transaction mode of update (otherwise it will automatically roll back).  
    For implicit commits, specify a <code>transaction-mode</code> of 
    <code>update-auto-commit</code>.</p>
</apidoc:usage>
    <apidoc:privilege>
<p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-spawn</code></p>
</apidoc:privilege>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $message := "Hi!"
  return
    xdmp:spawn-function(function() { xdmp:sleep(1000), xdmp:log($message) })
	
  =&gt; Puts the inline function in the task server queue.
</pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
for $x in (1 to 10)
return
xdmp:spawn-function(function() {xdmp:document-insert(
  fn:concat("/doc", $x, ".xml"), &lt;foo&gt;{$x * 2}&lt;/foo&gt;)}, 
&lt;options xmlns="xdmp:eval"&gt;
  &lt;transaction-mode&gt;update-auto-commit&lt;/transaction-mode&gt;
&lt;/options&gt;)
(: 
   This example uses update-auto-commit for implicit commit.
   If you use &lt;transaction-mode&gt;update&lt;/transaction-mode&gt;
   (or if you do not specify an option, and then update
   is the default) then you must put an expicit xdmp:commit() 
   in your function as it is run as a multi-statement transaction,
   and will rollback without an expliit xdmp:commit().
:)

(: spawns functions to create the specified documents on the task server :) 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="spawn-in" type="builtin" lib="xdmp" category="Extension" subcategory="XQuery Context" class="xquery">
    <apidoc:summary>
  [DEPRECATED: use <a href="#xdmp:spawn" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:spawn</code></a> with the
  database option instead] Place the specified module on the task
  queue for evaluation.  It will be evaluated in the given database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The path, relative to the specified root, of the module to be executed.
  </apidoc:param>
      <apidoc:param name="ID" type="xs:unsignedLong">
    The database ID, from <code xmlns="http://www.w3.org/1999/xhtml">xdmp:database("db_name")</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">xdmp:security-database()</code>,
    or <code xmlns="http://www.w3.org/1999/xhtml">xdmp:schema-database()</code>.
  </apidoc:param>
      <apidoc:param name="vars" type="item()*" optional="true">
    The external variable values for this evaluation.
    This must be a sequence of even length, alternating QNames and items.
    Each QName and item pair specify a variable name and value.
  </apidoc:param>
      <apidoc:param name="modules" type="xs:unsignedLong?" optional="true">
    The modules database that contains the module to invoke.
    The empty sequence specifies the current modules database.
  </apidoc:param>
      <apidoc:param name="root" type="xs:string?" optional="true">
    The root path for modules.
    The empty sequence specifies the current root.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
    <p xmlns="http://www.w3.org/1999/xhtml">The <code>xdmp:spawn-in</code> function places the specified XQuery
    module in the task queue to be processed. The module will be evaluated
    when the task server has the available resources to process it. The tasks
    are processed in the order in which they are added to the queue. </p>
</apidoc:usage>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:spawn-in("example.xqy",
                324398742983742,
                (),
                xdmp:modules-database(),
                "http://example.com/application/")
  =&gt; ()
  Puts the module from the modules database with the
  URI http://example.com/application/module.xqy
  in the task server queue. The module will be
  executed in the context of the database with
  an ID of 324398742983742.
</pre></apidoc:example>
  </apidoc:function></apidoc:module>