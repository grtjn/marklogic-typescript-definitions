<apidoc:module name="ExcelModule" subcategory="Excel Conversion" 
  category="CPF Functions" bucket="XQuery Library Modules" 
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml" lib="excel" class="xquery"
>
<apidoc:summary access="public">
<p>The Excel module is part of the conversion processing pipeline.
These functions are used to manipulate XHTML derived by converting Microsoft
Excel spreadsheets, as part of conversion processing.
</p>
<p>To use the Excel module as part of your own XQuery module, include the
following line in your XQuery prolog:
</p>
<p><code>import module namespace excel = "http://marklogic.com/cpf/excel"
         at "/MarkLogic/conversion/excel.xqy";</code></p>
<p>You will need to ensure that the Excel module is loaded into the same modules
database as the importing module.</p>
<p>The library namespace prefix <code>excel</code> is <em>not</em> predefined in
the server.</p>
</apidoc:summary>

<apidoc:function name="clean" type="excel" lib="excel" 
	subcategory="Excel Conversion" category="CPF Functions" 
  bucket="XQuery Library Modules">
  <apidoc:summary>
  Clean up any conversion artifacts or other infelicities, putting each 
  sheet into its own div element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">
    The source URI of the converted spreadsheet.
    </apidoc:param>
    <apidoc:param name="doc" type="node()?">
    The XHTML produced by conversion of a Microsoft Excel spreadsheet.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> node()? </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace excel = "http://marklogic.com/cpf/excel" 
		  at "/MarkLogic/conversion/excel.xqy";

  excel:clean("my_xls.xhtml", fn:doc("my_xls.xhtml"))
  ]]></pre>
  </apidoc:example>
</apidoc:function>

</apidoc:module>
