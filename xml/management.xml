<apidoc:module name="Management" category="Management API" lib="manage" bucket="REST Resources API"
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc" xmlns="http://www.w3.org/1999/xhtml">
  <apidoc:summary category="Management API" bucket="REST Resources API">
    <p> The Management API is a REST-based API that allows you to administer MarkLogic Server and
      access MarkLogic Server instrumentation with no provisioning or set-up. You can use the API to
      perform administrative tasks such as initializing or extending a cluster; creating databases,
      forests, and App Servers; and managing tiered storage partitions. The API also provides the
      ability to easily capture detailed information on MarkLogic Server objects and processes, such
      as hosts, databases, forests, App Servers, groups, transactions, and requests from a wide
      variety of tools. </p><p> All of the resource addresses in the Management API require the
        <code>http://marklogic.com/xdmp/privileges/manage</code> privilege. Methods that modify
      configuration also require the privilege
        <code>http://marklogic.com/xdmp/privileges/manage-admin</code>. See the individual methods
      for detils. </p><p> If a request results in an error, the body of the response includes error
      details. The MIME type of error details is determined by the <code>format</code> request
      parameter (where supported), Accept header, or request Content-type header, in that order of
      precedence. For example, if a request supplies XML input (request Content-type set to
        <code>application/xml</code>), but specifies JSON output using the <code>format</code>
      parameter, then error details are returned as JSON. The default error detail MIME type is XML.
    </p><p>
      MarkLogic JSON serialization of <code>xs:unsignedLong</code> values may expose a JSON limitation 
      in how it handles large numbers. MarkLogic generates 'large' <code>xs:unsignedLong</code> numbers 
      for IDs in low level configs (for example, a forest id). The range that these numbers are 
      generated sometimes cross over from what JSON can handle to what it cannot handle. The result of
      this is that sometimes the number is represented as a number or as a string (when it is too big). 
      Code consuming these serialized JSON values must be aware of this possibility.  For more information
 on this, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/json.xml%2342239'>Serialization of Large Integer Values</a> in the <em>Application Developer's Guide</em>.
    </p>
  </apidoc:summary>
  <!-- ******************** clusters ******************** -->
  <apidoc:function name="/manage/v2/" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns summary information for the local cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>health</code>, <code>status</code>, 
          <code>metrics</code>, <code>query</code>, or
          <code>default</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" element-name="local-cluster-default"
      print-intro="false">
      <p>The structure of the data in the response for the default view is as
      follows:</p>/manage/v2/hosts </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/

  ==>  Returns summary information for the cluster.
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address restarts and upgrades the local cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="scope" type="string"> The scope of the upgrade.  Value is
      <code>native</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized)
      is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> 
    The cluster restart operation is: 
    <pre xml:space="preserve"><![CDATA[
      { "operation": "restart-local-cluster" }
     ]]></pre> 
    The cluster upgrade operation is: 
    <pre xml:space="preserve"><![CDATA[
     { "operation": "commit-upgrade-local-cluster" }
     ]]></pre>
    The security database upgrade operation is: 
    <pre xml:space="preserve"><![CDATA[
     { "operation": "security-database-upgrade-local-cluster" }
     ]]></pre>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[  
curl -v -X POST --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"operation": "restart-local-cluster"}' http://localhost:8002/manage/v2
     ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address modifies the properties of the local cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This parameter overrides the Accept
        header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the returned data. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. 
       </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. 
       </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No content). If the
      payload is malformed, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>

    <apidoc:usage schema="manage-cluster-local-properties.xsd" print-intro="false"
      element-name="cluster-local-properties"> 
        The modifiable cluster properties are as follows.<p>
        Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>bootstrap-hosts</code> is expressed in
        singular form. For example, in JSON, <code>bootstrap-hosts</code> is instead
          <code>bootstrap-host</code> and the format is as shown in the example below. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"bootstrap-host": [{
            "bootstrap-host-id": "3543728720765551570",
            "bootstrap-host-name": "localhost",
            "bootstrap-connect-port": 7998}]}' \
http://localhost:8002/manage/v2/properties

==>  Sets "localhost" to be the bootstrap host for the cluster.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2?view=query" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns the summary of all of the resources in the local
      cluster, or resources in the local cluster that match a query. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="name-match" type="string"> Return only those resources that contain the
        specified string. </apidoc:param>
      <apidoc:param name="page-start" type="string"> Return the resource results after the specified
        number of cluster resources. </apidoc:param>
      <apidoc:param name="page-length" type="string"> Return the specified number of cluster
        resources in a result window. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" element-name="cluster-query"> Use
        <code>page-start</code> and <code>page-length</code> to fetch resource information
      incrementally. These parameters refer to the index and quantity of resources returned. For
      example, if there are 20 resources and you want to fetch data on the 6th through 10th ones,
      set <code>page-start=6&amp;page-length=5</code>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/query?name-match=myData&page-length=5

==> Returns information about the first 5 resources with a name
    that include "myData". 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2?view=describe" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns a description of the methods
      available on this endpoint. 
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Allowed values:
        <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. 
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. 
        If the <code>format</code> parameter is present, it takes precedence over the Accept 
        header. 
      </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the 
        response body. Depending upon the value of the <code>format</code> parameter 
        or Accept header, one of <code>application/xml</code>, <code>application/json</code>, 
        or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage>
      The JSON output for this request minimally matches the OPENAPI specification. 
      For details, see <a href="http://swagger.io/specification">http://swagger.io.specification</a>.
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user username:password -i -H "Accept: application/xml" \
  http://localhost:8002/manage/v2?view=describe

==>  MarkLogic responds with output similar to the following. (The output has 
     been truncated in this example.)

HTTP/1.1 200 OK
Content-type: application/xml; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 571873
Connection: Keep-Alive
Keep-Alive: timeout=5

<describe xmlns="http://marklogic.com/manage/describe">
  <info>
    <title>REST Management API</title>
    <description>OpenAPI definition of the REST Management API.</description>
    <version>v2</version>
  </info>
  <host>localhost:8002</host>
  <schemes>
    <scheme>http</scheme>
  </schemes>
  <basePath>/manage/v2</basePath>
  <paths>
    <path uri="">
      <method type="get">
        <type>get</type>
        <tags>
          <tag>datetime</tag>
        </tags>
        <summary>GET Method</summary>
        <description/>
        <consumes/>
        <produces/>
        <parameters>
          <parameter>
            <name>fullrefs</name>
            <in>query</in>
            <description/>
            <required>false</required>
            <type>boolean</type>
          </parameter>
          ...
        </parameters>
        <responses>
          <response status="200">
            <description>retrieve resource</description>
            <schema ref="#/definitions/Resource"/>
          </response>
          <response status="default">
            <description>error</description>
            <schema ref="#/definitions/Error"/>
          </response>
        </responses>
      </method>
    </path>
    ...
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user username:password -i -H "Accept: application/json" \
  http://localhost:8002/manage/v2?view=describe

==>  MarkLogic responds with output similar to the following. (The output has 
     been truncated in this example.)

HTTP/1.1 200 OK
Content-type: application/json; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 307980
Connection: Keep-Alive
Keep-Alive: timeout=5

{"swagger":"2.0",
  "info":{
    "title":"REST Management API",
    "description":"OpenAPI definition of the REST Management API.",
    "version":"v2"
  },
  "host":"localhost:8002",
  "schemes":["http"],
  "basePath":"/manage/v2",
  "paths":{
    "":{
      "get":{
        "tags":["unsupported-versions"],
        "summary":"GET Method",
        "description":"",
        "consumes":[],
        "produces":[
          "application/xml",
          "application/json",
          "text/html"
        ],
        "parameters":[
          { "name":"fullrefs",
            "in":"query",
            "description":"",
            "required":false,
            "type":"boolean"
          },
          { "name":"view",
            "in":"query",
            "description":"",
            "required":false,
            "type":"string",
            "enum":["default"]
          },
          { "name":"format",
            "in":"query",
            "description":"",
            "required":false,
            "type":"string",
            "enum":["xml", "json", "html"]
          }
        ],
        "responses":{
          "200":{
            "description":"retrieve resource",
            "schema":{"$ref":"#/definitions/Resource"}},
            "default":{
              "description":"error",
              "schema":{"$ref":"#/definitions/Error"}
            }
          }
        },
      "options":{ ... },
      "head":{ ... },
    },
    ...
  }
  "definitions":{},
  "externalDocs":{
    "description":"MarkLogic documentation",
    "url":"http://docs.marklogic.com/REST/management"
  }
}
    ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary>This resource address returns a status summary for the local cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" element-name="local-cluster-status"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2?view=status

  ==>  Returns a status summary information for the local cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> Retrieve the current properties of the cluster. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/DBrep.xml%2317455'>Coupling the Master and Replica Clusters</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be
          <code>json</code> or <code>xml</code> (default). If present, the <code>format</code>
        parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. The only supported value is <code>application/x-www-form-urlencoded</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the data in
      the response body contains the requested information. </apidoc:response>
    <apidoc:usage schema="manage-cluster-local-properties.xsd"
      element-name="cluster-local-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/properties

  ==>  Returns the properties of the local cluster.  
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns a list of all of the foreign clusters coupled to
      the local cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>metrics</code>, or <code>default</code>. </apidoc:param>
      <apidoc:param name="cluster-role" type="string"> A view of the local cluster or foreign
        clusters. Can be either <code>all</code>, <code>local</code>, or <code>foreign</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" print-intro="false"
      element-name="cluster-default-list">
      <p>The structure of the data in the response for the default view is as follows. For details
        on the metrics view, see <code>GET /manage/v2/clusters?view=metrics</code>.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/clusters

  ==>  Returns a list of foreign clusters coupled to this cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address creates a foreign cluster. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/DBrep.xml%2317455'>Coupling the Master and Replica Clusters</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized)
      is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-cluster-foreign-properties.xsd" print-intro="false"
      element-name="cluster-foreign-properties"> The structure of the data in the request body is as
      follows. <p> If a foreign cluster was previously added, an attempt to recouple will be invoked
        and the following applies: <ul>
          <li><code>foreign-cluster-id</code> and <code>foreign-host-id</code> are required as they
            are foreign identifiers.</li>
          <li><code>foreign-protocol</code> is either <code>http</code> or <code>https</code>.</li>
          <li>A default value of <code>"ALL:!LOW:@STRENGTH"</code> is set when
              <code>xdqp-ssl-cipher</code> is undefined.</li>
        </ul>
      </p><p> Note: The properties described here are for XML payloads. In general they are the same
        for JSON, with the exception that, in JSON, <code>foreign-bootstrap-hosts</code> is
        expressed in singular form. For example, in JSON, <code>foreign-bootstrap-hosts</code> is
        instead <code>foreign-bootstrap-host</code> and the format is as shown in the example below.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
   #! /bin/bash
   # simple way to couple clusters 
        
   # you can add manageadmin user with manage-admin role with ./init.sh
     MANAGEADMIN="admin"
     MANAGEPASS="admin"
        
   # get properties from clusters

   CLUSTER1_PROPERTIES=`curl -X GET --anyauth --user $MANAGEADMIN:$MANAGEPASS \
   --header "Content-Type:application/json" http://localhost:8002/manage/v2/properties?format=json`

   CLUSTER2_PROPERTIES=`curl -X GET --anyauth --user $MANAGEADMIN:$MANAGEPASS \
   --header "Content-Type:application/json" http://127.0.0.2:8002/manage/v2/properties?format=json`
        
   # apply couple cluster operation on both clusters

   curl -X POST  --anyauth --user $MANAGEADMIN:$MANAGEPASS \
   --header "Content-Type:application/json" -d"$CLUSTER2_PROPERTIES" \
   http://localhost:8002/manage/v2/clusters?format=json

   curl -X POST  --anyauth --user $MANAGEADMIN:$MANAGEPASS \
   --header "Content-Type:application/json" -d"$CLUSTER1_PROPERTIES" \
   http://127.0.0.2:8002/manage/v2/clusters?format=json

  ==>  Couples the "localhost" cluster to the "127.0.0.2" cluster. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  cat newCluster.json
  ==>
  {
    "foreign-cluster-id": "12321312312312",
    "foreign-cluster-name": "127.0.0.2-cluster",
    "foreign-protocol": "http",
    "foreign-ssl-certificate": "",
    "xdqp-ssl-enabled": true,
    "xdqp-ssl-allow-sslv3": true,
    "xdqp-ssl-allow-tls": true,
    "xdqp-ssl-ciphers": "ALL:!LOW:@STRENGTH",
    "xdqp-timeout": 10,
    "host-timeout": 30,
    "foreign-bootstrap-host": [
      {
        "foreign-host-id": "123123123123",
        "foreign-host-name": "127.0.0.2",
        "foreign-connect-port": 7998
      },
      {
        "foreign-host-id": "123123123123",
        "foreign-host-name": "otherhost",
        "foreign-connect-port": 7998
      }
    ]
  }

  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d @newCluster.json http://localhost:8002/manage/v2/clusters

  ==>  Creates a foreign cluster, named "127.0.0.2-cluster."  
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use meters.xsd and cluster-metrics-list-->
  <apidoc:function name="/manage/v2/clusters?view=metrics" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> Retrieve historical monitoring data for the foreign clusters coupled to the
      local cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="cluster-role" type="string"> A view of the local cluster or foreign
        clusters. Can be either <code>all</code>, <code>local</code>, or <code>foreign</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="meters.xsd" element-name="cluster-metrics-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/clusters?view=metrics

==>  Returns historical monitoring data about foreign clusters 
     coupled to this cluster. 
    ]]></pre>VERSION </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns summary information for the specified foreign
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>status</code>, <code>query</code>, <code>metrics</code> or
          <code>default</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" print-intro="false"
      element-name="local-cluster-default">
      <p>You can address the local cluster at /manage/v2, without specifying the full
          <code>/manage/v2/clusters/{id|name}</code>. </p>
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/clusters/Replica

  ==>  Returns summary informaton for the foreign cluster named Replica. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}?view=config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters" hidden="true">
    <apidoc:summary> Retrieve configuration information for the named foreign cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" element-name="foreign-cluster-config"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/clusters/Replica?view=config

  ==>  Returns configuration informaton for the foreign cluster named Replica. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use meters.xsd and cluster-metrics-list-->
  <apidoc:function name="/manage/v2/clusters/{id|name}?view=metrics" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> Retrieve historical monitoring data for the specified foreign cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="meters.xsd" print-intro="false" element-name="cluster-metrics-list">
      <p>Address the local cluster at /manage/v2, without specifying the full
          <code>/manage/v2/clusters/{id|name}</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/clusters/Replica?view=metrics

  ==>  Returns historical monitoring data for the foreign cluster 
       named Replica. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns a status summary for the specified foreign
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" element-name="foreign-cluster-status">
      <p>Address the local cluster at /manage/v2, without specifying the full
          <code>/manage/v2/clusters/{id|name}</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/clusters/Replica?view=status

  ==>  Returns status informaton for the foreign cluster named Replica. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> Initiate a state change on the named cluster, such as a shutdown or restart. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="state" type="string"> The type of state change to initiate. Allowed
        values: <code>shutdown</code>, <code>restart</code>. Specify this parameter as form data in
        the POST body. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code>, or <code>xml</code> (default). This value overrides the Accept header
        if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. The only supported value is <code>application/x-www-form-urlencoded</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> MarkLogic Server returns status code 202 (Accepted). The response body
      includes a list of restarted hosts and their last start times. </apidoc:response>
    <apidoc:usage>
      <p> The POST body must contain the <code>state</code> parameter, as HTML form data. For
        example: <code>state=restart</code>. </p><p> You cannot initiate a state change on a foreign
        cluster. </p><p> You can address the local cluster at /manage/v2, without specifying the
        full <code>/manage/v2/clusters/{id|name}</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X POST --data "state=shutdown" \
   http://localhost:8002/manage/v2/clusters/123409234245

==> Initiate a shutdown of the local cluster using the cluster id.
    MarkLogic responds with output similar to the following. This output
    represents a 2-host cluster.
Content-type: application/xml
Server: MarkLogic
Content-Length: 160
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 202 Accepted
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 313
Connection: Keep-Alive
Keep-Alive: timeout=5

<shutdown xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-09-21T09:45:07.936648-07:00</last-startup>
  <last-startup host-id="11346873982344721834">
    2013-09-21T09:45:07.57723-07:00
  </last-startup>
  <message>Shutdown of cluster (17224434944267874968) initiated.</message>
</shutdown>

The following is the equivalent JSON output:

{ "shutdown": {
    "last-startup": [
      {
        "host-id": "13544732455686476949",
        "value": "2013-09-21T09:55:40.567285-07:00"
      },
      {
        "host-id": "11346873982344721834",
        "value": "2013-09-21T09:55:40.567285-07:00"
      }
    ],
    "link": {
      "kindref": "timestamp",
      "uriref": "/admin/v1/timestamp"
    },
    "message": "Check for new timestamp to verify host restart."
} }
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X POST --data "state=restart" \
   http://localhost:8002/manage/v2

==> Initiate a restart of the local cluster, using the /manage/v2 shorthand.
    Use the returned restart information and the timestamp service to
    determine when the restart is complete. The output below represents a
    2-host cluster.

Content-type: application/xml
Server: MarkLogic
Content-Length: 160
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 202 Accepted
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 383
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-09-21T09:44:49.498658-07:00
  </last-startup>
  <last-startup host-id="11346873982344721834">
    2013-09-21T09:44:49.434052-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>

The following is the equivalent JSON output:

{ "restart": {
    "last-startup": [
      {
        "host-id": "13544732455686476949",
        "value": "2013-09-21T09:55:40.567285-07:00"
      },
      {
        "host-id": "11346873982344721834",
        "value": "2013-09-21T09:55:40.567285-07:00"
      }
    ],
    "link": {
      "kindref": "timestamp",
      "uriref": "/admin/v1/timestamp"
    },
    "message": "Check for new timestamp to verify host restart."
} }
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X POST -i --data "state=restart" \
   -H "Accept: application/json" http://localhost:8002/manage/v2

==> Initiate a restart of the local cluster, using the /manage/v2 shorthand.
    Output is returned as JSON, due to the Accept header. The output below
    represents a 2-host cluster.

<apidoc:function name="/manage/v2/servers/{id|name}" http-verb="DELETE"
       	lib="manage" category="Management API" bucket="REST Resources API"
       	subcategory="App Servers">
  <apidoc:summary> 
  This resource address deletes the specified App Server from the specified group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="group-id" type="string">
     The id or name of the group to which the App Server belongs. This
     parameter is required.
    </apidoc:param>	  
    <apidoc:param name="format" type="string">
     The format of the posted data.  Can be either 
     <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides the
     Accept header if both are present.
    </apidoc:param>  
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
      The expected MIME type of the request body. If the <code>format?</code>
      parameter is present, it takes precedence over the Accept header.
    </apidoc:header>   
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns a status code 202 (Accepted) if
    the request causes a restart, or status code 204 (No Content)
    if the request does not cause a restart. When 202 is returned, the standard 
    <code>restart</code> payload body is also returned.
     If the payload is malformed or the group doesn't exist, 
     a status code of 400 (Bad Request) is returned.  A status code
     of 401 (Unauthorized) is returned if the user does not have the necessary 
     privileges.
  </apidoc:response>
  <apidoc:privilege>
    This operation requires the <code>manage-admin</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u $admin:$admin -H "Accept: application/json" \
http://localhost:8002/manage/v2/servers/myServer?group-id=Default&format=json

==>  Deletes the HTTP App Server, named "myServer," from the Default group. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address deletes the specified foreign cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 204 (No Content) returned. If the payload is
      malformed or the group doesn't exist, a status code of 400 (Bad Request) is returned. A status
      code of 401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u $admin:$admin -H "Content-Type: application/json" \
http://localhost:8002/manage/v2/clusters/127.0.0.2-cluster

==>  Deletes the foreign cluster named "127.0.0.2-cluster."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address returns the modifiable properties of the named foreign
      cluster. The foreign cluster can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This parameter overrides the Accept
        header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the returned data. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). A status code of
      401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>

    <apidoc:usage schema="manage-cluster-foreign-properties.xsd"
      element-name="cluster-foreign-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/clusters/127.0.0.2-cluster/properties

==> Returns the modifiable properties for the foreign cluster, "127.0.0.2-cluster."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/clusters/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Clusters">
    <apidoc:summary> This resource address modifies the properties of the named foreign cluster. Any
      change to a foreign bootstrap host will be treated as an attempt to recouple. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This parameter overrides the Accept
        header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the returned data. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No content). If the
      payload is malformed or the foreign cluster doesn't exist, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>

    <apidoc:usage schema="manage-cluster-foreign-properties.xsd" print-intro="false"
      element-name="cluster-foreign-properties"> The modifiable properties are as follows. <p> Note:
        The properties described here are for XML payloads. In general they are the same for JSON,
        with the exception that, in JSON, <code>foreign-bootstrap-hosts</code> is expressed in
        singular form. For example, in JSON, <code>foreign-bootstrap-hosts</code> is instead
          <code>foreign-bootstrap-host</code> and the format is:
          <code>"foreign-bootstrap-host":[{"foreign-host-id", "foreign-host-name",
          "foreign-connect-port"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"xdqp-ssl-allow-sslv3":false}' \
http://localhost:8002/manage/v2/clusters/127.0.0.2-cluster/properties

==>  Sets the "xdqp-ssl-allow-sslv3" property to false on the 
     foreign cluster, "127.0.0.2-cluster."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** forests ******************** -->
  <apidoc:function name="/manage/v2/forests" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> This resource address returns data about the forests in the cluster. The data
      returned depends on the <code>view</code>. If no <code>view</code> is specified, this request
      returns a summary of the forests in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code>, or <code>xml</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>counts</code>, <code>storage</code>, <code>metrics</code>,
          <code>default</code>, or <code>status</code>. </apidoc:param>
      <apidoc:param name="database-id" type="string"> Returns a summary of the forests for the
        specified database. The database can be identified either by id or name. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Returns a summary of the forests for the
        specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Returns a summary of the forests for the specified
        host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" print-intro="false" element-name="forest-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests

==>  Returns a summary of the forests in the cluster. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests?view=storage

==>  Returns a storage view of the forests in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use meters.xsd and forest-metrics-list -->
  <apidoc:function name="/manage/v2/forests?view=metrics" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Retrieve historical monitoring data about the forests in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code>, or <code>xml</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="meters.xsd" element-name="forest-metrics-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests?view=metrics

==>  Returns historical monitoring data about the forests in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> This resource address returns status information about the forests in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code>, or <code>xml</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="database-id" type="string"> Returns a summary of the forests for the
        specified database. The database can be identified either by id or name. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Returns a summary of the forests for the
        specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Returns a summary of the forests for the specified
        host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" element-name="forest-status-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests?view=status

==>  Returns a status summary of the forests in the cluster. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests?view=status&database-id=Documents

==>  Returns a status view of the forests in the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests?view=storage" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> This resource address returns storage information about the forests in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code>, or <code>xml</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="database-id" type="string"> Returns a summary of the forests for the
        specified database. The database can be identified either by id or name. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Returns a summary of the forests for the
        specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Returns a summary of the forests for the specified
        host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" element-name="forest-storage-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests?view=storage

==>  Returns a storage summary of the forests in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Create a new forest, including replicas if specified. If a database id or
      database is included, attach the new forest(s) to the database. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2336254'>Preliminary Configuration Procedures</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
        <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. 
      </apidoc:param>
      <apidoc:param name="wait-for-forest-to-mount" type="string?">
        Whether or not to wait for the new forest to mount before sending a response to
        this request. Allowed values: true (default) or false.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
        <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
        <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-Type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> A Management REST API reference you can use to
        retrieve status and other information about the newly created forest. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 201
      (Created). </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="forest-create">
      <p> The payload can specify either replica forests or failover hosts, but not both. If
        replicas are specified in the POST body, then replication is enabled by default. </p><p>
        Newly created forests are enabled by default. </p><p> Setting range boundaries for the
        forest in the POST body does not modify the configuration of the database to which the
        forest is attached. </p><p> The structure of the data in the POST body is shown below. You
        must include at least <code>forest-name</code> and <code>host</code>. If replicas are
        included, the configuration data for each replica must include at least
          <code>replica-name</code> and <code>host</code>. </p><p> Note: The properties described
        here are for XML payloads. In general they are the same for JSON, with the exception that,
        in JSON, <code>failover-hosts</code> and <code>forest-replicas</code> are expressed in
        singular form. For example, in JSON, <code>failover-hosts</code> is instead
          <code>failover-host</code> and the format is: <code>"failover-host":["hostname"]</code>.
      </p><p>
       The data in the POST body must be valid according to the schema type "forest-properties"
       in the "manage-forest-properties.xsd" schema. JSON payloads are internally converted to
       XML before validation.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat forest-create.xml
==> 
<forest-create xmlns="http://marklogic.com/manage">
  <forest-name>example-1</forest-name>
  <host>my-host</host>
</forest-create>

$  curl --anyauth --user user:password -X POST -d @./forest-create.xml \
     -i -H "Content-type: application/xml" \
     http://localhost:8002/manage/v2/forests

==> Create a forest named "example-1" on host "my-host". MarkLogic Server
    responds with output similar to the following. You can use the
    reference in the Location header to retrieve status and other 
    information about the new forest.

HTTP/1.1 201 Created
Location: /manage/v2/forests/2721944172534009539
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat forest-create.json
==> 
{
  "forest-name": "example-2",
  "host": "my-host",
  "database": "Documents"
}

$  curl --anyauth --user user:password -X POST -d @./forest-create.json \
     -i -H "Content-type: application/json" \
     http://localhost:8002/manage/v2/forests

==> Create a forest named "example-2" on host "my-host", and attach it
    to the Documents database. MarkLogic Server responds with headers 
    similar to the following. You can use the reference in the Location 
    header to retrieve status and other information about the new forest.

HTTP/1.1 201 Created
Location: /manage/v2/forests/2721944172534009539
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user admin:admin -X POST \
-d '{"forest-name": "Documents", "host": "host-1.marklogic.com", "database": "Master", \
"forest-replicas": {"forest-replica":[{"replica-name": "Documents-R", "host": "host-3.marklogic.com"}]}}' \
-i -H "Content-type: application/json" http://localhost:8002/manage/v2/forests

==> Creates a "Documents" forest on "host-1" with a "Documents-R" replica forest
    on "host-3."  Note that both hosts must be in the same cluster.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests" http-verb="PUT" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Perform an operation on one or more forests, such as combining multiple forests
      into a single new one, or migrating the data in the forests to a new data directory. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code>, or <code>xml</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-Type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> A Management REST API reference for
        /manage/v2/tickets that you can use to check on the status and outcome of the requested
        operation. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 202
      (Accepted) and ticket information you can use to check on the operation status. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="forest-combine">
      <p> The operation performed by the request is determined by the wrapper element name in XML or
        the value of the <code>operation</code> key in JSON. The following operations are supported:
          <code>forest-combine</code> and <code>forest-migrate</code>. </p><p> The operations
        performed by this request are asynchronous. If your request is accepted, MarkLogic Server
        returns ticket information that can be used with GET /manage/v2/tickets to check on the
        status and eventual outcome of your request. </p><p> The <code>forest-combine</code>
        operation combines multiple forests into one new forest. The source forests are required to
        be either all in "open" or "open-replica" state or all in "sync replicating" state. If a
        forest's state changes during the combine operation, an error may be thrown. If all source
        forests are in "open" or "open replica" state and are all attached to a database, the
        combined forest will be attached to the database and the source forests (or their masters)
        detached to the database. </p><p> For the <code>forest-combine</code> operation, you must
        include the list of forests to combine (<code>forest</code>), the destination forest name
          (<code>forest-name</code>), and the host of the destination forest (<code>host</code>). In
        JSON, define the operation by setting <code>operation</code> to "forest-combine". </p><p>
        The <code>forest-migrate</code> operation moves data in one or more forests to new data
        directories and optionally sets a new host for the destination. </p><p> For the
          <code>forest-migrate</code> operation, you must include the list of forests to migrate
          (<code>forest</code>) and the destination host. In JSON, define the operation by setting
          <code>operation</code> to "forest-migrate". </p><p> For both operations, you can
        optionally specify <code>data-directory</code>, <code>large-data-directory</code>,
          <code>fast-data-directory</code>, and options. For a list of options, see <code><a
            href="tieredstorage:forest-combine">tieredstorage:forest-combine</a></code> or <code><a
            href="tieredstorage:forest-migrate">tieredstorage:forest-migrate</a></code>. </p><p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2333216'>Common Forest and Partition Operations</a> in the <em>Administrator's Guide</em>.
        </p><p> The data in the request body for <code>forest-combine</code> has the following
        structure. The structure for <code>forest-migrate</code> is similar, except it does not
        include <code>forest-name</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$  cat forest-combine.xml
==> 
<forest-combine xmlns="http://marklogic.com/manage">
  <forests>
    <forest>example-1</forest>
    <forest>example-2</forest>
  </forests>
  <forest-name>new-forest</forest-name>
  <host>my-host</host>
</forest-combine>

$ cat forest-combine.json
==> 
{
  "operation": "forest-combine",
  "forest": [ "example-1", "example-2" ],
  "forest-name": "new-forest",
  "host": "my-host"
}

$  curl --anyauth --user user:password -X PUT -d @./forest-combine.xml \
     -i -H "Content-type: application/xml" \
     http://localhost:8002/manage/v2/forests

==> Combine forests example-1 and example-2 into a new forest named
    "new-forest" on my-host. MarkLogic Server responds with output
    similar to the following. This is an asynchronous operation. To
    check the status or outcome, use the reference in the Location header
    or the uriref.

HTTP/1.1 202 Accepted
Location: /manage/v2/tickets/6699732791380391489?view=process-status
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 218
Connection: Keep-Alive
Keep-Alive: timeout=5

<forest-combine>
  <link>
    <kindref>process-status</kindref>
    <uriref>/manage/v2/tickets/6699732791380391489?view=process-status</uriref>
  </link>
  <message>Monitor operation progress by viewing ticket</message>
</forest-combine>

$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
    http://localhost:8002/manage/v2/tickets/6699732791380391489?view=process-status

==> MarkLogic Server returns the status of this forest-combine operation.
    For details, see GET /manage/v2/tickets/{id}.

<ticket-process-status xmlns="http://marklogic.com/manage/tickets">
  <id>6699732791380391489</id>
  ...
  <status-properties>
    <status>completed</status>
    <start-time>2013-09-21T12:02:54.866173-07:00</start-time>
    <ticket-expiration>2013-09-28T12:02:54.866173-07:00</ticket-expiration>
    <database>App-Services</database>
    ...
    <time-consumed>PT41.128523S</time-consumed>
    <errors>0</errors>
    ...
  </status-properties>
  ...
</ticket-process-status>
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$  cat forest-migrate.xml
==> 
<forest-migrate xmlns="http://marklogic.com/manage">
  <forests>
    <forest>example-1</forest>
    <forest>example-2</forest>
  </forests>
  <host>my-host</host>
</forest-combine>

$ cat forest-migrate.json
==> 
{
  "operation": "forest-migrate",
  "forest": ["example-1", "example-2"],
  "host": "my-host"
}

$  curl --anyauth --user user:password -X PUT -d @./forest-migrate.xml \
     -i -H "Content-type: application/xml" \
     http://localhost:8002/manage/v2/forests

==> Migrate forests example-1 and example-2 to "my-host". MarkLogic
    Server responds with output similar to the following. This is 
    an asynchronous operation. To check the status or outcome, use the 
    reference in the Location header or the uriref.

HTTP/1.1 202 Accepted
Location: /manage/v2/tickets/6699732791380391489?view=process-status
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 218
Connection: Keep-Alive
Keep-Alive: timeout=5

<forest-migrate>
  <link>
    <kindref>process-status</kindref>
    <uriref>/manage/v2/tickets/6699732791380391489?view=process-status</uriref>
  </link>
  <message>Monitor operation progress by viewing ticket</message>
</forest-migrate>
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Initiate a state change on a forest, such as a merge, restart, or attach. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="state" type="string"> The type of state change to initiate. Allowed
        values: <code>clear</code>, <code>merge</code>, <code>restart</code>, <code>attach</code>,
          <code>detach</code>, <code>retire</code>, <code>employ</code>. Specify this parameter as
        form data in the POST body. </apidoc:param>
      <apidoc:param name="database" type="string"> A database name or database id. Include this
        parameter for operations that logically require a database, such as
          <code>state=attach</code>. Specify this parameter as form data in the POST body.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Content-Type" type="request"> The MIME type of the data in the request
        body. The only supported value is <code>application/x-www-form-urlencoded</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 200 (ok) or
      202 (Accepted). </apidoc:response>
    <apidoc:usage schema="manage-forest-properties.xsd" print-intro="false"
      element-name="forest-properties"> The structure of the data in the POST body is shown below.
        <p> Note: The properties described here are for XML payloads. In general they are the same
        for JSON, with the exception that, in JSON, <code>failover-hosts</code> and
          <code>forest-replicas</code> are expressed in singular form. For example, in JSON,
          <code>failover-hosts</code> is instead <code>failover-host</code> and the format is:
          <code>"failover-host":["hostname"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X POST -i \
    -d "state=attach" -d "database=Documents" \
    -H "Content-type: application/x-www-form-urlencoded" \
    http://localhost:8002/manage/v2/forests/example

==> The forest named example is attached to the Documents database.
    MarkLogic Server responds with headers similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Delete a forest. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="level" type="string"> The type of state change to initiate. Allowed
        values: <code>full</code>, <code>config-only</code>. A <code>config-only</code> deletion
        removes only the forest configuration; the data contained in the forest remains on disk. A
          <code>full</code> deletion removes both the forest configuration and the data. </apidoc:param>
      <apidoc:param name="replicas" type="string"> Determines how to process the replicas. Allowed
        values: <code>detach</code> to detach the replica but keep it. <code>delete</code> to detach
        and delete the replica. </apidoc:param>
    </apidoc:params>
    <apidoc:headers> </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/forests/example?level=full

==> The forest named "example" is deleted, along with all of the data 
    it contained. MarkLogic Server responds with headers similar to
    the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Retrieve information about a forest. The forest can be identified either by id
      or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This parameter is not meaningful with
          <code>view=edit</code>. This value overrides the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>default</code>, <code>counts</code>, <code>edit</code>, or <code>status</code>.
        Default: <code>default</code>. </apidoc:param>
      <apidoc:param name="property" type="string"> This parameter returns a specific count value
        when using <code>view=counts</code>. The value can be any first-level child element of the
          <code>count-properties</code> element. You can include multiple <code>property</code>
        parameters in this resource address. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> For the <code>edit</code> view, the redirect
        URI of the appropriate configuration page in the Admin Interface. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> For all views except <code>edit</code>, upon success, MarkLogic Server returns
      status code 200 (OK), and the response body contains the requested data. If
        <code>view=edit</code>, MarkLogic Server responds with status code 302 (Found) and the
      Location header contains a redirect to the appropriate page in the Admin Interface. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" print-intro="false" element-name="forest-default">
      <p>The counts view includes the stand count, document count, directory count, reindex
        refragment fragment count, reindex fragment count, and refragment document count.</p>
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests/Documents

==> Returns the default information on the Documents forest.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests/Documents?format=json

==> Returns information about the Documents forest, as JSON.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests/Documents?view=counts&property=document-count

==> Returns count information for the document-count property.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}?view=config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests" hidden="true">
    <apidoc:summary> Retrieve configuration information about the named forest. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" element-name="forest-config"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests/my-forest-1&view=config

==> Returns the configuration information on the forest named my-forest-1.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}?view=counts" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Retrieve count information about a forest. The forest can be identified either
      by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="property" type="string"> This parameter returns a specific count value.
        The value can be any first-level child element of the <code>count-properties</code> element.
        You can include multiple <code>property</code> parameters in this resource address.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" element-name="forest-counts">
      <p>The counts view includes the stand count, document count, directory count, reindex
        refragment fragment count, reindex fragment count, and refragment document count.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests/my-forest?view=counts&property=document-count

==> Returns count information for the document-count property of my-forest.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Retrieve status information about the named forest. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-forests.xsd" element-name="forest-status"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/forests/my-forest-1?view=status

==> Returns status information on the forest named my-forest-1.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Retrieve the current state of modifiable properties of the forest identified by
        <code>{id|name}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be
          <code>html</code>, <code>json</code> or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the data in
      the response body contains the requested information. </apidoc:response>
    <apidoc:usage schema="manage-forest-properties.xsd" element-name="forest-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
    -H "Accept: application/xml" \
    http://localhost:8002/manage/v2/forests/example/properties

==> Retrieve the state of the modifiable properties of the forest named 
    "example". MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 436
Connection: Keep-Alive
Keep-Alive: timeout=5

<forest-properties 
    xsi:schemaLocation="http://marklogic.com/manage manage.xsd" 
    xmlns="http://marklogic.com/manage" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <enabled>true</enabled>
  <updates-allowed>all</updates-allowed>
  <availability>online</availability>
  <rebalancer-enable>true</rebalancer-enable>
  <range/>
  <failover-enable>true</failover-enable>
  <failover-hosts/>
  <forest-replicas/>
</forest-properties>

The corresponding JSON output is similar to the following:
{
  "enabled": true,
  "updates-allowed": "all",
  "availability": "online",
  "rebalancer-enable": true,
  "range": null,
  "failover-enable": true,
  "failover-host": null,
  "forest-replica": null
}
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests">
    <apidoc:summary> Modify the configuration of the forest identified by <code>{id|name}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be
          <code>html</code>, <code>json</code> or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
        <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
        <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Supported values: <code>application/xml</code>, <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). </apidoc:response>
    <apidoc:usage schema="manage-forest-properties.xsd" print-intro="false"
      element-name="forest-properties">
      <p> Properties included in the payload replace the existing configuration of the same
        property, if any. All other properties remain unchanged. Replacement applies even where
        multiple property values are supported, such as replica forests. For example, if the request
        includes configuration for <code>forest-replicas</code>, all previously existing replica
        configuration is replaced. The operation is not additive. </p><p> Note: The properties
        described here are for XML payloads. In general they are the same for JSON, with the
        exception that, in JSON, <code>failover-hosts</code> and <code>forest-replicas</code> are
        expressed in singular form. For example, in JSON, <code>failover-hosts</code> is instead
        <code>failover-host</code> and the format is: <code>"failover-host":["hostname"]</code>.
        </p><p> Note that adding or removing a replica forest to/from a master forest will take the
        master forest offline. </p><p> The structure of the modifiable properties is as follows:
      </p><p>
       The following properties are immutable: <code>database</code>, <code>host</code>,
       <code>data-directory</code>, <code>large-data-directory</code>, and
       <code>fast-data-directory</code>.
      </p><p>
       If database replication is configured such that the <code>connect-forests-by-name</code>
       property is false, then forest-level replication can be changed with the
       <code>database-replication</code> properties of the forests. Specify
       foreign replicas on the replica forests and <code>foreign-master</code>
       on the master forest.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./forest-properties.xml
==> 
<forest-properties xmlns="http://marklogic.com/manage">
  <enabled>false</enabled>
</forest-properties>

$ cat ./forest-properties.json
==> 
{ "enabled": true }

$ curl --anyauth --user user:password -X PUT -d @./forest-properties.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/forests/example-1/properties

==> The enabled property of the forest named example-1 is set to false.
    All other properties are unchanged. MarkLogic Server responds with
    output similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/forests/{id|name}/{custom}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Forests" hidden="true">
    <apidoc:summary> This resource address returns some custom information for the specified forest,
      as implemented by a specific plugin. The forest can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
  </apidoc:function>
  <!-- ******************** databases ******************** -->
  <apidoc:function name="/manage/v2/databases" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address returns a summary of the databases in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be
          <code>schema</code>, <code>metrics</code>, <code>package</code>, or <code>default</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" print-intro="false"
      element-name="database-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases

  ==>  Returns a list of the databases in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address creates a new database in the cluster. For an example,
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2336254'>Preliminary Configuration Procedures</a> in the <em>Scripting Administrative Tasks Guide</em>. 
      <p>
      Note that creating a new database that contains sub-databases defines the newly
      created database as a super-database. 
      </p>
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      database already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-database-properties.xsd" print-intro="false"
      element-name="database-properties">
      <p>The structure of the data in the request body is as shown below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>forests</code>, <code>word-lexicons</code>,
          <code>merge-blackouts</code>, <code>days</code>, <code>database-backups</code>,
          <code>backup-days</code>, <code>fragment-roots</code>, <code>fragment-parents</code>,
          <code>element-word-query-throughs</code>, <code>phrase-throughs</code>,
          <code>phrase-arounds</code>, <code>range-element-indexes</code>,
          <code>range-element-attribute-indexes</code>, <code>element-word-lexicons</code>,
          <code>element-attribute-word-lexicons</code>, <code>path-namespaces</code>,
          <code>range-path-indexes</code>, <code>fields</code>, <code>field-paths</code>,
          <code>included-elements</code>, <code>excluded-elements</code>,
          <code>tokenizer-overrides</code>, <code>range-field-indexes</code>,
          <code>geospatial-element-indexes</code>, <code>geospatial-element-child-indexes</code>,
          <code>geospatial-element-pair-indexes</code>,
          <code>geospatial-element-attribute-pair-indexes</code>,
          <code>geospatial-path-indexes</code>, <code>default-rulesets</code>,
          <code>foreign-replicas</code>, and <code>database-reference</code> are expressed in
        singular form. For example, in JSON, <code>forests</code> is instead <code>forest</code> and
        the format is: <code>"forest":["forest-id"]</code>. </p> XML root element: <pre xml:space="preserve"><![CDATA[
        <http-server-properties xmlns="http://marklogic.com/manage">
     ]]></pre>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d '{"database-name":"MyNewDatabase"}' http://localhost:8002/manage/v2/databases

  ==>  Creates a database, named 'MyNewDatabase," in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use meters.xsd, database-metrics-list. -->
  <apidoc:function name="/manage/v2/databases?view=metrics" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> Retrieve historical monitoring data about the databases in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="meters.xsd" element-name="database-metrics-list"> </apidoc:usage>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases?view=metrics

  ==>  Returns historical monitoring data for the databases in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address returns information on the specified database. The
      database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>counts</code>, <code>edit</code>, <code>status</code>, <code>package</code>, or
          <code>default</code> (the default view). </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> For the <code>edit</code> view, the redirect
        URI of the appropriate configuration page in the Admin Interface. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> For all views except <code>edit</code>, upon success, MarkLogic Server returns
      status code 200 (OK), and the response body contains the requested data. If
        <code>view=edit</code>, MarkLogic Server responds with status code 302 (Found) and the
      Location header contains a redirect to the appropriate page in the Admin Interface. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" print-intro="false" element-name="database-default">
      <p>The <code>counts</code> returns count information for the forests attached to the specified
        database. The count information includes the document count, directory count, active
        fragment count, deleted fragment count, and nascent fragment count.</p>
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents

==> Returns information on the Documents database.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents?view=status

==> Returns status information on the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address can be used to clear the contents of the named database
      and to perform various configuration operations on the database. The database can be
      identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="overwrite-replicas" type="string"> This parameter is used when invoking
        the <code>add-foreign-replicas</code> operation and specifies whether to overwrite replicas
        with existing data. This is <code>false</code> by default, which specifies not to overwrite
        replicas with existing data. If <code>true</code>, then replicas with existing data are
        overwritten. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted). If the
      payload is malformed, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage>
      <p> The available database operations are summarized below. The details on each operation
        follow. <ul>
          <li><a href="#ClearDB">Clear Database</a></li>
          <li><a href="#BackupDB">Backup Database</a></li>
          <li><a href="#ValidateBackup">Validate Database Backup</a></li>
          <li><a href="#BackupStatus">Backup Status</a></li>
          <li><a href="#BackupCancel">Backup Cancel</a></li>
          <li><a href="#BackupPurge">Purge Old Backups</a></li>
          <li><a href="#RestoreDB">Restore Database</a></li>
          <li><a href="#RestoreValidate">Validate Database Restore</a></li>
          <li><a href="#RestoreStatus">Restore Status</a></li>
          <li><a href="#RestoreCancel">Cancel Database Restore</a></li>
          <li><a href="#MergeDB">Merge Database</a></li>
          <li><a href="#ReindexDB">Reindex Database</a></li>
          <li><a href="#DBdefaults">Set Database Defaults</a></li>
          <li><a href="#AddFR">Add Foreign Replica to Database Replication Configuration</a></li>
          <li><a href="#RemoveFR">Remove Foreign Replica from Database Replication
            Configuration</a></li>
          <li><a href="#AddFM">Add Foreign Master to Database Replication Configuration</a></li>
          <li><a href="#RemoveFM">Remove Foreign Master from Database Replication
            Configuration</a></li>
        </ul>
      </p><p>
        <a id="ClearDB"/><b>Clear Database</b>
        <p/> The following operation clears the database. </p><p>
        <pre xml:space="preserve"><![CDATA[
     {
       "operation": "clear-database"
     }
     ]]></pre>
      </p><p>
        <a id="BackupDB"/><b>Backup Database</b>
        <p/> The following operation initiates backup on database. The <code>operation</code> and
          <code>backup-dir</code> properties are required. The <code>incremental-dir</code>,
          <code>journal-archiving</code>, <code>journal-archive-path</code>, and
          <code>lag-limit</code> properties are optional. </p><p> If forests are specified, they
        must be forests attached to this database. If no forests are specified, then all forests
        attached to this database will be backed up. If <code>incremental</code> is true, then an
        incremental backup is performed, otherwise a full backup is performed. It is an error to
        specify <code>incremental-dir</code> if <code>incremental</code> is <code>false</code>.
        </p><p> If <code>include-replicas</code> is true, then any replica forests are backed up,
        otherwise they are not backed up. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "backup-database",
      "forest": [
        "a",
        "b",
        "c"
      ],
      "backup-dir": "/path",
      "incremental": true,
      "incremental-dir": "/path/i",
      "journal-archiving": true,
      "journal-archive-path": "/path/j",
      "include-replicas": "true",
      "lag-limit": 30,
      "password": "yourpassword"
    }
    ]]></pre>
      </p><p>
        <a id="ValidateBackup"/><b>Validate Database Backup</b>
        <p/> The following operation validates that the database can be backed up to the backup data
        directory. The <code>operation</code> and <code>backup-dir</code> properties are required.
        The <code>incremental-dir</code>, <code>journal-archiving</code>,
          <code>journal-archive-path</code>, and <code>lag-limit</code> properties are optional.
        </p><p> If forests are specified, they must be forests attached to this database. If no
        forests are specified, then all forests attached to this database will be validated for back
        up. If <code>incremental</code> is <code>true</code>, then an incremental backup is
        performed, otherwise a full backup is performed. It is an error to specify
          <code>incremental-dir</code> if <code>incremental</code> is <code>false</code>. If
          <code>include-replicas</code> is <code>true</code>, then replica forests are included in
        the validation, otherwise they are not included. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "backup-validate",
      "forest": [
        "a",
        "b",
        "c"
      ],
      "backup-dir": "/path",
      "incremental": true,
      "incremental-dir": "/path/i",
      "include-replicas": false,
      "journal-archiving": true,
      "journal-archive-path": "/path/j",
      "lag-limit": 30
    }
    ]]></pre>
      </p><p>
        <a id="BackupStatus"/><b>Backup Status</b>
        <p/> The following operation checks the status of the outstanding backup job with the
        specified backup job ID. The <code>operation</code> and <code>job-id</code> properties are
        required. The <code>host-id</code> property is optional. </p><p> The request body looks
        like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "backup-status",
      "job-id": "12345678910",
      "host-name": "my-host"
    }
    ]]></pre>
      </p><p> The response body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "job-id": "12345678910",
      "host-name": "my-host",
      "status": "in-progress"
    }   
    ]]></pre>
      </p><p>
        <a id="BackupCancel"/><b>Backup Cancel</b>
        <p/> The following operation cancels in-progress backup job with the specified backup job
        ID. The <code>operation</code> and <code>job-id</code> properties are required. </p><p> The
        request body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "backup-cancel",
      "job-id": "12345678910"
    }
    ]]></pre>
      </p><p> The response body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "job-id": "12345678910",
      "canceled": true
    }
    ]]></pre>
      </p><p>
        <a id="BackupPurge"/><b>Purge Old Backups</b>
        <p/> The following operation purges old backups from the specified directory. The
          <code>operation</code>, <code>backup-dir</code>, and <code>keep-num-backups</code>
        properties are required. The <code>backup-dir</code> property specifies the directory under
        which to look for backups. The <code>keep-num-backups</code> property specifies the maximum
        number of old backups to keep. </p><p> The request body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "backup-purge",
      "backup-dir": "/path/to/somewhere",
      "keep-num-backups": 3
    }
    ]]></pre>
      </p><p> The response body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "purged": true
    }
    ]]></pre>
      </p><p>
        <a id="RestoreDB"/><b>Restore Database</b>
        <p/> The following operation initiates an asynchronous restore of a database from the backup
        data directory. The <code>operation</code> and <code>backup-dir</code> properties are
        required. The <code>incremental</code>, <code>incremental-dir</code>,
          <code>journal-archiving</code>, <code>journal-archive-path</code>, and
          <code>restore-to-time</code> properties are optional. </p><p> If forests are specified,
        they must be forests attached to this database. If no forests are specified, then all
        forests attached to this database will be restored. If <code>incremental</code> is true,
        then an incremental restore is performed, otherwise a full restore is performed. It is an
        error to specify <code>incremental-dir</code> if <code>incremental</code> is
          <code>false</code>. </p><p> If <code>include-replicas</code> is true, then any replica
        forests are restored, otherwise they are not restored. </p><p> The request body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "restore-database",
      "forest": [
        "a",
        "b"
      ],
      "backup-dir": "/path",
      "incremental": true,
      "incremental-dir": "/path/i",
      "restore-to-time": "2014-03-14T15:00:00Z",
      "journal-archiving": true,
      "journal-archive-path": "/path/j",
      "include-replicas": "true",
      "password": "yourpassword"
    }
    ]]></pre>
      </p><p>
        <a id="RestoreValidate"/><b>Validate Database Restore</b>
        <p/> The following operation validates that the database can be restored from the backup
        data directory. The <code>operation</code> and <code>backup-dir</code> properties are
        required. The <code>incremental</code>, <code>incremental-dir</code>,
          <code>journal-archiving</code>, <code>journal-archive-path</code>, and
          <code>restore-to-time</code> properties are optional. </p><p> If forests are specified,
        they must be forests attached to this database. If no forests are specified, then all
        forests attached to this database will be validated for restore. If <code>incremental</code>
        is true, then an incremental restore is validated, otherwise a full restore is validated. It
        is an error to specify <code>incremental-dir</code> if <code>incremental</code> is
          <code>false</code>. </p><p> The request body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "restore-validate",
      "forest": [
        "a",
        "b",
        "c"
      ],
      "backup-dir": "/path",
      "incremental": true,
      "incremental-dir": "/path/i",
      "restore-to-time": "2014-03-14T15:00:00Z",
      "journal-archiving": true,
      "journal-archive-path": "/path/j",
      "password": "yourpassword" 
    }
    ]]></pre>
      </p><p> The response body is a summary of the restore set. </p><p>
        <a id="RestoreStatus"/><b>Restore Status</b>
        <p/> The following operation checks the status of the outstanding restore job with the
        specified restore job ID. The <code>operation</code> and <code>job-id</code> properties are
        required. The <code>host-id</code> property is optional. </p><p> The request body looks
        like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "restore-status",
      "job-id": "12345678910",
    }
    ]]></pre>
      </p><p> The response body is a description of the job status. </p><p>
        <a id="RestoreCancel"/><b>Cancel Database Restore</b>
        <p/> The following operation cancels in-progress restore job with the specified restore job
        ID. The <code>operation</code> and <code>job-id</code> properties are required. </p><p> The
        request body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "restore-cancel",
      "job-id": "12345678910"
    }
    ]]></pre>
      </p><p> The response body looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "job-id": "12345678910",
      "canceled": true
    }
    ]]></pre>
      </p><p>
        <a id="MergeDB"/><b>Merge Database</b>
        <p/> The following operation initiates a merge on the database. </p><p> The request body
        looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "merge-database",
    }
    ]]></pre>
      </p><p> There is no response body. Check the status view to find out if the merge is still in
        progress. </p><p>
        <a id="ReindexDB"/><b>Reindex Database</b>
        <p/> The following operation initiates a reindex on the database. </p><p> The request body
        looks like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "reindex-database",
    }
    ]]></pre>
      </p><p> There is no response body. Check the status view to find out if the indexing is still
        in progress. </p>
      <a id="DBdefaults"/><b>Set Database Defaults</b>
      <p/> The following operation sets the defaults on the database. <p> The request body looks
        like: </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "set-database-defaults",
    }
    ]]></pre>
      </p><p> There is no response body. </p>
      <a id="AddFR"/><b>Add Foreign Replica to Database Replication Configuration</b>
      <p/> The following operation adds a foreign replica to the database replication configuration
      for the database. The <code>overwrite-replica</code> property is <code>false</code> by
      default, which specifies not to overwrite replicas with existing data. If <code>true</code>,
      then replicas with existing data are overwritten. The <code>foreign-database-name</code>
      specifies the name of the foreign database to be used as the replica and
      <code>foreign-cluster-name</code> is the name of the foreign cluster that holds the replica
      database. For details on configuring database replication, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/database-replication/configuring.xml%2352262'>Configuring Database Replication</a> in the <em>Database Replication Guide</em>. For an example use
 of this operation, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/DBrep.xml%2324479'>Setting the Master and Replica Databases</a> in the <em>Scripting Administrative Tasks Guide</em>. <p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "add-foreign-replicas",
      "foreign-replica": [
        {
          "foreign-cluster-name": "localhost-cluster",
          "foreign-database-name": "Documents",
          "connect-forests-by-name": true,
          "lag-limit": 23,
	  "enabled": true,
	  "queue-size":10
        }
      ]
    }
    ]]></pre>
      </p>
      <a id="RemoveFR"/><b>Remove Foreign Replica from Database Replication Configuration</b>
      <p/> The following operation removes a foreign replica from the database replication
      configuration for the database. The <code>foreign-database-name</code> property contains the
      name of the foreign database. For details on configuring database replication, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/database-replication/configuring.xml%2352262'>Configuring Database Replication</a> in the <em>Database Replication Guide</em>. <p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "remove-foreign-replicas",
      "foreign-database-name": [
        "Documents"
      ]
    } 
    ]]></pre>
      </p>
      <a id="AddFM"/><b>Add Foreign Master to Database Replication Configuration</b>
      <p/> The following operation adds a foreign master to the database replication configuration
      for the database. The <code>foreign-database-name</code> is the name of the foreign database
      and <code>foreign-cluster-name</code> is the name of the foreign cluster that contains the
      foreign database. Specify <code>true</code> for <code>connect-forests-by-name</code> if the
      forest names are the same on the Master and Replica clusters, otherwise specify
      <code>false</code>. For details on configuring database replication, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/database-replication/configuring.xml%2352262'>Configuring Database Replication</a> in the <em>Database Replication Guide</em>. For an example use
 of this operation, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/DBrep.xml%2324479'>Setting the Master and Replica Databases</a> in the <em>Scripting Administrative Tasks Guide</em>. <p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "set-foreign-master",
      "foreign-master": {
        "foreign-cluster-name": "replica",
        "foreign-database-name": "Documents",
        "connect-forests-by-name": true
      }
    }
    ]]></pre>
      </p>
      <a id="RemoveFM"/><b>Remove Foreign Master from Database Replication Configuration</b>
      <p/> The following operation removes a foreign master from the database replication
      configuration for the database. For details on configuring database replication, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/database-replication/configuring.xml%2352262'>Configuring Database Replication</a> in the <em>Database Replication Guide</em>. <p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "remove-foreign-master",
    }  
    ]]></pre>
      </p>
    </apidoc:usage>
    <apidoc:privilege> All operations require the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"operation":"clear-database"}' http://localhost:8002/manage/v2/databases/MyNewDatabase

==>  Clears the contents of the "MyNewDatabase" database. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"operation": "remove-foreign-master"}' \
http://localhost:8002/manage/v2/databases/Documents

==>  Removes the Foreign Master from the "Documents" Database 
     Replication Configuration. 

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address deletes the named database from the cluster. The database
      can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest-delete" type="string"> Specifies to delete the forests attached to
        the database. If not unspecified, the forests won't be effected. If
          <code>configuration</code> is specified, the forest configuration will be removed but
        public forest data will remain. If <code>data</code> is specified, the forest configuration
        and data will be removed. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> For the <code>edit</code> view, the redirect
        URI of the appropriate configuration page in the Admin Interface. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 204 (No Content) is returned. A status code of
      401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/MyNewDatabase

==>  Deletes the "MyNewDatabase" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address returns the modifiable properties of the named database.
      The database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This parameter overrides the Accept
        header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the returned data. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). A status code of
      401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>

    <apidoc:usage schema="manage-database-properties.xsd" element-name="database-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/properties

==> Returns the modifiable properties for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address modifies the properties of the named database. The list
      of modifiable properties can be returned by the GET version of this endpoint. The database can
      be identified either by id or name. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2336254'>Preliminary Configuration Procedures</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This parameter overrides the Accept
        header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the returned data. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No content). If the
      payload is malformed or the group doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>

    <apidoc:usage schema="manage-database-properties.xsd" print-intro="false"
      element-name="database-properties">
        The modifiable database properties are listed below.
        <p>
        Database-level replication can be changed with the <code>database-replication</code> properties 
        of the database. Specify foreign-replica(s) on the replica database(s) and foreign-master on 
        the master database.
        </p><p>
        If a forest is specified in the <code>retired-forest</code> property, it will be marked as retired.
        </p><p>
        Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>forests</code>, <code>word-lexicons</code>,
          <code>merge-blackouts</code>, <code>days</code>, <code>database-backups</code>,
          <code>backup-days</code>, <code>fragment-roots</code>, <code>fragment-parents</code>,
          <code>element-word-query-throughs</code>, <code>phrase-throughs</code>,
          <code>phrase-arounds</code>, <code>range-element-indexes</code>,
          <code>range-element-attribute-indexes</code>, <code>element-word-lexicons</code>,
          <code>element-attribute-word-lexicons</code>, <code>path-namespaces</code>,
          <code>range-path-indexes</code>, <code>fields</code>, <code>field-paths</code>,
          <code>included-elements</code>, <code>excluded-elements</code>,
          <code>tokenizer-overrides</code>, <code>range-field-indexes</code>,
          <code>geospatial-element-indexes</code>, <code>geospatial-element-child-indexes</code>,
          <code>geospatial-element-pair-indexes</code>,
          <code>geospatial-element-attribute-pair-indexes</code>,
          <code>geospatial-path-indexes</code>, <code>default-rulesets</code>,
          <code>foreign-replicas</code>, and <code>database-reference</code> are expressed in
        singular form. For example, in JSON, <code>forests</code> is instead <code>forest</code> and
        the format is: <code>"forest":["forest-id"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"fast-element-phrase-searches":false}' \
http://localhost:8002/manage/v2/databases/Documents/properties

==>  Sets the "fast-element-phrase-searches" property to false on the Documents database. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{
"database-backup":[
    {"backup-id":"2889081595792328957", 
     "backup-enabled":true, 
     "backup-directory":"/home/backups/Documents",      
     "backup-type":"weekly", 
     "backup-period":1,
     "backup-day":["sunday"], 
     "backup-start-time":"00:00:00-08:00", 
     "backup-timestamp":"2015-12-22T11:01:25.081669-08:00", 
     "max-backups":2, 
     "backup-security-database":true, 
     "backup-schemas-database":true, 
     "backup-triggers-database":true, 
     "include-replicas":true, 
     "incremental-backup":false, 
     "journal-archiving":false, 
     "journal-archive-path":"", 
     "journal-archive-lag-limit":15}
 ]
}' \
http://localhost:8002/manage/v2/databases/Documents/properties

==>  Sets the Documents database to be backed up every week on
     Sunday at 12:00am.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}?view=config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases" hidden="true">
    <apidoc:summary> This resource address returns configuration information for the named database.
      The database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the returned data. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="database-config"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents?view=config

==> Returns configuration information on the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}?view=counts" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address returns the count information for forests attached to the
      named database. The database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="database-counts"> The count
      information includes the document count, directory count, active fragment count, deleted
      fragment count, and nascent fragment count. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents?view=counts

==> Returns counts information on the forests attached to the 
    Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas, after 7.0-1. -->
  <apidoc:function name="/manage/v2/databases/{id|name}?view=package" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address returns configuration details about the named database in
      a format suitable for use with the <code>/manage/v2/packages</code> interfaces. The database
      can be identifed either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> You can request a package view as HTML, XML, or JSON, but only the XML and JSON
      formats can be used as input to the <code>/manage/v2/packages</code> interfaces, such as
        <code>POST /manage/v2/packages/{pkgname}</code>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents?view=package

==> Returns the package representation of the Documents database
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases">
    <apidoc:summary> This resource address returns status information for the named database. The
      database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="database-status"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents?view=status

==> Returns status information on the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** flex rep ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the list of flexible replication configurations
      for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep

==> Returns the groups related to flexible replication for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/properties" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the inbound filter flexible replication
      properties for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-properties.xsd" element-name="flexrep-properties"> The
      modifiable database properties are as follows. The <code>alerting-uri</code> property is
      optional. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/properties

==> Returns the flexible replication properties for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/properties" http-verb="PUT"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address updates the inbound filter flexible replication
      properties for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-properties.xsd" print-intro="false"
      element-name="flexrep-properties"> The modifiable flexible replication configuration
      properties are as follows. The <code>alerting-uri</code> property is optional. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"inbound-filter-module": "myInFilter.xqy"}' \
http://localhost:8002/manage/v2/databases/Documents/flexrep/properties
 
==> Configures flexible replication for the Documents database to use the
    inbound filter, "myInFilter.xqy."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the list of flexible push replication
      configurations for the domains for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-config-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs

==> Returns flexible replication configuration for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs" http-verb="POST"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address creates a flexible push replication configuration, along
      with the indexes needed for CPF-based flexible replication on the specified database. For an
 example, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2321337'>Creating a Replication Configuration Element</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the request body. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      payload is malformed or the database doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-config-properties.xsd" print-intro="false"
      element-name="flexrep-config-properties"> The flexible push replication properties are as
      follows. The <code>domain-name</code> property specifies the replication domain for the
      documents to be replicated. The <code>alerting-uri</code> property is optional. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d '{"domain-name": "myDomain", "alerting-uri": "http://otherserver.org/doIt"}' \
http://localhost:8002/manage/v2/databases/Foo/flexrep/configs

==> Sets the domain name and alerting URI in the flexible replication 
    configuration for the Foo database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the flexible replication configuration for the
      specified domain on the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-config-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/FlexConfig

==> Returns the flexible replication configuration, named "FlexConfig," for 
    the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address deletes the named flexible replication configuration for
      the specified domain on the specified database. The database can be identified either by id or
      name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 200 (OK) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/FlexConfig

==>  Deletes the "FlexConfig" configuration from the "Documents" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the flexible replication configuration properties
      for the specified domain for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-config-properties.xsd"
      element-name="flexrep-config-properties"> The modifiable database properties are as follows.
      The <code>alerting-uri</code> property is optional. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myDomian/properties

==> Returns the flexible replication properties for the domain, "myDomian," for 
    the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address updates the flexible replication configuration properties
      for the specified domain for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-config-properties.xsd" print-intro="false"
      element-name="flexrep-config-properties"> The modifiable flexible replication configuration
      properties are as follows. The <code>alerting-uri</code> property is optional. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"domain-name": "New Replicated Content"}' \
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myDomian/properties
 
==> Sets the domain name in the flexible replication properties for 
    the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/pulls" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the flexible replication pull configurations for
      the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-pull-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/pulls

==> Returns the flexible replication pull configurations for 
    the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/pulls" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Flexible Replication">
    <apidoc:summary> This resource address creates a flexible replication pull configuration for the
      database. The specified database pulls replicated updates from the target database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created), and the
      response body contains the requested data. If the payload is malformed or the database doesn't
      exist, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is
      returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-pull-properties.xsd" print-intro="false"
      element-name="flexrep-pull-properties"> The request body can contain the following properties. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

cat flexrep-pull.json
==> 

   {
     "pull-name": "docs2go",
     "domain-id": "123123123123123",
     "target-id": "543525254542523",
     "enabled": true,
     "url": [
       "http://localhost:8011"
     ],
     "http-options": {
       "username": "admin",
       "password": "admin",
       "client-cert": "",
       "client-key": "",
       "client-pass-phrase": ""
       "credential-id":"1234567890"
     }
   }

curl -X POST --anyauth --user admin:admin \
--header "Content-Type:application/json" -d@flexrep-pull.json \
http://localhost:8002/manage/v2/databases/Documents/flexrep/pulls?format=json


==> Configures the Documents database to pull replicated updates from the
    target database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the specified flexible replication pull
      configuration for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-pull-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/pulls/MyPullRepConfig

==> Returns the flexible replication pull configuration, "MyPullRepConfig," for 
    the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address deletes the named flexible replication pull configuration
      for the database. The database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 200 (OK) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/FlexConfig

==>  Deletes the "FlexConfig" configuration from the "Documents" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the flexible replication pull configuration
      properties for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-pull-properties.xsd" element-name="flexrep-pull-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/pulls/myPullConfig/properties

==> Returns the flexible replication pull properties for the configuration, 
   "myPullConfig," for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address is used to update the <code>enabled</code> property to
      enable or disable pull flexible replication for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-pull-properties.xsd" print-intro="false"
      element-name="flexrep-pull-properties"> The flexible pull replication properties are as
      follows. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"enabled": false}' \
http://localhost:8002/manage/v2/databases/Documents/flexrep/pulls/myPullConfig/properties?format=json

==> Disables pull flexible replication for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the flexible replication targets for the
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-target-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/MyFlexConfig/targets

==> Returns the targets configured form the flexible replication configuration,
    "MyFlexConfig," for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets"
    http-verb="POST" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address creates a target for use by the flexible replication
      configuration for the named database. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2395413'>Creating a Replication Target</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created), and the
      response body contains the requested data. If the payload is malformed or the database doesn't
      exist, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is
      returned if the user does not have the necessary privileges. </apidoc:response>

    <apidoc:usage schema="manage-flexrep-target-properties.xsd" print-intro="false"
      element-name="flexrep-target-properties"> The request body should be in the following format.
      The <code>user</code> property is optional and defined only if the parent
        <code>flexrep-config</code> has defined an <code>alerting-uri</code>. <p> Note: The
        properties described here are for XML payloads. In general they are the same for JSON, with
        the exception that, in JSON, <code>urls</code> is expressed in singular form. For example,
        in JSON, <code>urls</code> is instead <code>url</code> and the format is as shown in the
        example below. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat flexrep-target.json
==> 

   {
     "target-name": "replica",
     "url": [
       "http://127.0.0.2:8090/"
     ],
     "retry-seconds-min": 60,
     "immediate-push": true,
     "retry-seconds-max": 300,
     "documents-per-batch": 10,
     "enabled": true,
     "replicate-cpf": false,
     "http-options": {
       "username": "admin",
       "password": "admin",
       "client-cert": "",
       "client-key": "",
       "client-pass-phrase": ""
       "credential-id":"1234567890"
     },
     "filter-module": "myfilter.xqy",
     "filter-option": [{"default-xquery-version":"1.0-ml"}],
     "user": ["Joe"]
   }

curl -X POST --anyauth --user admin:admin --header "Content-Type:application/json" \
-d@flexrep-target.json \
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myDomain/targets?format=json

==> Creates a flexible replication target, named "replica," for use by the 
    "myDomain" replication domain in the "Documents" database.
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the target configuration for the specified
      flexible replication configuration for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="flexrep-target-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myFlexConfig/targets/docs2go

==> Returns the configuration for the "docs2go" target in the flexible replication 
    configuration, "myFlexConfig," for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address deletes the configuration for the named target from the
      named flexible replication configuration for the database. The database can be identified
      either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 200 (OK) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myFlexConfig/targets/docs2go

==>  Deletes the configuration foth the "docs2go" target from the "myFlexConfig" 
     configuration from the "Documents" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address returns the properties for the specified target
      configuration in the specified flexible replication configuration for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-target-properties.xsd"
      element-name="flexrep-target-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myFlexConfig/targets/docs2go/properties

==> Returns the properties for the target, "docs2go," in the flexible replication
    configuration, "myFlexConfig," for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource address is used to set the properties for the target used by the
      flexible replication configuration for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-flexrep-target-properties.xsd" print-intro="false"
      element-name="flexrep-target-properties"> The request body can contain the properties listed
      below. <p> Note: The properties described here are for XML payloads. In general they are the
        same for JSON, with the exception that, in JSON, <code>urls</code> is expressed in singular
        form. For example, in JSON, <code>urls</code> is instead <code>url</code> and the format is:
          <code>"url":["target-URL"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"enabled": false}' \
http://localhost:8002/manage/v2/databases/Documents/flexrep/configs/myFlexConfig/targets/docs2go/properties

==> Disables the "docs2go" target for the flexible replication configuration,
    "myFlexConfig" on the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** rebalancer ******************** -->
  <!-- ************** partitions ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Database Rebalancer">
    <apidoc:summary> Retrieve a list of partitions in a database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body. Can be
        either <code>html</code>, <code>json</code>, or <code>xml</code>. Use this parameter to
        override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the list of partitions, in the requested format. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases/Documents/partitions

  ==>  Returns a list of the partitions in the database Documents. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Database Rebalancer">
    <apidoc:summary> Add a range or query partition to the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Can be
        either <code>json</code>, or <code>xml</code>. Use this parameter to override the
        Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Accepted values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> A reference to the newly created partition
        with which you can construct a URL for the resource that is usable in subsequent requests.
        For example, <code>/manage/v2/databases/your-db-id/partitions/your-partition-name</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 201 (Created). If the
      payload is malformed or the partition already exists, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="partition">
      <p> Before creating a range partition, you must first define the partition key and set the
        assignment policy of the database to 'range'. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2331779'>Configuring a Database with Range Partitions</a> in the <em>Administrator's Guide</em>. </p><p> The range
        partition configuration in the POST body must contain at least the
          <code>partition-name</code>, <code>lower-bound</code>, <code>upper-bound</code>,
          <code>forests-per-host</code>, and <code>host</code> elements or keys. For more details
        and a list of available options, see 
        <a href="tieredstorage:range-partition-create">tieredstorage:range-partition-create</a>. 
      </p>
      <p> Before creating a query partition, you must first set assignment policy for the database
        to 'query'. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2388313'>Configuring a Database with Query Partitions</a> in the <em>Administrator's Guide</em>. </p>
      <p> The query partition configuration in the POST body must contain
        at least the <code>partition-name</code>, <code>partition-number</code>,
          <code>forests-per-host</code>, and <code>host</code> elements or keys. For more details
        and a list of available options, see 
         <a href="tieredstorage:query-partition-create">tieredstorage:query-partition-create</a>. 
         </p><p> The structure of the data in the request body is as follows: </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
The following creates a range partition.

$ cat range-partition.xml
==> 
<partition xmlns="http://marklogic.com/manage">
  <partition-name>2011</partition-name>
  <lower-bound>2011-01-01</lower-bound>
  <upper-bound>2011-12-31</upper-bound>
  <forests-per-host>1</forests-per-host>
  <hosts>
     <host>host-1</host>
     <host>host-2</host>
  </hosts>
  <data-directory></data-directory>
  <large-data-directory></large-data-directory>
  <fast-data-directory></fast-data-directory>
  <options>
    <option>failover=none</option>
  </options>
</partition>

$ curl --anyauth --user user:password -X POST -d @./range-partition.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/databases/example-db/partitions

==> A new range partition named "2011" is created for example-db.
    Forests 2011-0001 and 2011-0002 are created, one on each
    named host. MarkLogic Server responds with headers similar to
    the following.

HTTP/1.1 201 Created
Cache-Control: no-cache
Expires: -1
Location: /manage/v2/databases/13475778675412262560/partitions/2011
Server: MarkLogic
Set-Cookie: SessionID=d647d71d2ffc55d6; path=/
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat range-partition.json
==> 
{
  "partition-name": "2012",
  "lower-bound": "2012-01-01",
  "upper-bound": "2012-12-31",
  "forests-per-host": 1,
  "host": [ "host-1", "host-2" ],
  "option": [ "failover=none" ]
}

$ curl --anyauth --user user:passowrd -X POST -d @./range-partition.json \
    -i -H "Content-type: application/json" 
    http://localhost:8002/manage/v2/databases/example-db/partitions

==> A new range partition named "2012" is created for example-db.
    Forests 2012-0001 and 2012-0002 are created, one on each
    named host. MarkLogic Server responds with headers similar to
    the following.

HTTP/1.1 201 Created
Cache-Control: no-cache
Expires: -1
Location: /manage/v2/databases/13475778675412262560/partitions/2012
Server: MarkLogic
Set-Cookie: SessionID=53f1ed9b18ed7196; path=/
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
The following creates a query partition.

curl -X POST --anyauth --user admin:admin -H "Content-type: application/json" \
-d '{
  "partition-name": "tier1",
  "partition-number": "1",
  "forests-per-host": 2,
  "host": [ "gordon-1.marklogic.com" ],
  "option": [ "failover=none" ]
}' \
http://gordon-1:8002/manage/v2/databases/db1/partitions

==> A new query partition, named "tier1", is created for db1.
    Forests tier1-0001 and tier1-0002 are created on host,
    "gordon-1.marklogic.com". 
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions/{name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Retrieve a partition summary that includes links to related resources, such as
      the containing database, member forests, assignment policy, and the partition configuration. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code>, or <code>xml</code>. Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the partition summary, in the requested format. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/example-db/partitions/2011

==>  Returns information about the partition 2011 in the database example-db. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions/{name}" http-verb="PUT"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Invoke an operation on a partition, such as resizing the partition or
      transferring or migrating the partition to a different database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Allowed
        values: <code>json</code>, or <code>xml</code>. Use this parameter to override the
        Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> The response depends on the requested operation. The synchronous transfer
      operation returns status code 200 (OK) upon success. The asynchronous resize and migrate
      operations return status code 202 (Accepted) and a response body that includes a link to the
      process status view for the affected resource. If the payload is malformed, a status code of
      400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="resize" print-intro="false">
      <p> The operation performed by the request is determined by the wrapper element name in XML or
        the value of the <code>operation</code> key in JSON. The following operations are supported:
          <code>resize</code>, <code>transfer</code>, and <code>migrate</code>. </p><p> For details
        on the operations, see <code><a href="tieredstorage:partition-resize"
            >tieredstorage:partition-resize</a></code>, <code><a
            href="tieredstorage:partition-migrate">tieredstorage:partition-migrate</a></code>,
            <code><a href="tieredstorage:partition-transfer"
          >tieredstorage:partition-transfer</a></code>, and 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2333216'>Common Forest and Partition Operations</a> in the <em>Administrator's Guide</em>. </p>
      <p> This method can be either synchronous or
        asynchronous, depending on the type of operation: Resize and migrate are asynchronous
        operations, transfer is a synchronous operation. </p><p> Asynchronous operations return
        status 202 (Accepted) and the response Location header contains a reference to a ticket you
        can use to check on the status and outcome of the operation using <code>GET
          /manage/v2/tickets/{tid}</code>. Synchronous operations return status 204 (No Content).
        </p><p> For the <code>transfer</code> operation, the input data structure contains a
          <code>destination-database</code>. For details, see the examples. Before transferring a
        range partition from one database to another, you must configure the destination database to
        have a matching range policy. </p><p> For the <code>migrate</code> operation, the request
        body must be a structure similar to that for <code>resize</code>, but omitting
          <code>forests-per-host</code>. You must include at least the <code>host</code> list. All
        other fields are optional, except that JSON input must include <code>operation</code>.
        </p><p> For the <code>resize</code> operation, the request body must have the following
        structure. You must include the <code>host</code> list and <code>forests-per-host</code>.
        All other fields are optional, except that JSON input must include <code>operation</code>.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
The following is the minimum configuration information needed
to resize a partition. You can also include data-directory, 
large-data-directory, fast-data-directory, and options.

$ cat partition-resize.xml
==> 
<resize xmlns="http://marklogic.com/manage">
  <forests-per-host>2</forests-per-host>
  <hosts>
    <host>host-1</host>
    <host>host-2</host>
  </hosts>
</resize>

The equivalent JSON configuration:
$ cat partition-resize.json
==> 
{
  "operation": "resize",
  "forests-per-host": 2,
  "host": [ "host-1", "host-2" ]
}

$ curl --anyauth --user user:password -X PUT -d @./partition-resize.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/databases/example-db/partitions/2011

==> The range partition named "2011" is resized such that it has 2 forests on
    each host. New forests are created as needed. Since the operation
    is asynchronous, MarkLogic Server responds with ticket information
    similar to the following:

HTTP/1.1 202 Accepted
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Location: /manage/v2/tickets/14991169073676404304?view=process-status
Server: MarkLogic
Content-Length: 246
Connection: Keep-Alive
Keep-Alive: timeout=5

<resize xmlns="http://marklogic.com/manage">
  <link>
    <kindref>process-status</kindref>
    <uriref>/manage/v2/tickets/14991169073676404304?view=process-status</uriref>
  </link>
  <message>Monitor operation progress by viewing ticket</message>
</resize>
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat partition-transfer.xml
==> 
<transfer xmlns="http://marklogic.com/manage">
  <destination-database>destination-db</destination-database>
</transfer>

$ cat partition-transfer.json
==> 
{
  "operation": "transfer",
  "destination-database": "destination-db"
}

$ curl --anyauth --user user:password -X PUT -d @./partition-transfer.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/databases/source-db/partitions/2011

==> The partition named "2011" is transferred from source-db to
    destination-db. New forests are created in destination-db. The
    forests in the partition in destination-db are detached from the
    database. This is a synchronous operation. MarkLogic Server responds 
    with headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
The following is the minimum configuration information needed
to resize a range partition. You can also include data-directory, 
large-data-directory, fast-data-directory, and options.

$ cat partition-migrate.xml
==> 
<migrate xmlns="http://marklogic.com/manage">
  <hosts>
    <host>dest-host-1</host>
    <host>dest-host-2</host>
  </hosts>
</migrate>

The equivalent JSON configuration:
$ cat partition-resize.json
==> 
{
  "operation": "migrate",
  "host": [ "dest-host-1", "dest-host-2" ]
}

$ curl --anyauth --user user:password -X PUT -d @./partition-migrate.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/databases/example-db/partitions/2011

==> The range partition named "2011" is migrated to the hosts dest-host-1
    and dest-host-2. This is an asynchronous operation. MarkLogic Server
    Server responds with ticket information similar to the following:

HTTP/1.1 202 Accepted
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Location: /manage/v2/tickets/14991169073676404304?view=process-status
Server: MarkLogic
Content-Length: 246
Connection: Keep-Alive
Keep-Alive: timeout=5

<migrate xmlns="http://marklogic.com/manage">
  <link>
    <kindref>process-status</kindref>
    <uriref>/manage/v2/tickets/14991169073676404304?view=process-status</uriref>
  </link>
  <message>Monitor operation progress by viewing ticket</message>
</migrate>
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions/{name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Delete the partition identified by <code>{name}</code> from the database
      identified by <code>{id|name}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="delete-data" type="string"> Whether or not to also delete the data in the
        partition. Default: false. When this parameter is false, the partition configuration is
        deleted but any data stored in the forests is preserved on disk. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> MarkLogic server returns status code 204 (No Content). </apidoc:response>
    <apidoc:usage> If <code>delete-data</code> is false, only configuration information is deleted.
      If <code>delete-data</code> is true, both configuration and the forest contents are deleted.
      For details, see <code><a href="admin:forest-delete">admin:forest-delete</a></code>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/databases/example-db/partitions/2011

==> The partition named 2011 is deleted. The data it contained remains.
    MarkLogic Server responds with headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions/{name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Retrieve the current configuration for the partition identified by
        <code>{name}</code> in the database identified by <code>{name|id}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be
          <code>html</code>, <code>json</code> or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. A status code of 401 (Unauthorized) is returned if
      the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/example-db/partitions/2012/properties

==>  Returns summary of the partition named 2012 in the database example-db. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partitions/{name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Modify the configuration of the partition identified by <code>{name}</code> in
      the database identified by <code>{id|name}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the requested data. Can be
          <code>html</code>, <code>json</code> or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="partition-properties">
      <p>You can set the property values as follows:</p>
      <ul>
        <li><code>availability</code>: Set the availability of the partion to either
            <code>online</code> or <code>offline</code>. For details, see <code><a
              href="tieredstorage:partition-set-availability"
              >tieredstorage:partition-set-availability</a></code>. </li>
        <li><code>updates-allowed</code>: Set the updates-allowed state for the partition to one of
          the following: <code>all</code>, <code>delete-only</code>, <code>read-only</code>,
            <code>flash-backup</code>. For details, see <a
            href="tieredstorage:partition-set-updates-allowed"
            >tieredstorage:partition-set-updates-allowed</a>. </li>
      </ul>
 <p>For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2333216'>Common Forest and Partition Operations</a> in the <em>Administrator's Guide</em>.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat partition-prop.xml
==> 
<partition-properties xmlns="http://marklogic.com/manage">
  <availability>online</availability>
  <updates-allowed>all</updates-allowed>
</partition-properties>

$ cat partition-prop.json
==> 
{
  "availability": "online",
  "updates-allowed": all"
}

$ curl --anyauth --user user:password -X PUT -d @./partition-prop.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/databases/example-db/partitions/2011/properties

==> Set the availability and updates-allowed properties of the partition
    named 2011 of the database example-db. MarkLogic Server responds
    with status code 204 (No Content) and headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** rebalancer ******************** -->
  <!-- ************** query partitions ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/query-partitions" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer" hidden="true">
    <apidoc:summary> Retrieve a list of query partitions in a database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body. Can be
        either <code>html</code>, <code>json</code>, or <code>xml</code>. Use this parameter to
        override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the list of query partitions, in the requested format. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases/Documents/query-partitions

  ==>  Returns a list of the query partitions in the database Documents. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/query-partitions" http-verb="POST"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer" hidden="true">
    <apidoc:summary> Add a query partition to the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Can be
        either <code>json</code>, or <code>xml</code>. Use this parameter to override the
        Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Accepted values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> A reference to the newly created partition
        with which you can construct a URL for the resource that is usable in subsequent requests.
        For example,
          <code>/manage/v2/databases/your-db-id/query-partitions/your-partition-name</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 201 (Created). </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="partition">
      <p> You must define the query assignment policy for the database before creating a partition.
        For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2388313'>Configuring a Database with Query Partitions</a> in the <em>Administrator's Guide</em>. </p>
      <p> The partition configuration in the POST body must contain at least the
          <code>partition-name</code>, <code>partition-number</code>, <code>forests-per-host</code>,
        and <code>host</code> elements or keys. For more details and a list of available options,
        see <a href="tieredstorage:query-partition-create"
        >tieredstorage:query-partition-create</a>. </p><p> The structure of the data in the request
        body is as follows: </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
The following configuration shows all possible fields.

curl -X POST --anyauth --user admin:admin -H "Content-type: application/json" \
-d '{
  "partition-name": "tier1",
  "partition-number": "1",
  "forests-per-host": 2,
  "host": [ "gordon-1.marklogic.com" ],
  "option": [ "failover=none" ]
}' \
http://gordon-1:8002/manage/v2/databases/db1/query-partitions

==> A new query partition, named "tier1", is created for db1.
    Forests tier1-0001 and tier1-0002 are created on host,
    "gordon-1.marklogic.com". 
 
    ]]></pre>
    </apidoc:example>

  </apidoc:function>
  <!-- ******************** partition query ******************** -->
  <!-- Wait and see if these endpoints are going to be folded into database properties -->
  <apidoc:function name="/manage/v2/databases/{id|name}/partition-queries" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Retrieve a list of partition queries in a database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body. Can be
        either <code>html</code>, <code>json</code>, or <code>xml</code>. Use this parameter to
        override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the list of partitions, in the requested format. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases/Documents/partition-queries

  ==>  Returns a list of the partition queries in the database Documents. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partition-queries" http-verb="POST"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Add a query to a query partition in the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Can be
        either <code>json</code>, or <code>xml</code>. Use this parameter to override the
        Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Accepted values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> A reference to the newly created partition
        with which you can construct a URL for the resource that is usable in subsequent requests.
        For example, <code>/manage/v2/databases/your-db-id/partitions/your-partition-name</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 201 (Created). If the
      payload is malformed or if the query already exists, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="partition">
      <p> For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2354907'>Setting the Query Assignment Policy for the Query Partition</a> in the <em>Administrator's Guide</em>. </p>
      <p> The structure of the data in the request body is as follows: </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth -u admin:admin -H "Content-Type:application/xml" \
-d '<partition-query-properties xmlns="http://marklogic.com/manage/partition-query/properties">
      <partition-number>2</partition-number>
        <query>
          <cts:or-query xmlns:cts="http://marklogic.com/cts">
            <cts:word-query>
               <cts:text xml:lang="en">Manager</cts:text>
            </cts:word-query>
            <cts:word-query>
               <cts:text xml:lang="en">Engineer</cts:text>
            </cts:word-query>
          </cts:or-query>
        </query>
    </partition-query-properties>' \
http://gordon-1:8002/manage/v2/databases/Schemas/partition-queries 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST --anyauth --user admin:admin -H "Content-type: application/json" \
-d '{
  "partition-number": "2",
  "query": {
    "queries": [{
      "or-query": {
        "queries": [
          {
            "term-query": {
              "text": ["Manager"]
            }
          },
          {
            "term-query": {
              "text": [ "Engineer" ]
            }
          }
        ]}
    }]
}}' \
http://gordon-1:8002/manage/v2/databases/Schemas/partition-queries
 
    ]]></pre>
    </apidoc:example>

  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partition-queries/{partition-number}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Retrieve the query assignment policy for a specific query partition. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code>, or <code>xml</code>. Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the partition summary, in the requested format. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/example-db/partition-queries/2

==>  Returns the query assignment policy for query partition 2 in 
     the database example-db. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/partition-queries/{partition-number}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Delete the query for the query partition identified by
        <code>{partition-number}</code> from the database identified by <code>{id|name}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code>, or <code>xml</code>. Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> MarkLogic server returns status code 204 (No Content). A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/databases/example-db/partition-queries/2

==> The query partition, number 2, is deleted. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/partition-queries/{partition-number}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Retrieve the current query assignment policy for the query partition identified
      by <code>{partition-number}</code> in the database identified by <code>{name|id}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be
          <code>html</code>, <code>json</code> or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. A status code of 401 (Unauthorized) is returned if
      the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="partition-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/example-db/partition-queries/2/properties

==>  Returns the query assignment policy for the query partition, number 2,
     in the database example-db. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/partition-queries/{partition-number}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Database Rebalancer">
    <apidoc:summary> Modify the query assignment policy for the query partition identified by
        <code>{partition-number}</code> in the database identified by <code>{id|name}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the requested data. Can be
          <code>html</code>, <code>json</code> or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK). If the payload is
      malformed, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized)
      is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="partition-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** rebalancer ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/rebalancer" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Database Rebalancer">
    <apidoc:summary> This resource address returns the current rebalancer configuration. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested in information as XML, JSON, or HTML, depending upon the
        <code>format</code> parameter or Accept header. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="database-rebalancer-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
    http://localhost:8002/manage/v2/databases/example-db/rebalancer

HTTP/1.1 200 OK
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 310
Connection: Keep-Alive
Keep-Alive: timeout=5

<database-rebalancer-properties 
    xsi:schemaLocation="http://marklogic.com/manage manage.xsd" 
    xmlns="http://marklogic.com/manage" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <rebalancer-enable>true</rebalancer-enable>
  <rebalancer-throttle>5</rebalancer-throttle>
</database-rebalancer-properties>
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
    http://localhost:8002/manage/v2/databases/example-db/rebalancer

HTTP/1.1 200 OK
Content-type: application/json
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 51
Connection: Keep-Alive
Keep-Alive: timeout=5

{ 
  "rebalancer-enable":true, 
  "rebalancer-throttle":5
}
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/rebalancer" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Database Rebalancer">
    <apidoc:summary> Update the rebalancer configuration for a database. </apidoc:summary>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Supported values: <code>application/xml</code>, <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false"
      element-name="database-rebalancer-properties">
      <p>You can modify the following configuration settings:</p>
      <ul>
        <li><code>rebalancer-enable</code>: Set to true or false to enable or disable the rebalancer
          on this database. For details, see <code><a href="admin:database-set-rebalancer-enable"
              >admin:database-set-rebalancer-enable</a></code>. </li>
        <li><code>rebalancer-throttle</code>: Set the rebalancer throttle to control the priority of
          performing rebalancing on the database. Higher numbers give rebalancing a higher priority
          and system resource allocation. For details, see <code><a
              href="admin:database-set-rebalancer-throttle"
              >admin:database-set-rebalancer-throttle</a></code>. </li>
      </ul>
      <p>You can include one or more properties in the input configuration. Properties not included
        are unchanged. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/database-rebalancing.xml%2398156'>Database Rebalancing</a> in the <em>Administrator's Guide</em>. </p>
      <p>The structure of the data in the request body is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat reb-config.xml
==> 
<database-rebalancer-properties xmlns="http://marklogic.com/manage" 
  <rebalancer-enable>true</rebalancer-enable>
  <rebalancer-throttle>5</rebalancer-throttle>
</database-rebalancer-properties>

$ cat reb-config.json
==> 
{ 
  "rebalancer-enable":true, 
  "rebalancer-throttle":5
}

$ curl --anyauth --user user:password -X PUT -d @./reb-config.xml \
    -i -H "Accept: application/xml" \
    http://localhost:8002/manage/v2/databases/example-db/rebalancer

==> The rebalancer configuration is modified. MarkLogic Server returns
    status code 204 (No Content) and headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/{custom}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Databases" hidden="true">
    <apidoc:summary> This resource address returns some custom information for the specified
      database, as implemented by a specific plugin. The database can be identified either by id or
      name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
  </apidoc:function>
  <!-- ******************** super- and sub-databases ******************** -->

  <!-- ******************** alerting ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/alert" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> List the alerts for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-default"> For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2386523'>Creating Alerting Applications</a> in the <em>Search Developer's Guide</em>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert

==>  Retrieve the list of alerts for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/configs" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Return a list of the alert configurations for the specified database. If you
      specify a specific alert using the <code>uri</code> or <code>name</code> parameter, then the
      configuration for that alert is returned. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to return the
        configuration. </apidoc:param>
      <apidoc:param name="name" type="string"> The name of the alert for which to return the
        configuration. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-configs-list"
      print-intro="false"> The following properties are returned for a list of alerts. </apidoc:usage>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-config-default"
      print-intro="false"> The following properties are returned for a specific alert configuration. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert/configs

==>  Retrieve the list of alerts for the Documents database. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert/configs?uri=my-alert-config

==>  Retrieve the alert configuration for the alert with the 
     'my-alert-config' URI for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/configs" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Delete the alert configuration specified by the manditory <code>uri</code>
      parameter from the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert. This parameter is required. </apidoc:param>
      <apidoc:param name="delete-triggers" type="string"> Specifies whether or not to delete the
        triggers associated with this alert. Specify <code>true</code> to delete the triggers or
          <code>false</code> to keep the triggers. The default is <code>false</code>. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). If the
      request malformed or the alert doesn't exist, a status code of 400 (Bad Request) is returned.
      A status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/databases/Documents/alert/configs?uri=my-alert-config

==> Deletes the alert configuration for the alert with the 
    'my-alert-config' URI from the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/configs" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> This resource address creates a new alert configuration. You can use the
        <code>uri</code> parameter and the <code>add-alert-triggers</code> operation to add the
      triggers specified in the alert configuration to an existing alert configuration. You can use
      the <code>uri</code> parameter and the <code>remove-alert-triggers</code> operation to remove
      the triggers from an existing alert configuration. New alert configurations are done on the
      content database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to add or remove
        triggers. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Allowed
        values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted). If the
      alert already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-config-properties.xsd" print-intro="false"
      element-name="alert-config-properties">
      <p>The structure of the data in a create alert request is as shown below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>triggers</code>, <code>domains</code>,
          <code>actions</code>, and <code>options</code> are expressed in singular form. </p>
    </apidoc:usage>
    <apidoc:usage schema="manage-databases.xsd" print-intro="false"
      element-name="add-alert-triggers-operation">
      <p>The structure of the data in an add-alert-triggers request is as shown below. This
        operation adds the triggers specified in the alert configuration.</p>
      <pre xml:space="preserve"><![CDATA[
	      {"operation": "add-alert-triggers"}
      ]]></pre>
      <p>The structure of the data in an remove-alert-triggers request is as shown below. This
        operation removes all triggers associated with the alert. </p>
      <pre xml:space="preserve"><![CDATA[
	      {"operation": "remove-alert-triggers"}
      ]]></pre>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d '{
  "uri": "my-alert-config",
  "name": "My Alerting App",
  "description": "Alerting config for my app",
  "trigger": [],
  "domain": [],
  "action": [],
  "option": []
   }' \
http://localhost:8002/manage/v2/databases/Documents/alert/configs

==>  Creates a new alert, named "My Alerting App," for the Documents
     database. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d '{"operation": "add-alert-triggers"}' \
http://localhost:8002/manage/v2/databases/Documents/alert/configs?uri=my-alert-config

==>  Adds a new trigger for the 'my-alert-config' alert to the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/configs/properties" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> This resource address returns the configuration properties of the alert
      specified by the manditory <code>uri</code> parameter from the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. If the payload is malformed, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-config-properties.xsd" element-name="alert-config-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET  --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/alert/configs/properties?uri=my-alert-config

==>  Returns the properties of the "my-alert-config" alert for the Documents
     database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/configs/properties" http-verb="PUT"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> This resource address updates the configuration properties of the alert
      specified by the manditory <code>uri</code> parameter from the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 202 (Accepted) if the
      request causes a restart, or status code 204 (No Content) if the request does not cause a
      restart. If the payload is malformed or the alert doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-config-properties.xsd" print-intro="false"
      element-name="alert-config-properties">
      <p>The properties that can be modified are listed below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>schemas</code>, <code>namespaces</code>,
          <code>using-namespaces</code>, <code>module-locations</code>, <code>events</code>,
          <code>audit-events</code>, and <code>audit-restrictions</code> are expressed in singular
        form. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{  
    "name": "New Name",
    "description": "New Description"
   }' \
http://localhost:8002/manage/v2/databases/Documents/alert/configs/properties?uri=my-alert-config

==>  Updates the "name" and "description" properties of the "my-alert-config" alert. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> List the alert actions for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to return the actions. </apidoc:param>
      <apidoc:param name="name" type="string"> The name of the alert for which to return the
        actions. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-action-default-list"> For
 details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2334775'>Actions to Execute When an Alert Fires</a> in the <em>Search Developer's Guide</em>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert/actions

==>  Retrieve the list of alert actions for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> This resource address creates a new alert action. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to create the action. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Allowed
        values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted). If the
      alert action already exists or if the payload is malformed, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-action-properties.xsd" print-intro="false"
      element-name="alert-action-properties">
      <p>The structure of the data in a create alert action request is as shown below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>options</code> is expressed in singular form.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d '{
  "name": "xdmp:log2",
  "description": "log to ErrorLog.txt1",
  "module": "/alert-action.xqy",
  "module-db": "Modules",
  "module-root": "/",
  "option": []
   }' \
http://localhost:8002/manage/v2/databases/Documents/alert/actions?uri=my-alert-config

==>  Creates a new alert action, named "xdmp:log2," for the "my-alert-config" 
     alert in the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Return the configuration for the specified alert action. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to return the action.
        This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-action-default"> For details,
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2334775'>Actions to Execute When an Alert Fires</a> in the <em>Search Developer's Guide</em>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2?uri=my-alert-config

==>  Retrieve the configuration of the alert action with the id, "xdmp:log2." 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Delete the named alert action configuration from the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert that defines the action. This
        parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). If the
      request malformed or the alert action doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2?uri=my-alert-config

==> Deletes the alert action from the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address returns the configuration properties of the named alert
      action. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert that uses this action. This
        parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. If the payload is malformed, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-action-properties.xsd" element-name="alert-action-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET  --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/properties?uri=my-alert-config

==>  Returns the properties of the "xdmp:log2" alert action for the Documents
     database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address updates the configuration properties of the specified
      alert action for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 200 (OK). If the payload
      is malformed or the alert action doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-action-properties.xsd" print-intro="false"
      element-name="alert-action-properties">
      <p>The properties that can be modified are listed below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>options</code> is expressed in singular form.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{  
    "description": "New Description"
   }' \
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/properties?uri=my-alert-config

==>  Updates the "description" property of the "xdmp:log2" alert action. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> Return a list of the alert rules for the specified alert action on the
      specified database. If you specify a specific alert using the <code>uri</code> or
        <code>name</code> parameter, then the alert rules for that alert are returned. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to return the rules. </apidoc:param>
      <apidoc:param name="name" type="string"> The name of the alert for which to return the rules. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. If the alert action doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-rule-default-list"
      print-intro="false"> The following properties are returned for a list of alerts. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/rules?uri=my-alert-config

==>  Retrieve the list of rules for the "xdmp:log2" alert action. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules"
    http-verb="POST" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address creates a new rule for the specified alert action. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to create the rule.
        This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Allowed
        values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted). If the
      alert already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-rule-properties.xsd" print-intro="false"
      element-name="alert-rule-properties">
      <p>The structure of the data in a create rule request is as shown below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that <code>options</code> is expressed in singular form. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d '{
  "name": "my-rule",
  "description": "log to ErrorLog.txt",
  "user-name": "manageadmin",
  "query": {
    "word-query": {
      "text": "Yorick"
    }
  },
  "action-name": "",
  "option": []
   }' \
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/rules?uri=my-alert-config

==>  Creates a new rule, named "my-rule", for the alert action, "xdmp:log2."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> Return the properties for the specified alert rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to return the rule.
        This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. If the alert rule doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="alert-rule-default"
      print-intro="false"> The following properties are returned for a rule. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/rules/my-rule?uri=my-alert-config

==>  Retrieve the rule, "my-rule," for the "xdmp:log2" alert action. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> Delete the named alert rule for the specified action and database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert that defines the action. This
        parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). If the
      request malformed or the rule doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/rules/my-rule?uri=my-alert-config

==> Deletes the alert rule, "my-rule," from the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address returns the configuration properties of the named alert
      rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert that uses this rule. This
        parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. If the rule does not exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-rule-properties.xsd" element-name="alert-rule-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET  --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/rules/my-rule/properties?uri=my-alert-config

==>  Returns the properties of the "my-rule" alert rule for the "xdmp:log2" action 
     for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address updates the configuration properties of the specified
      alert rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 200 (OK). If the payload
      is malformed or the alert rule doesn't exist, a status code of 400 (Bad Request) is returned.
      A status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-alert-rule-properties.xsd" print-intro="false"
      element-name="alert-rule-properties">
      <p>The properties that can be modified are listed below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>options</code> is expressed in singular form.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{  
    "description": "New Description"
   }' \
http://localhost:8002/manage/v2/databases/Documents/alert/actions/xdmp:log2/rules/my-rule/properties?uri=my-alert-config

==>  Updates the "description" properties of the "my-rule" alert rule. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/triggers" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Return a list of the alert triggers for the specified database. If you specify
      a specific alert using the <code>uri</code> or <code>name</code> parameter, then the list of
      triggers for that alert is returned. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the alert for which to return the triggers. </apidoc:param>
      <apidoc:param name="name" type="string"> The name of the alert for which to return the
        triggers. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. If the alert doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="trigger-default-list"
      print-intro="false"> The following properties are returned for a list of triggers. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/triggers

==>  Retrieve the list of triggers for the Documents database. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/myTriggers/triggers?uri=my-alert-config

==>  Retrieve the triggers for the alert with the 'my-alert-config' URI 
     for the myTriggers database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/triggers" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> This resource address creates a new trigger. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Allowed
        values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the trigger
      already exists or if the payload is malformed, a status code of 400 (Bad Request) is returned.
      A status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-trigger-properties.xsd" print-intro="false"
      element-name="trigger-properties">
      <p>The structure of the data in a create trigger request is as shown below.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d '{
  "name": "my-trigger",
  "description": "my trigger",
  "event": {
    "data-event": {
      "directory-scope": {
        "uri": "/myDir/",
        "depth": "1"
      },
      "document-content": {
        "update-kind": "create"
      },
      "when": "post-commit"
    }
  },
  "module": "/test.xqy",
  "module-db": "Modules",
  "module-root": "/modules/",
  "enabled": true,
  "recursive": true,
  "task-priority": "normal"
   }' \
http://localhost:8002/manage/v2/databases/myTriggers/triggers

==>  Creates a new tigger, named "my-trigger," for the myTriggers
     database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/triggers/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Return the configuration for the specified alert trigger. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. If the trigger does not exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="trigger-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/myTriggers/triggers/my-trigger

==>  Retrieve the configuration of the alert trigger, "my-trigger."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/triggers/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Alerting">
    <apidoc:summary> Delete the named alert trigger for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). If the
      trigger doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8002/manage/v2/databases/myTriggers/triggers/my-trigger

==> Deletes the alert trigger, "my-trigger," from the myTriggers database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/triggers/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address returns the configuration properties of the named alert
      trigger. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. If the trigger does not exist, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-trigger-properties.xsd" element-name="trigger-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET  --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/myTriggers/triggers/my-trigger/properties

==>  Returns the properties of the "my-trigger" trigger for the myTriggers
     database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/triggers/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Alerting">
    <apidoc:summary> This resource address updates the configuration properties of the specified
      alert trigger for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 200 (OK). If the payload
      is malformed or the trigger doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-trigger-properties.xsd" print-intro="false"
      element-name="trigger-properties">
      <p>The properties that can be modified are listed below.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{  
    "description": "New Description"
   }' \
http://localhost:8002/manage/v2/databases/myTriggers/triggers/my-trigger/properties

==>  Updates the "description" of the "my-trigger" alert trigger. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** hosts ******************** -->
  <apidoc:function name="/manage/v2/hosts" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> Retrieve information about the hosts in a cluster. The data returned depends on
      the <code>view</code> parameter setting. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the hosts in the
        specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>status</code>, <code>metrics</code>, or <code>default</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. </apidoc:response>
    <apidoc:usage schema="manage-hosts.xsd" print-intro="false" element-name="host-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/hosts

  ==>  Returns a summary of the hosts in the cluster. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/hosts?view=status

  ==>  Returns a status summary of the hosts in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> This resource address is used to define a bootstrap host. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the host
      exists or if the payload is malformed, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="host-properties">
      <p>The structure of the data in the request payload is as follows. Set
          <code>bootstrap-host</code> to <code>true</code> if it is to serve as the bootstrap host
        for the cluster; otherwise set to <code>false</code>. For details on the bootstrap host, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/database-replication/dbrep_intro.xml%2371050'>Database Replication in MarkLogic Server</a> in the <em>Database Replication Guide</em>.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat myHost.json
==> 

{
  "host-name": "hostname1",
  "group": "",
  "bind-port": 8090,
  "foreign-bind-port": 9091,
  "zone": "",
  "bootstrap-host": true
}

curl -X POST --digest -u admin:admin -H "Content-type: application/json" \
-d @myHost.json http://localhost:8002/manage/v2/hosts 

==>  Defines the host, named "hostname1," as the bootstrap host in 
     the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> Retrieve status information about the hosts in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Restrict results to the hosts in the specified
        group. The group can be identified either by id or name. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. </apidoc:response>
    <apidoc:usage schema="manage-hosts.xsd" element-name="host-status-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/hosts?view=status

  ==>  Returns a status summary of the hosts in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use meters.xsd, host-metrics-list. -->
  <apidoc:function name="/manage/v2/hosts?view=metrics" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> Retrieve historical monitoring data about the hosts in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the hosts in the
        specified group. The group can be identified either by id or name. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. </apidoc:response>
    <apidoc:usage schema="meters.xsd" element-name="host-metrics-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/hosts?view=metrics

  ==>  Returns historical monitoring data for the hosts in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> This resource address returns information on a specific host. The host can be
      identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>counts</code>, <code>edit</code>, <code>status</code>, or <code>default</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> For the <code>edit</code> view, the redirect
        URI of the appropriate configuration page in the Admin Interface. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> For all views except <code>edit</code>, upon success, MarkLogic Server returns
      status code 200 (OK), and the response body contains the requested data. If
        <code>view=edit</code>, MarkLogic Server responds with status code 302 (Found) and the
      Location header contains a redirect to the appropriate page in the Admin Interface. </apidoc:response>
    <apidoc:usage schema="manage-hosts.xsd" print-intro="false" element-name="host-default">
      <p>When <code>view=counts</code>, the count information includes the document count, directory
        count, active fragment count, deleted fragment count, and nascent fragment count.</p>
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/hosts/myhost

==> Returns information on the 'myhost' host.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/hosts/myhost?format=json

==> Returns information on the 'myhost' host, as JSON.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/hosts/myhost?view=edit

==> Returns a redirect to the Admin Interface configuration page
    for the 'myhost' host.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts/{id|name}?view=config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> This resource address returns configuration information on a specific host. The
      host can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>status</code>, <code>metrics</code>, or <code>default</code>. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-hosts.xsd" element-name="host-config"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/hosts/myhost?view=config&format=json

==> Returns configuration information on the 'myhost' host, as JSON.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts/{id|name}?view=counts" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> This resource address returns counts information on a specific host. The host
      can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-hosts.xsd" element-name="host-counts"> The count information
      includes the document count, directory count, active fragment count, deleted fragment count,
      and nascent fragment count. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/hosts/myhost?view=counts

==> Returns counts information on the 'myhost' host.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts/{id|name}?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> This resource address returns status information on a specific host. The host
      can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-hosts.xsd" element-name="host-status" print-intro="false"> The
      possible fields in the output are shown below. In general, all the fields are optional.
      Any field might be missing from the result set if it does not have a value. 
      <p>A valid license key is required to use the reverse index and the REST API features. 
      This license is included as part of the base server license for many, but not all, MarkLogic licenses. 
      Verify the licensed features for your license in Host Status in the Admin GUI.
      </p>
</apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/hosts/myhost?view=status

==> Returns status information on the 'myhost' host.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts/{id|name}" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> Initiate a state change on a host, such as a shutdown or restart. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="state" type="string"> The type of state change to initiate. Allowed
        values: <code>shutdown</code>, <code>restart</code>. This parameter must be specified as
        form data in the POST body. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code>, or <code>xml</code> (default). This value overrides the Accept header
        if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. The only supported value is <code>application/x-www-form-urlencoded</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the requested operation causes a restart, a
        reference to the timestamp service is returned in the Location header. Use this reference to
        test for successful completion of the restart. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> MarkLogic Server returns status code 202 (Accepted). The response body
      includes the last start time. If the operation is asynchronous, a reference to the timestamp
      service is included in the Location header and the response data. Use it to confirm successful
      completion. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="host-properties"> The data
      in the request body is shown below. <p> Restart is an asynchronous operation. You can use the
        timestamp reference returned in the Location header and the response body to test for
        successful completion of the restart. For details, see GET /admin/v1/timestamp. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user password:password -X POST -i --data "state=restart" \
    -H "Content-type: application/x-www-form-urlencoded" \
    http://localhost:8002/manage/v2/hosts/my-host

==> MarkLogic Server is restarted on the host my-host. MarkLogic Server
    returns output similar to the following. Use the timestamp reference 
    in the Location header or the response body to check on the status.

HTTP/1.1 202 Accepted
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 291
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-09-21T09:55:40.929792-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>

The following is the equivalent JSON response data:

{ "restart": {
  "last-startup": {
    "host-id":"13544732455686476949", 
    "value":"2013-09-23T09:16:32.897234-07:00"
  }, 
  "link":{
    "kindref":"timestamp", 
    "uriref":"\/admin\/v1\/timestamp"
  }, 
  "message":"Check for new timestamp to verify host restart."
}}
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X POST -i --data "state=shutdown" \
    -H "Content-type: application/x-www-form-urlencoded" \
    http://localhost:8002/manage/v2/hosts/my-host?format=JSON

==> MarkLogic Server is shut down on the host my-host. MarkLogic Server
    returns output similar to the following. 

HTTP/1.1 202 Accepted
Content-type: application/json
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 148
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "shutdown": {
  "last-startup":"2013-09-23T09:10:22.375938-07:00", 
  "message":"Shutdown of host my-host (13544732455686476949) initiated."
}}
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME no annotations on the properties -->
  <apidoc:function name="/manage/v2/hosts/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> This resource address returns the current state of modifiable properties of the
      specified host. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). If present, the <code>format</code>
        parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. A status code of 401 (Unauthorized) is returned if
      the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" element-name="host-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
    http://localhost:8002/manage/v2/hosts/my-host/properties

HTTP/1.1 200 OK
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 356
Connection: Keep-Alive
Keep-Alive: timeout=5

<host-properties 
    xsi:schemaLocation="http://marklogic.com/manage manage.xsd" 
    xmlns="http://marklogic.com/manage" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <host-name>my-host</host-name>
  <group>16709278353323551294</group>
  <bind-port>7999</bind-port>
  <foreign-bind-port>7998</foreign-bind-port>
  <zone/>
</host-properties>

The equivalent JSON output is shown below:

{
  "host-name": "my-host", 
  "group": "16709278353323551294", 
  "bind-port": 7999, 
  "foreign-bind-port": 7998, 
  "zone":""
}
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME no annotations on the properties -->
  <apidoc:function name="/manage/v2/hosts/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts">
    <apidoc:summary> Initiate a properties change on the specified host. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Can be
          <code>json</code> or <code>xml</code>. If present, the <code>format</code> parameter
        overrides the request Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 204 (No Content). If the
      payload is malformed or the host doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage.xsd" print-intro="false" element-name="host-properties">
      <p> The data in the request body can contain one or more properties to modify. Set
          <code>bootstrap-host</code> to <code>true</code> if it is to serve as the bootstrap host
        for the cluster; otherwise set to <code>false</code>. For details on the bootstrap host, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/database-replication/dbrep_intro.xml%2371050'>Database Replication in MarkLogic Server</a> in the <em>Database Replication Guide</em>.
        </p><p> The data in the request body has the following structure: </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat host-prop.xml
==> 
<host-properties xmlns="http://marklogic.com/manage">
  <zone>my-new-zone</zone>
</host-properties>

$ curl --anyauth --user user:password -X PUT -d @./host-prop.xml \
    -i -H "Content-type: application/xml" \
    http://localhost:8002/manage/v2/hosts/my-host/properties

==> The zone property of host my-host is modified. MarkLogic Server
    returns headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat host-prop.json
==> 
{ "zone":"my-new-zone" }

$ curl --anyauth --user user:password -X PUT -d @./host-prop.json \
    -i -H "Content-type: application/json" \
    http://localhost:8002/manage/v2/hosts/my-host/properties

==> The zone property of host my-host is modified. MarkLogic Server
    returns headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/hosts/{id|name}/{custom}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Hosts" hidden="true">
    <apidoc:summary> This resource address returns some custom information for the specified host,
      as implemented by a specific plugin. The host can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
  </apidoc:function>
  <!-- ******************** servers ******************** -->
  <apidoc:function name="/manage/v2/servers" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address returns data about the App Servers in the cluster. The
      data returned depends on the setting of the <code>view</code> request parameter. The default
      view provides a summary of the servers. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the servers in the
        specified group. The group can be identified either by id or name. If not specified, the
        response includes information about all App Servers. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>schema</code>, <code>status</code>, <code>metrics</code>, <code>package</code>, or
          <code>default</code>. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. This parameter is not meaningful with
          <code>view=package</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="server-default-list"
      > Use <code>view=package</code> to retrieve configuration details about App Servers in a
      format suitable for use with the <code>/manage/v2/packages</code> interfaces. You can request
      a package view as HTML, XML, or JSON, but only the XML and JSON formats can be used as input
      to the <code>/manage/v2/packages</code> interfaces, such as <code>POST
        /manage/v2/packages/{pkgname}</code>. <p>The structure of the data in the response body for
        the default view is shown below. For details on other views, see the API reference for each
        view variant.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers?group-id=Default

==> Returns summary information for App Servers in the Default group.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers?view=package 

==> Returns the package data for the all App Servers in the cluster.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use meters.xsd, server-metrics-list. -->
  <apidoc:function name="/manage/v2/servers?view=metrics" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> Retrieve historical monitoring data about the App Servers in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the servers in the
        specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="meters.xsd" element-name="server-metrics-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers?view=metrics

==>  Returns historical monitoring data for the servers in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address returns status information for the App Servers in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the servers in the
        specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="server-status-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/servers?view=status

  ==>  Returns status information for the servers in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address returns data about a specific App Server. The server can
      be identified either by id or name. The data returned depends on the value of the
        <code>view</code> request parameter. The default view is a summary with links to additional
      data. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>edit</code>, <code>status</code>, <code>package</code>, or <code>default</code>. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Meaningful only when <code>view=status</code>.
        Specifies to return the status for the server in the specified host. The host can be
        identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> Meaningful only with <code>view=status</code>. If
        set to <code>true</code>, full detail is returned for all relationship references. A value
        of <code>false</code> (the default) indicates to return detail only for first references. </apidoc:param>
      <apidoc:param name="modules" type="string"> Meaningful only with <code>view=package</code>.
        Whether or not to include a manifest of the modules database for the App Server in the
        results, if one exists. It is an error to request a modules database manifest for an App
        Server that uses the filesystem for modules. Default: <code>false</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> For the <code>edit</code> view, the redirect
        URI of the appropriate configuration page in the Admin Interface. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> For all views except <code>edit</code>, upon success, MarkLogic Server returns
      status code 200 (OK), and the response body contains the requested data. If
        <code>view=edit</code>, MarkLogic Server responds with status code 302 (Found) and the
      Location header contains a redirect to the appropriate configuration page in the Admin
      Interface. </apidoc:response>
    <apidoc:usage>
      <p> The structure of the returned data for each type of server is shown below. <ul>
          <li><a href="#HTTP">HTTP Server</a></li>
          <li><a href="#ODBC">ODBC Server</a></li>
          <li><a href="#XDBC">XDBC Server</a></li>
          <li><a href="#Task">Task Server</a></li>
        </ul>
      </p>
    </apidoc:usage>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="http-server-config">
      <p>
        <a id="HTTP"/><b>HTTP Server</b>
      </p>
      <p>The structure of the data in the response for an HTTP server is as follows:</p>
    </apidoc:usage>

    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="odbc-server-config">
      <p>
        <a id="ODBC"/><b>ODBC Server</b>
      </p>
      <p>The structure of the data in the response for an ODBC server is as follows:</p>
    </apidoc:usage>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="xdbc-server-config">
      <p>
        <a id="XDBC"/><b>XDBC Server</b>
      </p>
      <p>The structure of the data in the response for an XDBC server is as follows:</p>
    </apidoc:usage>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="task-server-config">
      <p>
        <a id="Task"/><b>Task Server</b>
      </p>
      <p>The structure of the data in the response for a Task server is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers/Admin?group-id=Default

==>  Returns information on the Admin server in the Default group. 
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers/Admin?group-id=Default&view=status

==>  Returns the status of the Admin server in the Default group. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}?view=config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers" hidden="true">
    <apidoc:summary> This resource address returns configuration data about a specific App Server.
      The server can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the data in
      the response body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="http-server-config">
      The data in the response body varies, depending on the App Server type (HTTP, XDBC, ODBC,
      etc.). The structure of the data in the resopnse for an HTTP App Server is as follows: </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers/Admin?group-id=Default

==> Returns configuration information for the Admin App Server 
    in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address returns status information about a specific App Server.
      The server can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Return status for this App Server on the specified
        host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (the default)
        indicates to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="server-status"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers/Admin?group-id=Default&view=status

==>  Returns the status of the Admin server in the Default group. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas, after 7.0-1 -->
  <apidoc:function name="/manage/v2/servers/{id|name}?view=package" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address returns configuration details about the named App Server
      in a format suitable for use with the <code>/manage/v2/packages</code> interfaces. The server
      can be identifed either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="modules" type="string"> Whether or not to include a manifest of the
        modules database for the App Server in the results, if one exists. It is an error to request
        a modules database manifest for an App Server that uses the filesystem for modules. Default:
          <code>false</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage> You can request a package view as HTML, XML, or JSON, but only the XML and JSON
      formats can be used as input to the <code>/manage/v2/packages</code> interfaces, such as
        <code>POST /manage/v2/packages/{pkgname}</code>. The structure of the data in the response
      body depends on the type of App Server (HTTP, XDBC, ODBC, etc.). </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/servers/MyServer?group-id=Default&view=package

==> Returns the package representation of the App Server MyServer 
    in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}/{custom}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers" hidden="true">
    <apidoc:summary> This resource address returns some custom information for the specified server,
      as implemented by a specific plugin. The server can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address is used to create a new App Server in the specified
      group. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2336254'>Preliminary Configuration Procedures</a> in the <em>Scripting Administrative Tasks Guide</em>. 
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. The group must be specified by this parameter or by the
          <code>group-name</code> property in the request payload. If it is specified in both
        places, the values must be the same. </apidoc:param>
      <apidoc:param name="server-type" type="string"> The type of App Server to create. The App
        Server type must be specified by this parameter or in the request payload. If it is
        specified in both places, the values must be the same. The valid types are:
          <code>http</code>, <code>odbc</code>, <code>xdbc</code>, or <code>webdav</code>. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created) or 202
      (restart), if the properties specified in the payload have a "cold" value that differs from
      the server default. If the server exists or if the payload is malformed, a status code of 400
      (Bad Request) is returned. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage>
      <p>The structure of the data in the request payload for each type of App Server is as
        follows.</p><p> For each server, the <code>name</code>, <code>root</code>,
        <code>port</code>, and <code>content-database</code> properties are required. For HTTP,
        ODBC, and XDBC servers, if the <code>modules-database</code> is not specified (or is has an
        empty value), the server will use the filesystem for its modules database.</p>
      <p> The configurations for the types of servers are detailed in the following sections. </p>
      <ul>
        <li><a href="#HTTP">HTTP Server Properties</a></li>
        <li><a href="#XDBC">XDBC Server Properties</a></li>
        <li><a href="#ODBC">ODBC Server Properties</a></li>
      </ul>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="http-server-properties">
      <a id="HTTP"/><b>HTTP Server Properties</b>
      <p/> XML root element: <pre xml:space="preserve"><![CDATA[
<http-server-properties xmlns="http://marklogic.com/manage">
]]></pre>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="xdbc-server-properties">
      <a id="XDBC"/><b>XDBC Server Properties</b>
      <p/> XML root element: <pre xml:space="preserve"><![CDATA[
<xdbc-server-properties xmlns="http://marklogic.com/manage">		
]]></pre>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="odbc-server-properties">
      <a id="ODBC"/><b>ODBC Server Properties</b>
      <p/> XML root element: <pre xml:space="preserve"><![CDATA[
<odbc-server-properties xmlns="http://marklogic.com/manage">		
]]></pre>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

cat myServer.xml
==> 
<http-server-properties xmlns="http://marklogic.com/manage">
   <server-name>myServer</server-name>
   <root>/</root>
   <port>8088</port>
   <content-database>Documents</content-database>
</http-server-properties>

curl -X POST --digest -u admin:admin -H "Content-type: application/xml" \
-d @myServer.xml 'http://localhost:8002/manage/v2/servers?group-id=Default&server-type=http' 

==>  Creates the HTTP App Server, named "myServer," in the Default group. 
		  
cat myServer.json
==> 
{
   "server-name":"myServer",
   "root":"/",
   "port":8088,
   "content-database":"Documents"
}

curl -X POST --digest -u admin:admin -H "Content-type: application/json" \
-d @myServer.json 'http://localhost:8002/manage/v2/servers?group-id=Default&server-type=http' 

==>  Creates the HTTP App Server, named "myServer," in the Default group. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address deletes the specified App Server from the specified
      group. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 202 (Accepted) if the
      request causes a restart, or status code 204 (No Content) if the request does not cause a
      restart. When 202 is returned, the standard <code>restart</code> payload body is also
      returned. If the payload is malformed or the group doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u $admin:$admin -H "Content-Type: application/json" \
http://localhost:8002/manage/v2/servers/myServer?group-id=Default&format=json

==>  Deletes the HTTP App Server, named "myServer," from the Default group. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> This resource address returns the current state of modifiable properties 
	  of the  specified App Server. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). If present, the <code>format</code>
        parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the 
	    response body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested information. If the payload is malformed or the group doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not have the necessary privileges.</apidoc:response>
    <apidoc:usage> 
	  <p>The names "content-database", "group-name", "last-login-database", "modules-database", "name", and "server-type" are reserved.</p>
	  <p>The value of the "last-login" property is not returned, its converted value is returned in the "last-login-database" property.</p>
	  <p>The value of the "default-user" property is converted to a user name.</p>
	  <p>The value of the "privilege property is converted into a privilege URI.</p>
	  <p>Response will be valid according to the schema type <code>http-server-properties</code> in the <code>manage-server-properties.xsd</code> schema. JSON payloads are internally converted to XML before validation.</p>
	  <p>The properties for each type of App Server are detailed in the following
      sections. <ul>
        <li><a href="#HTTP">HTTP Server Properties</a></li>
        <li><a href="#XDBC">XDBC Server Properties</a></li>
        <li><a href="#ODBC">ODBC Server Properties</a></li>
      </ul></p>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="http-server-properties">
      <a id="HTTP"/><b>HTTP Server Properties</b>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="xdbc-server-properties">
      <a id="XDBC"/><b>XDBC Server Properties</b>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="odbc-server-properties">
      <a id="ODBC"/><b>ODBC Server Properties</b>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
 http://localhost:8002/manage/v2/servers/myServer/properties?group-id=Default

==>  Returns the properties for the App Server, named "myServer," 
     in the Default group. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/servers/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="App Servers">
    <apidoc:summary> Initiate a properties change on the specified App Server. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the App
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Can be
          <code>json</code> or <code>xml</code>. If present, the <code>format</code> parameter
        overrides the request Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. If specified, the "name" and "group-name" properties must match the name and group-id specified in the URI. Payload must be valid according to the http-, odbc-, or xdbc-server properties type in <code>manage-server-properties.xsd</code> </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the requested operation causes a    
	    restart, a reference to the timestamp service is returned in the Location header. Use this reference to test for successful completion of the restart. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 202 (Accepted) if the
      request causes a restart, or status code 204 (No Content) if the request does not cause a
      restart. When 202 is returned, the standard <code>restart</code> payload body is also returned that includes the timestamp of the last restart and a link to the timestamp endpoint. If the payload is malformed or the group doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not have the  necessary privileges. </apidoc:response>
    <apidoc:usage> The data in the request body can contain one or more properties to modify.
      Properties that are not included are unchanged. Use GET      /manage/v2/servers/{id|name}/properties to see what properties can be modified. 
	  <p> Some property changes cause a restart. If a restart occurs, the response includes a reference to the timestamp service in the Location header and the response body. Use this information to confirm successful completion of the restart. For details, see GET /admin/v1/timestamp.</p>
	    <p>When 202 is returned, the standard <code>restart</code> payload body is also returned.</p>
		<p>Response will be valid according to the schema type <code>restart</code> in the 
		<code>manage.xsd</code> schema. JSON payloads are internally converted to XML before validation.</p>
        <p> The properties for each type of App Server are detailed in the following sections. </p>
      <ul>
        <li><a href="#HTTP">HTTP Server Properties</a></li>
        <li><a href="#XDBC">XDBC Server Properties</a></li>
        <li><a href="#ODBC">ODBC Server Properties</a></li>
      </ul>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="http-server-properties">
      <a id="HTTP"/><b>HTTP Server Properties</b>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="xdbc-server-properties">
      <a id="XDBC"/><b>XDBC Server Properties</b>
    </apidoc:usage>
    <apidoc:usage schema="manage-server-properties.xsd" print-intro="false"
      element-name="odbc-server-properties">
      <a id="ODBC"/><b>ODBC Server Properties</b>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

curl -X PUT --digest -u admin:admin \
-H "Content-type: application/json" -d '{"port":8090}' \
http://localhost:8002/manage/v2/servers/myServer/properties?group-id=Default

==>  Sets the port to 8090 on the App Server, named "myServer," 
     in the Default group. 
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** groups ******************** -->
  <apidoc:function name="/manage/v2/groups" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address returns a summary of the groups in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be
          <code>schema</code>, or <code>default</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. If the payload is malformed, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-groups.xsd" print-intro="false" element-name="group-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/groups

  ==>  Returns a summary of the groups in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address creates a new group in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the group
      already exists or if the payload is malformed, a status code of 400 (Bad Request) is returned.
      A status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-group-properties.xsd" print-intro="false"
      element-name="group-properties">
      <p>The structure of the data in the request is as shown below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>schemas</code>, <code>namespaces</code>,
          <code>using-namespaces</code>, <code>module-locations</code>, <code>events</code>,
          <code>audit-events</code>, and <code>audit-restrictions</code> are expressed in singular
        form. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST --digest -u admin:admin -H "Content-type: application/json" \
-d '{"group-name":"Foo"}' http://localhost:8002/manage/v2/groups

==>  Creates a new group, named "Foo," in the cluster. 

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address returns information on a specific group. The group can be
      identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>counts</code>, <code>edit</code>, <code>status</code>, or <code>default</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> For the <code>edit</code> view, the redirect
        URI of the appropriate configuration page in the Admin Interface. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> For all views except <code>edit</code>, upon success, MarkLogic Server returns
      status code 200 (OK), and the response body contains the requested data. If
        <code>view=edit</code>, MarkLogic Server responds with status code 302 (Found) and the
      Location header contains a redirect to the appropriate page in the Admin Interface. </apidoc:response>
    <apidoc:usage schema="manage-groups.xsd" print-intro="false" element-name="group-default">
      <p>When <code>view=counts</code>, the count information includes the document count, directory
        count, active fragment count, deleted fragment count, and nascent fragment count.</p>
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/groups/mygroup

==> Returns information on the 'mygroup' group.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/groups/mygroup?format=json

==> Returns information on the 'mygroup' group, as JSON.
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/groups/mygroup?view=edit

==> Returns a redirect to the Admin Interface configuration page
    for the 'mygroup' group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address can be used to restart or shutdown a group in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted). If the
      payload is malformed, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage>
      <p>The structure of the data in the request is as follows:</p>
      <p>To restart a group:</p>
      <p><pre xml:space="preserve"><![CDATA[
    {"operation": "restart-group"}
    ]]></pre></p>
      <p>To shutdown a group:</p>
      <p><pre xml:space="preserve"><![CDATA[
    {"operation": "shutdown-group"}
    ]]></pre></p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST --digest -u admin:admin -H "Content-type: application/json" \
-d '{"operation": "shutdown-group"}' http://localhost:8002/manage/v2/groups/Foo 

==>  Shuts down the "Foo" group in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address deletes a group from the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No content). If the
      payload is malformed or the group doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/groups/Foo

==>  Deletes the "Foo" group from the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address returns the configuration properties of the named group
      in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response 
	  body contains the requested data. If the payload is malformed, a status code of 400 (Bad Request)is returned. A status code of 401 (Unauthorized) is returned if the user does not have the  necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-group-properties.xsd" print-intro="false" 
	element-name="group-properties"> 
	  <p>The name <code>name</code> is reserved.</p>
	  <p>The value of the <code>group-id</code> property is not returned, its converted value is 
	  returned in the "name" property.</p>
	  <p>The values of the <code>meters-database</code> and <code>security-database</code> properties are converted into names.</p>
	  <p>The task server and scheduled properties will be addressed through a separate 
	  endpoint.</p>
	  <p>Response will be valid according to the schema type <code>group-properties</code> in 
      the <code>manage-group-properties.xsd</code> schema. JSON payloads are internally converted 
      to XML before validation.</p>
	</apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: 
	  <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
	<apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET  --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/groups/Foo/properties

==>  Returns the properties of the "Foo" group in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address sets the configuration properties of the named group in
      the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 202 (Accepted) if the
      request causes a restart, or status code 204 (No Content) if the request does not cause a
      restart. If the payload is malformed or the group doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-group-properties.xsd" print-intro="false"
      element-name="group-properties">
	  <p> When 202 is returned, the standard "restart" payload body is also returned.</p>
      <p>The properties that can be modified are listed below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the 
	      same for JSON, with the exception that, in JSON, <code>schemas</code>, <code>namespaces</code>, <code>using-namespaces</code>, <code>module-locations</code>, <code>events</code>, <code>audit-events</code>, and <code>audit-restrictions</code> are expressed in singular form. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, 
	  or the following privilege: 
	  <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{"list-cache-size":300}' http://localhost:8002/manage/v2/groups/Foo/properties

==>  Sets the list-cache-size property of the "Foo" group in the cluster to 300. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}?view=config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups" hidden="true">
    <apidoc:summary> This resource address returns configuration information on the specified
     	group. The group can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be 
	    either <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
		  Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-groups.xsd" element-name="group-config"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/groups/Default?view=config&format=json

==> Returns configuration information on the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}?view=counts" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address returns counts information on the specified group. The
      group can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-groups.xsd" element-name="group-counts"> The count information
      includes the document count, directory count, active fragment count, deleted fragment count,
      and nascent fragment count. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/groups/Default?view=counts

==> Returns counts information on the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/groups/{id|name}?view=status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Groups">
    <apidoc:summary> This resource address returns status information on the specified group. The
      group can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-groups.xsd" element-name="group-status"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/groups/Default?view=status

==> Returns status information on the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** requests ******************** -->
  <apidoc:function name="/manage/v2/requests" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Requests">
    <apidoc:summary> This resource address returns a summary of the requests in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>default</code>, or <code>schema</code>. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to limit the summary information to
        requests in the specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Specifies to limit the summary information to
        requests in the specified host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="server-id" type="string"> Specifies to limit the summary information to
        requests in the specified server. The server can be identified either by id or name. </apidoc:param>
      <apidoc:param name="seconds-min" type="string"> Return only requests that have been executing
        for at least the specified number of seconds. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (default) indicates
        to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-requests.xsd" element-name="request-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/requests

  ==>  Returns a summary of the requests in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/requests/{id|uri}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Requests">
    <apidoc:summary> This resource address returns information on the specified request. The request
      can be identified either by id or URI. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to limit the summary information to
        requests in the specified group. The group can be identified either by id or name. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Specifies to limit the information to the request
        in the specified host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="server-id" type="string"> Specifies to limit the information to the
        request in the specified server. The server can be identified either by id or name.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-requests.xsd" element-name="request-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/requests/12741641870611184141

  ==>  Returns information on the request with the id, 12741641870611184141. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** transactions ******************** -->
  <apidoc:function name="/manage/v2/transactions" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Transactions">
    <apidoc:summary> This resource address returns a summary of the transactions in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="view" type="string"> A specific view of the returned data. Can be either
          <code>default</code>, or <code>schema</code>. </apidoc:param>
      <apidoc:param name="host-id" type="string"> Specifies to limit the summary information to the
        transactions in the specified host. The host can be identified either by id or name. </apidoc:param>
      <apidoc:param name="seconds-min" type="string"> Return only transaction that have been running
        for at least the specified number of seconds. </apidoc:param>
      <apidoc:param name="fullrefs" type="string"> If set to <code>true</code>, full detail is
        returned for all relationship references. A value of <code>false</code> (default) indicates
        to return detail only for first references. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-transactions.xsd" element-name="transaction-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/transactions

==> Returns a summary of the transactions in the cluster. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/transactions/{id|uri}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Transactions">
    <apidoc:summary> This resource address returns information on the specified transaction. The
      transaction can be identified either by id or URI. This resource address must include the id
      or name of the host that executes the transaction. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="host-id" type="string"> The id or name of the host that owns the
        transaction. This parameter is required. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-transactions.xsd" element-name="transaction-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/transactions/10251787240502259323?host-id=myhost

==> Returns information on the transaction with the id 10251787240502259323
    on the host, 'myhost'. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** Tickets ******************** -->
  <apidoc:function name="/manage/v2/tickets/{tid}?view=process-status" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Tickets">
    <apidoc:summary> Check the status of the ticket identified by <code>{tid}</code>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). If present, the
          <code>format</code> parameter overrides the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Allowed values: <code>application/xml</code>, <code>application/json</code>, and
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> If the ticket is still open, MarkLogic Server responds with status code 200
      (OK) and the response body contains status details. If the ticket is closed, MarkLogic Server
      returns status code 303 and the response body includes status details and a link back to the
      resource upon which the related process was run. See the Usage Notes for an alternative
      request that avoids the redirect. </apidoc:response>
    <apidoc:usage> Use the ticket system to track long-running or asynchronous operations such as
      combining forests or resizing a partition. For such operations, the Management REST API
      returns a ticket reference that you can use to invoke this service and check the status of
      your ticket. For a completed operation, the status information includes error details, if any.
        <p> You can avoid the redirect response for a completed ticket by omitting the
          <code>view=process-status</code> request parameter. Leaving the <code>view</code>
        parameter off requests the default view. Such a request returns a status code 200 (OK), with
        status details in the response body. </p>
      <p> If you specify <code>forest-replicas</code>, two or more forests are created: The master
        forest on one host and one or more replica forests on other hosts. Note that all of the
        hosts must be in the same cluster. See example below. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET \
    -i -H "Accept: application/xml" \
    http://localhost:8002/manage/v2/tickets/6699732791380391489?view=process-status

==> Retrieve ticket status information. If the ticket is still open,
    MarkLogic Server returns headers similar to the following. The
    response body contains annotations and status data about the process.

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 32
Connection: Keep-Alive
Keep-Alive: timeout=5

<ticket-process-status xmlns="http://marklogic.com/manage/tickets">
  <id>6699732791380391489</id>
  ...
  <status-properties>
    <status>active</status>
    <start-time>2013-09-21T12:02:54.866173-07:00</start-time>
    <ticket-expiration>2013-09-28T12:02:54.866173-07:00</ticket-expiration>
    <database>App-Services</database>
    ...
  </status-properties>
  ...
</ticket-process-status>
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET \
    -i -H "Accept: application/xml" \
    http://localhost:8002/manage/v2/tickets/6699732791380391489?view=process-status

==> If the ticket is closed, MarkLogic Server returns a redirect
    to the resource upon which the related operation was performed.
    The response is similar to the following:

HTTP/1.1 303 See Other
Location: /manage/v2/forests
Content-type: application/xml
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 1612
Connection: Keep-Alive
Keep-Alive: timeout=5

<ticket-process-status xmlns="http://marklogic.com/manage/tickets">
  <id>6699732791380391489</id>
  ...
  <status-properties>
    <status>completed</status>
    <start-time>2013-09-21T12:02:54.866173-07:00</start-time>
    <ticket-expiration>2013-09-28T12:02:54.866173-07:00</ticket-expiration>
    <database>App-Services</database>
    ...
    <time-consumed>PT41.128523S</time-consumed>
    <errors>0</errors>
    ...
  </status-properties>
  ...
</ticket-process-status>
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** Admin ******************** -->
  <apidoc:function name="/admin/v1/init" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Initialize MarkLogic Server, optionally installing or updating an license key
      at the same time; or install/update a license key for a previously initialized instance of
      MarkLogic Server. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The expected format of the data in the response
        body. Allowed values: <code>json</code> or <code>xml</code>. If present, this parameter
        overrides the Accept header. </apidoc:param>
      <apidoc:param name="license-key" type="string"> A valid license key. You can only pass this
        parameter as form data in the request body. You can also supply a license key in an XML or
        JSON payload; for details, see the Usage notes. This parameter is optional. </apidoc:param>
      <apidoc:param name="licensee" type="string"> The authorized licensee of the key given in
          <code>license-key</code>. You can only pass this parameter as form data in the request
        body. You can also supply a license key in an XML or JSON payload; for details, see the
        Usage notes. This parameter is optional. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header.
        Only <code>application/xml</code> and <code>application/json</code> are supported. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, if any. Should be one of <code>application/xml</code>, <code>application/json</code>,
        or <code>application/x-www-form-urlencoded</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      <p> Upon success, if a server restart was required, MarkLogic Server returns status code 202
        (Accepted) and the response body includes a timestamp and a link to the timestamp service
        that can be used to detect when the server restart completes. </p><p> If the request
        succeeds and did not result in a restart, MarkLogic Server returns status code 204 (Modified
        Content), and there is no response body. </p><p> If you include a license and the license is
        invalid, MarkLogic Server returns status code 400 and the response body includes a
        descriptive error message. </p>
    </apidoc:response>
    <apidoc:usage>
      <p> This request must be directed to the MarkLogic Server Admin Interface on port 8001. For
        example: <code>http://localhost:8001/admin/v1/init</code>. </p><p> This method initializes a
        MarkLogic Server instance. It must be the first call you make in setting up a MarkLogic
        Server instance. The instance is not fully initialized until you call either <code>POST
          /admin/v1/instance-admin</code> or complete the cluster join sequence discussed under
          <code>POST /admin/v1/cluster-config</code>. </p><p> For details and a complete example,
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/cluster.xml%2312592'>Scripting Cluster Management</a> in the <em>Scripting Administrative Tasks Guide</em>. </p><p> If the request
        includes license information, the license is installed or updated. If MarkLogic Server has
        already been initialized, this method simply updates license information, if any is
        included. </p><p> You can supply the license key and licensee using either XML, JSON or form
        data. If you choose form data, you must set the Content-type header to
          <code>application/x-www-form-urlencoded</code>. If you choose XML or JSON, set the
        Content-type header to <code>application/xml</code> or <code>application/json</code>,
        respectively. Use one of the following templates for the response body: </p><code><pre xml:space="preserve"><![CDATA[
XML:
<init xmlns="http://marklogic.com/manage">
  <license-key>license key</license-key>  
  <licensee>licensee</licensee>
</init>

JSON:
{
  "license-key" : "license-key",
  "licensee" : "licensee"
}

Form Data:
license-key=url-encoded-key&licensee=url-encoded-licensee
    ]]></pre></code><p> This method causes a server restart if MarkLogic Server has not yet been
        initialized or if the new license key enables features that require a restart to enable.
      </p>
    </apidoc:usage>
    <apidoc:privilege> If security has not yet been installed, no authentication is required. If
      security has been installed, authentication as <code>admin</code> is required. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Initialization without installing a license:

$ curl --anyauth -X POST -d "" -i http://localhost:8001/admin/v1/init

==> If the request is sucessful and causes a restart, MarkLogic Server 
    sends a response similar to the following. You can use the Location 
    header or the restart/link/uriref to detect when the restart is complete.

HTTP/1.1 202 Accepted
Content-type: application/xml
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 260
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-05-15T09:01:43.019261-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Initialization, including installing a license saved in a file:

$ cat init.xml
==> 
<init xmlns="http://marklogic.com/manage">
  <license-key>1234-5678-90AB</license-key>
  <licensee>Your Licensee</licensee>
</init>

$ curl --anyauth -X POST -d @./init.xml -i -H "Content-type:application/xml" \
   http://localhost:8001/admin/v1/init

==> If the request is sucessful and causes a restart, MarkLogic Server 
    sends a response similar to the following. You can use the Location 
    header or the restart/link/uriref to detect when the restart is complete.

HTTP/1.1 202 Accepted
Content-type: application/xml
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 260
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-05-15T09:01:43.019261-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>

==> If the request did not cause a restart, MarkLogic Server responds
    with headers similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5

==> If the license is invalid, MarkLogic Server responds with
    headers and a response body similar to the following:

HTTP/1.1 400 Bad Request
Content-type: application/xml
Server: MarkLogic
Content-Length: 203
Connection: Keep-Alive
Keep-Alive: timeout=5

<error xmlns="http://marklogic.com/manage">
  <status-code>400</status-code>
  <status>Bad Request</status>
  <message-code/>
  <message>You must enter a key</message>
</error>
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Initialization, including a license passed in as form data:

$ curl --anyauth -i -X POST \
   -H "Content-type:application/x-www-form-urlencoded" \
   --data-urlencode "license-key=1234-5678-90AB" \
   --data-urlencode "licensee=Your Licensee" \
   http://localhost:8001/admin/v1/init

==> If it has not previously been initialized, MarkLogic Server is 
    initialized. The supplied license is installed, updating any
    previously installed license. Upon success, MarkLogic Server
    sends a response similar to the following. Use the Location header
    or the restart/link/uriref to detect when the restart is complete.

HTTP/1.1 202 Accepted
Content-type: application/xml
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 313
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13204257035615066601">
    2013-10-17T15:12:28.21886-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/admin/v1/instance-admin" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Install the admin username and password, and initialize the security database
      and objects. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>json</code> or <code>xml</code>. If present, this parameter overrides
        the Accept header. </apidoc:param>
      <apidoc:param name="admin-username" type="string"> The user name to be configured as the admin
        user. You can either pass this parameter as form data in the request body, or provide this data
        in an XML or JSON payload. For details, see the Usage Notes. 
      </apidoc:param>
      <apidoc:param name="admin-password" type="string"> The password to be configured as the admin
        user. You can either pass this parameter as form data in the request body, or provide this data
        in an XML or JSON payload. For details, see the Usage Notes.
      </apidoc:param>
      <apidoc:param name="realm" type="string"> The authentication realm of the admin user. The realms
         allow protected resources on a server to be partitioned into a set of protection spaces,
         each with its own authentication scheme. The realms are stored in the security database and
         used in computing digest authentication tokens.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header.
        Only <code>application/xml</code> and <code>application/json</code> are supported. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, if any. Allowed values: <code>application/xml</code>, <code>application/json</code>,
        or <code>application/x-www-form-urlencoded</code>. The <code>format</code> request parameter
        takes precedence over this header if present. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the requesAccept header if
        both are present. </apidoc:header>
      <apidoc:header name="Location" type="reponse"> A reference to the timestamp service that can
        be used to determine when the instance has successfully restarted. </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      <p> Upon success, MarkLogic Server returns status code 202 (Accepted) and the response body
        contains a timestamp and a link to the timestamp service. Use this information to detect
        when the server restart completes. </p>
    </apidoc:response>
    <apidoc:usage>
      <p> This request must be directed to the MarkLogic Server Admin Interface on port 8001. For
        example: <code>http://localhost:8001/admin/v1/instance-admin</code>. </p><p> You must call
          <code>POST /admin/v1/init</code> or otherwise initialize MarkLogic Server prior to using
        this method. </p><p> You should only call this method on a standalone host (not intended to
        be part of a cluster), or the initial bootstrap host of a cluster. Do not use this method on
        additional hosts in a cluster. Instead, use the cluster join sequence shown in POST
          <code>/admin/v1/cluster-config</code>. </p><p> You can supply the admin user name and
        password using either XML, JSON or form data. If you choose form data, you must set the
        Content-type header to <code>application/x-www-form-urlencoded</code> If you choose XML or
        JSON, you can specify the content type using either the <code>format</code> request
        parameter or the Content-type header. Use the following templates for the POST body;
          <code>admin-username</code> and <code>admin-password</code> are the only required
        settings. </p><code><pre xml:space="preserve"><![CDATA[
XML:
<instance-admin xmlns="http://marklogic.com/manage">
   <admin-password>your-admin-username</admin-password>
   <admin-username>your-admin-password</admin-username>
   <realm>public</realm>
</instance-admin>

JSON:
{ "admin-username" : "your-admin-username",
  "admin-password" : "your-admin-password",
  "realm" : "public"
}

Form Data (must be URL encoded):
admin-user=your-admin-username&admin-password=your-admin-password&realm=public
   ]]></pre></code><p> If successful, this method causes MarkLogic Server to restart. You can use
        the timestamp and the link to the timestamp service to poll the status of the restart. For
        details, see <code>GET /admin/v1/timestamp</code>. </p><p> For details and a complete
 example, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/cluster.xml%2344924'>Setting Up the First Host in a Cluster</a> in the <em>Scripting Administrative Tasks Guide</em>. </p>
    </apidoc:usage>
    <apidoc:privilege> If the security database has not yet been initialized, no authentication
        is required. If the security database has been already initialized, the request will fail
        with the status code 400, which is the expected behavior, because you only may initialize
        the security database once for a given instance of MarkLogic Server.
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl -i -X POST \
    --data "admin-username=adminuser&admin-password=mypassword&realm=public" \
    http://localhost:8001/admin/v1/instance-admin

==> MarkLogic Server responds with headers and a response body similar
    to the following:

HTTP/1.1 202 Accepted
Content-type: application/xml
Location: /admin/v1/timestamp
...

<restart xmlns="http://marklogic.com/manage">
    <last-startup host-id="13544732455686476949">
      2013-04-01T10:35:19.09913-07:00
    </last-startup>
    <link>
      <kindref>timestamp</kindref>
      <uriref>/admin/v1/timestamp</uriref>
    </link>
    <message>Check for new timestamp to verify host restart.</message>
</restart>
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/admin/v1/timestamp" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Verify that MarkLogic Server is up and accepting requests. </apidoc:summary>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Always <code>text/plain</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> If MarkLogic Server is available, this request returns response code 200 (OK)
      and the reponse body contains a plain text timestamp that can be used with the timestamp
      returned by asynchronous <code>admin</code> and <code>manage</code> requests to confirm that a
      restart ocurred and has completed. </apidoc:response>
    <apidoc:usage>
      <p> This request must be directed to the MarkLogic Server Admin Interface on port 8001. For
        example: <code>http://localhost:8001/admin/v1/timestamp</code>. </p><p> Management REST API
        that cause a restart usually return a reference to this service in the response Location
        header and/or the data in the response body. You can use this reference to test whether the
        restart has successfully completed. </p><p> To test if MarkLogic Server is up and available
        on a given host, you can use eiher the GET or HEAD methods of /admin/v1/timestamp. If status
        code 200 (OK) is returned, MarkLogic Server is available. </p><p> To test for a restart,
        call GET /admin/v1/timestamp prior to the operation that can cause a restart, then call it
        again afterwards, and compare the two timestamps. </p><p> For details and a complete
 example, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/cluster.xml%2338205'>Using the Timestamp Service to Verify a Restart</a> in the <em>Scripting Administrative Tasks Guide</em>.
      </p>
    </apidoc:usage>
    <apidoc:privilege> If security has not yet been installed, no authentication is required. If
      security has been installed, digest authentication is required, but no privilege checking is
      done. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
    http://localhost:8001/admin/v1/timestamp

==> MarkLogic Server responds with a timestamp and headers similar 
    to the following. The timestamp in the response body is the time
    of the last restart.

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 32
Connection: Keep-Alive
Keep-Alive: timeout=5

2013-05-15T10:34:38.932514-07:00
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
An operation causing a restart returns a response similar to the following.
Note the Location header and <uriref> to the timestamp service. Use it
to construct a GET or HEAD request to this service.

HTTP/1.1 202 Accepted
Content-type: application/xml
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 260
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-05-15T09:01:43.019261-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/admin/v1/timestamp" http-verb="HEAD" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Verify that MarkLogic Server is up and accepting requests. </apidoc:summary>
    <apidoc:response> If MarkLogic Server is available, this request returns response code 200 (OK). </apidoc:response>
    <apidoc:usage> This request must be directed to the MarkLogic Server Admin Interface on port
      8002. For example: <code>http://localhost:8001/admin/v1/timestamp</code>. </apidoc:usage>
    <apidoc:privilege> If security has not yet been installed, no authentication is required. If
      security has been installed, digest authentication is required, but no privilege checking is
      done. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X HEAD -i \
    http://localhost:8001/admin/v1/timestamp

==> If MarkLogic Server is available, headers similar to the following
    are returned:

HTTP/1.1 200 OK
Server: MarkLogic
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/admin/v1/server-config" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Retrieve MarkLogic Server configuration information, suitable for use in
      joining a cluster. </apidoc:summary>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. The response MIME type is always <code>application/xml</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      <p> Upon success, MarkLogic Server returns status code 200 (OK) and the response body contains
        the requested information, expressed as XML. </p><p> If license key installation and basic
        initialization have not yet been done, the response payload will include a timestamp, but
        all other elements will be empty. </p>
    </apidoc:response>
    <apidoc:usage>
      <p> This request must be directed to the MarkLogic Server Admin Interface on port 8001. For
        example: <code>http://localhost:8001/admin/v1/server-config</code>. </p><p> This method is
        intended for use in the context of other REST Management API methods during cluster
        configuration, such as using the data returned by this request as input to a POST request to
          <code>/admin/v1/cluster-config</code>. For the expected sequence, see the examples below.
        </p><p> For details and a complete example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/cluster.xml%2312592'>Scripting Cluster Management</a> in the <em>Scripting Administrative Tasks Guide</em>. </p>
    </apidoc:usage>
    <apidoc:privilege> If security has not yet been installed, no authentication is required. If
      security has been installed, digest authentication is required, but no privilege checking is
      done. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -H "Accept: application/xml" \
    http://my-host:8001/admin/v1/server-config

==> The configuration of the server my-host.marklogic.com. MarkLogic
    Server responds with output similar to the following. (The security
    certificate has been elided for brevity.) See the additional example
    for the full join sequence.

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 1487
Connection: Keep-Alive
Keep-Alive: timeout=5

<host xmlns="http://marklogic.com/manage">
  <timestamp>2013-06-18T08:11:29.188561-07:00</timestamp>
  <version>7.0</version>
  <platform>linux</platform>
  <edition>Essential Enterprise</edition>
  <host-id>4808503609057420751</host-id>
  <host-name>my-host.marklogic.com</host-name>
  <bind-port>7999</bind-port>
  <connect-port>7999</connect-port>
  <foreign-bind-port>7998</foreign-bind-port>
  <foreign-connect-port>7998</foreign-connect-port>
  <ssl-certificate>...elided...</ssl-certificate>
</host>
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Use in the following sequence to add a host to a cluster, assuming
clusterhost is a previously fully initialized bootstrap host for
the cluster and joining-host is the host to be initialized and added to
the cluster:

(1) Initialize the new host. For details, see POST /admin/v1/init.
    Use GET /admin/v1/timestamp to verify a successful restart.
    For details, see POST /admin/v1/init.

    $ curl -X POST -d "" http://joining-host:8001/admin/v1/init
    $ curl -X GET http://joining-host:8001/admin/v1/timestamp

(2) Retrieve the configuration of the joining host, to be used as the
    value of the server-config param to POST /admin/v1/cluster-config.

    $ curl -o joiner-config.xml -X GET -H "Accept: application/xml" \
        http://joining-host:8001/admin/v1/server-config

    ==> The configuration for joining-host is saved to joiner-config.xml.
        See the previous example for the output details.

(3) Send the joining host's URL encoded config info to the cluster host.
    Receive the cluster configuration in return. For details, see
    POST /admin/v1/cluster-config.

    $ curl --anyauth --user user:password -X POST -d "group=Default" \
        --data-urlencode "server-config@./joiner-config.xml" \
        -H "Content-type: application/x-www-form-urlencoded" \
        -o cluster-config.zip http://clusterhost:8001/admin/v1/cluster-config

    ==> The cluster configuration data is saved in cluster-config.zip.

(4) Send the cluster configuration ZIP file to the joining host to 
    complete the cluster join sequence. Bracket the POST with calls 
    to GET /admin/v1/timestamp to confirm a successful restart. For
    details, see POST /admin/v1/cluster-config.

    $ curl -X GET http://joining-host:8001/admin/v1/timestamp
    $ curl -X POST -H "Content-type: application/zip" \
        --data-binary @./cluster-config.zip \
        http://joining-host:8001/admin/v1/cluster-config
    $ curl --anyauth --user user:password -X GET \
        http://joining-host:8001/admin/v1/timestamp

    ==> The joining host becomes a functional member of the cluster.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/admin/v1/cluster-config" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Provide host or cluster configuration information suitable for adding a new
      host to an existing cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="server-config" type="string"> The server configuration of a new host to be
        joined to this cluster. This parameter must be supplied as form data in the request body,
        and its value should be the output of a previous call to <code>GET
          /admin/v1/server-config</code>. </apidoc:param>
      <apidoc:param name="group" type="string"> The group of the new host. Supply this parameter as
        form data in the request body. Required with the <code>server-config</code> request
        parameter, not permitted otherwise. </apidoc:param>
      <apidoc:param name="zone" type="string"> Optional text describing the location of the new
        host, such as the name of an Amazon EC2 Availability Zone. Used by the Tiered Storage API to
        configure local disk failover. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/tiered-storage.xml%2350544'>Tiered Storage</a> in the <em>Administrator's Guide</em>. You can only use this parameter when 
        the <code>server-config</code> request parameter is present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Must be <code>x-www-form-urlencoded</code> when the <code>server-config</code>
        parameter is present. Must be <code>application/zip</code> when <code>server-config</code>
        is not present. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. The response data is always <code>application/xml</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      <p> Upon success, MarkLogic Server returns a status code 202 (Accepted) if the request causes
        a restart, or status code 200 (OK) if the request does not cause a restart. The data in the
        response body depends on the context in which the request is made. For details, see the
        Usage notes. </p><p> If license key installation and basic initialization have not yet been
        done, the response payload will include a timestamp, but all other elements will be empty.
      </p>
    </apidoc:response>
    <apidoc:usage>
      <p> This request must be directed to the MarkLogic Server Admin Interface on port 8001. For
        example: <code>http://localhost:8001/admin/v1/cluster-config</code>. </p><p> This method is
        intended for use in the context of other REST Management API methods during cluster
        configuration. Any <code>server-config</code> input data should be obtained by a previous
        call to <code>GET /admin/v1/server-config</code>. Any cluster configuration data should be
        obtained by a previous call to <code>POST /admin/v1/cluster-config</code>. See the example
        for the full sequence of calls. </p><p> If you include the <code>server-config</code>
        request parameter, its value must be a server configuration from a host joining the cluster,
        and the request must be directed to a fully initialized host that is already a member of the
        cluster. In this case, MarkLogic Server verifies that security is initialized and responds
        with cluster configuration data that can be supplied to the new host in order to complete
        the cluster join operation. The input server configuration must be URL encoded. The data in
        the response body is the cluster configuration information in ZIP format. </p><p> If you do
        not include the <code>server-config</code> request parameter, this request must be sent to
        the host that is joining a cluster, and the POST body must contain cluster configuration
        data in ZIP format, obtained by a previous call to POST /admin/v1/cluster-config with the
          <code>server-config</code> parameter. In this case, MarkLogic Server verifies this host to
        be a new host (not already a member of the cluster and security has not been initialized),
        and then installs the supplied cluster configuration to complete the cluster join sequence.
        The joining host is restarted. </p><p> For details and a complete example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/cluster.xml%2312592'>Scripting Cluster Management</a> in the <em>Scripting Administrative Tasks Guide</em>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user admin:password -X POST -d "group=Default" \
    --data-urlencode "server-config@./server-config.xml" \
    -H "Content-type: application/x-www-form-urlencoded" \
    -o ./cluster-config.zip http://cluster-host:8001/admin/v1/cluster-config

==> Retrieve the configuration of the bootstrap host for a cluster and save it
    to the file server-config.xml. MarkLogic Server responds with status 200 
    and a ZIP file containing the cluster configuration data to provide to the
    local host in order to complete the cluster join sequence.
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user admin:password -X POST \
    -d "group=Default" --data-binary @./cluster-config.zip \
    -H "Content-type: application/zip" \
    http://joining-host:8001/admin/v1/cluster-config

==> Send the cluster configuration ZIP file obtained by a previous 
    call to /admin/v1/cluster-config?server-config to a new host
    to complete the cluster join sequence. MarkLogic Server responds 
    with status code 202. A restart occurs.
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Use in the following sequence to add a host to a cluster, assuming
clusterhost is a previously fully initialized bootstrap host for
the cluster and joining-host is the host to be initialized and added to
the cluster:

(1) Initialize the new host. For details, see POST /admin/v1/init.
    Use GET /admin/v1/timestamp to verify a successful restart.
    For details, see POST /admin/v1/init.

    $ curl -X POST -d "" -i http://joining-host:8001/admin/v1/init
    $ curl -X GET http://joining-host:8001/admin/v1/timestamp

(2) Retrieve the configuration of the joining host, to be used as the
    value of the server-config param to POST /admin/v1/cluster-config.
    For details, see POST /admin/v1/server-config.

    $ curl -o joiner-config.xml -X GET -H "Accept: application/xml" \
        http://joining-host:8001/admin/v1/server-config

    ==> The configuration for joining-host is saved to joiner-config.xml.
        See the previous example for the output details.

(3) Send the joining host's URL encoded config info to the bootstrap host.
    Receive the cluster configuration in return. 

    $ curl --anyauth --user user:password -X POST -d "group=Default" \
        --data-urlencode "server-config@./joiner-config.xml" \
        -H "Content-type: application/x-www-form-urlencoded" \
        -o cluster-config.zip http://clusterhost:8001/admin/v1/cluster-config

    ==> The cluster configuration data is saved in cluster-config.zip.

(4) Send the cluster configuration ZIP file to the joining host to 
    complete the cluster join sequence. Bracket the POST with calls 
    to GET /admin/v1/timestamp to confirm a successful restart. 

    $ curl -X GET http://joining-host:8001/admin/v1/timestamp
    $ curl -X POST -H "Content-type: application/zip" \
        --data-binary @./cluster-config.zip \
        http://joining-host:8001/admin/v1/cluster-config
    $ curl --anyauth --user user:password -X GET \
        http://joining-host:8001/admin/v1/timestamp

    ==> The joining host becomes a functional member of the cluster.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="/admin/v1/host-config" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Admin">
    <apidoc:summary> Remove a host's configuration from the cluster configuration, dropping the host
      from the cluster. The <code>remote-host</code> parameter is required if you are removing a
      host from a different group. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="remote-host" type="string"> Request a host in a cluster to remove the host
        referenced by this parameter. To request a host to remove itself, omit this parameter. The
        hostname must be resolvable on the host that receives the request. The remote host can be in
        any group in the cluster. </apidoc:param>
    </apidoc:params>
    <apidoc:response>
      <p> If you request a host to remove itself, MarkLogic Server returns status code 202
        (Accepted) and the data in the response body includes the timestamp of the last restart and
        a link to the timestamp endpoint. </p><p> If you request one host to remove another (by
        using the <code>remote-host</code> request parameter), MarkLogic Server returns status code
        204 (No Content). </p><p> If the pre-requistes described in the Usage Notes are not met,
        MarkLogic Server returns status code 400 with a detailed error message specifying which
        pre-requisites are not met. </p>
    </apidoc:response>
    <apidoc:usage>
      <p> This request must be directed to the MarkLogic Server Admin Interface on port 8001. For
        example: <code>http://localhost:8001/admin/v1/host-config</code>. </p><p> The host being
        removed from the cluster must meet the following criteria for the removal request to be
        accepted: </p><ul>
        <li>The host must not be a bootstrap host for database replication.</li>
        <li>The host must not have any forests configured.</li>
        <li>The host must not serve as a failover host for shared disk failover.</li>
      </ul><p> If and only if the above criteria are met, the host is removed from the cluster. You
        can remove a host either by requesting it to remove itself or by requesting another host to
        remove it, using <code>remote-host</code>. </p><p> The preferred method is to request a host
        to remove itself by sending a DELETE request directly to it. This results in a clean, but
        uninitialized standalone MarkLogic host and a functioning cluster. </p><p> If you request
        one host in the cluster to remove another (by specifying the host to be removed using
          <code>remote-host</code>), the result is a function cluster, but the removed host is no
        longer a viable MarkLogic Server instance. If the removed host is still live, it will
        continue to try to communicate with the cluster until it is shut down. This method is best
        used to drop a dead host from a cluster or when the departing host will be shut down
        immediately. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://departing-host:8001/admin/v1/host-config

==> Request a host to leave the cluster, resulting in a restart.
    This is the preferred way to remove a host from a cluster.
    MarkLogic Server sends a response similar to the following. Use the
    Location header or the restart/link/uriref to detect when the 
    restart is complete.

HTTP/1.1 202 Accepted
Content-type: application/xml
Location: /admin/v1/timestamp
Server: MarkLogic
Content-Length: 260
Connection: Keep-Alive
Keep-Alive: timeout=5

<restart xmlns="http://marklogic.com/manage">
  <last-startup host-id="13544732455686476949">
    2013-05-15T09:01:43.019261-07:00
  </last-startup>
  <link>
    <kindref>timestamp</kindref>
    <uriref>/admin/v1/timestamp</uriref>
  </link>
  <message>Check for new timestamp to verify host restart.</message>
</restart>
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://cluster-host:8001/admin/v1/host-config?remote-host=departing-host

==> Request one host to remove another from a cluster. The departing
    host is not restarted and is not a viable instance. MarkLogic Server
    responds with status code 204 (No Content).

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
  </apidoc:function>
  <!-- ******************** meters ******************** -->
  <apidoc:function name="/manage/v2/meters" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address lists all existing meters with descriptions and units, including cluster-id and host-id.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> (default) or <code>xml</code> or <code>html</code>. This value overrides the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>text/html</code>, <code>application/xml</code> or <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (Not Found) is returned if the page cannot be found. </apidoc:response>
    <apidoc:usage schema="meters.xsd" element-name="meter-document"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: 
	  <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/meters

==> Returns all of the metrics. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/resources" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address returns a list of all of the resources in the local
      cluster that existed in specified time period.. Note that using the <code>start</code> and
        <code>end</code> parameters to define a time range may be expensive. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="period" type="dateTime"> The frequency of the returned data. A value of
          <code>raw</code> returns the resources just as they were captured with the set frequency.
        A value of <code>hour</code> returns the resources once per hour (this is the default). A
        value of <code>day</code> returns the resources once per day. </apidoc:param>
      <apidoc:param name="start" type="dateTime"> Return the resource list, starting at this
        timestamp (in the form of <code>dateTime</code>). </apidoc:param>
      <apidoc:param name="end" type="dateTime"> Return the resource list, ending at this timestamp
        (in the form of <code>dateTime</code>). </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-resources.xsd" print-intro="false" element-name="resources">
      <p>The structure of the data in the response body is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/meters/resources

==> Returns the list resources in the cluster.  
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/labels" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address returns all of the labels stored for the monitoring
      history timespans. All labels are returned, unless the <code>start</code>, <code>end</code>,
      or <code>name</code> parameters specify otherwise. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="name" type="string"> Return only the label that match this name. The name
        can include wildcards, so more than one label can be returned. </apidoc:param>
      <apidoc:param name="start" type="dateTime"> Return the labels with timespans that fall on or
        after this timestamp (in the form of <code>dateTime</code>). </apidoc:param>
      <apidoc:param name="end" type="dateTime"> Return the labels with timespans that fall on or
        before this timestamp (in the form of <code>dateTime</code>). </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="labels.xsd" print-intro="false" element-name="labels">
      <p>The structure of the data in the response body is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/meters/labels

==> Returns all of the monitoring history labels. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use labels.xsd and label. -->
  <apidoc:function name="/manage/v2/meters/labels" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address creates a label and returns the ID of the created label.
        <p> The label <code>name</code> must be unique. The <code>event</code> element in the
        payload body must be either <code>marker</code> or <code>duration</code>. </p>
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK) and the ID of the
      created label. </apidoc:response>
    <apidoc:usage schema="labels.xsd" print-intro="false" element-name="labels">
      <p>The structure of the data in the request body is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat label.xml
==>
  <label xmlns="http://marklogic.com/manage/meters/label">
     <name>new label</name>  
     <event>marker</event>         
     <start_dt>2013-10-08T00:00:00</start_dt>
     <end_dt>2013-10-09T00:00:00</end_dt>
     <text>label text</text>
     <meta><info>more information</info></meta>
   </label>

curl -i -X POST --digest -u admin:password \
     -H "Content-type: application/xml" -d @label.xml \
     http://localhost:8002/manage/v2/meters/labels

==> Posts the label to MarkLogic Server and returns the 
    generated id.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/labels" http-verb="OPTIONS" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address returns information on the
        <code>/manage/v2/meters/labels</code> endpoint. </apidoc:summary>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK) and the
      information on the labels endpoint. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X OPTIONS --digest -u admin:password \
    http://localhost:8002/manage/v2/meters/labels

==>
   <rest:request xmlns:rest="http://marklogic.com/appservices/rest">
     <rest:http method="GET HEAD OPTIONS">
       <rest:param name="start" as="dateTime" required="true" default="1970-01-01T00:00:00"/>
       <rest:param name="end" as="dateTime" required="true" default="2013-10-10T10:18:08"/>
       <rest:param name="name" as="string" default="*"/>
     </rest:http>
     <rest:http method="POST">
       <rest:content-type>application/json</rest:content-type>
       <rest:content-type>application/xml</rest:content-type>
     </rest:http>
     <rest:param name="format" as="string" values="xml|json|html"/>
     <rest:or>
       <rest:accept>application/xml</rest:accept>
       <rest:accept>application/json</rest:accept>
       <rest:accept>text/html</rest:accept>
     </rest:or>
   </rest:request>
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/labels/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address returns the named label stored for the monitoring history
      timespans. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> (default), or <code>xml</code>. This value overrides the Accept header
        if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>text/html</code>, <code>application/xml</code> or <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the label information. </apidoc:response>
    <apidoc:usage schema="labels.xsd" element-name="labels"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/meters/labels/mylabel

==> Returns information on the 'mylabel' label. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- FIXME Needs schemas after 7.0-1. Use labels.xsd and label. -->
  <apidoc:function name="/manage/v2/meters/labels/{id|name}" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address updates an existing label and returns the ID of the
      updated label. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). </apidoc:response>
    <apidoc:usage schema="labels.xsd" print-intro="false" element-name="labels">
      <p>The structure of the data in the request body is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat UpdateLabel.xml
==>
  <label xmlns="http://marklogic.com/manage/meters/label">
     <id>3108808182876923314</id>
     <name>update label</name>  
     <event>marker</event>         
     <start_dt>2013-10-08T00:00:00</start_dt>
     <end_dt>2013-10-09T00:00:00</end_dt>
     <text>label text</text>
     <meta><info>more information</info></meta>
   </label>

curl -X PUT --digest -u admin:password \
     -H "Content-type: application/xml" -d @UpdateLabel.xml \
     http://localhost:8002/manage/v2/meters/labels/3108808182876923314

==> Updates the 3108808182876923314 label on MarkLogic Server.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/labels/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address deletes the named label. </apidoc:summary>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --digest -u admin:password \
     http://localhost:8002/manage/v2/meters/labels/3108808182876923314

==> Deletes the 3108808182876923314 label from MarkLogic Server.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/labels/{id|name}" http-verb="HEAD" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address tests to see if the named label is in MarkLogic Server. </apidoc:summary>
    <apidoc:response>
      <code>200 OK</code> is returned if the named label exists. Otherwise <code>404 Not
        Found</code> is returned. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -i -X HEAD --digest -u admin:password \
    http://localhost:8002/manage/v2/meters/labels/3108808182876923314

==> Checks for the existance of the 3108808182876923314 label.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/meters/labels/{id|name}" http-verb="OPTIONS" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Meters">
    <apidoc:summary> This resource address returns information on the
        <code>/manage/v2/meters/labels/{id|name}</code> endpoint. </apidoc:summary>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK) and the
      information on the labels endpoint. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X OPTIONS --digest -u admin:password \
     http://localhost:8002/manage/v2/meters/labels/3108808182876923314

==>

   <rest:request xmlns:rest="http://marklogic.com/appservices/rest">
     <rest:uri-param name="version">$1</rest:uri-param>
     <rest:uri-param required="false" name="label-id">$2</rest:uri-param>
     <rest:http method="GET HEAD OPTIONS">
       <rest:param name="start" as="dateTime" required="true" default="1970-01-01T00:00:00"/>
       <rest:param name="end" as="dateTime" required="true" default="2013-10-10T13:34:58"/>
       <rest:param name="name" as="string" default="*"/>
     </rest:http>
     <rest:http method="PUT">
       <rest:content-type>application/json</rest:content-type>
       <rest:content-type>application/xml</rest:content-type>
     </rest:http>
     <rest:http method="DELETE"/>
     <rest:param name="format" as="string" values="xml|json|html"/>
     <rest:or>
       <rest:accept>application/xml</rest:accept>
       <rest:accept>application/json</rest:accept>
       <rest:accept>text/html</rest:accept>
     </rest:or>
   </rest:request>
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** CPF ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/cpf-configs" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the list of CPF configurations. For an example,
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2339893'>Installing and Configuring CPF</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="cpf-config-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/cpf-configs

==> Returns CPF configuration for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/cpf-configs" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address creates a CPF configuration for the database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the request body. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      payload is malformed or the database doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-cpf-config-properties.xsd" print-intro="false"
      element-name="cpf-config-properties"> The request body takes the following form. The
        <code>conversion-enabled</code> boolean logically maps onto the
        <code>conversion-enabled</code> setting contained within domain configuration. <p> Note: The
        properties described here are for XML payloads. In general they are the same for JSON, with
        the exception that, in JSON, <code>permissions</code> is expressed in singular form. For
        example, in JSON, <code>permissions</code> is instead <code>permission</code> and the format
        is as shown in the example below. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
# load default pipelines (Status Change Handling & Flexible Replication)
# on the Triggers database.

curl -X POST --anyauth --user admin:admin --header \
"Content-Type:application/json" -d'{"operation":"load-default-cpf-pipelines"}' \
http://localhost:8002/manage/v2/databases/Triggers/pipelines?format=json

# create a CPF domain for Flexible Replication on the Triggers database.

cat domain_payload.json
==> 
{
    "domain-name": "myDomain",
    "description": "mydesc",
    "scope": "directory",
    "uri": "/",
    "depth": "infinity",
    "eval-module": "Modules",
    "eval-root": "/",
    "pipeline":["Status Change Handling","Flexible Replication"]
}

curl -X POST --anyauth --user admin:admin --header \
"Content-Type:application/json" -d@domain_payload.json \
http://localhost:8002/manage/v2/databases/Triggers/domains?format=json

# Install and configure CPF on the Triggers database.

cat setup-cpf.json
==> 
{
    "domain-name": "myDomain",
    "restart-user-name": "admin",
    "eval-module": "Modules",
    "eval-root": "/",
    "conversion-enabled": true,
    "permission": [{
        "role-name": "app-user",
        "capability": "read"
    }]
}'

curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d@setup-cpf.json http://localhost:8002/manage/v2/databases/Triggers/cpf-configs?format=json


    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address deletes the CPF configuration for the specified domain.
      The database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 200 (OK) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/pipelines/MyDomian

==>  Deletes the CPF configuration for the "MyDomian" domain from the "Documents" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the CPF configuration for the specified domain. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="cpf-config-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/cpf-configs/MyDomian

==> Returns CPF configuration for the "MyDomian" domain for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the CPF configuration properties for the
      specified domain. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-cpf-config-properties.xsd" element-name="cpf-config-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/cpf-configs/MyDomian/properties

==> Returns CPF configuration properties for the MyDomian domain for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address updates the CPF configuration on the specified domain for
      the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed or the database doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-cpf-config-properties.xsd" print-intro="false"
      element-name="cpf-config-properties"> The request body can contain the following elements. <p>
        Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>permissions</code> is expressed in singular
        form. For example, in JSON, <code>permissions</code> is instead <code>permission</code>.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"conversion-enabled": false}' \
http://localhost:8002/manage/v2/databases/Documents/cpf-configs/MyDomian/properties

==>  Disables CPF on the "MyDomain" domain for the Documents database.  
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** Domains ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/domains" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the list of domains for the specified tiggers
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="domain-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      <p> Note that, if a domain was created by a user with the <code>admin</code> role, then it
        will not be visible to a user with the <code>manage-user</code> role. </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Triggers/domains

==> Returns the list of domains for the Triggers database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/domains" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address creates a new domain for the specified Triggers database.
 For an example, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2339893'>Installing and Configuring CPF</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      domain already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-domain-properties.xsd" print-intro="false"
      element-name="domain-properties"> The structure of the data in the request body is as follows.
      The <code>domain-name</code> property is required and accepts a string value. The
        <code>scope</code> property can be set to <code>collection</code>, <code>directory</code>,
      or <code>document</code>. The <code>uri</code> property is <code>/</code>, by default. The
        <code>depth</code> property is required when <code>scope</code> is set to
        <code>directory</code>. The <code>eval-modules</code> property is <code>Modules</code>, by
      default. The <code>eval-root</code> property is <code>/</code>, by default. <p> Note: The
        properties described here are for XML payloads. In general they are the same for JSON, with
        the exception that, in JSON, <code>pipelines</code> and <code>permissions</code> are
        expressed in singular form. For example, in JSON, <code>permissions</code> is instead
          <code>permission</code> and the format is: <code>"permission":[{"role-name":"name",
          "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat domain.json
==> 
   {
     "domain-name": "myDomain",
     "description": "mydesc",
     "scope": "directory",
     "uri": "/",
     "depth": "infinity",
     "eval-module": "Modules",
     "eval-root": "/"
   }

curl -X POST --anyauth --user admin:admin \
--header "Content-Type:application/json" \
-d@domain.json http://localhost:8002/manage/v2/databases/Triggers/domains?format=json

==> Creates a new domain, named "myDomain," in the Triggers database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/domains/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the configuration of the specified domain for the
      specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="domain-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/domains/MyDomain

==> Returns the configuration of the "MyDomain" domain for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/domains/{id|name}" http-verb="POST"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)" hidden="true">
    <apidoc:summary> This resource address allows you to attach and detach pipelines to the
      specified domain for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      database already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage> To attach pipelines to the domain, the structure of the data in the request body
      is as follows. <pre xml:space="preserve"><![CDATA[
   {
     "operation": "attach-pipelines",
     "pipeline": []
   }
    ]]></pre> To attach pipelines from the domain, the structure of the data in the request body is
      as follows. <pre xml:space="preserve"><![CDATA[
   {
     "operation": "detach-pipelines",
     "pipeline": []
   }
    ]]></pre>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
 
curl -X POST  --anyauth --user admin:admin --header "Content-Type:application/json" \
-d'{"operation":"attach-pipelines","pipeline": ["Flexible Replication","Status Change Handling"]}' \
'http://localhost:8002/manage/v2/databases/Triggers/domains/myDomain?format=json'

==>  Attaches the "Flexible Replication" and "Status Change Handling" pipelines
     to the domain, "myDomain," in the Triggers database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/domains/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address deletes the named domain from the database. The database
      can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 200 (OK) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/domains/MyDomain

==>  Deletes the "MyDomain" domain from the "Documents" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/domains/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the properties of the specified domain for the
      specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-domain-properties.xsd" element-name="domain-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      <p> Note that, if a domain was created by a user with the <code>admin</code> role, then it
        will not be visible to a user with the <code>manage-user</code> role. </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/domains/MyDomain/properties

==> Returns the properties of the "MyDomain" domain for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/domains/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address can be used to update the properties of the specified
      domain for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed or the database doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-domain-properties.xsd" print-intro="false"
      element-name="domain-properties"> The request body can contain the properties listed below.
        <p> Note: The properties described here are for XML payloads. In general they are the same
        for JSON, with the exception that, in JSON, <code>pipelines</code> and
          <code>permissions</code> are expressed in singular form. For example, in JSON,
          <code>permissions</code> is instead <code>permission</code> and the format is:
          <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

curl -X POST --anyauth --user admin:admin \
--header "Content-Type:application/json" \
-d'{"description": "my new domain"}' \
http://localhost:8002/manage/v2/databases/Triggers/domains/myDomain?format=json
 
==> Updates the description of the domain, "myDomain," to "my new domain."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/pipelines" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the list of pipelines for the specified database.
 For an example, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2339893'>Installing and Configuring CPF</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="pipeline-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      <p> Note that, if a pipeline was created by a user with the <code>admin</code> role, then it
        will not be visible to a user with the <code>manage-user</code> role. </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/pipelines

==> Returns the list of pipelines for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/pipelines" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address can be used to create and load CPF pipelines for the
      specified database. For details on creating pipelines, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/cpf/quickStart.xml%2350034'>Create the Pipeline</a> in the <em>Content Processing Framework Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      pipeline already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-pipeline-properties.xsd" print-intro="false"
      element-name="pipeline-properties">
      <p> Use the following operation to load the pipelines. This operation loads the pipelines from
        the <code>/opt/MarkLogic/Installer</code> directory. Reapplying this operation will
        effectively reinstall cpf pipelines from the current MarkLogic distribution, which is needed
        to upgrade pipelines. </p>
      <pre xml:space="preserve"><![CDATA[
{
  "operation": "load-default-cpf-pipelines"
}
    ]]></pre> The structure of the data in the request body to create a new pipeline is as follows.
      For details about the purpose of each element and its possible values, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/cpf/pipelines.xml%2321444'>XML Format of a Pipeline</a> in the <em>Content Processing Framework Guide</em>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat pipeline.json
==> 
{
  "pipeline-name": "Status Change Handling",
  "pipeline-description": "Out-of-the-box document status handling.",
  "success-action": {
    "module": "/MarkLogic/cpf/actions/success-action.xqy"
  },
  "failure-action": {
    "module": "/marklogic/cpf/actions/failure-action.xqy"
  },
  "status-transition": [
    {
      "annotation": "",
      "status": "created",
      "on-success": "http://marklogic.com/states/initial",
      "priority": 100,
      "default-action": {
        "module": "/marklogic/cpf/actions/set-updated-action.xqy"
      },
      "execute": [
        {
          "condition": {
            "module": "/marklogic/cpf/actions/changed-type-condition.xqy"
          },
          "action": {
            "module": "/marklogic/cpf/actions/success-action.xqy"
          }
        },
        {
          "condition": {
            "module": "/MarkLogic/cpf/actions/renamed-links-condition.xqy"
          },
          "action": {
            "module": "/MarkLogic/cpf/actions/link-rename-action.xqy"
          }
        },
        {
          "condition": {
            "module": "/MarkLogic/cpf/actions/existing-state-condition.xqy"
          },
          "action": {
            "module": "/MarkLogic/cpf/actions/touch-state-action.xqy"
          }
        }
      ]
    }
  ]
}

curl -X POST --anyauth --user admin:admin \
--header "Content-Type:application/json" -d@pipeline.json \
http://localhost:8002/manage/v2/databases/Triggers/pipelines?format=json
 
==> Creates a new pipeline, named "Status Change Handling," in the Triggers
    database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/pipelines/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the configuration for the specified pipeline for
      the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="pipeline-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      <p> Note that, if a pipeline was created by a user with the <code>admin</code> role, then it
        will not be visible to a user with the <code>manage-user</code> role. </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/pipelines/MyPipeline

==> Returns the configuration of the "MyPipeline" pipeline for the 
    Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/pipelines/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address deletes the named pipeline from the database. The
      database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, a status code of 200 (OK) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/pipelines/MyPipeline

==>  Deletes the "MyPipeline" pipeline from the "Documents" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/pipelines/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address returns the properties of the specified pipeline for the
      specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-pipeline-properties.xsd" element-name="pipeline-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      <p> Note that, if a pipeline was created by a user with the <code>admin</code> role, then it
        will not be visible to a user with the <code>manage-user</code> role. </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/pipelines/MyPipeline/properties

==> Returns the properties of the "MyPipeline" pipeline for the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/pipelines/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Content Processing Framework (CPF)">
    <apidoc:summary> This resource address can be used to update the properties of the specified
      pipeline for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed or the database doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-pipeline-properties.xsd" print-intro="false"
      element-name="pipeline-properties"> The structure of the data in the request body is as
      follows. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
 
curl -X PUT --anyauth --user admin:admin --header "Content-Type:application/json" \
-d'{"pipeline-description": "Out-of-the-box document status handling."}' \
http://localhost:8002/manage/v2/databases/Documents/pipelines/MyPipeline/properties

==> Changes the description of the "MyPipeline" pipeline for the Documents database.

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ******************** SQL Views ******************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address returns the list of SQL View Schemas for the specified
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="view-schema-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Schemas/view-schemas

==> Returns the list of SQL View Schemas for the Schemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address creates a SQL View Schema in the specified schemas
      database. This schema can contain both Range Views and Template Views. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      database already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-view-schema-properties.xsd" print-intro="false"
      element-name="view-schema-properties"> The structure of the data in the request body is shown
      below. <p> Note: The properties described here are for XML payloads. In general they are the
        same for JSON, with the exception that, in JSON, <code>views</code> and
          <code>permissions</code> are expressed in singular form. For example, in JSON,
          <code>permissions</code> is instead <code>permission</code> and the format is:
          <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
 
curl -X POST  --anyauth --user $MANAGEADMIN:$MANAGEPASS \
--header "Content-Type:application/json" -d '{"view-schema-name": "main"}' \
http://localhost:8002/manage/v2/databases/Schemas/view-schemas?format=json

==> Adds a SQL View Schema, named "main," to the Schemas database.

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address returns the specified SQL View Schema for the specified
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="view-schema-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Schemas/view-schemas/main

==> Returns the configuration of the "main" SQL View Schema in the 
    Schemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address deletes the named SQL View Schema from the database. The
      database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="delete-views" type="string"> Set to <code>true</code> to delete the views
        in the schema, or <code>false</code> to preserve the views. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> If the View Schema does not exist, a status code of 204 (No Content) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Schemas/view-schemas/main

==>  Deletes the "main" SQL View Schema from the "Schemas" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address returns the properties of the specified SQL View Schema
      for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-view-schema-properties.xsd" element-name="view-schema-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Schemas/view-schemas/main/properties

==> Returns the properties of the "main" View Schema for the Schemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address can be used to update the properties of a SQL View Schema
      in the specified SQL Schema for the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed or the database doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-view-schema-properties.xsd" print-intro="false"
      element-name="view-schema-properties"> The properties that can be modified are listed below.
        <p> Note: The properties described here are for XML payloads. In general they are the same
        for JSON, with the exception that, in JSON, <code>views</code> and <code>permissions</code>
        are expressed in singular form. For example, in JSON, <code>permissions</code> is instead
          <code>permission</code> and the format is: <code>"permission":[{"role-name":"name",
          "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

curl -X PUT --anyauth --user admin:admin --header "Content-Type:application/json" \
-d'{"views": ["dataview1","dataview2"]}' \
http://localhost:8002/manage/v2/databases/Schemas/view-schemas/main/properties

==> Adds the SQL Views, "dataview1" and "dataview2," to the "main" schema
    in the Schemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address returns the list of SQL Views for the specified schema in
      the specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="view-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/SQLschemas/view-schemas/main/views

==> Returns the list of SQL View in the 'main' schemas in the SQLschemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views"
    http-verb="POST" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address adds a SQL View to the specified schema on the specified
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      schema already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-view-properties.xsd" print-intro="false"
      element-name="view-properties"> To add a SQL View, named "myTable1," the structure of the data
      in the request body is as follows. <p> The <code>view-name</code> property is required and
        will be converted to all lowercase. The <code>schema-name</code> property must be selected
        from the list of view-schemas. By default, <code>view-schema-name</code> is set to
          <code>main</code>. The <code>scope</code> property can be either <code>none</code>
        (default), <code>{"collection":""}</code>, or <code>{"namespace-uri":"",
          "localname":""}</code>. The <code>columns</code> properties must reference existing
        indexes on the database. </p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>columns</code>, <code>views</code>, and
          <code>permissions</code> are expressed in singular form. For example, in JSON,
          <code>permissions</code> is instead <code>permission</code> and the format is:
          <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
      <p> The following is the payload expected to create a column for each type of range index.
        </p><p> Path Range Index: <pre xml:space="preserve"><![CDATA[
     "path-reference":{
         "path-expression":"path", 
         "scalar-type":"type", 
         "collation":"http://marklogic.com/collation/codepoint"
     }
    ]]></pre>
      </p><p> Element Range Index (The <code>collation</code> element is optional): <pre xml:space="preserve"><![CDATA[
     "element-reference":{
        "namespace-uri":"", 
        "localname":"name", 
        "scalar-type":"type", 
        "collation":"http://marklogic.com/collation/"
     }
    ]]></pre>
      </p><p> Attribute Range Index (The <code>collation</code> element is optional): <pre xml:space="preserve"><![CDATA[
     "element-attribute-reference":{
        "parent-namespace-uri":"", 
        "parent-localname":"name", 
        "namespace-uri":"", 
        "localname":"name", 
        "scalar-type":"type", 
        "collation":"http://marklogic.com/collation/"
     }
    ]]></pre>
      </p><p> Field Index: <pre xml:space="preserve"><![CDATA[
     "field": [{
        "field-name": "name",
     }]
    ]]></pre>
 </p><p> For details on schemas and views, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/intro.xml%2387693'>SQL on MarkLogic Server</a> in the <em>SQL Data Modeling Guide</em>.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat myTable1.json
==> 

{
     "view-name": "myTable1",
     "element-scope":{"namespace-uri":"", "localname":"message"},
     "column": [
       {
         "column-name": "message_list",
         "element-attribute-reference": {
            "parent-namespace-uri" : "",
            "parent-localname": "message",
            "namespace-uri":"",
            "localname": "list",
            "scalar-type":"string"
         }
       },
       {
         "column-name": "subject",
         "element-reference": {
            "namespace-uri": "",
            "localname": "subject",
            "scalar-type": "string" 
         }
       },
       {
         "column-name": "body_url",
         "path-reference": {
            "path-expression": "/message/body/url",
            "scalar-type": "anyURI",
            "collation":"http://marklogic.com/collation/codepoint"
         }
     }],
     "field": [
         {"field-name": "position"}
      ]
}
 
curl -X POST  --anyauth --user $MANAGEADMIN:$MANAGEPASS \
--header "Content-Type:application/json" -d @myTable1.json \
http://localhost:8002/manage/v2/databases/SQLschemas/view-schemas/main/views?format=json

==> Creates a SQL view, named "myTable1", in the 'main' schema
    in the SQLschemas database.

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address returns the specified SQL View for the specified
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="view-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/SQLschemas/view-schemas/main/views/myTable1

==> Returns the configuration of the "myTable1" SQL View in the 'main' schema
    in the SQLschemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address deletes the named SQL View from the database. The
      database can be identified either by id or name. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="delete-views" type="string"> Set to <code>true</code> to delete the views
        in the schema, or <code>false</code> to preserve the views. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> If the View does not exist, a status code of 204 (No Content) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin --header "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/SQLschemas/view-schemas/main/views/myTable1

==>  Deletes the "myTable1" SQL View from the "Schemas" database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address returns the properties of the specified SQL View for the
      specified database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-view-properties.xsd" element-name="view-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/SQLschemas/view-schemas/main/views/myTable1/properties

==> Returns the properties of the "myTable1" View for the Schemas database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}/properties"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="SQL Schemas and Views">
    <apidoc:summary> This resource address can be used to update the properties for a SQL View in
      the Schemas database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed or the database doesn't exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-view-properties.xsd" print-intro="false"
      element-name="view-properties"> The properties that can be modified are listed below. <p>
        Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>columns</code>, <code>views</code>, and
          <code>permissions</code> are expressed in singular form. For example, in JSON,
          <code>permissions</code> is instead <code>permission</code> and the format is:
          <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth --user admin:admin \
--header "Content-Type:application/json" -d'{"view-name": "test"}' \
http://localhost:8002/manage/v2/databases/SQLschemas/view-schemas/main/views/myTable1/properties

==> Changes the name of the "myTable1" view to "test" in the Schemas database.

    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ************************* Security ************************** -->
  <apidoc:function name="/manage/v2/users" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the users in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false" element-name="user-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/users

  ==>  Returns a list of the users in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/users" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new user in the security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the user
      already exists or if the payload is malformed, a status code of 400 (Bad Request) is returned.
      A status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-user-properties.xsd" print-intro="false"
      element-name="user-properties">
      <p>The structure of the data in the request body is shown below. The <code>user-name</code>
        and <code>password</code> properties are required.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>roles</code>, <code>external-names</code>,
          <code>permissions</code>, and <code>collections</code> are expressed in singular form. For
        example, in JSON, <code>permissions</code> is instead <code>permission</code> and the format
        is: <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d '{"user-name":"joe", 
       "password": "cool",
       "role": [ "rest-reader", "rest-writer" ] 
      }' \
  http://localhost:8002/manage/v2/users

  ==>  Creates a user, named '"joe" with the "rest-reader" and "rest-writer" 
       roles, in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/users/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified user. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="user-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/users/joe

==> Returns the configuration of the user, "joe, "in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/users/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named user from the named security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon completion, MarkLogic Server returns status code 204 (No Content). A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin \
http://localhost:8002/manage/v2/users/joe

==>  Deletes the user, "joe," from the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/users/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified user. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-user-properties.xsd" element-name="user-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/users/joe/properties

==> Returns the properties of the user, "joe," from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/users/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      user. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the database doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-user-properties.xsd" print-intro="false"
      element-name="user-properties"> The properties that can be modified are listed below. If
        <code>user-name</code> is specified, <code>password</code> must also be specified. <p> Note:
        The properties described here are for XML payloads. In general they are the same for JSON,
        with the exception that, in JSON, <code>roles</code>, <code>external-names</code>,
          <code>permissions</code>, and <code>collections</code> are expressed in singular form. For
        example, in JSON, <code>permissions</code> is instead <code>permission</code> and the format
        is: <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"description":"joe cool"}' http://localhost:8002/manage/v2/users/Joe/properties
 
==>  Changes the description for the user, "joe," to "joe cool." 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/roles" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the roles in the security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false" element-name="role-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/roles

  ==>  Returns a list of the roles in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/roles" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new role in the security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the role
      already exists or if the payload is malformed, a status code of 400 (Bad Request) is returned.
      A status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-role-properties.xsd" print-intro="false"
      element-name="role-properties">
      <p>The structure of the data in the request body is shown below. The <code>role-name</code>
        property is required. The <code>compartment</code> property cannot be changed after
        creation. </p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>roles</code>, <code>permissions</code>,
          <code>privileges</code>, <code>collections</code>, and <code>task-days</code> are
        expressed in singular form. For example, in JSON, <code>roles</code> is instead
          <code>role</code> and the format is: <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  curl -X POST  --anyauth -u admin:admin -H "Content-Type:application/json" \
  -d '{"role-name":"engineer"}' http://localhost:8002/manage/v2/roles

  ==>  Creates a role, named "engineer," in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/roles/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified role. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="role-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/roles/engineer

==> Returns the configuration of the role, "engineer, "in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/roles/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named role from the named security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the role does not exist, a status code of 400 (Bad Request) is returned. A status
      code of 401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/roles/engineer?

==>  Deletes the role, "engineer," from the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/roles/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified role. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-role-properties.xsd" element-name="role-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/roles/engineer/properties

==> Returns the properties of the role, "engineer," from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/roles/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      role. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the database doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-role-properties.xsd" element-name="role-properties"> The properties
      that can be modified are shown below. <p> Note: The properties described here are for XML
        payloads. In general they are the same for JSON, with the exception that, in JSON,
          <code>roles</code>, <code>permissions</code>, <code>privileges</code>,
          <code>collections</code>, and <code>task-days</code> are expressed in singular form. For
        example, in JSON, <code>roles</code> is instead <code>role</code> and the format is:
          <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"description":"engineers"}' http://localhost:8002/manage/v2/roles/engineer/properties
 
==>  Changes the description for the role, "engineer," to "engineers". 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/privileges" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the privileges in the security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false"
      element-name="privilege-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/privileges

  ==>  Returns a list of the privileges in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/privileges" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new privilege in the security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      privilege already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-privilege-properties.xsd" print-intro="false"
      element-name="privilege-properties">
      <p>The structure of the data in the request body is as shown below. The
          <code>privilege-name</code> and <code>kind</code> properties are required. </p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>roles</code> is expressed in singular form.
        For example, in JSON, <code>roles</code> is instead <code>role</code> and the format is:
          <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  curl -X POST  --anyauth -u admin:admin -H "Content-Type:application/json" \
  -d '{"privilege-name":"engineer-execute", "kind":"execute"}' \
  http://localhost:8002/manage/v2/privileges

  ==>  Creates an execute privilege, named '"engineer-execute," in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/privileges/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified privilege. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="kind" type="string"> The kind of privilege. Can be either
          <code>execute</code> or <code>uri</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="privilege-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/privileges/engineer-execute

==> Returns the configuration of the privilege, "engineer-execute,"
    in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/privileges/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named privilege from the named security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="kind" type="string"> The kind of privilege. Can be either
          <code>execute</code> or <code>uri</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the privilege does not exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/privileges/engineer-execute

==>  Deletes the privilege, "engineer-execute," from the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/privileges/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified privilege. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="kind" type="string"> The kind of privilege. Can be either
          <code>execute</code> or <code>uri</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-privilege-properties.xsd" element-name="privilege-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/privileges/engineer-execute/properties

==> Returns the properties of the privilege, "engineer-execute," 
    from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/privileges/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      privilege. The only thing you can change about a privilege is the set of associated roles. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="kind" type="string"> The kind of privilege. Can be either
          <code>execute</code> or <code>uri</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the privilege doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-privilege-properties.xsd" element-name="privilege-properties"> The
      properties that can be modified are listed below. <p> Note: The properties described here are
        for XML payloads. In general they are the same for JSON, with the exception that, in JSON,
          <code>roles</code> is expressed in singular form. For example, in JSON, <code>roles</code>
        is instead <code>role</code> and the format is: <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"role":["engineers", "qa"]}' \
http://localhost:8002/manage/v2/privileges/engineer-execute/properties
 
==>  Changes the roles for the "engineer-execute" privilege to "engineers" 
     and "qa". 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/security" http-verb="GET" lib="manage" 
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>Retrieve a summary of security information for the cluster.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="view" type="string" optional="false">
        A specific view of the returned data. Allowed values: <code>default</code>.
      </apidoc:param>
      <apidoc:param name="format" type="string" optional="false">
        The format of the returned data. Can be either <code>html</code>, <code>json</code>, 
        or <code>xml</code> (default). This value overrides the Accept header if both are 
        present. Value can be <code>xml</code>, <code>json</code> or <code>html</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false">
        The expected MIME type of the request body. If the <code>format</code> parameter 
        is present, it takes precedence over the Accept header. 
      </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> 
        The MIME type of the data in the response body. Depending upon the value of the 
        <code>format</code> parameter or Accept header, one of <code>application/xml</code>, 
        <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      <p>A successful call to the endpoint will return the HTTP code <code>200 OK</code>. 
       This is the standard response for successful HTTP requests. The actual response will 
       depend on the request method used.</p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">text/html</td>
	    <td rowspan="1" colspan="1" nowrap="none">HTML Web Content</td>
	  </tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:privilege>
      This operation requires the <code>manage-admin</code> role, or the following privilege: <p>
      <code>http://marklogic.com/xdmp/privileges/manage</code>
      </p>
    </apidoc:privilege>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/xml"  http://localhost:8002/manage/v2/security
            </pre><p>Output:</p><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;security-default-list xsi:schemaLocation="http://marklogic.com/manage/security manage-security.xsd" xmlns="http://marklogic.com/manage/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;meta&gt;
    &lt;uri&gt;/manage/v2/security&lt;/uri&gt;
    &lt;current-time&gt;2017-05-02T02:05:24.0916378-07:00&lt;/current-time&gt;
    &lt;elapsed-time units="sec"&gt;0.0117656&lt;/elapsed-time&gt;
  &lt;/meta&gt;
  &lt;related-views&gt;
    &lt;related-view array="true"&gt;
      &lt;view-type&gt;item&lt;/view-type&gt;
      &lt;view-name&gt;properties&lt;/view-name&gt;
      &lt;view-uri&gt;security/properties&lt;/view-uri&gt;
    &lt;/related-view&gt;
  &lt;/related-views&gt;
&lt;/security-default-list&gt;</pre><p>This is the XML output for GET.</p></apidoc:example>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/json"  http://localhost:8002/manage/v2/security
            </pre><p>Output:</p><pre>	{
		"security-default-list":{
			"meta":{
				"uri":"/manage/v2/security",
				"current-time":"2017-05-02T02:05:24.0945418-07:00",
				"elapsed-time":{
					"units":"sec",
					"value":0.0111712}
				}
			,
			"related-views":{
				"related-view":{
					"view-type":"item",
					"view-name":"properties",
					"view-uri":"security/properties"}
				}
			}
		}
	
</pre><p>This is the JSON output for GET.</p></apidoc:example>
  </apidoc:function>
   
   <apidoc:function name="/manage/v2/security" http-verb="POST" lib="manage" 
       category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>
      Perform a security operation such as rotating configuration, data, or log encryption keys.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="operation" type="string" optional="false">
        The operation to be performed. Allowed values: <code>rotate-config-encryption-key</code>, 
        <code>rotate-data-encryption-key</code>, <code>rotate-logs-encryption-key</code>,
        <code>import-wallet</code>, <code>export-wallet</code>. You can only use
        this parameter when put the request parameters in request body and use
        <code>application/x-www-form-url-encoded</code> as the request content type.
        For other request content types, specify the operation in the JSON or XML
        payload.
      </apidoc:param>
      <apidoc:param name="filename" type="string" optional="false">
        When <code>operation</code> is <code>import-wallet</code>, the fully qualified
        path to an encrypted wallet file on the MarkLogic host. When <code>operation</code>
        is <code>export-wallet</code>, the fully qualified path to a file on the MarkLogic
        host where the encrypted wallet should be saved. You can only use
        this parameter when put the request parameters in request body and use
        <code>application/x-www-form-url-encoded</code> as the request content type.
        For other request content types, specify the filename in the JSON or XML
        payload.
      </apidoc:param>
      <apidoc:param name="password" type="string" optional="false">
        When <code>operation</code> is <code>import-wallet</code>, password with which
        to decrypt the wallet file.  When <code>operation</code> is <code>export-wallet</code>, 
        the password with which to encrypt the wallet file. You can only use
        this parameter when put the request parameters in request body and use
        <code>application/x-www-form-url-encoded</code> as the request content type.
        For other request content types, specify the password in the JSON or XML
        payload.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type of the data 
        in the request body. Depending upon the value of the <code>format</code> parameter or Accept header, 
        one of <code>application/xml</code>, <code>application/json</code>, or 
        <code>application/x-www-form-url-encoded</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return the HTTP code <code>201 Created</code>. 
           The request has been fulfilled, resulting in the creation of a new resource.</p>
         <div class="consumes">
            <table>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/x-www-form-urlencoded</td>
	    <td rowspan="1" colspan="1" nowrap="none">Form Encoded</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td>
	  </tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage>
      When importing or exporting a wallet file, the file name specified in the request
      must be reachable from the host that receives this request. The specified file 
      must be readable by MarkLogic on import, and writable by MarkLogic on export.
     <p>Use the <code>export-wallet</code> and <code>import-wallet</code> operations
      to export or import a keystore wallet. Use the <code>rotate-*-encryption-key</code>
      operations to manually rotate your various encryption keys. For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/encryption.xml%2378690'>Key Management</a> in the <em>Security Guide</em>.
     </p><p>
     </p>
    </apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: <p>
            <code>http://marklogic.com/xdmp/privileges/manage</code>
         </p>
      </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
# Rotating the configuration encryption key:
curl --anyauth --user username:password -i -X POST --header "Content-Type:application/json" \
   -d '{"operation":"rotate-config-encryption-key"}' \
   https://localhost:8002/manage/v2/security
    ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
# Import a wallet to MarkLogic
curl --anyauth --user username:password -i -X POST --header "Content-Type:application/json" \
   -d '{"operation":"import-wallet", "filename"="/your/file/here", "password": "yourpassword"}' \
   https://localhost:8002/manage/v2/security
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2/security/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>Retrieve security properties for a cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the
        response. Allowed values: <code>json</code> (default), <code>xml</code>, or
        <code>html</code>. This value overrides the Accept header if both are present. 
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
        <code>format</code> parameter is present, it takes precedence over the Accept header. 
        Allowed values: <code>application/json</code>, <code>application/xml</code>,
        <code>text/html</code>.
      </apidoc:header>
      <apidoc:header name="Content-type" type="response">
        The MIME type of the data in the reponse, based on the value of the
        <code>format</code> parameter or Accept header. One of the following: 
        <code>application/xml</code>, <code>application/json</code>, or
        <code>text/html</code>. 
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the 
      request is malformed, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. 
    </apidoc:response>
    <apidoc:usage schema="manage-security-properties.xsd" element-name="security-properties"> The
      properties that can be returned are listed below. 
     <p> Note: The properties described here are for XML payloads. In general they are the 
      same for JSON, with the exception that, in JSON, <code>roles</code> is expressed in 
      singular form. For example, in JSON, <code>roles</code> is instead <code>role</code> 
      and the format is: <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles or equivalent privileges. 
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X -GET --anyauth -u username:password -H "Accept:application/json" \
  http://localhost:8002/manage/v2/security/properties 

==> MarkLogic returns a response similar to the following:

HTTP/1.1 200 OK
ETag: 3b00eced72d4589d7e2b1a6151698343
Content-type: application/json; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 355
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "keystore": {
    "data-encryption": "default-off",
    "config-encryption": "off",
    "logs-encryption": "off",
    "kms-type": "internal",
    "host-name": "localhost",
    "port": 9056,
    "data-encryption-key-id": "b38a2a30-0d99-4b94-ad72-ede292fd920b",
    "config-encryption-key-id": "e60db9ce-98e7-4d6f-9eb3-0ed49ef8fe8b",
    "logs-encryption-key-id": "ebc99a7d-3dc5-4991-a231-42ca68e42640"
} }
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X -GET --anyauth -u username:password -H "Accept:application/xml" \
  http://localhost:8002/manage/v2/security/properties 
 
==> MarkLogic returns a response similar to the following:

HTTP/1.1 200 OK
ETag: 3b00eced72d4589d7e2b1a6151698343
Content-type: application/xml; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 789
Connection: Keep-Alive
Keep-Alive: timeout=5

<security-properties 
   xsi:schemaLocation="http://marklogic.com/manage/security/properties manage-security-properties.xsd"
   xmlns="http://marklogic.com/manage/security/properties"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <keystore>
    <data-encryption>default-off</data-encryption>
    <config-encryption>on</config-encryption>
    <logs-encryption>off</logs-encryption>
    <kms-type>internal</kms-type>
    <host-name>localhost</host-name>
    <port>9056</port>
    <data-encryption-key-id>8003785c-3fb6-48d2-bb7a-1785ec31a69f</data-encryption-key-id>
    <config-encryption-key-id>96d7c56b-eb6c-4e9a-b3f1-eb10aa82b586</config-encryption-key-id>
    <logs-encryption-key-id>084ddf54-a463-40eb-97a8-e5d3af9753f9</logs-encryption-key-id>
  </keystore>
</security-properties>
    ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2/security/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>Update security properties.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
        <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. 
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
        <code>format</code> parameter is present, it takes precedence over the Accept header. 
        Allowed values: <code>application/json</code>, <code>application/xml</code>.
      </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. 
      </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
        <code>application/xml</code> or <code>application/json</code>. 
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed, a status code of 400 (Bad Request) is returned. A status code of 401 
      (Unauthorized) is returned if the user does not have the necessary privileges. 
    </apidoc:response>
    <apidoc:usage schema="manage-security-properties.xsd" element-name="security-properties">
      The properties that can be modified are listed below. 
     <p> Note: The properties described here are for XML payloads. In general they are 
      the same for JSON, with the exception that, in JSON, <code>roles</code> is expressed in 
      singular form. For example, in JSON, <code>roles</code> is instead <code>role</code> 
      and the format is: <code>"role":["rolename"]</code>. </p>
     <p>When setting protected-paths, you must also set permissions.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. 
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
#! /bin/bash
# update security properties

# you must add manageadmin user with manage-admin role
MANAGEADMIN="manageadmin"
MANAGEPASS="x"

# update security properties (requires security role) 
curl -v -X PUT  --anyauth --user $MANAGEADMIN:$MANAGEPASS \
  --header "Content-Type:application/json" \
  -d '{"keystore":{"data-encryption":"default-off"}}' \
  http://127.0.0.1:8002/manage/v2/security/properties
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/amps" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the amps in the security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false" element-name="amp-default-list">
      <p>The structure of the data in the response for the default view is as follows.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>roles</code> is expressed in singular form.
        For example, in JSON, <code>roles</code> is instead <code>role</code> and the format is:
          <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/amps

  ==>  Returns a list of the amps in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/amps" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new amp in the Security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      privilege already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-amp-properties.xsd" print-intro="false"
      element-name="amp-properties">
      <p>The structure of the data in the request body is as follows. All of the properties are
        required. If the module is on the filesystem, use the empty string for the modules database.
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
newamp.json

{
  "namespace": "http://example.com/uri",
  "local-name": "local",
  "document-uri": "/module/path/name",
  "modules-database": "",
  "role": [
    "a",
    "b",
    "c"
  ]
}

curl -X POST  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d @newamp.json http://localhost:8002/manage/v2/amps

==>  Creates a new amp, named "local," in the Security database. 
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/amps/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified amp. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="namespace" type="string"> The namespace in which the amped function is
        defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="document-uri" type="string"> The URI of the document in which the amped
        function is defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="modules-database" type="string"> The name of the modules database, or omit
        to specify the filesystem. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="amp-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/amps/create-foo?document-uri=/module/path/name&namespace=http://example.com/uri

==> Returns the configuration of the amp, "create-foo,"
    in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/amps/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named amp from the named security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
      <apidoc:param name="namespace" type="string"> The namespace in which the amped function is
        defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="document-uri" type="string"> The URI of the document in which the amped
        function is defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="modules-database" type="string"> The name of the modules database, or omit
        to specify the filesystem. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the privilege does not exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/amps/create-foo?document-uri=/module/path/name&namespace=http://example.com/uri

==>  Deletes the amp, "create-foo," from the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/amps/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified amp. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="namespace" type="string"> The namespace in which the amped function is
        defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="document-uri" type="string"> The URI of the document in which the amped
        function is defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="modules-database" type="string"> The name of the modules database, or omit
        to specify the filesystem. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-amp-properties.xsd" element-name="amp-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/amps/create-foo/properties?document-uri=/module/path/name&namespace=http://example.com/uri

==> Returns the properties of the amp, "create-foo," from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/amps/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      amp. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="namespace" type="string"> The namespace in which the amped function is
        defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="document-uri" type="string"> The URI of the document in which the amped
        function is defined. This is a required parameter. </apidoc:param>
      <apidoc:param name="modules-database" type="string"> The name of the modules database, or omit
        to specify the filesystem. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the privilege doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-amp-properties.xsd" element-name="amp-properties"> The structure of
      the data in the request body is as follows. It is an error to attempt to change any aspect of
      an amp except the roles. <p> Note: The properties described here are for XML payloads. In
        general they are the same for JSON, with the exception that, in JSON, <code>roles</code> is
        expressed in singular form. For example, in JSON, <code>roles</code> is instead
          <code>role</code> and the format is: <code>"role":["rolename"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"role": ["manage-internal" ]}' 
http://localhost:8002/manage/v2/amps/create-foo/properties?document-uri=/module/path/name&namespace=http://example.com/uri
 
==>  Changes the amp, named "create-foo," to use the "manage-internal" role. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/external-security" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the external-security configurations
      in the security database. <p> For more information on external security, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2375253'>External Security</a> in the <em>Security Guide</em>. </p>
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false"
      element-name="external-security-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/external-security

  ==>  Returns a list of the external-security configurations 
       in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/external-security" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new external-security configuration in the
      security database. <p> For more information on external security, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2375253'>External Security</a> in the <em>Security Guide</em>. </p>
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      external-security configuration already exists or if the payload is malformed, a status code
      of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-external-security-properties.xsd" print-intro="false"
      element-name="external-security-properties">
      <p>The structure of the data in the request body is as follows. The <code>name</code>,
          <code>authentication</code>, and <code>authorization</code> properties are required. If
        either the <code>authentication</code> or <code>authorization</code> is <code>ldap</code>,
        then all of the <code>ldap-*</code> properties are also required. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat ExternalConfig.json
==>
{
  "external-security-name": "LDAP-security",
  "description": "Some description",
  "authentication": "ldap",
  "cache-timeout": "300",
  "authorization": "ldap",
  "ldap-server-uri": "LDAP uri",
  "ldap-base": "LDAP base for user lookup",
  "ldap-attribute": "LDAP attribute for user lookup",
  "ldap-default-user": "default",
  "ldap-password": "password",
  "ldap-bind-method": "simple"
}

curl -X POST  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d @ExternalConfig.json http://localhost:8002/manage/v2/external-security

==>  Creates an LDAP external security configuration, named "LDAP-security," 
     in the Security database. 
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/external-security/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the specified external-security configuration.
        <p> For more information on external security, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2375253'>External Security</a> in the <em>Security Guide</em>. </p>
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="external-security-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/external-security/MyExternalName

==> Returns the configuration of the external-security, "MyExternalName,"
    in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/external-security/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named external-security configuration from
      the named security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the external-security configuration does not exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/external-security/MyExternalName

==>  Deletes the external-security configuration, "MyExternalName," from the 
     Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/external-security/{id|name}/properties" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified external-security
      configuration. <p> For more information on external security, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2375253'>External Security</a> in the <em>Security Guide</em>. </p>
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-external-security-properties.xsd"
      element-name="external-security-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/external-security/MyExternalName/properties

==> Returns the properties of the external-security configuration, "MyExternalName," 
    from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/external-security/{id|name}/properties" http-verb="PUT"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      external-security configuration. <p> For more information on external security, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/security/external-auth.xml%2375253'>External Security</a> in the <em>Security Guide</em>. </p>
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the external-security configuration doesn't exist, a status code of
      400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-external-security-properties.xsd"
      element-name="external-security-properties"> The structure of the data in the request body is
      as follows. If specified, the <code>name</code> property must match the name specified in the
      URI. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin \
-H "Content-Type:application/json" -d '{"cache-timeout": "300"}' \
http://localhost:8002/manage/v2/external-security/MyExternalName/properties
 
==>  Changes the "cache-timeout" property to 300 in the external-security 
     configuration, named "MyExternalName." 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/protected-collections" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the protected collections in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false"
      element-name="protected-collections-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/protected-collections

  ==>  Returns a list of the collections in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/protected-collections" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new protected collection in the security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      protected collection already exists or if the payload is malformed, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-protected-collection-properties.xsd" print-intro="false"
      element-name="protected-collection-properties">
      <p>The structure of the data in the request body is shown below. The <code>collection</code>
        and <code>permissions</code> properties are required.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>permissions</code> is expressed in singular
        form. For example, in JSON, <code>permissions</code> is instead <code>permission</code> and
        the format is: <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  cat collection.json
  ==>
   {
     "collection": "http://example.org",
     "permission": [
       {
         "role-name": "view-admin",
         "capability": "read"
       }
     ]
   }
  
  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d @collection.json http://localhost:8002/manage/v2/protected-collections

  ==>  Creates a collection with the URI "http://example.org" in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/protected-collections?collection={collection-uri}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified protected
      collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The URI of the protected collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-protected-collection-properties.xsd"
      element-name="protected-collection-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/protected-collections?collection=http://example.org

==> Returns the configuration of the "http://example.org" protected collection
    in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/protected-collections?collection={collection-uri}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named protected collection from the Security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The URI of the protected collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the protected collection does not exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/protected-collections?collection=http://example.org

==>  Deletes the "http://example.org" protected collection from the Security 
     database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/protected-collections/properties?collection={collection-uri}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified protected
      collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the protected collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-protected-collection-properties.xsd"
      element-name="protected-collection-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/protected-collections/properties?collection=http://example.org

==> Returns the properties of the "http://example.org" protected collection 
    from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/protected-collections/properties?collection={collection-uri}"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      protected collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="string"> The URI of the protected collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the protected collection doesn't exist, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-protected-collection-properties.xsd" print-intro="false"
      element-name="protected-collection-properties">
      <p>The properties that can be modified are listed below. </p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>permissions</code> is expressed in singular
        form. For example, in JSON, <code>permissions</code> is instead <code>permission</code> and
        the format is: <code>"permission":[{"role-name":"name", "capability":"cap"}]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"permissions": [{"role-name": "view-admin","capability": "read"}]}' \
http://localhost:8002/manage/v2/protected-collections/properties?collection=http://example.org
 
==>  Changes the permissions for the "http://example.org" protected collection. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-authorities" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the certificate authorities in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false"
      element-name="certificate-authorities-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/certificate-authorities

  ==>  Returns a list of the certificate authorities in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-authorities" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new certificate authority in the security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. This must be <code>text/plain</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      certificate authority already exists or if the payload is malformed, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage> The contents of the request is a PEM-encoded certificate authority certificate. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  

cat certificate-authority.crt

==> 

<pki:certificate xmlns:pki="http://marklogic.com/xdmp/pki">
<pki:template-id>6264653696899042645</pki:template-id>
<pki:certificate-id>11056419645740622001</pki:certificate-id>
<pki:template-version>1</pki:template-version>
<pki:temporary>true</pki:temporary>
<pki:authority>true</pki:authority>
<pki:host-name>mycert Certificate Authority</pki:host-name>
<pki:pem>
-----BEGIN CERTIFICATE-----
MIIDPDCCAiSgAwIBAgIJAN+vzvihAy+IMA0GCSqGSIb3DQEBCwUAMDsxEjAQBgNV
BAoMCU1hcmtMb2dpYzElMCMGA1UEAwwcbXljZXJ0IENlcnRpZmljYXRlIEF1dGhv
cml0eTAeFw0xNDA5MTcyMTU5MDJaFw0xNTA5MTcyMTU5MDJaMDsxEjAQBgNVBAoM
CU1hcmtMb2dpYzElMCMGA1UEAwwcbXljZXJ0IENlcnRpZmljYXRlIEF1dGhvcml0
eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMAzX1vdjgcV2/j5FNH/
G5oDNqJupIjjxKJb9AqY6+Gf5m45sDRhz2bTuyqJUzipLei0xQKn901ZSMSCO7yW
1KFy4hbxtVYy9i4LEcTreY48xU7Fu5Hi2Qi6foP69D0gzYI3WW9oBpp4B5oTnDyX
XBariEbF4xl00wI9EQ1UEuriMX1EFwtr3Fa0srQN7NahPLSwbUx9yU2EjdHPaKez
vEd8LN8POuE2OzZshDY4GPl6EY6SG990NykU+SZxLMBpRFQ1YpWDgNe1Zcjyu2VW
Ai4x1pu6gUO/mquBPsbCl8Ujyl/jAbNlVncbsDFkAQZG9Qhz4AS8HxCW5pVNYZx1
dD0CAwEAAaNDMEEwDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAQYwEQYJYIZIAYb4
QgEBBAQDAgZAMBEGA1UdDgQKBAgky7mtT1Fl8DANBgkqhkiG9w0BAQsFAAOCAQEA
jiv0UpoSAl5MZStWenzVMOyeRjJhkzU1/cjurQxIYcRqVHhlZ3S1kbW4sBxzIJQQ
GzfmJYrNVX9u9f2B2W2FAbU77MBSqMYpmClNlcAniAVQiMI54vs6KkZU5YSd7TWM
WxkCi7WqfxqGCZKZZOHweKccjA7BVLX3qK/VdYd9n2RxZg3cOwLe/bOmQj6Pd4yB
Mq0u+dfZHzBYJseRVZLfyhZwk7XYSy6fYsHwsXmwjUFKuJmXPoSdT405yjTvtnoT
516FwCM2u8w2MRdvVquQfrSaTlFPy7R0qxh7SJclCvKgRkPNPc4LT34DjSUJ5k45
nZeJYELOLG9St3pmvnbRyQ==
-----END CERTIFICATE-----
</pki:pem>
<cert xmlns="http://marklogic.com/xdmp/x509">
<version>2</version>
<serialNumber>DFAFCEF8A1032F88</serialNumber>
<signatureType>sha256WithRSAEncryption</signatureType>
<issuer>
<organizationName>MarkLogic</organizationName>
<commonName>mycert Certificate Authority</commonName>
</issuer>
<validity>
<notBefore>2014-09-17T21:59:02Z</notBefore>
<notAfter>2015-09-17T21:59:02Z</notAfter>
</validity>
<subject>
<organizationName>MarkLogic</organizationName>
<commonName>mycert Certificate Authority</commonName>
</subject>
<publicKey>
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwDNfW92OBxXb+PkU0f8b
mgM2om6kiOPEolv0Cpjr4Z/mbjmwNGHPZtO7KolTOKkt6LTFAqf3TVlIxII7vJbU
oXLiFvG1VjL2LgsRxOt5jjzFTsW7keLZCLp+g/r0PSDNgjdZb2gGmngHmhOcPJdc
FquIRsXjGXTTAj0RDVQS6uIxfUQXC2vcVrSytA3s1qE8tLBtTH3JTYSN0c9op7O8
R3ws3w864TY7NmyENjgY+XoRjpIb33Q3KRT5JnEswGlEVDVilYOA17VlyPK7ZVYC
LjHWm7qBQ7+aq4E+xsKXxSPKX+MBs2VWdxuwMWQBBkb1CHPgBLwfEJbmlU1hnHV0
PQIDAQAB
-----END PUBLIC KEY-----
</publicKey>
<v3ext>
<basicConstraints critical="false">CA:TRUE</basicConstraints>
<keyUsage critical="false">Certificate Sign, CRL Sign</keyUsage>
<nsCertType critical="false">SSL Server</nsCertType>
<subjectKeyIdentifier critical="false">24:CB:B9:AD:4F:51:65:F0</subjectKeyIdentifier>
</v3ext>
</cert>
</pki:certificate>


curl -X POST --anyauth --user admin:admin --header "Content-Type:text/plain" \
-d@certificate-authority.crt http://localhost:8002/manage/v2/certificate-authorities

=> Creates a new certificate authority in the security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-authorities/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified certificate
      authority. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-server-properties.xsd"
      element-name="ssl-client-certificate-authorities"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/certificate-authorities/17718931361707361158

=> Returns the configuration for the certificate authority with the id,
   17718931361707361158.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-authorities/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named certificate authority from the Security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the certificate authority does not exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/certificate-authorities/foo

==>  Deletes the "foo" certificate authority from the Security 
     database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-authorities/{id|name}/properties" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified certificate
      authority. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-server-properties.xsd"
      element-name="ssl-client-certificate-authorities"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/certificate-authorities/foo/properties

==> Returns the properties of the "foo" certificate authority 
    from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the certificate templates in the
      cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-certificate-template-properties.xsd" print-intro="false"
      element-name="certificate-template-properties">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/certificate-templates

  ==>  Returns a list of the certificate templates in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address creates a new certificate template in the Security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      certificate template already exists or if the payload is malformed, a status code of 400 (Bad
      Request) is returned. A status code of 401 (Unauthorized) is returned if the user does not
      have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-certificate-template-properties.xsd" print-intro="false"
      element-name="certificate-template-properties">
      <p>The structure of the data in the request body is as follows. The <code>name</code>,
          <code>description</code>, and <code>csr </code> properties are required.</p> The value of
      the <code>key-options</code> is essentially arbitrary XML. This cannot be encoded in JSON
      without limitations. The JSON format therefore accepts only a subset of the possible key
      option values. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  cat myTemplate.json  
  ==>
 {
  "template-name": "myTemplate",
  "template-description": "My Template2",
  "key-type": "rsa",
  "key-options": {
    "key-length": "2048"
  },
  "req": {
    "version": "0",
    "subject": {
      "countryName": "US",
      "stateOrProvinceName": "CA",
      "localityName": "San Carlos",
      "organizationName": "MarkLogic",
      "organizationalUnitName": "Engineering",
      "commonName": "dude.marklogic.com",
      "emailAddress": "dude@marklogic.com"
    }
  }
}

  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d @myTemplate.json http://localhost:8002/manage/v2/certificate-templates

  ==>  Creates a certificate template, named "myTemplate" in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified certificate
      template. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="user-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/certificate-templates/myTemplate

==> Returns the configuration of the certificate template, "myTemplate,"
    in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named certificate template from the Security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the certificate template does not exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/users/certificate-templates/myTemplate

==>  Deletes the certificate template, "myTemplate," from the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates/{id|name}" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address is used to perform various operations on the specified
      certificate template. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). A status
      code of 401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage>
      <p> The available certificate template operations a summarized below. The details on each
        operation follow. <ul>
          <li><a href="#generateTCA">Generate Template Certificate Authority</a></li>
          <li><a href="#generateTC">Generate Temporary Certificate</a></li>
          <li><a href="#getC">Get Certificate</a></li>
          <li><a href="#getCFT">Get Certificates for a Template</a></li>
          <li><a href="#getPCR">Get Pending Certificate Request</a></li>
          <li><a href="#insertHC">Insert Host Certificate</a></li>
          <li><a href="#needC">Need Certificate?</a></li>
          <li><a href="#generateCSR">Generate Certificate Request</a></li>
          <li><a href="#getTCA">Get Template Certificate Authority</a></li>
        </ul>
      </p><p>
        <a id="generateTCA"/><b>Generate Template Certificate Authority</b>
        <p/> The following operation generates template certificate authority. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "generate-template-certificate-authority",
      "valid-for": 3
    }
     ]]></pre>
      </p><p>
        <a id="generateTC"/><b>Generate Temporary Certificate</b>
        <p/> The following operation generates temporary certificate. The <code>valid-for</code> and
          <code>common-name</code> properties are required. If not specified,
          <code>if-necessary</code> defaults to <code>true</code>. If <code>if-necessary</code> is
          <code>true</code> and a temporary certificate already exists for the template, this
        operation does nothing. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "generate-temporary-certificate",
      "valid-for": 3,
      "common-name": "some name",
      "dns-name": "example.com",
      "ip-addr": "localhost",
      "if-necessary": true
    }
     ]]></pre>
      </p><p>
        <a id="getC"/><b>Get Certificate</b>
        <p/> The following operation returns a certificate. The <code>common-name</code> property is
        required. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "get-certificate",
      "common-name": "some name",
      "dns-name": "example.com",
      "ip-addr": "localhost"
    }
     ]]></pre>
      </p><p>
        <a id="getCFT"/><b>Get Certificates for a Template</b>
        <p/> The following operation returns the certificates for a template. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "get-certificates-for-template"
    }
     ]]></pre>
      </p><p>
        <a id="getPCR"/><b>Get Pending Certificate Request</b>
        <p/> The following operation returns the pending request for a certificate. The
          <code>common-name</code> property is required. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "get-pending-certificate-request",
      "common-name": "some name",
      "dns-name": "example.com",
      "ip-addr": "localhost"
    }
     ]]></pre>
      </p><p>
        <a id="insertHC"/><b>Insert Host Certificate</b>
        <p/> The following operation inserts a host certificate. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "insert-host-certificate",
      "certs": "some certs",
      "pkey": "some key"
    }
     ]]></pre>
      </p><p>
        <a id="needC"/><b>Need Certificate?</b>
        <p/> The following operation determines if a certificate is needed for the template. Returns
          <code>true</code> if a certificate is needed for the template; <code>false</code>
        otherwise. The <code>common-name</code> property is required. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "need-certificate",
      "common-name": "some name",
      "dns-name": "example.com",
      "ip-addr": "localhost"
    }
     ]]></pre>
      </p><p>
        <a id="generateCSR"/><b>Generate Certificate Request</b>
        <p/> The following operation generates a certificate request in the form of a CSR. The
          <code>common-name</code> property is required. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "generate-certificate-request",
      "common-name": "some name",
      "dns-name": "example.com",
      "ip-addr": "localhost"
    }
     ]]></pre>
      </p><p>
        <a id="getTCA"/><b>Get Template Certificate Authority</b>
        <p/> The following operation gets a template certificate authority. </p><p>
        <pre xml:space="preserve"><![CDATA[
    {
      "operation": "get-template-certificate-authority"
    }
     ]]></pre>
      </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates/{id|name}/properties" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified certificate
      template. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-certificate-template-properties.xsd"
      element-name="certificate-template-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/certificate-templates/myTemplate/properties

==> Returns the properties of the certificate template, "myTemplate," 
    from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-templates/{id|name}/properties" http-verb="PUT"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      certificate template. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the database doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-certificate-template-properties.xsd" print-intro="false"
      element-name="certificate-template-properties"> The structure of the data in the request body
      is as follows. The <code>description</code>, <code>key-options</code>, <code>key-type</code>,
        <code>name</code>, and <code>certificate request</code> can be changed. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"description":"new template"}' \
http://localhost:8002/manage/v2/certificate-templates/myTemplate/properties
 
==>  Changes the description for the  certificate template, "myTemplate," 
     to "new template." 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificates" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns a summary of the certificates in the cluster. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" print-intro="false" element-name="user-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/certificates

  ==>  Returns a list of the certificates in the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificates" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address inserts one or more certificates into the Security
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="trusted" type="string"> Whether the inserted certificate is trusted or
        untrusted. If this parameter is <code>true</code>, the certificates are inserted without
        checking them. Otherwise, they are matched against previously generated CSRs and only
        matching certificates are inserted. The default value is <code>false</code>. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      certificates already exist or if the payload is malformed, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage> The request body consists of one or more certificates. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat certificate.txt

==> 

 -----BEGIN CERTIFICATE----- 
 MIIDnzCCAoegAwIBAgIBJjANBgkqhkiG9w0BAQUFADBxMQswCQYDVQQGEwJERTEc 
 MBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxlU2Vj 
 IFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290IENB 
 IDIwHhcNOTkwNzA5MTIxMTAwWhcNMTkwNzA5MjM1OTAwWjBxMQswCQYDVQQGEwJE 
 RTEcMBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxl 
 U2VjIFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290 
 IENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrC6M14IspFLEU 
 ha88EOQ5bzVdSq7d6mGNlUn0b2SjGmBmpKlAIoTZ1KXleJMOaAGtuU1cOs7TuKhC 
 QN/Po7qCWWqSG6wcmtoIKyUn+WkjR/Hg6yx6m/UTAtB+NHzCnjwAWav12gz1Mjwr 
 rFDa1sPeg5TKqAyZMg4ISFZbavva4VhYAUlfckE8FQYBjl2tqriTtM2e66foai1S 
 NNs671x1Udrb8zH57nGYMsRUFUQM+ZtV7a3fGAigo4aKSe5TBY8ZTNXeWHmb0moc 
 QqvF1afPaA+W5OFhmHZhyJF81j4A4pFQh+GdCuatl9Idxjp9y7zaAzTVjlsB9WoH 
 txa2bkp/AgMBAAGjQjBAMB0GA1UdDgQWBBQxw3kbuvVT1xfgiXotF2wKsyudMzAP 
 BgNVHRMECDAGAQH/AgEFMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOC 
 AQEAlGRZrTlk5ynrE/5aw4sTV8gEJPB0d8Bg42f76Ymmg7+Wgnxu1MM9756Abrsp 
 tJh6sTtU6zkXR34ajgv8HzFZMQSyzhfzLMdiNlXiItiJVbSYSKpk+tYcNthEeFpa 
 IzpXl/V6ME+un2pMSyuOoAPjPuCp1NJ70rOo4nI8rZ7/gFnkm0W09juwzTkZmDLl 
 6iFhkOQxIY40sfcvNUqFENrnijchvllj4PKFiDFT1FQUhXB59C4Gdyd1Lx+4ivn+ 
 xbrYNuSD7Odlt79jWvNGr4GUN9RBjNYj1h7P9WgbRGOiWrqnNVmh5XAFmw4jV5mU 
 Cm26OWMohpLzGITY+9HPBVZkVw== -----END CERTIFICATE-----


curl -X POST --anyauth --user admin:admin --header "Content-Type:text/html" \
--data-binary @certificate.txt http://localhost:8002/manage/v2/certificates

=> Creates a new certificate in the security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificates/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the configuration for the specified certificate. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="certificate-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/certificates/myCert

==> Returns the configuration of the certificate, "myCert,"
    in the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificates/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address deletes the named certificate from the Security database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the certificate template does not exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/certificates/myCert

==>  Deletes the certificate, "myCert," from the Security database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificates/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address returns the properties of the specified certificate. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="x509.xsd" element-name="cert"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/certificates/mycert/properties

==> Returns the properties of the certificate, "mycert," 
    from the Security database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/certificate-revocation-lists" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address inserts a PEM- or DER-encoded Certificate Revocation List
      (CRL) into the security database.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="url" type="string"> If this parameter is <code>CRL</code>, the request
        body contains the PEM- or DER-encoded Certificate Revocation List (CRL). If
        <code>URL</code>, the request body contains the URL from which the CRL was downloaded.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No content). A status
      code of 401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> The request body consists of one or more URLs or a Certificate Revocation List. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[


curl -X PUT --anyauth --user admin:admin --header "Content-Type:text/html" \
-d "http://crl.verisign.com/pca3.crl" \
http://localhost:8002/manage/v2/certificate-revocation-lists?url=url

=> Adds crl.verisign.com to the CRL. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
    <apidoc:function name="/manage/v2/protected-paths" http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security" hidden="false" xmlns:describe="http://marklogic.com/manage/describe" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xsd="http://marklogic.com/xdmp" xmlns="http://www.w3.org/1999/xhtml">
    <apidoc:summary>This resource endpoint retrieves a list of protected paths.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="fullrefs" type="boolean" optional="false">
            <span class="property-def">If set to <code>true</code>, full detail is returned for all relationship references. A value of <code>false</code> (the default), returns detail only for first few references. This is only applicable for 
			<code>view=status</code>.</span>
         </apidoc:param>
      <apidoc:param name="view" type="string" optional="false">
            <span class="property-def">A specific view of the returned data. Can be 
			either <code>schema</code>, <code>status</code>, <code>metrics</code>, 
			<code>query</code>, or <code>default</code>.</span>
            <span>Value can be <code>describe</code> or <code>default</code>.</span>
         </apidoc:param>
      <apidoc:param name="format" type="string" optional="false">
            <span class="property-def">The format of the returned
            data. Can be either <code>html</code>, <code>json</code>, or <code>xml</code>
            (default). This value overrides the Accept header if both are present.</span>
            <span>Value can be <code>xml</code>, <code>json</code>, or <code>html</code>.</span>
         </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type of 
	  the request body. If the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type of the
	  data in the request body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type of the data in the response body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return status code 200 (OK), and the response
		 body will contain the requested information. A status code of 401 (Unauthorized) is returned if the user does not have the necessary privileges for this action. A response code of 404 (Not Found) indicates that no such protected path exists.
		 </p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">text/html</td>
	    <td rowspan="1" colspan="1" nowrap="none">HTML Web Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" 
        element-name="protected-path-default-list"><p>
        This resource endpoint retrieves a list of protected paths.</p>
	  <p>This endpoint fits into the general pattern of read-only config.</p>
	</apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: <p>
            <code>http://marklogic.com/xdmp/privileges/manage</code>
         </p>
      </apidoc:privilege>
    <apidoc:example><pre >&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/xml"  http://localhost:8002/manage/v2/protected-paths
            </pre><p>Output:</p><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;protected-path-default-list xsi:schemaLocation="http://marklogic.com/manage/security manage-security.xsd" xmlns="http://marklogic.com/manage/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;meta&gt;
    &lt;uri&gt;/manage/v2/protected-paths&lt;/uri&gt;
    &lt;current-time&gt;2017-05-02T02:05:22.0143857-07:00&lt;/current-time&gt;
    &lt;elapsed-time units="sec"&gt;0.0100635&lt;/elapsed-time&gt;
  &lt;/meta&gt;
  &lt;list-items&gt;
    &lt;list-count units="quantity"&gt;0&lt;/list-count&gt;
  &lt;/list-items&gt;
  &lt;relations&gt;
    &lt;relation-group array="true"&gt;
      &lt;typeref&gt;security-database&lt;/typeref&gt;
      &lt;relation-count units="quantity"&gt;1&lt;/relation-count&gt;
      &lt;relation array="true"&gt;
	&lt;uriref&gt;/manage/v2/databases/Security&lt;/uriref&gt;
	&lt;roleref&gt;database&lt;/roleref&gt;
	&lt;idref&gt;7161534863501463199&lt;/idref&gt;
      &lt;/relation&gt;
    &lt;/relation-group&gt;
  &lt;/relations&gt;
&lt;/protected-path-default-list&gt;</pre><p>This is the XML output for GET.</p></apidoc:example>
    <apidoc:example><pre>&gt; 
             curl -X GET --anyauth -u admin:admin \
            -H "Content-Type:application/json"  \
             http://localhost:8002/manage/v2/protected-paths
            </pre><p>Output:</p><pre>	{
		"protected-path-default-list":{
			"meta":{
				"uri":"/manage/v2/protected-paths",
				"current-time":"2017-05-02T02:05:22.0171705-07:00",
				"elapsed-time":{
					"units":"sec",
					"value":0.0094396}
				}
			,
			"list-items":{
				"list-count":{
					"units":"quantity",
					"value":0}
				}
			,
			"relations":{
				"relation-group":{
					"typeref":"security-database",
					"relation-count":{
						"units":"quantity",
						"value":1}
					,
					"relation":{
						"uriref":"/manage/v2/databases/Security",
						"roleref":"database",
						"idref":"7161534863501463199",
						"nameref":"Security"}
					}
				}
			,
			"related-views":{
				"related-view":[
					{
						"view-type":"root",
						"view-name":"default",
						"view-uri":"/manage/v2"}
					]
				}
			}
		}
   </pre>
    <p>This is the JSON output for GET.</p>
    </apidoc:example>
  </apidoc:function>
  
  <apidoc:function name="/manage/v2/protected-paths" http-verb="POST" lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security" hidden="false" xmlns:describe="http://marklogic.com/manage/describe" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xsd="http://marklogic.com/xdmp" xmlns="http://www.w3.org/1999/xhtml">
    <apidoc:summary>This resource endpoint creates a new protected path using a 
     name or id passed in a payload.</apidoc:summary>
    <apidoc:params/>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type of 
        the request body. If the <code>format</code> parameter is present, it takes 
        precedence over the Accept header. 
      </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type 
       of the data in the request body. Depending upon the value of the <code>format</code> 
       parameter or Accept header, one of <code>application/xml</code>,
      <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type
        of the data in the response body. Depending upon the value of the <code>format</code> 
        parameter or Accept header, one of <code>application/xml</code>, 
         <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return the HTTP code 201 (Created). 
         The request has been fulfilled, resulting in the creation of a new 
		 resource. A status code of 400 (Bad Request) indicates that a protected path 
		 already exists, or that the payload is malformed. A status code of 401 
		 (Unauthorized) is returned if the user does not have the necessary privileges 
		 for this action. </p>
         <div class="consumes">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Consumes</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
            </table>
         </div>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-protected-path-properties.xsd" 
        element-name="protected-path">
	<p>This resource endpoint creates a new protected path using a name or id passed in 
	a payload.</p>
	<p> A "path-expression" is required.</p>
	<p> Payload must be valid according to the schema type <code>protected-path-properties</code> in the <code>manage-protected-path-properties.xsd</code> schema. JSON payloads are internally converted to XML before validation.</p>
	</apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: 
	   <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      </apidoc:privilege>
<apidoc:example>
<pre>&gt; curl -X POST --anyauth -u admin:admin 
-d @file.xml -H "Content-Type:application/xml"  
http://localhost:8002/manage/v2/protected-paths
</pre>
<p>Payload (as file.xml):</p>
<pre>
&lt;protected-path-properties xmlns="http://marklogic.com/manage/protected-path/properties"&gt;
 &lt;path-expression&gt;//d&lt;/path-expression&gt;
  &lt;path-namespaces/&gt;
   &lt;permissions&gt;
	&lt;permission&gt;
	 &lt;role-name&gt;manage-user&lt;/role-name&gt;
	 &lt;capability&gt;read&lt;/capability&gt;
	&lt;/permission&gt;
  &lt;/permissions&gt;
&lt;/protected-path-properties&gt;
</pre>
<p>This is the payload for POST as XML. The call does not return any content, beyond headers.</p></apidoc:example>
<apidoc:example>
<pre>&gt; curl -X POST --anyauth -u admin:admin \
-d @file.json -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/protected-paths
</pre><p>Payload (as file.json):</p>
<pre>
{
	"path-expression": "//e",
	"path-namespace": [],
	"permission": [{
		"role-name": ["manage-user"],
		"capability": "read"
	}]
}
   </pre>
   <p>This is the payload for POST as JSON. The call does not return any content, 
   beyond headers</p>
    </apidoc:example>
  </apidoc:function>

   <apidoc:function name="/manage/v2/protected-paths/{id|name}" http-verb="GET" lib="manage" 
    category="Management API" bucket="REST Resources API" subcategory="Security" 
   hidden="false" xmlns:describe="http://marklogic.com/manage/describe" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xsd="http://marklogic.com/xdmp" xmlns="http://www.w3.org/1999/xhtml">
    <apidoc:summary>This resource endpoint retrieves a given protected path.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="fullrefs" type="boolean" optional="false">
            <span class="property-def">If set to <code>true</code>, full detail
            is returned for all relationship references. A value of <code>false</code>
            (the default) indicates to return detail only for first references. 
            This is only applicable for <code>view=status</code>.</span>
         </apidoc:param>
      <apidoc:param name="view" type="string" optional="false">
            <span class="property-def">A specific view of the
            returned data. Can be either <code>schema</code>, <code>status</code>,
                <code>metrics</code>, <code>query</code>, or <code>default</code>.</span>
            <span>Value can be <code>describe</code> or <code>default</code>.</span>
         </apidoc:param>
      <apidoc:param name="format" type="string" optional="false">
            <span class="property-def">The format of the returned
            data. Can be either <code>html</code>, <code>json</code>, or <code>xml</code>
            (default). This value overrides the Accept header if both are present.</span>
            <span>Value can be <code>xml</code>, <code>json</code> or <code>html</code>.</span>
         </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> 
        The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the 
        Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> ]
         The MIME type of the data in the response
         body. Depending upon the value of the <code>format</code> parameter or 
         Accept header, one of
         <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
       </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return the HTTP code <code>200 OK</code>. 
         This is the standard response for successful HTTP requests. The actual response 
         will depend on the request method used.</p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">text/html</td>
	    <td rowspan="1" colspan="1" nowrap="none">HTML Web Content</td>
	  </tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" 
        element-name="protected-path-default">
       <p>This resource endpoint retrieves a given protected path.</p></apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role,
       or the following privilege: <p>
       <code>http://marklogic.com/xdmp/privileges/manage</code>
         </p>
      </apidoc:privilege>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/xml"  http://localhost:8002/manage/v2/protected-paths/
            </pre><p>Output:</p><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;protected-path-default-list xsi:schemaLocation="http://marklogic.com/manage/security manage-security.xsd" xmlns="http://marklogic.com/manage/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;meta&gt;
    &lt;uri&gt;/manage/v2/protected-paths/&lt;/uri&gt;
    &lt;current-time&gt;2017-05-02T02:05:22.1043833-07:00&lt;/current-time&gt;
    &lt;elapsed-time units="sec"&gt;0.010264&lt;/elapsed-time&gt;
  &lt;/meta&gt;
  &lt;list-items&gt;
    &lt;list-count units="quantity"&gt;0&lt;/list-count&gt;
  &lt;/list-items&gt;
  &lt;relations&gt;
    &lt;relation-group array="true"&gt;
      &lt;typeref&gt;security-database&lt;/typeref&gt;
      &lt;relation-count units="quantity"&gt;1&lt;/relation-count&gt;
      &lt;relation array="true"&gt;
	&lt;uriref&gt;/manage/v2/databases/Security&lt;/uriref&gt;
	&lt;roleref&gt;database&lt;/roleref&gt;
	&lt;idref&gt;7161534863501463199&lt;/idref&gt;
      &lt;/relation&gt;
    &lt;/relation-group&gt;
  &lt;/relations&gt;
&lt;/protected-path-default-list&gt;</pre><p>This is the XML output for GET.</p></apidoc:example>
    <apidoc:example><pre>&gt;
             curl -X GET --anyauth -u admin:admin \
            -H "Content-Type:application/json" \ 
             http://localhost:8002/manage/v2/protected-paths//11247920484610845208
            </pre><p>Output:</p><pre>	{
		"protected-path-default-list":{
			"meta":{
				"uri":"/manage/v2/protected-paths/",
				"current-time":"2017-05-02T02:05:22.1039234-07:00",
				"elapsed-time":{
					"units":"sec",
					"value":0.0107508}
				}
			,
			"list-items":{
				"list-count":{
					"units":"quantity",
					"value":0}
				}
			,
			"relations":{
				"relation-group":{
					"typeref":"security-database",
					"relation-count":{
						"units":"quantity",
						"value":1}
					,
					"relation":{
						"uriref":"/manage/v2/databases/Security",
						"roleref":"database",
						"idref":"7161534863501463199",
						"nameref":"Security"}
					}
				}
			,
			"related-views":{
				"related-view":[
					{
						"view-type":"root",
						"view-name":"default",
						"view-uri":"/manage/v2"}
					]
				}
			}
		}
	
</pre><p>This is the JSON output for GET.</p></apidoc:example>
  </apidoc:function>
   

   
   <apidoc:function name="/manage/v2/protected-paths/{id|name}" http-verb="DELETE" 
   lib="manage" category="Management API" bucket="REST Resources API" subcategory="Security" 
   hidden="false" xmlns:describe="http://marklogic.com/manage/describe" 
   xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xsd="http://marklogic.com/xdmp"
   xmlns="http://www.w3.org/1999/xhtml">
    <apidoc:summary>This resource endpoint deletes a given protected path using a 
     name or id passed in the URL.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="force" type="boolean" optional="false">
        You will get an error if you attempt to delete a protected-path that has
        permissions on it.  Set <code>force</code> to <code>true</code> to 
        remove all of the permissions and delete the path.  Otherwise, set to
        <code>false</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> 
       The expected MIME type of the request body. If
       the <code>format</code> parameter is present, it takes precedence over the
       Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME 
      type of the data in the request
       body. Depending upon the value of the <code>format</code> 
       parameter or Accept header, one of
       <code>application/xml</code>, <code>application/json</code>, 
       or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> 
        The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or
        Accept header, one of
        <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return the HTTP code 
          <code>204 No Content</code>. The server successfully processed the request 
          and is not returning any content.</p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td>
	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td>
	  </tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage><p>This resource endpoint deletes a given protected path 
     using a name or id passed in the URL.</p></apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, 
      or the following privilege: <p>
       <code>http://marklogic.com/xdmp/privileges/manage</code>
         </p>
      </apidoc:privilege>
    <apidoc:example><pre>&gt;
            curl -X DELETE --anyauth -u admin:admin \
            -H "Content-Type:application/xml" \
            http://localhost:8002/manage/v2/protected-paths/11247920484610845208
    </pre><p>This deletes the given entry. The call does not return any content, beyond headers.</p></apidoc:example>
  </apidoc:function>
   
  <apidoc:function name="/manage/v2/protected-paths/{id}/properties" 
      http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API" 
      subcategory="Security">
    <apidoc:summary>
      This resource endpoint retrieves the properties of specific protected 
      path. Specify the protected path id returned when creating a protecting 
      path for <code>{id}</code> the request URI.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string" optional="false">
        The format of the returned data. Can be <code>html</code>, 
        <code>json</code>, or <code>xml</code> (default). This value overrides 
        the Accept header if both are present. 
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> 
        The expected MIME type of the request body. If the <code>format</code> 
        parameter is present, it takes precedence over the Accept header. 
      </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> 
        The MIME type of the data in the response body. Depending upon the value of 
        the <code>format</code> parameter or Accept header, one of 
        <code>application/xml</code>, <code>application/json</code>, or 
        <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      A successful call to the endpoint will return the HTTP code 
      <code>200 OK</code>. The format of the data in the response
      body depends on the <code>format</code> parameter or Accept header.
    </apidoc:response>
    <apidoc:usage schema="manage-protected-path-properties.xsd" 
                  element-name="protected-path"/>
    <apidoc:privilege>This operation requires the <code>Security</code> role, 
      or the following privilege: 
      <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code> </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET --anyauth --user username:password -i -H "Content-type: application/xml" \
   http://localhost:8002/manage/v2/protected-paths/4818252820611606393/properties

==> MarkLogic responds with output similar to the following.

HTTP/1.1 200 OK
ETag: 867a3d5a8dae2aed4f0d8fe4038fecd9
Content-type: application/xml; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 397
Connection: Keep-Alive
Keep-Alive: timeout=5

<protected-path-properties xmlns="http://marklogic.com/manage/protected-path/properties">
  <path-id>4818252820611606393</path-id>
  <path-expression>/root/reg[fn:matches(@expr, 'is')]</path-expression>
  <path-namespaces/>
  <permissions>
    <permission>
      <role-name>els-role-2</role-name>
      <capability>read</capability>
    </permission>
  </permissions>
</protected-path-properties>
    ]]></pre>
    </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X GET --anyauth --user username:password -i -H "Content-type: application/json" \
   http://localhost:8002/manage/v2/protected-paths/4818252820611606393/properties

==> MarkLogic responds with output similar to the following.

HTTP/1.1 200 OK
ETag: 867a3d5a8dae2aed4f0d8fe4038fecd9
Content-type: application/json; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 153
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "path-id": "4818252820611606393", 
  "path-expression": "/root/reg[fn:matches(@expr, 'is')]", 
  "permission":[ {"role-name": "els-role-2", "capability": "read"} ]
}
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
   
  <apidoc:function name="/manage/v2/protected-paths/{id}/properties" 
       http-verb="PUT" lib="manage" category="Management API" 
       bucket="REST Resources API" subcategory="Security" >
    <apidoc:summary>
      This resource endpoint updates one or more properties of a protected path.
      Specify the path id in the <code>{id}</code> portion of the request URI.     
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> 
        The format of the returned data. Can be either <code>json</code> or 
        <code>xml</code> (default). 
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="request" optional="false"> 
        The MIME type of the data in the request body. One of the following MIME types:
        <code>application/xml</code>, <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      A successful call to the endpoint returns the HTTP code <code>204 No Content</code>. 
      The server successfully processed the request and is not returning any content.
    </apidoc:response>
    <apidoc:usage schema="manage-protected-path-properties.xsd" 
                  element-name="protected-path" print-intro="fasel">
      This structure of the data in the request body is as follows:
    </apidoc:usage>
    <apidoc:privilege>This operation requires the <code>security</code> role, or 
     the following privilege: <p>
        <code>http://marklogic.com/xdmp/privileges/manage-admin</code>
         </p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume properties.xml contains the following data:

<protected-path-properties xmlns="http://marklogic.com/manage/protected-path/properties">
  <permissions>
    <permission>
      <role-name>app-user</role-name>
      <capability>read</capability>
    </permission>
    <permission>
      <role-name>hadoop-user-write</role-name>
      <capability>update</capability>
    </permission>
  </permissions>
</protected-path-properties>

curl --anyauth --user username:password -i -X PUT \
  -H "Content-type: application/xml" -d @./properties.xml \
  http://localhost:8002/manage/v2/protected-paths/14320590660078181486/properties

==> The permissions property of the specified protected path is replaced with
    that specified in the request body. MarkLogic returns a response similar 
    to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 20
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user username:password -i -X PUT -H "Content-type: application/json" \
  -d {"permission":[{"role-name":"app-user", "capability":"read"} ]} \
  http://localhost:8002/manage/v2/protected-paths/14320590660078181486/properties

==> MarkLogic returns a response similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 20
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2/query-rolesets" http-verb="GET" lib="manage" 
      category="Management API" bucket="REST Resources API" subcategory="Security" >
    <apidoc:summary>This resource endpoint retrieves a list of query rolesets.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="fullrefs" type="boolean" optional="false">
            <span class="property-def">If set to <code>true</code>, full detail is returned for all relationship references. A value of <code>false</code> (the default), returns detail only for first few references. This is only applicable for 
			<code>view=status</code>.</span>
         </apidoc:param>
      <apidoc:param name="view" type="string" optional="false">
            <span class="property-def">A specific view of the
            returned data. Can be either <code>schema</code> , <code>status</code> ,
                <code>metrics</code> , <code>query</code> , or <code>default</code> .</span>
            <span>Value can be <code>describe</code> or <code>default</code>.</span>
         </apidoc:param>
      <apidoc:param name="format" type="string" optional="false">
            <span class="property-def">The format of the returned data. Can be either 
			<code>html</code>, <code>json</code>, or <code>xml</code> (default). This 
			value overrides the Accept header if both are present.</span>
            <span>Value can be <code>xml</code>, <code>json</code> or <code>html</code>.</span>
         </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type 
	  of the request body. If the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type of 
	  the data in the request body. Depending upon the value of the <code>format</code> 
	  parameter or Accept header, one of <code>application/xml</code>, 
	  <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type of 
	  the data in the response body. Depending upon the value of the <code>format</code> 
	  parameter or Accept header, one of <code>application/xml</code>, 
	  <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return status code 200 (OK), and the response
		 body will contain the requested information. A status code of 401 (Unauthorized) is returned if the user does not have the necessary privileges for this action. A response code of 404 (Not Found) indicates that no such protected path exists.
		 </p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">text/html</td>
	    <td rowspan="1" colspan="1" nowrap="none">HTML Web Content</td>
	  </tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-query-roleset-properties.xsd" 
        element-name="query-roleset-properties">
	<p>This resource endpoint retrieves a list of query rolesets.</p>
	<p>This endpoint fits into the general pattern of read-only config.</p>
	</apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: 
	     <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      </apidoc:privilege>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/xml"  http://localhost:8002/manage/v2/query-rolesets
            </pre><p>Output:</p><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;query-roleset-default-list xsi:schemaLocation="http://marklogic.com/manage/security manage-security.xsd" xmlns="http://marklogic.com/manage/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;meta&gt;
    &lt;uri&gt;/manage/v2/query-rolesets&lt;/uri&gt;
    &lt;current-time&gt;2017-05-02T02:05:22.2925663-07:00&lt;/current-time&gt;
    &lt;elapsed-time units="sec"&gt;0.0129177&lt;/elapsed-time&gt;
  &lt;/meta&gt;
  &lt;list-items&gt;
    &lt;list-count units="quantity"&gt;0&lt;/list-count&gt;
  &lt;/list-items&gt;
  &lt;relations&gt;
    &lt;relation-group array="true"&gt;
      &lt;typeref&gt;security-database&lt;/typeref&gt;
      &lt;relation-count units="quantity"&gt;1&lt;/relation-count&gt;
      &lt;relation array="true"&gt;
	&lt;uriref&gt;/manage/v2/databases/Security&lt;/uriref&gt;
	&lt;roleref&gt;database&lt;/roleref&gt;
	&lt;idref&gt;7161534863501463199&lt;/idref&gt;
      &lt;/relation&gt;
    &lt;/relation-group&gt;
  &lt;/relations&gt;
&lt;/query-roleset-default-list&gt;</pre><p>This is the XML output for GET.</p></apidoc:example>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/json"  http://localhost:8002/manage/v2/query-rolesets
            </pre><p>Output:</p><pre>	{
		"query-roleset-default-list":{
			"meta":{
				"uri":"/manage/v2/query-rolesets",
				"current-time":"2017-05-02T02:05:22.2946254-07:00",
				"elapsed-time":{
					"units":"sec",
					"value":0.0109554}
				}
			,
			"list-items":{
				"list-count":{
					"units":"quantity",
					"value":0}
				}
			,
			"relations":{
				"relation-group":{
					"typeref":"security-database",
					"relation-count":{
						"units":"quantity",
						"value":1}
					,
					"relation":{
						"uriref":"/manage/v2/databases/Security",
						"roleref":"database",
						"idref":"7161534863501463199",
						"nameref":"Security"}
					}
				}
			,
			"related-views":{
				"related-view":[
					{
						"view-type":"root",
						"view-name":"default",
						"view-uri":"/manage/v2"}
					]
				}
			}
		}
	</pre>
    <p>This is the JSON output for GET.</p>
	</apidoc:example>
  </apidoc:function>
  
  <apidoc:function name="/manage/v2/query-rolesets" http-verb="POST" lib="manage" 
      category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>This resource endpoint creates a new query roleset using a 
	name or id passed in a payload.
	</apidoc:summary>
      <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected 
	  MIME type of the request body. If the <code>format</code> parameter is 
	  present, it takes precedence over the Accept header. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> 
	  The MIME type of the data in the request body. Depending upon the value of 
	  the <code>format</code> parameter or Accept header, one of 
	  <code>application/xml</code>, <code>application/json</code>, 
	  or <code>text/html</code>. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The 
	  MIME type of the data in the response body. Depending upon the value of 
	  the <code>format</code> parameter or Accept header, one of 
	  <code>application/xml</code>, <code>application/json</code>, or 
	  <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return 201 (Created), 
		 resulting in the creation of new query rolesets. A response code of 
		 400 (Bad Request) indicates either the query rolesets already exist, 
		 or the payload is malformed. A status code of 401 (Unauthorized) is 
		 returned if the user does not have the necessary privileges for 
		 this action.</p>
         <div class="consumes">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Consumes</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
            </table>
         </div>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-query-roleset-properties.xsd" print-intro="false" 
        element-name="query-roleset-properties">
      This request accepts a payload with the following structure.
	</apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the 
	   following privilege: 
	   <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      </apidoc:privilege>
    <apidoc:example><pre>&gt; curl -X POST --anyauth -u admin:admin 
	     -d @file.xml -H "Content-Type:application/xml" http://localhost:8002/manage/v2/query-rolesets
    </pre><p>Payload (as file.xml):</p><pre>
	    &lt;query-roleset-properties xmlns="http://marklogic.com/manage/query-roleset/properties"&gt;
	      &lt;query-roleset&gt;
                &lt;role-name&gt;rest-reader&lt;/role-name&gt;
              &lt;/query-roleset&gt;
              &lt;query-roleset&gt;
                &lt;role-name&gt;my-role&lt;/role-name&gt;
              &lt;/query-roleset&gt;
            &lt;/query-roleset-properties&gt;</pre>
		<p>This is the payload for POST as XML. The call does not return any content, beyond headers.</p>
 </apidoc:example>
 <apidoc:example><pre>&gt; curl -X POST --anyauth -u admin:admin 
        -d @file.json -H "Content-Type:application/json" http://localhost:8002/manage/v2/query-rolesets
    </pre><p>This is the payload for POST as JSON (as file.json). The call does not return 
	any content, beyond headers.</p>
	<pre>{"query-rolesets" : { "role":"pii" } }</pre>
   </apidoc:example>
  </apidoc:function>
  
  <apidoc:function name="/manage/v2/query-rolesets/{id|name}" http-verb="GET" lib="manage" 
      category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>This resource endpoint retrieves a given query roleset.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="fullrefs" type="boolean" optional="false">
            <span class="property-def">If set to <code>true</code>, full detail is returned 
			for all relationship references. A value of <code>false</code>(the default), 
			returns detail only for the first few references. This is only applicable 
			for <code>view=status</code>.</span>
      </apidoc:param>
      <apidoc:param name="view" type="string" optional="false">
            <span class="property-def">A specific view of the returned data. Can be 
			either <code>schema</code>, <code>status</code>, <code>metrics</code>, 
			<code>query</code>, or <code>default</code>.</span>
            <span>Value can be <code>describe</code>, <code>default</code>, or 
			<code>properties-schema</code>.</span>
      </apidoc:param>
      <apidoc:param name="format" type="string" optional="false">
            <span class="property-def">The format of the returned data. Can be either 
			<code>html</code>, <code>json</code>, or <code>xml</code> (default). 
			This value overrides the Accept header if both are present.</span>
            <span>Value can be <code>xml</code>, <code>json</code>, or <code>html</code>.</span>
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type 
	   of the request body. If the <code>format</code> parameter is present, it takes 
	   precedence over the Accept header. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type 
	   of the data in the request body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, 
	   <code>application/json</code>, or <code>text/html</code>. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type 
	    of the data in the response body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, 
		<code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return status code 200 (OK), and the response
		 body will contain the requested information. A status code of 401 (Unauthorized) is returned if the user does not have the necessary privileges for this action. A response code of 404 (Not Found) indicates that no such query roleset exists.
		   </p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">text/html</td>
	    <td rowspan="1" colspan="1" nowrap="none">HTML Web Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage>
	   <p>This resource endpoint retrieves a given query roleset.</p>
	</apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: 
	   <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/xml"  http://localhost:8002/manage/v2/query-rolesets/
            </pre><p>Output:</p><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;query-roleset-default-list xsi:schemaLocation="http://marklogic.com/manage/security manage-security.xsd" xmlns="http://marklogic.com/manage/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;meta&gt;
    &lt;uri&gt;/manage/v2/query-rolesets/&lt;/uri&gt;
    &lt;current-time&gt;2017-05-02T02:05:22.3820159-07:00&lt;/current-time&gt;
    &lt;elapsed-time units="sec"&gt;0.0112146&lt;/elapsed-time&gt;
  &lt;/meta&gt;
  &lt;list-items&gt;
    &lt;list-count units="quantity"&gt;0&lt;/list-count&gt;
  &lt;/list-items&gt;
  &lt;relations&gt;
    &lt;relation-group array="true"&gt;
      &lt;typeref&gt;security-database&lt;/typeref&gt;
      &lt;relation-count units="quantity"&gt;1&lt;/relation-count&gt;
      &lt;relation array="true"&gt;
	&lt;uriref&gt;/manage/v2/databases/Security&lt;/uriref&gt;
	&lt;roleref&gt;database&lt;/roleref&gt;
	&lt;idref&gt;7161534863501463199&lt;/idref&gt;
      &lt;/relation&gt;
    &lt;/relation-group&gt;
  &lt;/relations&gt;
&lt;/query-roleset-default-list&gt;</pre><p>This is the XML output for GET.</p></apidoc:example>
    <apidoc:example><pre>&gt; curl -X GET --anyauth -u admin:admin 
            -H "Content-Type:application/json"  http://localhost:8002/manage/v2/query-rolesets/
            </pre><p>Output:</p><pre>	{
		"query-roleset-default-list":{
			"meta":{
				"uri":"/manage/v2/query-rolesets/",
				"current-time":"2017-05-02T02:05:22.3847221-07:00",
				"elapsed-time":{
					"units":"sec",
					"value":0.0095739}
				}
			,
			"list-items":{
				"list-count":{
					"units":"quantity",
					"value":0}
				}
			,
			"relations":{
				"relation-group":{
					"typeref":"security-database",
					"relation-count":{
						"units":"quantity",
						"value":1}
					,
					"relation":{
						"uriref":"/manage/v2/databases/Security",
						"roleref":"database",
						"idref":"7161534863501463199",
						"nameref":"Security"}
					}
				}
			,
			"related-views":{
				"related-view":[
					{
						"view-type":"root",
						"view-name":"default",
						"view-uri":"/manage/v2"}
					]
				}
			}
		}
      </pre>
    <p>This is the JSON output for GET.</p>
	</apidoc:example>
  </apidoc:function>
  
 <apidoc:function name="/manage/v2/query-rolesets/{id|name}" http-verb="DELETE" lib="manage" 
     category="Management API" bucket="REST Resources API" subcategory="Security">
   <apidoc:summary>This resource endpoint deletes a given query roleset using a name or id passed in the URL.</apidoc:summary>
   <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type of the request body. If the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type of the data in the request body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type of the data in the response body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return 204 (No Content), the server successfully processed the request and is not returning any content. A response code of 400 (Bad Request) indicates that the payload is malformed. A status code of 401 (Unauthorized) is returned if the user does not have the necessary privileges for this action.
		 
		</p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage>
	   <p>This resource endpoint deletes a given query roleset using a name or id passed in the URL.</p>
	</apidoc:usage>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: 
	     <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      </apidoc:privilege>
    <apidoc:example><pre>&gt; curl -X DELETE --anyauth -u admin:admin 
            -H "Content-Type:application/xml"  http://localhost:8002/manage/v2/query-rolesets/
            </pre><p>This deletes the given entry. The call does not return any content, beyond headers.</p>
	</apidoc:example>
  </apidoc:function>
  
   <apidoc:function name="/manage/v2/query-rolesets/{id|name}/properties" http-verb="GET" 
       lib="manage" category="Management API" bucket="REST Resources API" 
       subcategory="Security">
    <apidoc:summary>This resource endpoint retrieves a given query roleset.</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="fullrefs" type="boolean" optional="false">
            <span class="property-def">If set to <code>true</code>, full detail is 
			returned for all relationship references. A value of <code>false</code>
            (the default) indicates to return detail only for first references. This is only applicable for <code>view=status</code>.</span>
      </apidoc:param>
      <apidoc:param name="view" type="string" optional="false">
            <span class="property-def">A specific view of the returned data. Can be either 
			<code>schema</code>, <code>status</code>, <code>metrics</code>, 
			<code>query</code>, or <code>default</code>.</span>
            <span>Value can be <code>default</code>.</span>
      </apidoc:param>
      <apidoc:param name="format" type="string" optional="false">
            <span class="property-def">The format of the returned data. Can be either
			<code>html</code>, <code>json</code>, or <code>xml</code> (default). This 
			value overrides the Accept header if both are present.</span>
            <span>Value can be <code>xml</code>, <code>json</code> or <code>html</code>.</span>
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type of the request body. If the <code>format</code> parameter is present, it takes precedence over the Accept header. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type of the data in the request body. Depending upon the value of the <code>format</code> 
	  parameter or Accept header, one of <code>application/xml</code>,
	  <code>application/json</code>, or <code>text/html</code>. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type of the data in the response  body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, 
	  or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return 200 (OK). This is the standard response for successful HTTP requests. A response code of 400 (Bad Request) indicates that the query roleset does not exist or the payload is malformed. A status code of 401 (Unauthorized) is returned if the user does not have the necessary privileges for this action.</p>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td>	  </tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">text/html</td>
	    <td rowspan="1" colspan="1" nowrap="none">HTML Web Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-query-roleset-properties.xsd"
        element-name="query-roleset-properties"/>
    <apidoc:privilege>This operation requires the <code>manage-admin</code> role, or the following privilege: <p>
            <code>http://marklogic.com/xdmp/privileges/manage</code>
         </p>
      </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user username:password -i -X GET -H "Accept: application/xml" \
  http://localhost:8002/manage/v2/query-rolesets/15465490467826729837/properties

==> MarkLogic returns a response similar to the following:

HTTP/1.1 200 OK
ETag: 26c9d29700d65c02560b38a57935cc00
Content-type: application/xml; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 267
Connection: Keep-Alive
Keep-Alive: timeout=5

<query-roleset-properties xmlns="http://marklogic.com/manage/query-roleset/properties">
  <query-roleset>
    <role-name>els-role-1</role-name>
    <role-name>els-role-2</role-name>
    <role-name>els-role-3</role-name>
  </query-roleset>
</query-roleset-properties>
    ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user username:password -i -X GET -H "Accept: application/json" \
  http://localhost:8002/manage/v2/query-rolesets/15465490467826729837/properties

==> MarkLogic returns a response similar to the following:

HTTP/1.1 200 OK
ETag: 26c9d29700d65c02560b38a57935cc00
Content-type: application/json; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 56
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "role-name": ["els-role-1", "els-role-2", "els-role-3" ] }
    ]]></pre></apidoc:example>
  </apidoc:function>
  
   <apidoc:function name="/manage/v2/query-rolesets/{id|name}/properties" http-verb="PUT" lib="manage"
      category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary>
	This resource endpoint updates a given query roleset using a name or id passed 
	in the URL.
	</apidoc:summary>
     <apidoc:headers>
      <apidoc:header name="Accept" type="request" optional="false"> The expected MIME type of the request body. If the <code>format</code> parameter is present, it takes precedence over the Accept header. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="request" optional="false"> The MIME type of 
	     the data in the request body. Depending upon the value of the <code>format</code> parameter or Accept header, one of <code>application/xml</code>, 
		 <code>application/json</code>, or <code>text/html</code>. 
	  </apidoc:header>
      <apidoc:header name="Content-type" type="response" optional="false"> The MIME type 
	     of the data in the response body. Depending upon the value of the 
		 <code>format</code> parameter or Accept header, one of <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
         <p>A successful call to the endpoint will return 204 (No Content), the server successfully processed the request and is not returning any content.A response 
		 code of 400 (Bad Request) indicates that the query roleset does not exist or 
		 the payload is malformed. A status code of 401 (Unauthorized) is returned if 
		 the user does not have the necessary privileges for this action.
		 </p>
         <div class="consumes">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Consumes</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
            </table>
         </div>
         <div class="produces">
            <table>
               <tr>
	    <th colspan="2" rowspan="1" nowrap="none">Produces</th></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/json</td>
	    <td rowspan="1" colspan="1" nowrap="none">JSON Content</td></tr>
               <tr>
	    <td rowspan="1" colspan="1" nowrap="none">application/xml</td>
	    <td rowspan="1" colspan="1" nowrap="none">XML Content</td></tr>
            </table>
         </div>
      </apidoc:response>
    <apidoc:usage schema="manage-query-roleset-properties.xsd" print-intro="false" 
        element-name="query-roleset-properties">
      The data in the request body should have the following structure.
	</apidoc:usage>
    <apidoc:privilege>
	  This operation requires the <code>manage-admin</code> role, or the following privilege: 
	     <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
      </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the file properties.xml has the following contents:

<query-roleset-properties xmlns="http://marklogic.com/manage/query-roleset/properties">
  <query-roleset>
    <role-name>els-role-1</role-name>
    <role-name>els-role-2</role-name>
    <role-name>els-role-3</role-name>
  </query-roleset>
</query-roleset-properties>

curl --anyauth --user username:password -i -X PUT -H "Content-type: application/xml" \
  -d @./properties.xml \
  http://localhost:8002/manage/v2/query-rolesets/15465490467826729837/properties

==> MarkLogic returns a response similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user username:password -i -X PUT -H "Content-type: application/json" \
  -d '{ "role-name": ["els-role-1", "els-role-2", "els-role-3" ] }' \
  http://localhost:8002/manage/v2/query-rolesets/15465490467826729837/properties

==> MarkLogic returns a response similar to the following:

HTTP/1.1 204 No Content
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre></apidoc:example>
  </apidoc:function>
  
  <!-- ************************* Temporal ************************** -->
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address returns the temporal configuration for the named
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" print-intro="false" element-name="temporal-default">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases/Documents/temporal

  ==> Returns the temporal configuration for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/axes" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address returns the list of temporal axes for the named database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" print-intro="false"
      element-name="temporal-axis-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases/Documents/temporal/axes

  ==>  Returns the list of temporal axes for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/axes" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address creates a new temporal axis for the named database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the
      database already exists or if the payload is malformed, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-temporal-axis-properties.xsd" print-intro="false"
      element-name="temporal-axis-properties">
      <p>The structure of the data in the request body is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
   cat temporal-axis.json
   ==> 
   {
     "axis-name": "system",
     "axis-start": {
       "element-reference": {
         "namespace-uri": "",
         "localname": "test1"
       }
     },
     "axis-end": {
       "element-reference": {
         "namespace-uri": "",
         "localname": "test2"
       }
     }
   }

  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d @temporal-axis.json \
  http://localhost:8002/manage/v2/databases/Documents/temporal/axes

  ==>  Creates a temporal axis, named 'system," in the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/axes/{id|name}" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address returns the configuration for the specified temporal
      axis. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="temporal-axis-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/temporal/axes/system

==> Returns the configuration of the temporal axis, "system,"
    in the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/axes/{id|name}" http-verb="DELETE"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address deletes the named temporal axis from the named database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the axis does not exist, a status code of 400 (Bad Request) is returned. A status
      code of 401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/temporal/axes/system

==>  Deletes the temporal axis, "system," from the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/axes/{id|name}/properties"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource address returns the properties of the specified temporal axis. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-temporal-axis-properties.xsd"
      element-name="temporal-axis-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/temporal/axes/system/properties

==> Returns the properties of the axis, "system," from the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/collections" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address returns the list of temporal collections for the named
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" print-intro="false"
      element-name="temporal-collection-default-list">
      <p>The structure of the data in the response for the default view is as follows:</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-user</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/databases/Documents/temporal/collections

  ==>  Returns the list of temporal collections for the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/collections" http-verb="POST"
    lib="manage" category="Management API" bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address creates a new temporal collection for the named database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted). If the
      collection already exists or if the payload is malformed, a status code of 400 (Bad Request)
      is returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-temporal-collection-properties.xsd" print-intro="false"
      element-name="temporal-collection-properties">
      <p>The structure of the data in the request body is shown below.</p>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>options</code> is expressed in singular form.
        For example, in JSON, <code>options</code> is instead <code>option</code> and the format is:
          <code>"option":["opt"]</code>. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
   cat temporal-collection.json
   ==> 
   {
     "collection-name": "mycollectionnameuri",
     "system-axis": "mysystemaxisname",
     "valid-axis": "myvalidaxisname"
   }
 
  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d @temporal-collection.json \
  http://localhost:8002/manage/v2/databases/Documents/temporal/collections

  ==>  Creates a temporal collection, named 'mycollectionnameuri," in the 
       Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/collections?collection={name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource address returns the configuration for the specified temporal
      collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The URI of the collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-databases.xsd" element-name="temporal-collection-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-user</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/temporal/collections?collection=mycollection

==> Returns the configuration of the temporal collection, "mycollection,"
    in the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/collections?collection={name}"
      http-verb="POST" lib="manage" category="Management API" 
      bucket="REST Resources API" subcategory="Temporal">
    <apidoc:summary> This resource address advances the LSQT for the specified
      temporal collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string">
        The URI of the collection.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Content-type" type="request">
        The MIME type of the data in the request body. Must be one of the
        following values: <code>application/xml</code>, 
        <code>application/json</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response>
      Upon success, MarkLogic Server returns status code 200 (OK). The
      response body will be empty. A status code of 401 (Unauthorized) is 
      returned if the user does not have the necessary privileges. A
      status code of 400 (Bad Request) is returned if LSQT advancement is
      not enabled for this collection. A status code of 404 (Not Found)
      is returned if the temporal collection does not exist.
    </apidoc:response>
    <apidoc:usage>
     <p>
      When using XML, the data in the request body should have the
      following form: 
     </p><pre xml:space="preserve"><![CDATA[
<temporal-collection-operation xmlns="http://marklogic.com/manage">
  <operation>advance-lsqt</operation>
  <lag>number</lag>
</temporal-collection-operation>
]]></pre>
      <p>When using JSON, the data in the request body should have the
       following form:</p><pre xml:space="preserve"><![CDATA[
{ "operation" : "advance-lsqt", lag: number }
]]></pre>
      <p>The <code>operation</code> XML element or JSON property is required
      and can only have the value shown. The <code>lag</code> XML element
      or JSON property is optional. Its value is the number of seconds
      to lag behind max system start time.</p>
    </apidoc:usage>
    <apidoc:privilege>This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-user</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
# Advance LSQT on the "myTempColl" collection in "mydb", using a JSON payload
curl --anyauth --user user:password -i -X POST \
  -H "Content-Type:application/json" \
  -d'{"operation":"advance-lsqt","lag":1000}' \
  http://localhost:8002/manage/v2/databases/mydb/temporal/collections?collection=myTempColl

HTTP/1.1 200 OK
Content-type: application/xml; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
# Advance LSQT on the "myTempColl" collection in "mydb", using an XML payload
curl --anyauth --user user:password -i -X POST \
  -H "Content-Type:application/xml" \
  -d'<temporal-collection-operation xmlns="http://marklogic.com/manage"><operation>advance-lsqt</operation><lag>1000</lag></temporal-collection-operation>' \
  http://localhost:8002/manage/v2/databases/mydb/temporal/collections?collection=myTempColl

HTTP/1.1 200 OK
Content-type: application/xml; charset=UTF-8
Cache-Control: no-cache
Expires: -1
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
    ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2/databases/{id|name}/temporal/collections?collection={name}"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource address deletes the named temporal collection from the named
      database. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The URI of the collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the collection does not exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/databases/Documents/temporal/collections?collection=mycollection

==>  Deletes the temporal collection, "mycollection," from the Documents database. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource address returns the properties of the specified temporal
      collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The name of the collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such collection) is returned
      if the collection does not exist. </apidoc:response>
    <apidoc:usage schema="manage-temporal-collection-properties.xsd"
      element-name="temporal-collection-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-user</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/temporal/collections/properties?collection=mycollection

==> Returns the properties of the collection, "mycollection," from the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource sets the optional properties on the specified temporal
      collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The name of the collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted), and the
      response body contains the requested data. If the payload is malformed or the collection
      doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage>
      <p> Note: The properties described here are for XML payloads. In general they are the same for
        JSON, with the exception that, in JSON, <code>options</code> is expressed in singular form.
        For example, in JSON, <code>options</code> is instead <code>option</code> and the format is:
          <code>"option":["opt"]</code>. </p> The valid options are: <blockquote>
        <dl>
          <dt>
            <pre>updates-admin-override</pre>
          </dt>
          <dd> Specifies that users with the admin role can change or delete temporal documents
            using non-temporal functions, such as <code>xdmp:document-insert</code> and
              <code>xdmp:document-delete</code>. </dd>
          <dt>
            <pre>updates-safe</pre>
          </dt>
          <dd> Specifies that no users, including those with the admin role, can change or delete
            temporal documents in a non-temporal manner. This is the default. </dd>
        </dl>
      </blockquote> Options are specified using the form: <pre xml:space="preserve"><![CDATA[
      {
        "option": ["updates-safe"]
      }
     ]]></pre>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{"option": ["updates-admin-override"]}' \
http://localhost:8002/manage/v2/databases/Documents/temporal/collections/properties?collection=mycollection

==> Sets the "updates-admin-override" option on the collection, "mycollection," 
    in the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource address returns the LSQT properties for the specified temporal
      collection. A value of <code>true</code> indicates that LSQT is enabled, <code>false</code>
      indicates that LSQT is disabled. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The name of the collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such collection) is returned
      if the collection does not exist. </apidoc:response>
    <apidoc:usage schema="manage-temporal-lsqt-properties.xsd"
      element-name="temporal-lsqt-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-user</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/databases/Documents/temporal/collections/lsqt/properties?collection=mycollection

==> Returns the LSQT properties of the collection, "mycollection," from 
    the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Temporal">
    <apidoc:summary> This resource sets the LSQT properties on the specified temporal collection. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collection" type="string"> The name of the collection. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 202 (Accepted), and the
      response body contains the requested data. If the payload is malformed or the collection
      doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-temporal-lsqt-properties.xsd" print-intro="false"
      element-name="temporal-lsqt-properties"> The structure of the data in the request body is as
      follows: </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>temporal-admin</code> role, or the
      following privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --anyauth -u admin:admin --header "Content-Type:application/json" \
-d '{
  "lsqt-enabled": true,
  "automation": {
    "enabled": true,
    "period": 5000
  }
}' \
http://localhost:8002/manage/v2/databases/Documents/temporal/collections/lsqt/properties?collection=mycollection

==> Enaables LSQT automation (with a period of 5000 milliseconds) on the collection, 
    "mycollection," in the Documents database.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ************************* Tasks ************************** -->
  <apidoc:function name="/manage/v2/task-servers" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address lists the Task Servers. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to list only the servers in the
        specified group. The group can be identified either by id or name. If not specified, the
        response lists all Task Servers. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="task-server-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/task-servers?group-id=Default

==> Returns the list of Task Servers in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/task-servers/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address lists the specified Task Server properties. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the properties of the
        task server in the specified group. The group can be identified either by id or name. If not
        specified, the response includes information about all Task Servers. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="task-server-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/task-servers/Tserver?group-id=Default

==> Returns the properties for the 'Tserver' Task Server in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/task-servers/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address returns the properties of the Task Server in the
      specified group. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the servers in the
        specified group. The group can be identified either by id or name. If not specified, the
        response includes information about all Task Servers. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the Task
      Server does not exist, a status code of 400 (Bad Request) is returned. The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="task-config-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/task-servers/Tserver/properties?group-id=Default

==> Returns the properties of the 'Tserver' Task Server in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/task-servers/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> Initiate a properties change on the Task Server in the specified group. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the Task
        Server belongs. This parameter is required. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the data in the request body. Can be
          <code>json</code> or <code>xml</code>. If present, the <code>format</code> parameter
        overrides the request Content-type header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
        Supported values: <code>application/xml</code>, <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Use the Accept header or <code>format</code> request parameter to specify a preferred
        format. The <code>format</code> parameter takes precedence over the Accept header if both
        are present. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code of 204 (No Content). If
      the payload is malformed or the group doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false"
      element-name="task-config-properties"> The structure of the data in the request body is as
      shown below. The only changable property is <code>task-enabled</code>. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[

curl -X PUT --digest -u admin:admin \
-H "Content-type: application/json" -d '{"debug-threads":10}' \
http://localhost:8002/manage/v2/task-servers/Tserver/properties?group-id=Default

==>  Sets the number of "debug-threads" on the 'Tserver' Task Server in the Default 
     group to 10. 
 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/tasks" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address returns the list of scheduled tasks for the specified
      group. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="group-id" type="string"> Specifies to return only the tasks in the
        specified group. The group can be identified either by id or name. If not specified, the
        response includes information about all App Servers. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-task-server-properties.xsd" element-name="scheduled-task"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/tasks?group-id=Default

==> Returns the list of scheduled tasks in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/tasks" http-verb="POST" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address is used to create a new scheduled task for the specified
      group. For an example, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/flexrep.xml%2328531'>Creating a Push Replication Scheduled Task</a> in the <em>Scripting Administrative Tasks Guide</em>. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the tasks
        belong. The group must be specified by this parameter or by the <code>group-name</code>
        property in the request payload. If it is specified in both places, the values must be the
        same. </apidoc:param>
      <apidoc:param name="server-type" type="string"> The type of App Server to create. The App
        Server type must be specified by this parameter or in the request payload. If it is
        specified in both places, the values must be the same. The valid types are:
          <code>http</code>, <code>odbc</code>, <code>xdbc</code>, or <code>webdav</code>. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format?</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 201 (Created). If the task
      exists or if the payload is malformed, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-task-server-properties.xsd" print-intro="false"
      element-name="scheduled-task"> If your task is in the filesystem, rather than a database, do
      not include the <code>task-database</code> property. The <code>task-start-time</code> property
      must be in <code>xs:time</code> format ("24:00"). The <code>task-type</code> property is
        (<code>minutely</code>|<code>hourly</code>
        |<code>daily</code>|<code>weekly</code>|<code>monthly</code>|<code>once</code>). If not
      supplied, the default value is <code>once</code>. The <code>task-days</code> property is an
      array containing (<code>sunday</code>, <code>monday</code>, <code>tuesday</code>,
        <code>wednesday</code>, <code>thursday</code>, <code>friday</code>, <code>saturday</code>).
      The <code>task-priority</code> property is (<code>normal</code>|<code>higher</code>), if not
      supplied, default value is <code>normal</code>. <p> Note: The properties described here are
        for XML payloads. In general they are the same for JSON, with the exception that, in JSON,
          <code>task-days</code> is expressed in singular form. For example, in JSON,
          <code>task-days</code> is instead <code>task-day</code> and the format is as shown in the
        example below. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
      <p>The <code>security</code> role is required to set the <code>task-user</code> property.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
cat myTask.json
==> 
{
   "task-enabled":true, 
   "task-path":"/path/to/query.xqy", 
   "task-root":"/", 
   "task-type":"weekly", 
   "task-period":2, 
   "task-day":["tuesday"], 
   "task-start-time":"12:00:00-08:00", 
   "task-timestamp":"2014-11-24T14:23:51.468616-08:00", 
   "task-database":"Documents", 
   "task-modules":"", 
   "task-user":"nobody"
}

curl -X POST --digest -u admin:admin -H "Content-type: application/json" \
-d @myTask http://localhost:8002/manage/v2/tasks?group-id=Default

==>  Creates a task in the Default group to run "/path/to/query.xqy" on Tuesday
     every other week at 12:00. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/tasks/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address returns the configuration for the specified task. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the tasks
        belong. The group must be specified by this parameter or by the <code>group-name</code>
        property in the request payload. If it is specified in both places, the values must be the
        same. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="scheduled-task"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/tasks/myTask?group-id=Default

==> Returns the configuration of the task, "myTask,"
    in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/tasks/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address deletes the named task from the named group. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the task
        belongs. The group must be specified by this parameter or by the <code>group-name</code>
        property in the request payload. If it is specified in both places, the values must be the
        same. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the task does not exist, a status code of 400 (Bad Request) is returned. A status
      code of 401 (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>security</code> and
        <code>manage-admin</code> roles. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/tasks/myTask?group-id=Default

==>  Deletes the task, "myTask," from the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/tasks/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address returns the properties of the specified task. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the task
        belongs. The group must be specified by this parameter or by the <code>group-name</code>
        property in the request payload. If it is specified in both places, the values must be the
        same. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="kind" type="string"> The kind of privilege. Can be either
          <code>execute</code> or <code>uri</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" element-name="scheduled-task"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/tasks/myTask/properties?group-id=Default

==> Returns the properties of the task, "myTask," in the Default group.
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/tasks/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Scheduled Tasks">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      task. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="group-id" type="string"> The id or name of the group to which the task
        belongs. The group must be specified by this parameter or by the <code>group-name</code>
        property in the request payload. If it is specified in both places, the values must be the
        same. </apidoc:param>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="kind" type="string"> The kind of privilege. Can be either
          <code>execute</code> or <code>uri</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the privilege doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-servers.xsd" print-intro="false" element-name="scheduled-task"> The
      only property that can be modified is <code>task-enabled</code>. The rest of 
	  properties listed below are read-only. <p> Note: The properties described here are
        for XML payloads. In general they are the same for JSON, with the exception that, in JSON,
          <code>task-days</code> is expressed in singular form. For example, in JSON,
          <code>task-days</code> is instead <code>task-day</code> and the format is as shown in the
        example below. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
      <p>The <code>security</code> role is required to set the <code>task-user</code> property.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"task-enabled": "true"}' \
http://localhost:8002/manage/v2/tasks/myTask/properties
 
==>  Changes the start time for the task, "myTask," to 10:00. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ************************* Mime Types ************************** -->
  <apidoc:function name="/manage/v2/mimetypes" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Mimetypes">
    <apidoc:summary> This resource address returns a list of all of the mimetypes supported by
      MarkLogic Server. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). The response body
      contains the requested data. A status code of 401 (Unauthorized) is returned if the user does
      not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" print-intro="false"
      element-name="cluster-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  http://localhost:8002/manage/v2/mimetypes

  ==>  Returns the list of mimetypes. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/mimetypes" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Mimetypes">
    <apidoc:summary> This resource address creates a new mimetype. This operation causes a cluster
      restart. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Location" type="response"> If the request causes a restart, a Location
        header is included in the reponse. The header contains a path with which to construct a URL
        to usable to test when the restart has completed. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK). If the payload is
      malformed or if the mimetype already exists, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:usage schema="manage-clusters.xsd" print-intro="false"
      element-name="cluster-default-list"> The structure of the data in the request body is as
      follows. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  cat newMimetype.json
  ==>
  {
    "name": "image/jpeg",
    "extension": [
      "jpeg",
      "jpg",
      "jpe"
    ],
    "format": "binary"
  }

  curl -X POST  --anyauth -u admin:admin --header "Content-Type:application/json" \
  -d @newMimetype.json http://localhost:8002/manage/v2/mimetypes

  ==>  Creates a new mimetype, named "image/jpeg."  
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/mimetypes/{id|name}" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Mimetypes">
    <apidoc:summary> This resource address returns the configuration for the specified mimetype. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="user-default"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code> manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/mimetypes/application/xml

==> Returns the configuration of the mimetype, "application/xml."  
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/mimetypes/{id|name}" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Mimetypes">
    <apidoc:summary> This resource address deletes the named mimetype. This operation causes a
      cluster restart. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This parameter is not
        meaningful with <code>view=edit</code>. This value overrides the Accept header if both are
        present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon successful completion, MarkLogic Server returns status code 204 (No
      Content). If the mimetype does not exist, a status code of 400 (Bad Request) is returned. A
      status code of 401 (Unauthorized) is returned if the user does not have the necessary
      privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code> manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/mimetypes/application/xml

==>  Deletes the mimetype, "application/xml."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/mimetypes/{id|name}/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Mimetypes">
    <apidoc:summary> This resource address returns the properties of the specified mimetype. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 (no such user) is returned if the
      user does not exist. </apidoc:response>
    <apidoc:usage schema="manage-user-properties.xsd" element-name="user-properties"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/mimetypes/image/jpeg/properties

==> Returns the properties of the mimetype, "image/jpeg."
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/mimetypes/{id|name}/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Mimetypes">
    <apidoc:summary> This resource address can be used to update the properties for the specified
      mimetype. This operation causes a cluster restart. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> (default) or <code>xml</code>. This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body, either <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, either
          <code>application/xml</code> or <code>application/json</code>. </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 204 (No Content). If the
      payload is malformed or the mimetype doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-user-properties.xsd" print-intro="false"
      element-name="user-properties"> The structure of the data in the request body is as follows.
      Only the <code>extension(s)</code> and <code>format</code> can be changed. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT  --anyauth -u admin:admin -H "Content-Type:application/json" \
-d '{"format": "binary"}' \
http://localhost:8002/manage/v2/mimetypes/image/jpeg/properties
 
==>  Changes the format for the mimetype, "image/jpeg," to "binary." 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ************************* Domains ************************** -->
  <apidoc:function name="/manage/v1/domains" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Flexible Replication">
    <apidoc:summary>This resource returns the set of domains for which Flexible Replication is
      configured. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> If logged in as a target user, only the domain(s) containing the user's target(s)
      will be visible. </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p>or to be logged in as a user associated with a target.</p>
    </apidoc:privilege>

    <apidoc:example><pre xml:space="preserve"><![CDATA[
  output =>
  
  { domains:
  [ { "domain-id": "9864136950210927264",
      "domain-name": "Default Documents"}
  ]
  }
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/v1/domains/{domain-id-or-default-domain-name}/status" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource returns the status for the domain. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="with-targets" type="boolean"> Can be either <code>true</code> or
          <code>false</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> The returned information is the output of <code>flexrep:domain-status()</code>.
        <p>The information is the same as is returned from the <code>flexrep:target-status()</code>
        API.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  => 
  { "domain-id":"11823208805791791213",
  "document-count":0,
  "unpropertied-count":0,
  "deleted-count":0,
  "pending-count":0,
  "error-count":0,
  "cpf-active-count":0,
  "cpf-error-count":0,
  "cpf-final-count":0,
  "cpf-initial-count":0,
  "cpf-updated-count":0,
  "partial-count":0,
  "deleted-targets-count":0,
  "target-statuses":
    [ {"target-id":"1563671060741473909",
       "target-name":"push",
       "pending-retry-count":0,
       "missing-count":0,
       "error-count":0,
       "waiting-binary-count":0
      },
      { ... }
	  ]
}
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/v1/domains/{domain-id-or-default-domain-name}/targets" http-verb="GET"
    lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource returns the set of targets configured for the domain. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage>
      When logged in as a target user, only that target will be displayed.
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p>or to be logged in as a user associated with a target.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  output=> 
  /passwords and private keys are redacted on output
  
  { "domain-id":"11823208805791791213",
  "targets": [
    { "target-id":"5213748860205787397",
      "target-name":"push-apple",
      "target-urls":[ "http://localhost:9002/" ],
      "retry-seconds-min":60,
      "retry-seconds-max":300,
      "documents-per-batch":100,
      "enabled":true,
      "replicate-cpf":false,
      "http-options":
        { "authentication":
            { "username":"admin",
              "password":"********"
            }
        },
      "filter-module":"",
      "filter-options":{},
      "user-id":"10744383475128702555",
      "immediate-push":true
    } ],
  "alerting-uri":
    "http://marklogic.com/xdmp/flexrep/11823208805791791213/alerting"
}
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource returns the specified target. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
      <apidoc:param name="with-targets" type="boolean"> Can be either <code>true</code> or
          <code>false</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p>or to be logged in as the target's user.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource returns the set of rules for a particular target. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> A GET to this endpoint return's a user's rules, formatted as either XML or JSON.
        <p>Security: A user may only see her own rules; an invalid URI error will be returned if a
        user tries to access some other target. An admin user can see any user's rules. </p>
      <p>The alert rules are in the format expected by the alerting API.</p>
      <p>It is not necessary to specify the external-security-id or user-name when PUTing or POSTing
        a rule while logged in as the user because the information can be determined
        automatically.</p>
      <p>The query property contains a representation of a <code>cts:query</code> as defined by the
        JSON project. Users can only view or manipulate their own queries. A user with the
          <code>flexrep-admin</code> role can see and manipulate any user's queries. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p> or to be logged in as the target's user.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  { "rule" : {
    "id" : "1523452312",
    "name" : "...",
    "description" : "...",
    "user-id" : "...",
    "query" : { ... },
    "action-name" : "...",
    "external-security-id" : "...",
    "external-user-name" : "...",
    "options" : { ... } 
  }
}
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID"
    http-verb="GET" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource returns the specified rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p> or to be logged in as the target's user.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID"
    http-verb="PUT" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource overwrites the specified rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. The payload is the rule. If the URI is malformed or the
      database doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p> or to be logged in as the target's user.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function
    name="/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID"
    http-verb="DELETE" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource deletes the specified rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. If the URI is malformed or the database doesn't exist, a
      status code of 400 (Bad Request) is returned. A status code of 401 (Unauthorized) is returned
      if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p> or to be logged in as the target's user.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
   { "rule" : {
    "id" : "1523452312",
    "name" : "...",
    "description" : "...",
    "user-id" : "...",
    "query" : { ... },
    "action-name" : "...",
    "external-security-id" : "...",
    "external-user-name" : "...",
    "options" : { ... } 
  }
}
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules"
    http-verb="POST" lib="manage" category="Management API" bucket="REST Resources API"
    subcategory="Flexible Replication">
    <apidoc:summary> This resource adds new rule. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the returned data. Can be either
          <code>html</code>, <code>json</code>, or <code>xml</code> (default). This value overrides
        the Accept header if both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the response. If the
          <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns status code 200 (OK), and the response
      body contains the requested data. The payload is the new rule. If the URI is malformed or the
      database doesn't exist, a status code of 400 (Bad Request) is returned. A status code of 401
      (Unauthorized) is returned if the user does not have the necessary privileges. </apidoc:response>
    <apidoc:usage> Security: A user may only see her own rules; an invalid URI error will be
      returned if a user tries to access some other target. An admin user can see any user's rules.
        <p>The alert rules are in the format expected by the alerting API.</p>
      <p>It is not necessary to specify the external-security-id or user-name when PUTing or POSTing
        a rule while logged in as the user because the information can be determined
        automatically.</p>
      <p>The query property contains a representation of a <code>cts:query</code> as defined by the
        JSON project. Users can only view or manipulate their own queries. A user with the
          <code>flexrep-admin</code> role can see and manipulate any user's queries. </p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>flexrep-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/flexrep-admin</code>,</p>
      <p> or to be logged in as the target's user.</p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  
]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ************************* Credentials ************************** -->
  <apidoc:function name="/manage/v2/credentials/properties" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> Retrieve credentials used to access external services, such as Amazon Web
      Services (AWS). If no credentials have been set, only the <code>type</code>property is
      returned. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
      <apidoc:param name="type" type="string"> The type of credentials to be returned. Currently,
        the only supported type is <code>aws</code>. If not specified, the default is
          <code>aws</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-credentials-properties.xsd" element-name="credentials"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-user</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/credentials/properties?type=aws

==>  Returns credentials used to access Amazon Web Services (AWS). 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/credentials/properties" http-verb="PUT" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address sets the credentials used to access external services,
      such as Amazon Web Services (AWS). </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
      <apidoc:param name="type" type="string"> The type of credentials to be creaeted. Currently,
        the only supported type is <code>aws</code>. If not specified, the default is
          <code>aws</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 201 (Created). If the
      payload is malformed or the alert doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-credentials-properties.xsd" element-name="credentials"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X PUT --digest -u admin:admin -H "Content-type: application/json" \
-d '{  
  "type": "aws",
  "access-key": "AWS-ACCESS-KEY",
  "secret-key": "SECRET-KEY"
   }' \
http://localhost:8002/manage/v2/credentials/properties

==>  Sets the access and secret keys used to access Amazon Web Services (AWS). 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>


  <apidoc:function name="/manage/v2/credentials/properties" http-verb="DELETE" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> Delete credentials used to access external services, such as Amazon Web
      Services (AWS).   </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
      <apidoc:param name="type" type="string"> The type of credentials to be returned. Currently,
        the only supported type is <code>aws</code>. If not specified, the default is
          <code>aws</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. 
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 204 (no content. 
     If the credentials do not exist, a status code of 400 (bad request) is returned.
     A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. 
    </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X DELETE --anyauth -u admin:admin -H "Content-Type:application/json" \
http://localhost:8002/manage/v2/credentials/properties?type=aws

==>  Deletes credentials used to access Amazon Web Services (AWS). 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>

  <apidoc:function name="/manage/v2/credentials/secure" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> Retrieve secure credentials. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>html</code>, <code>json</code> or <code>xml</code> (default). Use this
        parameter to override the Accept header. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="secure-credential-default-list"> </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> role. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/credentials/secure

==>  Returns the secure credentials. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/credentials/secure" http-verb="POST" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Security">
    <apidoc:summary> This resource address sets a secure credential. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the posted data. Can be either
          <code>json</code> or <code>xml</code> (default). This value overrides the Accept header if
        both are present. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The expected MIME type of the request body. If
        the <code>format</code> parameter is present, it takes precedence over the Accept header. </apidoc:header>
      <apidoc:header name="Content-type" type="request"> The MIME type of the data in the request
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic Server returns a status code 201 (Created). If the
      payload is malformed or the alert doesn't exist, a status code of 400 (Bad Request) is
      returned. A status code of 401 (Unauthorized) is returned if the user does not have the
      necessary privileges. </apidoc:response>
    <apidoc:usage schema="manage-security.xsd" element-name="secure-credential-default"> 
      <p>This operation re-encrypts the credentials, if necessary.</p>
      <pre xml:space="preserve"><![CDATA[
	      {"operation": "secure"}
      ]]></pre>
      <p>The structure of the data in the request body is as follows.</p>
    </apidoc:usage>
    <apidoc:privilege> This operation requires the <code>security</code> role. </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
curl -X POST --digest -u admin:admin -H "Content-type: application/json" \
-d@data/credentials/secure-credential.json \
http://localhost:8002/manage/v2/credentials/secure

==>  Creates a secure credential. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!-- ************************* Support ************************** -->
  <apidoc:function name="/manage/v2/usage-report" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Support">
    <apidoc:summary> Returns a usage report. A report in the <code>zip</code> format is a full
      report; reports in the other formats are summaries. You can return a report for a specific
      number of <code>previous-days</code>, or for a specific time period, as specified by the
        <code>start-date</code> and <code>end-date</code> parameters. If is an error to specify both
      a <code>start-date</code> and <code>previous-days</code>. If no reporting period is specified,
      the default is the previous 90 days. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body.
        Allowed values: <code>zip</code>, <code>csv</code>, <code>json</code> or <code>xml</code>
        (default). </apidoc:param>
      <apidoc:param name="previous-days" type="string"> The number of previous days for which to
        report usage. </apidoc:param>
      <apidoc:param name="start-date" type="dateTime"> A timestamp that identifies the beginning of
        the reporting period (in the form of <code>dateTime</code>). </apidoc:param>
      <apidoc:param name="end-date" type="dateTime"> A timestamp that identifies the beginning of
        the reporting period (in the form of <code>dateTime</code>). If you specify a
          <code>start-date</code> but no <code>end-date</code>, the <code>end-date</code> is set to
        the current date. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/usage-report

==>  Returns a usage report for the last 90 days. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/support-request" http-verb="GET" lib="manage"
    category="Management API" bucket="REST Resources API" subcategory="Support">
    <apidoc:summary> Generates a support request, along with your system status. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the response body. The
        only supported format is <code>text</code>, which is also the default. </apidoc:param>
      <apidoc:param name="scope" type="string"> The scope of the system for which the request is
        made. This can be either <code>host</code> or <code>cluster</code>. If no <code>scope</code>
        is specified, the default is <code>host</code>. </apidoc:param>
      <apidoc:param name="detail" type="string"> The type of information to be provided in the
        support request. This can be either <code>status-only</code>, <code>status-logs</code> or
          <code>full</code> for both. If no <code>detail</code> is specified, the default is
          <code>status-logs</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/support-request

==>  Returns a support request for your host, along with its status logs. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="/manage/v2/logs" http-verb="GET" lib="manage" category="Management API"
    bucket="REST Resources API" subcategory="Support">
    <apidoc:summary> Generates a support request, along with your system status. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="format" type="string"> The format of the data in the log file. The
        supported formats are <code>json</code>, <code>xml</code> or <code>html</code>. </apidoc:param>
      <apidoc:param name="filename" type="string"> The log file to be returned. If
          <code>format=html</code>, the log file is returned with HTML scaffolding; otherwise it is
        returned as plain text, regardless of the format. <p> If <code>filename</code> is not
          specified, this endpoint fits into the general pattern of read-only config. In
          particular, the format may be json, xml, or html. </p>
      </apidoc:param>
      <apidoc:param name="host" type="string"> 
        The host from which to return the log data. 
      </apidoc:param>
      <apidoc:param name="start" type="xs:datetime"> 
        The start time for the log data. 
      </apidoc:param>
      <apidoc:param name="end" type="xs:datetime"> 
        The end time for the log data. 
      </apidoc:param>
      <apidoc:param name="regex" type="xs:datetime"> 
        Filters the log data, based on a regular expression.
      </apidoc:param>
    </apidoc:params>
    <apidoc:headers>
      <apidoc:header name="Accept" type="request"> The desired MIME type of the data in the response
        body. If the <code>format</code> parameter is present, it takes precedence over this header.
        Supported values: <code>application/xml</code> (default), <code>application/json</code>,
          <code>text/html</code>. </apidoc:header>
      <apidoc:header name="Content-type" type="response"> The MIME type of the data in the response
        body. Depending upon the value of the <code>format</code> parameter or Accept header, one of
          <code>application/xml</code>, <code>application/json</code>, or <code>text/html</code>.
      </apidoc:header>
    </apidoc:headers>
    <apidoc:response> Upon success, MarkLogic server returns status code 200 (OK) and the response
      body contains the requested data. A status code of 401 (Unauthorized) is returned if the user
      does not have the necessary privileges. A status code of 404 is returned if the specified
        <code>filename</code> isn't a log file. </apidoc:response>
    <apidoc:privilege> This operation requires the <code>manage-admin</code> role, or the following
      privilege: <p><code>http://marklogic.com/xdmp/privileges/manage-admin</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
http://localhost:8002/manage/v2/logs?filename=ErrorLog.txt

==>  Returns the ErrorLog.txt log in plain text. 
    ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <!--



 


-->
</apidoc:module>
