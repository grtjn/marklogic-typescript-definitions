<apidoc:module name="SearchBuiltins" category="SpellBuiltins" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
<p xmlns="http://www.w3.org/1999/xhtml">The spelling correction built-in functions are used with dictionary documents
to compare words with words in the dictionary.  These functions use the
double metaphone algorithm, which uses the way words sound to try and
suggest spelling alternatives for incorrectly-spelled words.</p>
<p xmlns="http://www.w3.org/1999/xhtml">There is also a Spelling Dictionary Management XQuery module, which
is used to load and manage dictionary documents, and is complimentary
to the spelling built-in functions.</p>
</apidoc:summary><apidoc:function name="is-correct" type="builtin" lib="spell" category="SpellBuiltins">
    <apidoc:summary>
  Returns <code xmlns="http://www.w3.org/1999/xhtml">true()</code> if the specified word is spelled correctly,
  otherwise returns <code xmlns="http://www.w3.org/1999/xhtml">false()</code>.  A word is considered to be spelled
  correctly if it is in the specified dictionary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*">
    The URIs of the dictionaries to use.
  </apidoc:param>
      <apidoc:param name="word" type="xs:string">
    The word to check.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage class="xquery">
   The <code xmlns="http://www.w3.org/1999/xhtml">spell:is-correct</code> function is a built-in function and
   does not require the <code xmlns="http://www.w3.org/1999/xhtml">import module</code> statement in the XQuery
   prolog.
</apidoc:usage>
    <apidoc:usage class="javascript">
   The <code xmlns="http://www.w3.org/1999/xhtml">spell:isCorrect</code> function is a built-in function and
   does not require the <code xmlns="http://www.w3.org/1999/xhtml">var spell = require("/MarkLogic/spell")</code> 
   statement in the Javascript prolog.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell:is-correct("en-utf8.xml","occasionally")

=&gt; true()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.isCorrect('en-utf8.xml','occasionally');

=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="suggest" type="builtin" lib="spell" category="SpellBuiltins">
    <apidoc:summary>
  Suggests a list of spellings for a word. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">Returns a 
  sequence of </span><span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Returns a Sequence 
  containing </span> the most likely spellings for the specified word.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string*">
    The URIs of the dictionaries to use.
  </apidoc:param>
      <apidoc:param name="word" type="xs:string">
    The word for which you get spelling suggestions.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation. 
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an options XML 
    element in the <code>http://marklogic.com/xdmp/spell</code> namespace, 
    or as a map:map. The options names below are XML element localnames. When 
    using a map, replace the hyphens with camel casing. For example, 
    "an-option" becomes "anOption" when used as a map:map key.</span>
    This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>maximum</dt>
    <dd>Specifies the maximum number of suggestions to be returned.
    The default is 10.</dd>
    <dt><span class="xquery">distance-threshold</span>
        <span class="javascript">distanceThreshold</span>
        </dt>
    <dd>Specifies a cut off threshold for suggestions having a distance
    less than the given number.  The default is 100.  <span class="xquery">
    When passing a map option, the name of the key is 
    <code>distanceThreshold</code>.</span></dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:string*</apidoc:return>
    <apidoc:return class="javascript">Sequence</apidoc:return>
    <apidoc:usage>
  This function is a built-in function, so you need not import a library
  module to use it.

   <p xmlns="http://www.w3.org/1999/xhtml">This function only provides suggestions
   to words that are less than 256 characters in length; words 256 characters
   or longer return no suggestions.  Also, it removes any dictionary entries
   that are 256 characters or more, so it will never return a suggestion with
   greater than 256 characters.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
spell:suggest("myDictionary.xml","occasionally")
 
(: Returns a sequence of suggestions such as the following, from the
 : dictionary with URI "myDictionary.xml":
 : 
 : ("occasionally", "occasional", "occasion", "occasions", "occasion's",
 :  "occasioned", "optionally", "educationally", "irrationally")
 :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
spell:suggest("spell.xml", "albetros")
  
(: Returns a sequence of suggestions such as the following, from the dictionary
 : with the URI "/dictionary.xml":
 :
 : ("albatross", "abettors", "alders", "alters", "Albert's", "Elbert's",
 :  "allegros", "alder's", "Walters", "abettor's")
 :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
spell:suggest("/dictionary.xml", "occasionally", 
  &lt;options xmlns="http://marklogic.com/xdmp/spell"&gt;
    &lt;distance-threshold&gt;200&lt;/distance-threshold&gt;
    &lt;maximum&gt;4&lt;/maximum&gt;
  &lt;/options&gt;)

(: Returns a sequence of suggestions such as: 
 :   ("occasionally", "occasional", "occasion", "occasions")
 :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: pass options using a map :)
xquery version "1.0-ml";
spell:suggest(
  "/my/dictionary.xml", "occasionally", 
  map:map() =&gt; map:with("distanceThreshold", 200)
            =&gt; map:with("maximum", 4)
)

(: Returns a sequence of suggestions such as the following from the dictionary
 : with the URI "/my/dictionary.xml":
 :
 : ("occasionally", "occasional", "occasion", "occasions")
 :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.suggest('myDictionary.xml', 'occasionally');

// Returns a Sequence containing suggestions such as the following,
// from the dictionary with URI "myDictionary.xml":
//
//   occasionally occasional occasion occasions occasion's
//   occasioned optionally educationally irrationally
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Options usage
spell.suggest(
  '/my/dictionary.xml', 'occasionally', 
  { distanceThreshold: 200, maximum: 4}
);

// Returns a Sequence containing suggestions such as the following, from
// the dictionary with the URI "/my/dictionary.xml":
//
// "occasionally", "occasional", "occasion", "occasions"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="levenshtein-distance" type="builtin" lib="spell" category="SpellBuiltins">
    <apidoc:summary>
  Given two strings, returns the Levenshtein distance between those strings.
  The Levenshtein distance is a measure of how many operations it takes to
  transform a string into another string, and it is useful in determining
  if a word is spelled correctly, or in simply comparing how "different" two
  words are.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str1" type="xs:string">
    The first input string.
  </apidoc:param>
      <apidoc:param name="str2" type="xs:string">
    The second input string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">The <code>spell:levenshtein-distance</code> function is a built-in
   function and does not require the <code>import module</code> statement
   in the XQuery prolog.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">The <code>spell:levenshtein-distance</code> function throws an exception
   if one of the strings is 256 or more characters in length and the other
   is at least 1 character in length.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell:levenshtein-distance("albatros","albetros")
  
=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell:levenshtein-distance("cat", "cats")
  
=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.levenshteinDistance('albatros','albetros');
  
=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.levenshteinDistance('cat', 'cats');
  
=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="double-metaphone" type="builtin" lib="spell" category="SpellBuiltins">
    <apidoc:summary>
  Given a word returns the two metaphone keys.
  The primary and secondary metaphone keys which represent
  the phonetic encoding of two words
  are returned as a sequence of two strings.  Double metaphone is an algorithm
  based on phonetic sounds useful in providing data to spelling correction
  suggestions.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="word" type="xs:string">
    The word for phonetic matching.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:usage>
   The <code xmlns="http://www.w3.org/1999/xhtml">spell:double-metaphone</code> function is a built-in function and
   does not require the <code xmlns="http://www.w3.org/1999/xhtml">import module</code> statement in the XQuery
   prolog.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell:double-metaphone("smith")
  
=&gt; smo xmt
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell:double-metaphone("jones")
  
=&gt; jns ans
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.doubleMetaphone('smith');
  
=&gt; smo xmt
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.doubleMetaphone('jones');
  
=&gt; jns ans
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="suggest-detailed" type="builtin" lib="spell" category="SpellBuiltins">
    <apidoc:summary>
  Suggests a list of spellings for a word. Returns 
  <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">a sequence of elements</span>
  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">an array of objects</span>
  describing each suggestion, including the suggested word, the distance,
  the key distance, the word distance, and the levenshtein distance.  You can
  use this extra information to make your own decisions about which suggestions
  to use.  If you do not want to use this information, use the
  <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">spell:suggest</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">spell.suggest</code> function instead.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dictionary_uris" type="xs:string*">
    The URIs of the dictionaries to use.
  </apidoc:param>
      <apidoc:param name="word" type="xs:string">
    The word for which you get spelling suggestions.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation. 
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an options XML 
    element in the <code>http://marklogic.com/xdmp/spell</code> namespace, 
    or as a map:map. The options names below are XML element localnames. When 
    using a map, replace the hyphens with camel casing. For example, 
    "an-option" becomes "anOption" when used as a map:map key.</span>
    This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>maximum</dt>
    <dd>Specifies the maximum number of suggestions to be returned.
    The default is 10.</dd>
    <dt><span class="xquery">distance-threshold</span>
        <span class="javascript">distanceThreshold</span>
        </dt>
    <dd>Specifies a cut off threshold for suggestions having a distance
    less than the given number.  The distance is a weighted number
    indicating the "distance" between two words,  where lower numbers
    indicate a closer match.  The default is 100, which means that distances
    less than or equal to 100 are considered as suggestions.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(spell:suggestion)*</apidoc:return>
    <apidoc:return class="javascript">Array</apidoc:return>
    <apidoc:usage>
   This function is built-in, so you do not need to import a library
   module to use it.
   <p xmlns="http://www.w3.org/1999/xhtml">This function only provides suggestions to words that are less than 256
   characters in length; words 256 characters or longer return no
   suggestions.  Also, it removes any dictionary entries that are 256
   characters or more, so it will never return a suggestion with
   greater than 256 characters.
   </p>
   <p xmlns="http://www.w3.org/1999/xhtml">The <code><span class="xquery">key-distance</span>
                <span class="javascript">keyDistance</span>
                </code>
   and <code><span class="xquery">word-distance</span>
             <span class="javascript">wordDistance</span>
             </code>
   values in the output are used by the double metaphone algorithm to
   calculate the <code>distance</code>, which is a weighted number
   indicating how close a word is to the one in the dictionary.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If there are no suggestions, this function returns an empty
   <span class="xquery">sequence</span><span class="javascript">array</span>.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
spell:suggest-detailed("/my/dictionary.xml", "occasionally") 

(: Returns a sequence of spell:suggestion elements from the
 : dictionary with the URI "/my/dictionary.xml", similar to the following:

&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="0" key-distance="0" word-distance="0" 
      levenshtein-distance="0"&gt;occasionally&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="26" key-distance="0" word-distance="90" 
      levenshtein-distance="2"&gt;occasional&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="180" 
      levenshtein-distance="4"&gt;occasion&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="185" 
      levenshtein-distance="4"&gt;occasions&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="190" 
      levenshtein-distance="4"&gt;occasion's&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="190" 
      levenshtein-distance="4"&gt;occasioned&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="190" 
      levenshtein-distance="4"&gt;optionally&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="80" key-distance="1" word-distance="200" 
      levenshtein-distance="4"&gt;irrationally&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
:)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using an options element :)
xquery version "1.0-ml";
spell:suggest-detailed(
  "/my/dictionary.xml", "occasionally", 
  &lt;options xmlns="http://marklogic.com/xdmp/spell"&gt;
    &lt;distance-threshold&gt;200&lt;/distance-threshold&gt;
    &lt;maximum&gt;4&lt;/maximum&gt;
  &lt;/options&gt;
)

(: Returns a sequence of spell:suggestion elements similar to 
 : the following, based on the entries in the dictionary with the 
 : URI "/my/dictionary.xml":

&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="0" key-distance="0" word-distance="0" 
      levenshtein-distance="0"&gt;occasionally&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
      xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="26" key-distance="0" word-distance="90" 
      levenshtein-distance="2"&gt;occasional&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
      xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="180" 
      levenshtein-distance="4"&gt;occasion&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
      xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="185" 
      levenshtein-distance="4"&gt;occasions&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
:)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using an options map :)
xquery version "1.0-ml";
spell:suggest-detailed(
  "/my/dictionary.xml", "occasionally", 
  map:map() =&gt; map:with("distanceThreshold", 200)
            =&gt; map:with("maximum", 4)
)

(: Returns a sequence of spell:suggestion elements similar to 
 : the following, based on the entries in the dictionary with the 
 : URI "/my/dictionary.xml":

&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
    xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="0" key-distance="0" word-distance="0" 
      levenshtein-distance="0"&gt;occasionally&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
      xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="26" key-distance="0" word-distance="90" 
      levenshtein-distance="2"&gt;occasional&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
      xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="180" 
      levenshtein-distance="4"&gt;occasion&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
&lt;spell:suggestion original="occasionally" dictionary="/my/dictionary.xml" 
      xmlns:spell="http://marklogic.com/xdmp/spell"&gt;
  &lt;spell:word distance="76" key-distance="1" word-distance="185" 
      levenshtein-distance="4"&gt;occasions&lt;/spell:word&gt;
&lt;/spell:suggestion&gt;
:)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Assume you create a dictionary as follows, with the URI "two-words.json":

declareUpdate();
const spell = require('/MarkLogic/spell');
spell.insert('two-words.json', {words: ['albatross','albatrosses']});

// ---------------------------------------------------------
// After installation, use the dictionary to generate suggestions as
// follows:

spell.suggestDetailed(
  'two-words.json', 'albetros',
  { maximum: 5, distanceThreshold: 500 }
);

// Returns an array of suggestion objects of the following form:
//
// [ { "original": "albetros", 
//     "word": "albatross", 
//     "dictionary": "two-words.json", 
//     "distance": 26, 
//     "keyDistance": 0, 
//     "wordDistance": 95, 
//     "levenshteinDistance": 2
//   },{
//     "original": "albetros", 
//     "word": "albatrosses", 
//     "dictionary": "two-words.json", 
//     "distance": 76, 
//     "keyDistance": 1, 
//     "wordDistance": 185, 
//     "levenshteinDistance": 4
//  } ]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="romanize" type="builtin" lib="spell" category="SpellBuiltins">
    <apidoc:summary>
  Returns the romanization of the string, substituting basic Latin letters
  for the letters in the string, according to their sound.  Unsupported
  characters will be mapped to '?' for compatibility with the double metaphone
  algorithm. We support romanization of the scripts of the languages with
  advanced support in MarkLogic except for Chinese characters and Hangul.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
     The input string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell:romanize("Путин")
=&gt; "putin"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
spell.romanize('Путин');
=&gt; "putin"
</pre></apidoc:example>
  </apidoc:function></apidoc:module>