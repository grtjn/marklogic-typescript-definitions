<apidoc:module name="UpdateBuiltins" category="UpdateBuiltins" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
The update built-in functions are XQuery functions to perform update-related
tasks such as loading documents, inserting nodes into documents, and so on.
</apidoc:summary><apidoc:function name="lock-for-update" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Acquires an intent exclusive transaction lock on a URI.
  If a shared transaction lock on the URI is already held by
  the current transaction it is promoted to an exclusive lock.
  If a shared or exclusive transaction lock on the URI is already
  held by some other transaction, this function blocks until
  that lock is released.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI to be locked for update.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">This function allows an update transaction to acquire an exclusive write
lock on a URI without specifying an update. Deadlocks and restarted transactions
can be avoided by first explicitly acquiring an exclusive transaction lock
on the URI with this function, <em>before</em> implicitly acquiring a
shared transaction lock reading a document with that URI.</p>
<p xmlns="http://www.w3.org/1999/xhtml">An exclusive transaction lock on a URI is automatically
and implicitly acquired when an update function is applied on that URI.
Similarly, a shared transaction lock on a URI is automatically and implicitly
acquired when a document with that URI is read by an update transaction.
If two update transactions concurrently read a document and
then apply an update function on it, a deadlock can occur, because each transaction
waits for the other to release its shared lock in order to escalate to
an exclusive lock. This deadlock is automatically detected by the system,
one of the transactions is restarted and its locks are released,
and the other transaction proceeds.</p>
<p xmlns="http://www.w3.org/1999/xhtml">Note that the lock acquired by this function is a relatively light transaction
lock for database consistency, not a relatively heavy persistent document
lock for file system emulation through WebDAV.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:lock-for-update("/example.xml")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.lockForUpdate("/example.xml");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="save" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Serializes a node as text and saves it to a file. The node can be any
  node, including a document node, an element node, a text node, or a binary
  node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The output file pathname. The path can be fully qualifed or relative.
    Relative pathnames are resolved from the directory in which
    MarkLogic Server is installed.
  </apidoc:param>
      <apidoc:param name="node" type="node()">
    The node to be serialized.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an 
    <code>options</code> XML element in the "xdmp:save" namespace, 
    or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
      <dt class="xquery">output-encoding</dt>
      <dt class="javascript">outputEncoding</dt>
      <dd>Specifies the encoding to use when saving the document.</dd>
      <dt class="xquery">output-sgml-character-entities</dt>
      <dt class="javascript">outputSgmlCharacterEntities</dt>
      <dd>Specifies if character entities should be output upon serialization
       of the XML.  Valid values are <code>normal</code>, <code>none</code>,
       <code>math</code>, and <code>pub</code>. By default (that is, if this
       option is not specified), no SGML entities are serialized on output,
       unless the App Server is configured to output SGML character
       entities.
      </dd>
      <dt>method</dt>
      <dd>Valid values are <code>xml</code>, <code>html</code>,
       <code>xhtml</code>, and <code>text</code>. This is like the 
       corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">cdata-section-elements</dt>
      <dt class="javascript">cdataSectionElements</dt>
      <dd>A <span class="xquery">list of space-separated</span>
       <span class="javascript">single QName or array of</span> QNames to 
       output as CDATA sections. This is like the corresponding part of both
       the XSLT <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> 
       prolog statement.
      </dd>
      <dt>encoding</dt>
      <dd>The encoding. This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">use-character-maps</dt>
      <dt class="javascript">useCharacterMaps</dt>
      <dd>One or more of the following values, 
       <span class="xquery">separated by spaces.</span>
       <span class="javascript">as a string or an array of strings.</span>
       Valid values are <code>xdmp:sgml-entities-normal</code>,
       <code>xdmp:sgml-entities-math</code>, and
       <code>xdmp:sgml-entities-pub</code>. This is like the corresponding
       part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">
       xsl:output</a> instruction and the MarkLogic XQuery
       <code>xdmp:output</code> prolog statement.
      </dd>
      <dt class="xquery">media-type</dt>
      <dt class="javascript">mediaType</dt>
      <dd>A mimetype representing a media type. For example,
       <code>text/plain</code> or <code>application/xml</code> (or other
       valid mimetypes). This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">byte-order-mark</dt>
      <dt class="javascript">byteOrderMark</dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
       This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt>indent</dt>
      <dd>Specifies if typed XML (that is, XML for which there is an
       in-scope schema) should be pretty-printed (indented).  Valid
       values are <code>yes</code> or <code>no</code>. This is like the 
       corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">indent-untyped</dt>
      <dt class="javascript">indentUntyped</dt>
      <dd>Specifies if untyped XML (that is, XML for which there is no
       in-scope schema) should be pretty-printed (indented).  Valid
       values are <code>yes</code> or <code>no</code>.
       This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">indent-tabs</dt>
      <dt class="javascript">indentTabs</dt>
      <dd>Specifies if tab characters should be used instead of 8 consecutive
       spaces when indenting. Valid values are <code>yes</code> or 
       <code>no</code>.
      </dd>
      <dt class="xquery">include-content-type</dt>
      <dt class="javascript">includeContentType</dt>
      <dd>Include the content-type declaration when serializing the node.
       Valid values are <code>yes</code> or <code>no</code>.
      </dd>
      <dt class="xquery">escape-uri-attributes</dt>
      <dt class="javascript">escapeUriAttributes</dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
       This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">doctype-public</dt>
      <dt class="javascript">doctypePublic</dt>
      <dd>A public identifier, which is the public identifier to use on the
       emitted DOCTYPE.  This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">doctype-system</dt>
      <dt class="javascript">doctypeSystem</dt>
      <dd>A system identifier, which is the system identifier to use on the
       emitted DOCTYPE. This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">omit-xml-declaration</dt>
      <dt class="javascript">omitXmlDeclaration</dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
       This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt>standalone</dt>
      <dd>Valid values are <code>yes</code> or <code>no</code>.
       This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">normalization-form</dt>
      <dt class="javascript">normalizationForm</dt>
      <dd>Valid values are <code>NFC</code>, <code>NFD</code>, and 
       <code>NFKD</code>. This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
      <dt class="xquery">default-attributes</dt>
      <dt class="javascript">defaultAttributes</dt>
      <dd>Specifies whether attributes defaulted with a schema should be
       included in the serialization. Valid values are <code>yes</code> or 
       <code>no</code>. This is like the corresponding part of both the XSLT 
       <a href="http://www.w3.org/TR/xslt20/#serialization">xsl:output</a> 
       instruction and the MarkLogic XQuery <code>xdmp:output</code> prolog 
       statement.
      </dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-save</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: serialize an XML document in the database to a file on disk :)
let $mynode := doc("/mydocs/example.xml")
return xdmp:save("hello.txt", $text)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// serialize a JSON document in the database to a file on disk
xdmp.save('/space/hello.txt', cts.doc('/mydocs/example.json'));
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: save a text file :)
let $text := text { "hello" }
return xdmp:save("hello.txt", $text)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// save a text file
const textnode = xdmp.toJSON('hello');
xdmp.save('/space/hello.txt', textnode);
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: save a text document stored in the database to disk, explicitly
   specifying the output encoding in an XML options node. :)
let $pdf := doc("/mydocs/stuff.pdf")
return
xdmp:save("mystuff.txt", $txt,
    &lt;options xmlns="xdmp:save"&gt;
      &lt;output-encoding&gt;utf-8&lt;/output-encoding&gt;
    &lt;/options&gt;)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: save a text document stored in the database to disk, explicitly 
   specifying the output encoding in an options map. :)
let $txt := doc("/mydocs/stuff.txt")
return
xdmp:save("mystuff.txt", $txt, 
          map:map() =&gt; map:with("outputEncoding", "utf-8"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// save a text document stored in the database to
// disk, explicitly specifying the output encoding
xdmp.save('mystuff.txt',
          cts.doc('/mydocs/stuff.txt'),
          {"outputEncoding": "utf-8"});
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-load" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Inserts a new document with the specified URI. If a document already exists
  at the URI, the function replaces the content in the existing document as
  an update operation.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="location" type="xs:string" optional="false">
    The location of the input document.  If the scheme of the location is
    HTTP (that is, if the string starts with "http://"), then the document is
    requested over HTTP.  If the scheme is file (that is, if the string starts
    with "file://"), then the document is requested over file protocol from
    the local filesystem.
    Otherwise, the document is fetched from the local
    filesystem. On the filesystem, the path can be fully qualifed or relative.
    Relative pathnames are resolved from the directory in which
    MarkLogic Server is installed.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an 
    <code>options</code> XML element in the "xdmp:load" namespace, 
    or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a> function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>uri</dt>
    <dd> The URI of the document to be loaded. If omitted, then the location
    is used for the URI.</dd>
    <dt>permissions</dt>
    <dd>Security permission corresponding to the permissions for the
    document. If not supplied, the current user's default permissions are
    applied. The default value used for $permissions can be obtained by
    calling <code class="xquery">xdmp:default-permissions()</code>
    <code class="javascript">xdmp.defaultPermissions()</code>. A document that
    is created by a non-admin user (that is, by any user who does not have the
    <code>admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code>XDMP-MUSTHAVEUPDATE</code>
    exception.</dd>
    <dt>collections</dt>
    <dd>The collection URIs for collections to which this document belongs.
    If not supplied, the document is added to the current user's default
    collections  (the collections returned from
    <code class="xquery">xdmp:default-collections()</code>
    <code class="javascript">xdmp.defaultCollections()</code>). For each
    collection that is protected, the user must have permissions to update
    that collection or have the <code>any-collection</code> privilege. For
    each unprotected collection, the user must have the
    <code>unprotected-collections</code> privilege. <p class="xquery">The
    <code>&lt;collections&gt;</code> element consists of one or more
    <code>&lt;collection&gt;</code> child elements. For example:
    <pre>
    &lt;collections&gt;
      &lt;collection&gt;myCollection1&lt;/collection&gt;
      &lt;collection&gt;myCollection2&lt;/collection&gt;
    &lt;/collections&gt; </pre></p>
    <p class="javascript">This option is an array of collection URIs.</p></dd>
    <dt>quality</dt>
    <dd> The quality of this document. A positive value increases the
    relevance score of the document in text search functions. The converse is
    true for a negative value. The default value is 0.</dd>
    <dt class="xquery">default-namespace</dt>
    <dt class="javascript"><p>defaultNamespace</p></dt>
    <dd>(XML only) The namespace to use if there is no namespace at the root
    node of the document.  The default value is "".</dd>
    <dt>repair</dt>
    <dd>A value of <code>full</code> specifies that malformed XML
        content be repaired.  A value of <code>none</code> specifies that
        malformed XML content is rejected.
        <p class="xquery">If no repair option is explicitly specified, the
	    default is implicitly specified by the XQuery version of the caller.
        In XQuery <code>1.0</code> and <code>1.0-ml</code> the default
        is <code>none</code>.  In XQuery <code>0.9-ml</code> the
        default is <code>full</code>.</p>
        <p class="javascript">If no repair option is explicitly specified, the
	    default is <code>none</code>.</p>
        This option has no effect on binary, text or JSON documents.</dd>
    <dt>format</dt>
    <dd>A value of <code>text</code> specifies to get the document as a text
        document, regardless of the URI specified. A value of
        <code>binary</code> specifies to get the document as a binary
        document, regardless of the URI specified. A value of <code>xml</code>
        specifies to get the document as an XML document, regardless of the
        URI specified. A value of <code>json</code>
        specifies to get the document as a JSON document, regardless of the
        URI specified.</dd>
    <dt class="xquery">default-language</dt>
    <dt class="javascript"><p>defaultLanguage</p></dt>
    <dd>The language to specify in an <code>xml:lang</code> attribute on the
    root element node if the root element node does not already have an
    <code>xml:lang</code> attribute. This option applies only to XML documents.
    If this option is not specified, then nothing is added to the root element
    node.</dd>
    <dt>encoding</dt>
    <dd>Specifies the encoding to use when reading the document into MarkLogic
    Server. The value must either be "auto" or match an encoding name 
    according to the Unicode Charset Alias Matching rules
    (<a href="http://www.unicode.org/reports/tr22/#Charset_Alias_Matching">http://www.unicode.org/reports/tr22/#Charset_Alias_Matching</a>).
    When the value is "auto", MarkLogic guesses the encoding from
    the document content. For a list of character set encodings by language, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2340354'>Collations and Character Sets By Language</a> in the <em>Search Developer's Guide</em>. 
    If you do not set this option, MarkLogic uses the encoding
    specified in the HTTP headers, if present. If you do not set this option
    and no encoding is available from HTTP headers, the encoding
    defaults to UTF-8. For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/encodings_collations.xml%2387576'>Character Encoding</a> in the <em>Search Developer's Guide</em>.</dd>
    <dt>forests</dt>
    <dd>Specifies the ID of the forest in which this document is inserted.
    <span class="xquery">Each forest ID is in a &lt;forest&gt; child element and
    is of type <code>xs:unsignedLong</code>.
    </span><span class="javascript">This can be a single string or an array of
    strings, with each string being a forest ID. </span>. If the document
    already exists in the database, it will remain in its existing forest. If
    no such forest exists or if no such forest is attached to the context
    database, an error is raised. If multiple forests
    are specified, the document is inserted into one of the specifed
    forests.  If the document already exists and the forest in which it is
    stored is set to delete-only, then you must specify the forest IDs to
    include one or more forests that allow updates, otherwise an exception is
    thrown.
    <p>
    If you have local disk failover enabled, specify the ID of the master
    forest.  In the event of a failover, MarkLogic server will automatically
    redirect documents to the replica forest.  Specify the ID of the replica
    forest will result in a "forest not in database" error.
    </p>
    </dd>
    <dt>metadata</dt>
    <dd>Specifies key-value pairs representing user-defined metadata associated 
     with the document. <span class="xquery">When you express the options as
     an XML element, the value of the <code>metadata</code> option element is 
     a serialized map:map. When you express the options as a map:map,
     the associated with the "metadata" option key is itself a map:map.</span>
    </dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">When selecting documents over HTTP (where the <code>$location</code>
  parameter begins with <code>http://</code>), the response from the webserver
  is loaded into the database, regardless of what the headers returned
  from the webserver indicate.  For example, if the webserver returns a
  404 (file not found), then the response page that says "file not found"
  is loaded into the database.  If you want to examine the headers before
  loading the document, use <code class="xquery">xdmp:http-get</code>
  <code class="javascript">xdmp.httpGet</code> (combined with
  <code class="xquery">xdmp:document-insert</code>
  <code class="javascript">xdmp.documentInsert</code>) instead, as
  <code class="xquery">xdmp:http-get</code><code class="javascript">xdmp.httpGet</code>
  allows you to examine the headers returned from the HTTP server.
  </p>
</apidoc:usage>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-document-load</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml">If a new document is inserted, you also need the
  <code>unprotected-uri</code> privilege (only if the URI is not protected),
  the <code>any-uri</code> privilege, or an appropriate URI privilege. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If adding an unprotected collection to a document, the
  <code>unprotected-collections</code> privilege
  (<code>http://marklogic.com/xdmp/privileges/unprotected-collections</code>)
  is needed; if adding a protected collection, the user must have either
  permissions to update the collection or the
  <code>any-collection</code> privilege
  (<code>http://marklogic.com/xdmp/privileges/any-collection</code>).
  </p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Load a document from the file system, using options expressed
 : as an XML element. :)
xdmp:document-load("c:\myFile.xml",
    &lt;options xmlns="xdmp:document-load"&gt;
      &lt;uri&gt;/documents/myFile.xml&lt;/uri&gt;
      &lt;repair&gt;none&lt;/repair&gt;
      &lt;permissions&gt;{xdmp:default-permissions()}&lt;/permissions&gt;
      &lt;metadata&gt;{
        map:map() =&gt; map:with("h", "hello")
                  =&gt; map:with("w", "world")
      }&lt;/metadata&gt;
    &lt;/options&gt;)

(: Loads the document with a URI "/documents/myFile.xml"
 : and does not perform tag repair during the load. :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Load a document from the file system, using options expressed
 : as a map:map. :)
xdmp:document-load("c:\myFile.xml",
    map:map() =&gt; map:with("uri", "/documents/myFile.xml")
              =&gt; map:with("repair", "none")
              =&gt; map:with("metadata", map:map() =&gt; map:with("key", "value"))
)

(: Loads the document with a URI "/documents/myFile.xml"
 : and does not perform tag repair during the load. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentLoad('c:\\myFile.json',
    { 'uri' : '/documents/myFile.json',
      'permissions' : xdmp.defaultPermissions()
    })

// Loads the document with a URI "/documents/myFile.json".
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-load("http://myCompany.com/file.xml",
    &lt;options xmlns="xdmp:document-load"
             xmlns:http="xdmp:http"&gt;
      &lt;uri&gt;/documents/myFile.xml&lt;/uri&gt;
      &lt;repair&gt;none&lt;/repair&gt;
      &lt;permissions&gt;{xdmp:default-permissions()}&lt;/permissions&gt;
      &lt;format&gt;xml&lt;/format&gt;
      &lt;http:authentication&gt;
          &lt;http:username&gt;user&lt;/http:username&gt;
          &lt;http:password&gt;pass&lt;/http:password&gt;
      &lt;/http:authentication&gt;
    &lt;/options&gt;)

(: Loads the document with a URI "/documents/myFile.xml"
 : from the server http://myCompany.com, sending the
 : credentials user/pass. Tag repair is not performed
 : during the load, the document is loaded as xml with
 : metadata key-value pairs of 'h:hello' and 'w:world'. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentLoad('http://myCompany.com/file.json',
    {
      uri : '/documents/myFile.json',
      permissions : xdmp.defaultPermissions(),
      format : 'json',
      authentication : {
        username : 'user',
        password : 'pass'
        metadata: {foo:'bar'}
      }
    });

// Loads the document with a URI "/documents/myFile.json"
// from the server http://myCompany.com, sending the
// credentials user/pass. The document is loaded as JSON
// with the metadata, 'foo:bar'.
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a map to expression options, rather than an XML element. :)
xdmp:document-load("c:\myFile.xml",
  map:map() =&gt; map:with("uri", "/documents/myFiles.xml")
            =&gt; map:with("permissions", xdmp:default-permissions("objects"))
            =&gt; map:with("collections", ("myCollection1", "myCollection2"))
            =&gt; map:with("repair", "full")
            =&gt; map:with("forests", (xdmp:forest("myForest")))
)

(: Loads the document with a URI "/documents/myFile.xml"
 : performing tag repair during the load, adding the
 : document to the "myCollection1" and "myCollection2"
 : collections, and loading the document into the forest
 : named "myForest". :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentLoad('c:\myFile.json',
    {
      uri : '/documents/myFile.json',
      permissions : xdmp.defaultPermissions(),
      collections : ['myCollection1', 'myCollection2'],
      forests : xdmp.forest('myForest')
    });

// Loads the document with a URI "/documents/myFile.json", adding the
// document to the "myCollection1" and "myCollection2" collections,
// and loading the document into the forest named "myForest".
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-load" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function inserts a document into the database and stores it as a
  temporal document.
  The document will belong to the specified temporal collection to ensure
  that it can only be updated or deleted using the temporal functions.
  If a temporal document
  already exists at the specified URI, this function performs an update
  instead of an insert.  (Note that updates on temporal documents mean
  that a new document is created
  in the temporal collection with a different time period.)
  <p xmlns="http://www.w3.org/1999/xhtml">
  An exception is thrown if <code>$temporal-collection</code> is not
  temporal or <code>$collection</code> includes temporal collection(s).
  </p>
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <code xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</code> function.
    All versions of the temporal document will be associated with this
    temporal collection.
  </apidoc:param>
      <apidoc:param name="location" type="xs:string" optional="false">
    The location of the input document.  If the scheme of the location is
    HTTP (that is, if the string starts with "http://"), then the document is
    requested over HTTP.  If the scheme is file (that is, if the string starts
    with "file://"), then the document is requested over file protocol from
    the local filesystem.
    Otherwise, the document is fetched from the local
    filesystem. On the filesystem, the path can be fully qualifed or relative.
    Relative pathnames are resolved from the directory in which
    MarkLogic Server is installed.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You 
    can specify options as either an <code>options</code> XML element
    in the "temporal:document-load" namespace, or as a <code>map:map</code>. 
    The options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>
    (when retrieving content via HTTP).
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>uri</dt>
    <dd> The URI of the document to be loaded. If omitted, then the location
    is used for the URI.</dd>
    <dt>permissions</dt>
    <dd>Security permission corresponding to the permissions for the
    document. If not supplied, the current user's default permissions are
    applied. The default value used for $permissions can be obtained by
    calling <code class="xquery">xdmp:default-permissions()</code>
    <code class="javascript">xdmp.defaultPermissions()</code>. A document that
    is created by a non-admin user (that is, by any user who does not have the
    <code>admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code>XDMP-MUSTHAVEUPDATE</code>
    exception.</dd>
    <dt>collections</dt>
    <dd>The collection URIs for collections to which this document belongs.
    If not supplied, the document is added to the current user's default
    collections  (the collections returned from
    <code class="xquery">xdmp:default-collections()</code>
    <code class="javascript">xdmp.defaultCollections()</code>). For each
    collection that is protected, the user must have permissions to update
    that collection or have the <code>any-collection</code> privilege. For
    each unprotected collection, the user must have the
    <code>unprotected-collections</code> privilege. <p class="xquery">The
    <code>&lt;collections&gt;</code> element consists of one or more
    <code>&lt;collection&gt;</code> child elements. For example:
    <pre>
    &lt;collections&gt;
      &lt;collection&gt;myCollection1&lt;/collection&gt;
      &lt;collection&gt;myCollection2&lt;/collection&gt;
    &lt;/collections&gt; </pre></p>
    <p class="javascript">This option is an array of collection URIs.</p></dd>
    <dt>quality</dt>
    <dd> The quality of this document. A positive value increases the
    relevance score of the document in text search functions. The converse is
    true for a negative value. The default value is 0.</dd>
    <dt class="xquery">default-namespace</dt>
    <dt class="javascript">defaultNamespace</dt>
    <dd>(XML only) The namespace to use if there is no namespace at the root
    node of the document.  The default value is "".</dd>
    <dt>repair</dt>
    <dd>A value of <code>full</code> specifies that malformed XML
        content be repaired.  A value of <code>none</code> specifies that
        malformed XML content is rejected.
        <p class="xquery">If no repair option is explicitly specified, the
	    default is implicitly specified by the XQuery version of the caller.
        In XQuery <code>1.0</code> and <code>1.0-ml</code> the default
        is <code>none</code>.  In XQuery <code>0.9-ml</code> the
        default is <code>full</code>.</p>
        <p class="javascript">If no repair option is explicitly specified, the
	    default is <code>none</code>.</p>
        This option has no effect on binary, text or JSON documents.</dd>
    <dt>format</dt>
    <dd>A value of <code>text</code> specifies to get the document as a text
        document, regardless of the URI specified. A value of
        <code>binary</code> specifies to get the document as a binary
        document, regardless of the URI specified. A value of <code>xml</code>
        specifies to get the document as an XML document, regardless of the
        URI specified. A value of <code>json</code>
        specifies to get the document as a JSON document, regardless of the
        URI specified.</dd>
    <dt class="xquery">default-language&gt;</dt>
    <dt class="javascript">defaultLanguage</dt>
    <dd>The language to specify in an <code>xml:lang</code> attribute on the
    root element node if the root element node does not already have an
    <code>xml:lang</code> attribute. This option applies only to XML documents.
    If this option is not specified, then nothing is added to the root element
    node.</dd>
    <dt>forests</dt>
    <dd>Specifies the ID of the forest in which this document is inserted.
    <span class="xquery">Each forest ID is in a &lt;forest&gt; child element and
    is of type <code>xs:unsignedLong</code>.
    </span><span class="javascript">This can be a single string or an array of
    strings, with each string being a forest ID. </span>. If the document
    already exists in the database, it will remain in its existing forest. If
    no such forest exists or if no such forest is attached to the context
    database, an error is raised. If multiple forests
    are specified, the document is inserted into one of the specifed
    forests.  If the document already exists and the forest in which it is
    stored is set to delete-only, then you must specify the forest IDs to
    include one or more forests that allow updates, otherwise an exception is
    thrown.
    <p>
    If you have local disk failover enabled, specify the ID of the master
    forest.  In the event of a failover, MarkLogic server will automatically
    redirect documents to the replica forest.  Specify the ID of the replica
    forest will result in a "forest not in database" error.
    </p>
    </dd>
    <dt class="xquery">metadata</dt>
    <dd>Specifies key-value pairs representing certain metadata associated 
     with the document. 
    </dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

temporal:document-load("temporalCollection", "c:\myFile.xml",
    &lt;options xmlns="temporal:document-load"&gt;
      &lt;uri&gt;/documents/myFile.xml&lt;/uri&gt;
      &lt;repair&gt;none&lt;/repair&gt;
      &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
          &lt;map:entry key="validStart"&gt;
            &lt;map:value&gt;1601-01-01T13:59:00Z&lt;/map:value&gt;
          &lt;/map:entry&gt;
          &lt;map:entry key="validEnd"&gt;
            &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;
          &lt;/map:entry&gt; 
        &lt;/map:map&gt;
      &lt;/metadata&gt; 
      &lt;permissions&gt;{xdmp:default-permissions()}&lt;/permissions&gt;
    &lt;/options&gt;)

=&gt; Loads the temporal document with a URI "/documents/myFile.xml"
   into the temporal collection, "temporalCollection", and does not
   perform tag repair during the load.
    </pre>
  </apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();

temporal.documentLoad('temporalCollection', 'c:\myFile.json',
    { uri: '/documents/myFile.json',
      metadata: {
        validStart: '2014-04-03T13:00:00',
        validEnd: '2014-04-03T16:00:00'
      },
      permissions: xdmp.defaultPermissions()
    });

// Loads the temporal document with a URI "/documents/myFile.json"
// into the temporal collection, "temporalCollection".
    </pre>
  </apidoc:example>
  </apidoc:function><apidoc:function name="load" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  [DEPRECATED: use <a href="#xdmp:document-load" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:document-load</code></a>
  instead]
  Inserts a new document from the XML file at $path if a document
  with the specified URI does not already exist. Otherwise, the
  function replaces the content in the existing document as an update
  operation.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path" type="xs:string">
    The path to the input file.  The path can be fully qualifed or relative.
    Relative pathnames are resolved from the directory in which
    MarkLogic Server is installed.
  </apidoc:param>
      <apidoc:param name="uri" type="xs:string?" optional="true">
    The URI of the document to be loaded.
    If omitted, then the pathname is used.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*" optional="true">
    Security permission elements corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp:default-permissions(). To specify
    no permissions, enter the empty sequence ().
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]" optional="true">
    Security permission objects corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp:default-permissions(). To specify
    no permissions, enter the empty sequence ().
  </apidoc:param>
      <apidoc:param name="collections" type="xs:string*" optional="true">
    The collection URIs for collections to which this document
    belongs.  If not supplied, the document is added to the current
    user's default collections.  The default value used for $collections
    can be obtained by calling xdmp:default-collections(). To specify
    no collections, enter the empty sequence ().
  </apidoc:param>
      <apidoc:param name="quality" type="xs:int?" optional="true">
    The quality of this document.  A positive value increases
    the relevance score of the document in text search functions.
    The converse is true for a negative value.  The default value is 0.
  </apidoc:param>
      <apidoc:param name="default-namespace" type="xs:string?" optional="true">
    If $default-namespace is specified and the root node of the
    loaded document does not explicitly specify a namespace,
    $default-namespace will be applied to the root node.
    The default value for $default-namespace is "".
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    The options for loading this document.
    The default value is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>"repair-full"</dt>
    <dd>Specifies that malformed XML content be repaired during loading.
        This option has no effect on binary or text documents.</dd>
    <dt>"repair-none"</dt>
    <dd>Specifies that malformed XML content be rejected during loading.
        This option has no effect on binary or text documents.</dd>
    <dt>"format-text"</dt>
    <dd>Specifies to load the document as a text document,
        regardless of the URI specified.</dd>
    <dt>"format-binary"</dt>
    <dd>Specifies to load the document as a binary document,
        regardless of the URI specified.</dd>
    <dt>"format-xml"</dt>
    <dd>Specifies to load the document as an XML document,
        regardless of the URI specified.</dd>
    <dt>"format-json"</dt>
    <dd>Specifies to load the document as a JSON document,
        regardless of the URI specified.</dd>
    <dt>"lang=en"</dt>
    <dd>Specifies that the document is in english.</dd>
    </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    Specifies the ID of the forest in which this document is inserted.
    If the document already exists in the database, it will remain in
    its existing forest.  If no such forest exists or if no such forest
    is attached to the context database, an error is raised.  If
    multiple forests are specified, the document is inserted into
    one of the specifed forests.
    <p xmlns="http://www.w3.org/1999/xhtml">
    If you have local disk failover enabled, specify the ID of the master
    forest.
    In the event of a failover, MarkLogic server will automatically redirect
    documents
    to the replica forest.  Specify the ID of the replica forest will result
    in a "forest not in database" error.
    </p>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-load</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml">If a new document is inserted, you also need the
  <code>unprotected-uri</code> privilege (only if the URI is not protected),
  the <code>any-uri</code> privilege, or an appropriate URI privilege. </p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If no format is specified in $options, it is specified by the
  document content type specified by the extension of the document URI.
  The mimetype extensions and corresponding content types are set in the
  Admin Interface.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If neither "repair-full" nor "repair-none" is present,
  the default is specified by the XQuery version of the caller.
  In XQuery version <code>1.0</code> and <code>1.0-ml</code> the default is
  "repair-none".  In XQuery version <code>0.9-ml</code> the default is
  "repair-full".</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:load("/home/test/example.xml", "/example.xml",
            (xdmp:permission("editor", "read"),
             xdmp:permission("editor", "update")),
            "http://examples.com",
            10,"http://www.marklogic.com/default")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.load("/home/test/example.json", "/example.json",
          [xdmp.permission("editor", "read"),
           xdmp.permission("editor", "update")],
          "http://examples.com",
          10,"http://www.marklogic.com/default")
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:load("/home/test/example.xml",
            "/example.xml",
            xdmp:default-permissions(),
            xdmp:default-collections(),
            0,
            "",
            "repair-none")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.load("/home/test/example.json",
            "/example.json",
            xdmp.defaultPermissions(),
            xdmp.defaultCollections(),
            0,
            "",
            "repair-none");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-insert" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Inserts a new document into the database if a document with the
  specified URI does not already exist.  If a document already exists
  at the specified URI, the function replaces the content of the existing
  document with the specified content (the <code xmlns="http://www.w3.org/1999/xhtml">$root</code> parameter)
  as an update operation.  In addition to replacing the content,
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:document-insert</code> replaces any permissions, collections,
  and quality with the ones specified (or with the default values for these
  parameters, if not explicitly specified).  Also, if a properties
  document exists at the same URI, that properties document (including any
  content it contains) is preserved.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document to be inserted.
  </apidoc:param>
      <apidoc:param name="root" type="node()">
    The root node.  The root node can be one of JSON format, XML format,
    binary (BLOB) format, or text (CLOB) format.
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You 
    can specify options as either an <code>options</code> XML element
    in the "xdmp:document-insert" namespace, or as a <code>map:map</code>.
    The options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>
    function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>permissions</dt>
    <dd>Specify permissions for the document. If not supplied, the current
    user's default permissions are applied. The default value used 
    for <code>permissions</code> can be obtained by calling the
    <a class="xquery" href="#xdmp:default-permissions">xdmp:default-permissions</a>
    <a class="javascript" href="#xdmp.defaultPermissions">xdmp.defaultPermissions</a>
    function. A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code>admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code>XDMP-MUSTHAVEUPDATE</code>
    exception.
    </dd>
    <dt>collections</dt>
    <dd>The collection URIs for collections to which this document
    belongs.  If not supplied, the document is added to the current
    user's default collections.  For each collection that is protected, the
    user must have permissions to update that collection or have the
    <code>any-collection</code> privilege. For each unprotected collection,
    the user must have the <code>unprotected-collections</code> privilege.
    The default value used for <code>collections</code> can be obtained by 
    calling the
    <a class="xquery" href="#xdmp:default-collections">xdmp:default-collections</a>
    <a class="javascript" href="#xdmp.defaultCollections">xdmp.defaultCollections</a>
    function. <span class="xquery">When expressing options as an XML element,
    specify the collection URIs in &lt;collection&gt; child elements of this 
    option, one URI per child. When expressing options as a map:map,
    specify the value of the <code>collections</code> key as a sequence
    of collection URIs.</span>
    </dd>
    <dt>quality</dt>
    <dd> The quality of this document.  A positive value increases
    the relevance score of the document in text search functions.
    The converse is true for a negative value.  The default value is 0.
    </dd>
    <dt>forests</dt>
    <dd>Specifies the IDs of one or more forests in which this document is 
    inserted. Each forest is specified in a separate <code>&lt;forest&gt;</code>
    element. If the document already exists in the database and if 
    <code>forests</code> is not specified, it will remain in its existing 
    forest. If no such forest exists or if no such forest is attached to the 
    context database, an error is raised. If multiple forests are specified, 
    the document is inserted into one of the specifed forests. If the 
    document exists and the forest in which it is stored is set to delete-only,
    then the <code>forests</code> option must include one or more forests that 
    allow updates, otherwise an exception is thrown.
    <p>If you have local disk failover enabled, specify the ID of the master 
    forest. In the event of a failover, MarkLogic server will automatically 
    redirect documents to the replica forest.  Specify the ID of the replica 
    forest will result in a "forest not in database" error.</p>
    </dd>
    <dt>metadata</dt>
    <dd>Specifies key-value pairs representing certain metadata associated 
     with the document. <span class="xquery">When you express options as an
     XML element, the value of a metadata element is a serialized
     map containing the key-value pairs. When you express options as a
     map:map, the value associated with "metadata" key is also a map:map.</span>
    </dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml">If a new document is inserted, the <code>unprotected-uri</code> privilege
  (only if the URI is not protected), the <code>any-uri</code> privilege, or an
  appropriate URI privilege is also needed.  If adding an unprotected
  collection to a document, the <code>unprotected-collections</code> privilege
  is needed; if adding a protected collection, the user must have either
  permissions to update the collection or the
  <code>any-collection</code> privilege.</p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-insert(
    "/example.xml", &lt;a&gt;aaa&lt;/a&gt;,
    &lt;options xmlns="xdmp:document-insert"&gt;
      &lt;metadata&gt;{
        map:map() =&gt; map:with("w", "world")
                  =&gt; map:with("h", "hello")
      }&lt;/metadata&gt;
      &lt;permissions&gt;{xdmp:default-permissions()}&lt;/permissions&gt;
    &lt;/options&gt;)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentInsert(
       '/example.json', {a:'aaa'},
       {metadata: {foo:'bar'},
        permissions : 
          [xdmp.permission('app-user', 'read'),
           xdmp.permission('app-user', 'update')],
        collections : 'http://examples.com'})
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Insert with perm, collection, and quality options. Notice that this
 : example adds to, rather than replaces, the default collections. :)
xdmp:document-insert(
    "/example.xml",
    &lt;a&gt;aaa&lt;/a&gt;,
    &lt;options xmlns="xdmp:document-insert"&gt;  
      &lt;permissions&gt;{xdmp:default-permissions()}&lt;/permissions&gt;
      &lt;collections&gt;{
        &lt;collection&gt;/my/additional/collection&lt;/collection&gt;,
        for $coll in xdmp:default-collections()
        return &lt;collection&gt;{$coll}&lt;/collection&gt;
      }&lt;/collections&gt;
      &lt;quality&gt;10&lt;/quality&gt;
    &lt;/options&gt;)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Expressing options as a map instead of an element :)
xquery version "1.0-ml";
xdmp:document-insert("/example.xml", &lt;a&gt;aaa&lt;/a&gt;,
  map:map() =&gt; map:with("collections", ("coll1","coll2"))
            =&gt; map:with("quality", 2)
            =&gt; map:with("permissions", xdmp:default-permissions("objects"))
)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentInsert(
       '/example.json',
       {a:'aaa'},
       {permissions : xdmp.defaultPermissions(),
        collections : xdmp.defaultCollections(),
        quality : 10})
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Specify the valid start and end time for a temporal document.
:)
xdmp:document-insert(
    "/example.xml",
    &lt;root&gt;new content here&lt;/root&gt;, 
    &lt;options xmlns="xdmp:document-insert"&gt;  
      &lt;metadata&gt;{
        map:map() =&gt; map:with("valid-start", "2014-06-03T14:13:05.472585-07:00")
                  =&gt; map:with("valid-end", "9999-12-31T11:59:59Z")
      }&lt;/metadata&gt;
    &lt;/options&gt;)</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Specify the valid start and end time for a temporal document.
declareUpdate();
xdmp.documentInsert(
    '/example.json',
    {foo:'new content here'}, 
    {metadata: {'valid-start' : '2014-06-03T14:13:05.472585-07:00',
                'valid-end' : '9999-12-31T11:59:59Z'}})
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
(: create a text document :)
xdmp:document-insert("/text-doc.txt",
   text { "This is a text document." } )

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a text document
declareUpdate();
var textNode = new NodeBuilder();
textNode.addText('This is a text document');
textNode = textNode.toNode();
xdmp.documentInsert('/text-doc.txt', textNode);

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="statement-set-system-time" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function sets the system start time on temporal
  documents that are inserted or deleted
  in the same statement as this function.  If this function is not called along
  with a temporal document insert or delete, nothing will be affected.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="system-time" type="xs:dateTime">
    The dateTime to set.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/temporal-statement-set-system-time</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
    at "/MarkLogic/temporal.xqy";   
let $root :=   
&lt;tempdoc&gt;
    &lt;content&gt;v1-content here&lt;/content&gt;
&lt;/tempdoc&gt;
let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;1601-01-01T13:59:00Z&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("kool", "koolorder.xml", $root, $options),
temporal:statement-set-system-time( xs:dateTime("1601-01-01T14:00:00Z"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");
var root =
    {"tempdoc": 
       {"content": "content here"}
    };
var options =
    {metadata:
       {validStart: "1601-01-01T13:59:00Z",
        validEnd: "9999-12-31T11:59:59Z"}
    };
temporal.documentInsert("kool", "doc.json", root, options);
temporal.statementSetSystemTime(xs.dateTime("1601-01-01T14:00:00Z"));
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="statement-get-system-time" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function gets the system start time on temporal
  documents that are inserted or deleted
  in the same statement as this function.  If this function is not called along
  with a temporal document insert or delete, nothing will be affected.
  </apidoc:summary>
    <apidoc:params/>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
    at "/MarkLogic/temporal.xqy";   
let $root :=   
&lt;tempdoc&gt;
    &lt;content&gt;v1-content here&lt;/content&gt;
&lt;/tempdoc&gt;
let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;1601-01-01T13:59:00Z&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("kool", "koolorder.xml", $root, $options),
temporal:statement-get-system-time()

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");
var root =
    {"tempdoc": 
       {"content": "content here"}
    };
var options =
    {metadata:
       {validStart: "1601-01-01T13:59:00Z",
        validEnd: "9999-12-31T11:59:59Z"}
    };
temporal.documentInsert("kool", "doc.json", root, options);
temporal.statementGetSystemTime();
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-insert" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function inserts a document into the database and stores it as a
  temporal document.  The document will belong to the specified temporal
  collection to ensure that it can only be updated or deleted using the
  temporal functions.  If a temporal document already exists at the
  specified URI, this function performs an update instead of
  an insert.  (Note that updates on temporal documents mean that a new
  document is created
  in the temporal collection with a different time period.)
  <p xmlns="http://www.w3.org/1999/xhtml">
  An exception is thrown if <code>$temporal-collection</code> is not
  temporal or <code>$collection</code> includes temporal collection(s).
  </p>
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a> 
    function. All versions of the temporal document will be associated with this
    temporal collection.
    </apidoc:param>
      <apidoc:param name="uri" type="xs:string">
    The URI to be used to identify the document in the database.  If
    the document is not the latest version, a suffix will be concatenated
    to the document URI with a dot as the new URI of the document.
    </apidoc:param>
      <apidoc:param name="root" type="node()">
    The root node of the document. The root node can be one of XML format,
    JSON format, binary (BLOB) format, or text (CLOB) format.
    </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You 
    can specify options as either an <code>options</code> XML element
    in the "xdmp:document-insert" namespace, or as a <code>map:map</code>.
    The options names below are XML element localnames. When using a map,
    replace the hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:http-get" xmlns="http://www.w3.org/1999/xhtml">xdmp:http-get</a>
    <a class="javascript" href="#xdmp.httpGet" xmlns="http://www.w3.org/1999/xhtml">xdmp.httpGet</a>
    function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>permissions</dt>
    <dd> 
    Security permissions corresponding to the permissions for the
    document.  The permissions specified only apply to the latest
    document versions created in this operation; previous versions of the
    documents will retain their previous permissions.
    If not supplied, the current user's default permissions are applied.
    The default value used for permissions can be obtained by calling the
    <a class="xquery" href="#xdmp:default-permissions">xdmp:default-permissions</a>
    <a class="javascript" href="#xdmp.defaultPermissions">xdmp.defaultPermissions</a>
    function. A document that is created by a non-admin user (that is, by 
    any user who does not have the admin role) must have at least one update
    permission, otherwise the creation will throw an
    <code>XDMP-MUSTHAVEUPDATE</code> exception.</dd>
    <dt>collections</dt>
    <dd> 
    The collection URIs for any additional, non-temporal collections the
    document is to belong to.  If not supplied, the document is added to the
    current user's default collections. For each collection that is protected,
    the user must have permissions to update that collection or have
    the any-collection privilege. For each unprotected collection, the user
    must have the unprotected-collections privilege. The default value used
    for $collections can be obtained by calling the
    <a class="xquery" href="#xdmp:default-collections">xdmp:default-collections</a>
    <a class="javascript" href="#xdmp.defaultCollections">xdmp.defaultCollections</a> 
    function. The collections specified only apply to the latest
    document versions created in this operation; previous versions of the
    documents will retain their previous collections.
    </dd>
    <dt>quality</dt>
    <dd> 
    The quality of this document. A positive value increases the relevance
    score of the document in text search functions. The converse is true for
    a negative value. The default value is 0.
    </dd>
    <dt>forests</dt>
    <dd>Specifies the ID of the forest in which this document is inserted.
    <span class="xquery">When expressing options as an XML element,
    each forest ID is in a &lt;forest&gt; child element and is of
    type <code>xs:unsignedLong</code>. When expressing options as a map,
    the value of this option is a sequence of forest IDs.</span> If the
    document already exists in the database, it will remain in its existing 
    forest. If no such forest exists or if no such forest is attached to 
    the context database, an error is raised. If multiple forests
    are specified, the document is inserted into one of the specifed
    forests.  If the document already exists and the forest in which it is
    stored is set to delete-only, then you must specify the forest IDs to
    include one or more forests that allow updates, otherwise an exception is
    thrown.
    <p>
    If you have local disk failover enabled, specify the ID of the master
    forest.  In the event of a failover, MarkLogic server will automatically
    redirect documents to the replica forest.  Specify the ID of the replica
    forest will result in a "forest not in database" error.
    </p>
    </dd>
    <dt>metadata</dt>
    <dd>Specifies key-value pairs representing certain metadata associated 
     with the document. 
    </dd>
    </dl></blockquote>
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

let $root :=
&lt;tempdoc&gt;
   &lt;content&gt;v1-content here&lt;/content&gt;
&lt;/tempdoc&gt;

let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;2014-04-03T11:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;2014-04-03T16:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("kool", "koolorder.xml", $root, $options)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

let $root :=
&lt;tempdoc&gt;
   &lt;content&gt;v1-content here&lt;/content&gt;
&lt;/tempdoc&gt;

let $options :=  
  map:map() =&gt; map:with("metadata",
                 map:map() =&gt; map:with("validStart", "2014-04-03T11:00:00")
                           =&gt; map:with("validEnd", "2014-04-03T16:00:00")
               )
return 
temporal:document-insert("kool", "koolorder.xml", $root, $options)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var root = { content : 'v1-content here' };
var options =
    {metadata:
       {validStart: '2014-04-03T11:00:00',
        validEnd: '2014-04-03T16:00:00'}
    };
temporal.documentInsert('kool', 'koolorder.json', root, options);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="statement-set-document-version-uri" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function sets document URI for a temporal document to be used for
  the new version of temporal document to be generated in the current
  statement.  Throw exception if the version URI is the same as the
  temporal document URI or if a fragment with the specified version URI
  exists in the database.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="document-uri" type="xs:string">
    The URI of the temporal document.
    </apidoc:param>
      <apidoc:param name="version-uri" type="xs:string">
    The URI of the new version of the temporal document.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";
import module namespace temporal = "http://marklogic.com/xdmp/temporal"
    at "/MarkLogic/temporal.xqy";
let $root :=
&lt;tempdoc&gt;
    &lt;content&gt;v1-content here&lt;/content&gt;
&lt;/tempdoc&gt;
let $options :=
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;1601-01-01T13:59:00Z&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;
         &lt;/map:entry&gt;
       &lt;/map:map&gt;
    &lt;/metadata&gt;
&lt;/options&gt;
return
temporal:statement-set-document-version-uri("koolorder.xml","koolorder.v1.xml"),
temporal:document-insert("kool", "koolorder.xml", $root, $options)

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");
var root =
    {"tempdoc":
       {"content": "content here"}
    };
var options =
    {metadata:
       {validStart: "1601-01-01T13:59:00Z",
        validEnd: "9999-12-31T11:59:59Z"}
    };
temporal.statementSetDocumentVersionUri("doc.json","doc.v1.json");
temporal.documentInsert("kool", "doc.json", root, options);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="directory-create" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Creates a directory.  If security is enabled,
  the document permissions and collections are set to the given parameters,
  if supplied.  Otherwise, the current user's default permissions and/or
  collections are applied.  If the beginning of the document URI is
  protected, the user must have access to that URI privilege.  If the
  directory URI does not end with a '/' one is added.  If the directory already
  exists, then an XDMP-DIREXISTS exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the directory to be inserted.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*" optional="true">
    Security permission elements corresponding to the permissions
    for the document.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]" optional="true">
    Security permission objects corresponding to the permissions
    for the document.
  </apidoc:param>
      <apidoc:param name="collections" type="xs:string*" optional="true">
    The collections to which the new directory belongs.
  </apidoc:param>
      <apidoc:param name="quality" type="xs:int?" optional="true">
    The quality of this document.  A positive value increases
    the relevance score of the document in text search functions.
    The converse is true for a negative value.  The default value is 0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    Specifies the ID of the forest in which this directory is created.
    If the directory already exists in the database and if $forest-ids is
    not specified, it will remain in its existing forest.  If no such
    forest exists or if no such forest is attached to the context database,
    an error is raised.  If multiple forests are specified, the directory
    is created in one of the specifed forests.
    <p xmlns="http://www.w3.org/1999/xhtml">
    If you have local disk failover enabled, specify the ID of the master
    forest.  In the event of a failover, MarkLogic server will automatically
    redirect documents to the replica forest.  Specify the ID of the replica
    forest will result in a "forest not in database" error.
    </p>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:directory-create("http://marklogic.com/a/",
            (xdmp:permission("development", "update"),
             xdmp:permission("qa", "read")),
             "http://marklogic.com/directories")

=&gt; Creates a directory named "http://marklogic.com/a/",
   which has the parent directory "http://marklogic.com/".
   The directory is created with the specified permissions,
   and is added to the "http://marklogic.com/directories"
   collection.  

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.directoryCreate("http://marklogic.com/a/",
            [xdmp.permission("development", "update"),
             xdmp.permission("qa", "read")],
             "http://marklogic.com/directories");

=&gt; Creates a directory named "http://marklogic.com/a/",
   which has the parent directory "http://marklogic.com/".
   The directory is created with the specified permissions,
   and is added to the "http://marklogic.com/directories"
   collection.  

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:directory-create("/dir/myDirectory/")

=&gt; Creates a directory named "/dir/myDirectory/",
   which has the parent directory "/dir/", which
   in turn has parent directory "/". If
   directory creation is set to automatic in
   the database configuration, this example creates
   all three directories ("/", "/dir/", and
    "/dir/myDirectory/").  

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.directoryCreate("/dir/myDirectory/");

=&gt; Creates a directory named "/dir/myDirectory/",
   which has the parent directory "/dir/", which
   in turn has parent directory "/". If
   directory creation is set to automatic in
   the database configuration, this example creates
   all three directories ("/", "/dir/", and
    "/dir/myDirectory/").  

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-delete" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Deletes a document from the database.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document to be deleted.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage><p xmlns="http://www.w3.org/1999/xhtml">The <code>xdmp:document-delete</code> function deletes
  a document and all of its properties, except, when
  <code>directory-creation</code> is set to <code>automatic</code> or
  <code>manual-enforced</code>, the directory property; it does
  not delete a directory with the same URI as the document being deleted unless
  <code>directory-creation</code> is set to <code>manual</code>.
  To delete a directory, use the <code>xdmp:directory-delete</code> function.
  </p><p xmlns="http://www.w3.org/1999/xhtml">If a document does not exist at the specified URI, 
  <code>xdmp:document-delete</code> throws an error.  </p>
  </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-delete("example.xml")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentDelete("example.xml");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-protect" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  Protects a temporal document from certain temporal operations, such as
  update, delete or wipe for a specific period of time.  Subsequent update
  operations on that document against which this operation is protected will
  get a TEMPORAL-PROTECTED exception.  If an archive path is specified
  optionally save a serialized copy of the document ot the specified location
  and record the file path and copy time in the document's metadata.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
    </apidoc:param>
      <apidoc:param name="uri" type="xs:string">
    The URI to be used to identify the document in the database.  If
    the document is not the latest version, a suffix will be concatenated
    to the document URI with a dot as the new URI of the document.
    </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You 
    can specify options in either an XML <code>options</code> element in 
    the "temporal:document-protect" namespace, or as a <code>map:map</code>. 
    The options names below are XML element localnames. When using a map, 
    replace any hyphens in an option name with 
    camel casing. For example, "an-option" becomes "anOption" when used as a 
    <code>map:map</code> key.</span> This function supports the following 
    options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>level</dt>
    <dd>Protection level: "noWipe","noDelete","noUpdate".  Default value is
    "noDelete" when omitted.
    </dd>
    <dt>duration</dt>
    <dd>
    Duration between the time the protection starts and ends.  Used to compute
    the expiration time.  Can be either a year-month duration or a day-time 
    duration.
    </dd>
    <dt class="xquery">expire-time</dt>
    <dt class="javascript">expireTime</dt>
    <dd>
    Exact date and time when the protection expires.  Useful for idempotency.
    Overrides the duration option for expiration time computation.
    </dd>
    <dt class="xquery">archive-path</dt>
    <dt class="javascript">archivePath</dt>
    <dd>File path to save a serlialized copy of the current version of the
    document.
    </dd>
    </dl></blockquote>
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  By default
  <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/temporal-document-protect</code>
   or the one user specified for this temporal collection.
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">CamelCased option names should be used if the options are specified as
  map:map.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">TEMPORAL-NOEXTIME is thrown if archive path option is specified and no expire
  time or duration option is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">When archive path option is specified, the latest version of the temporal
  document will be archived if it exists; else the version with the temporal
  document URI will be archived.  If none of the above exists (such as the
  temporal document is deleted and version URI is used to create them), the
  protection will still be applied but no archive copy will be made.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
temporal:document-protect("bitemp","tempdoc5.xml",
&lt;options xmlns="temporal:document-protect"&gt;&lt;archivePath&gt;blah2.xml&lt;/archivePath&gt;
&lt;duration&gt;P6Y&lt;/duration&gt;
&lt;/options&gt;)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
temporal:document-protect("bitemp", "tempdoc.xml",
map:map(&lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
 &lt;map:entry key="archivePath"&gt;
   &lt;map:value&gt;world.xml&lt;/map:value&gt;
 &lt;/map:entry&gt;
 &lt;map:entry key="expireTime"&gt;
   &lt;map:value&gt;2016-06-27T14:13:05.472585-07:00&lt;/map:value&gt;
 &lt;/map:entry&gt;
&lt;/map:map&gt;))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
temporal.documentProtect('bitemp','tempdoc3.xml',
    {archivePath: 'blah.xml', 
     expireTime: '2019-09-22T23:59:19.340475Z',
     duration: 'PT5D'})
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-wipe" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  Deletes all versions of a temporal document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
    </apidoc:param>
      <apidoc:param name="uri" type="xs:string">
    The URI to be used to identify the document in the database.  If
    the document is not the latest version, a suffix will be concatenated
    to the document URI with a dot as the new URI of the document.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  By default
  <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/temporal-document-wipe</code>
   or the one user specified for this temporal collection.
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
temporal:document-wipe("bitemp","tempdoc5.xml")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
temporal.documentWipe("bitemp","tempdoc3.xml")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-delete" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function deletes the temporal document identified by the given URI.
  Note that temporal documents are not actually deleted, but are rather
  "logically deleted" and remain in the database with system end times set
  to the time of the deletion.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The collection that contains the temnporal document to be deleted.
    </apidoc:param>
      <apidoc:param name="uri" type="xs:string">
    The URI of the temporal document to be deleted.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

temporal:document-delete("temporalCollection", "doc.xml")

(: Deletes the "doc.xml" document from the temporalCollection. :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

(: Deletes the "doc.xml" document from the temporalCollection if it exists. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");

temporal.documentDelete("temporalCollection", "doc.xml")

// Deletes the "doc.xml" document from the temporalCollection.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="directory-delete" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Deletes a directory and all of its child and descendant documents and
  directories from the database.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the directory to be deleted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">If you delete a directory, the directory and all of its children
  and descendants (recursively)
  are deleted, including all child documents and directories. A child
  document or directory of a given directory is one whose URI begins with
  the same string as the directory URI.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:directory-delete("http://example.com/")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.directoryDelete("http://example.com/");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="collection-delete" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Deletes from the database every document in a collection. If there are
  no documents in the specified collection, then nothing is deleted, and
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:collection-delete</code> still returns the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the collection to be deleted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:collection-delete("collection-uri")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.collectionDelete("/my-collection");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-replace" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Replaces a node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="old" type="node()">
    The old node, to be replaced.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new node.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Attribute nodes cannot be replaced by non-attribute nodes.
  Non-attribute nodes cannot be replaced by attribute nodes.
  Element nodes cannot have document node children.
  Document nodes cannot have multiple roots.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If the caller of the function uses function mapping and <code>$old</code> 
  is an empty node, the <code>node-replace</code> function may return an empty 
  sequence. It will not return an error.</p>
</apidoc:usage>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// assume /foo.json is {"foo":"some value"}  
declareUpdate();
var doc = cts.doc("/foo.json");
var docObj = doc.toObject();
docObj.foo = "this is a different value";
xdmp.nodeReplace(doc, docObj);
// now /foo.json will look like: {"foo":"this is a different value"}
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create an XML document :)
  xdmp:document-insert("/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;);

(: replace the b node with a c node :)
  xdmp:node-replace(doc("/example.xml")/a/b, &lt;c&gt;ccc&lt;/c&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;/a&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create an XML document

declareUpdate();
xdmp.documentInsert("/example.xml", fn.head(xdmp.unquote(
  '&lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;')));

******
// replace the b node with a c node

declareUpdate();
var n = new NodeBuilder();
// create a &lt;c&gt;ccc&lt;/c&gt; node
node = n.addElement("c", "ccc").toNode();
xdmp.nodeReplace(cts.doc("/example.xml").xpath("/a/b"), node);

******
// look at the new document

cts.doc("/example.xml");
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;/a&gt;

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: This example shows how to update the root
   node of a text format document.  Start by
   creating a text document.     :)

xdmp:document-insert("/mydir/doc.txt",
text{"This is a line of text."} ) ;

(: Update the text node of the text document
   by appending another line of text to the
   text node.  Note that the text node is the
   root node of a text document.     :)

xdmp:node-replace(doc("/mydir/doc.txt")/text() ,
text{ concat(doc("/mydir/doc.txt")/text(), "
This is another line of text.") } ) ;

doc("/mydir/doc.txt")
=&gt;
This is a line of text.
This is another line of text.

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// This example shows how to update the root
// node of a text format document.  Start by
//   creating a text document.

declareUpdate();
var n = new NodeBuilder();
node = n.addText("This is a line of text.").toNode();
xdmp.documentInsert("/mydir/doc.txt", node);

******

//  Update the text node of the text document
//  by appending another line of text to the
//  text node.  Note that the text node is the
//  root node of a text document.

declareUpdate();
var newText = fn.concat(cts.doc("/mydir/doc.txt"), "\n\
This is another line of text.");
var n = new NodeBuilder();
node = n.addText(newText).toNode();
xdmp.nodeReplace(cts.doc("/mydir/doc.txt").xpath("/text()"), node);

*****

// look at the updated document
cts.doc("/mydir/doc.txt")
=&gt;
This is a line of text.
This is another line of text.

</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
xdmp:document-insert("/foo.json", object-node {"foo":"this is a value"});
(: replace the value using xdmp:node-replace :)
xdmp:node-replace(fn:doc("/foo.json")/foo, text{"this is a different value"});
fn:doc("/foo.json")
=&gt;
{"foo":"this is a different value"}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document
declareUpdate();
xdmp.documentInsert("/foo.json", {"foo":"this is a value"});

******
// replace the value using xdmp.nodeReplace
declareUpdate();
var n = new NodeBuilder();
node = n.addText("this is a different value").toNode();
xdmp.nodeReplace(cts.doc("/foo.json").xpath("/foo"), node);

******
// show the new doc
cts.doc("/foo.json");
=&gt;
{"foo":"this is a different value"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-replace" lib="temporal" category="Temporal">
    <apidoc:summary>
  Replaces a node in a temporal document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
  </apidoc:param>
      <apidoc:param name="old" type="node()">
    The old node, to be replaced.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new node.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  This function only works on documents inserted by the MarkLogic 9.0 version of
  <a class="xquery" href="#temporal:document-insert" xmlns="http://www.w3.org/1999/xhtml">temporal:document-insert</a>
  <a class="javascript" href="#temporal.documentInsert" xmlns="http://www.w3.org/1999/xhtml">temporal:documentInsert</a>
  or later.
  <p xmlns="http://www.w3.org/1999/xhtml">
  Attribute nodes cannot be replaced by non-attribute nodes.
  Non-attribute nodes cannot be replaced by attribute nodes.
  Element nodes cannot have document node children.
  Document nodes cannot have multiple roots.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If the caller of the function uses function mapping and <code>$old</code> 
  is an empty sequence, the <code>node-replace</code> function may return an 
  empty sequence. It will not return an error. </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
 
xquery version "1.0-ml"; 
 
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
      at "/MarkLogic/temporal.xqy";

(: create a document :)
let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;2014-04-03T11:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;2014-04-03T16:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("kool","/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;, $options);

(: add a c node before the b node :)
temporal:node-replace("kool", fn:doc("/example.xml")/a/b,
    &lt;c&gt;ccc&lt;/c&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// assume /foo.json is {"foo":"some value"}
// assume tempcol is a temporal collection
declareUpdate();
var doc = cts.doc("/foo.json");
var docObj = doc.toObject();
docObj.foo = "this is a different value";
temporal.nodeReplace("tempcol", doc, docObj);
// now /foo.json will look like: {"foo":"this is a different value"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-delete" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Deletes a node from the database.
  On-the-fly constructed nodes cannot be deleted.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="old" type="node()">
    The node to be deleted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-insert("/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;);
xdmp:node-delete(doc("/example.xml")/a/b);
doc("/example.xml")
=&gt;
 &lt;a/&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  assume a document created with:
//    declareUpdate();
//    xdmp.documentInsert("/example.json",
//    {"a":"aa","b":"bb"});
//
declareUpdate();
for (var x of fn.doc("/example.json") )
xdmp.nodeDelete(x.root.b);
=&gt;
 /example.json now looks like this:
 {"a":"aa"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-delete" lib="temporal" category="Temporal">
    <apidoc:summary>
  Deletes a node from the database.
  On-the-fly constructed nodes cannot be deleted.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
  </apidoc:param>
      <apidoc:param name="old" type="node()">
    The node to be deleted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  This function only works on documents inserted by the MarkLogic 9.0 version of
  <a class="xquery" href="#temporal:document-insert" xmlns="http://www.w3.org/1999/xhtml">temporal:document-insert</a>
  <a class="javascript" href="#temporal.documentInsert" xmlns="http://www.w3.org/1999/xhtml">temporal:documentInsert</a>
  or later.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
temporal:document-insert("tempcol","/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;);
temporal:node-delete("tempcol",doc("/example.xml")/a/b);
doc("/example.xml")
=&gt;
 &lt;a/&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-insert-before" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds an immediately preceding sibling to a node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="sibling" type="node()">
    The sibling node to be preceded by the new node.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new node to be inserted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  Attribute nodes cannot be preceded by non-attribute nodes.
  Non-attribute nodes cannot be preceded by attribute nodes.
  Element nodes cannot have document node children.
  Document nodes cannot have multiple roots.
  On-the-fly constructed nodes cannot be updated.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
xdmp:document-insert("/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;);

(: add a c node before the b node :)
xdmp:node-insert-before(fn:doc("/example.xml")/a/b,
    &lt;c&gt;ccc&lt;/c&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document

declareUpdate();
xdmp.documentInsert("/example.xml", fn.head(xdmp.unquote(
    '&lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;')));

******
// add a c node before the b node

declareUpdate();
xdmp.nodeInsertBefore(cts.doc("/example.xml").xpath("/a/b"),
    fn.head(xdmp.unquote('&lt;c&gt;ccc&lt;/c&gt;')).root);

******
// look at the new document

cts.doc("/example.xml");
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-insert-before" lib="temporal" category="Temporal">
    <apidoc:summary>
  Adds an immediately preceding sibling to a node in a temporal document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
  </apidoc:param>
      <apidoc:param name="sibling" type="node()">
    The sibling node to be preceded by the new node.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new node to be inserted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  This function only works on documents inserted by the MarkLogic 9.0 version of
  <a class="xquery" href="#temporal:document-insert" xmlns="http://www.w3.org/1999/xhtml">temporal:document-insert</a>
  <a class="javascript" href="#temporal.documentInsert" xmlns="http://www.w3.org/1999/xhtml">temporal:documentInsert</a>
  or later.
  <p xmlns="http://www.w3.org/1999/xhtml">
  Attribute nodes cannot be preceded by non-attribute nodes.
  Non-attribute nodes cannot be preceded by attribute nodes.
  Element nodes cannot have document node children.
  Document nodes cannot have multiple roots.
  On-the-fly constructed nodes cannot be updated.
  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;2014-04-03T11:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;2014-04-03T16:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("tempcol","/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;, $options);

(: add a c node before the b node :)
temporal:node-insert-before("tempcol", fn:doc("/example.xml")/a/b,
    &lt;c&gt;ccc&lt;/c&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-insert-after" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds an immediately following sibling to a node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="sibling" type="node()">
    The sibling node to be followed by the new node.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new node to be inserted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Attribute nodes cannot be followed by non-attribute nodes.
  Non-attribute nodes cannot be followed by attribute nodes.
  Element nodes cannot have document node children.
  Document nodes cannot have multiple roots.
  On-the-fly constructed nodes cannot be updated.</p>
  <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">If you want to add a named node to a JSON document
  in JavaScript, use the <code>NodeBuilder</code> API to construct a
  named node.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-insert("/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;);
  xdmp:node-insert-after(doc("/example.xml")/a/b,
    &lt;c&gt;ccc&lt;/c&gt;);
  doc("/example.xml")
 =&gt;
  &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;/a&gt;
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// assume a document created with:
// declareUpdate();
// xdmp.documentInsert("/example.json",
// {"a":"aa","b":"bb"});
//
declareUpdate();
for (var x of fn.doc("/example.json") ) {
  var n = new NodeBuilder();
  var node = n.addNode({"c": ["ab", "cd"]}).toNode().xpath("./array-node('c')");
  xdmp.nodeInsertAfter(x.root.xpath("./b"), node);
    };

// /example.json now looks like:
// {"a":"aa", "b":"bb", "c":["ab", "cd"]}

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//  assume a document created with:
//    declareUpdate();
//    xdmp.documentInsert("/example.json",
//    {"a":"aa","b":"bb"});
//
// Add a new named node to a JSON document
//
declareUpdate();
var newnode = new NodeBuilder();
newnode.addNode( {"new":["array", "content"]});
var named = newnode.toNode().xpath("./array-node('new')");
for (var x of fn.doc("/example.json") ) {
 xdmp.nodeInsertAfter(x.root.a, named);
};

//
// /example.json now looks like this:
// {"a":"aa", "new":["array", "content"], "b":"bb"}

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-insert-after" lib="temporal" category="Temporal">
    <apidoc:summary>
  Adds an immediately following sibling to a node in a temporal document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
  </apidoc:param>
      <apidoc:param name="sibling" type="node()">
    The sibling node to be followed by the new node.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new node to be inserted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  This function only works on documents inserted by the MarkLogic 9.0 version of
  <a class="xquery" href="#temporal:document-insert" xmlns="http://www.w3.org/1999/xhtml">temporal:document-insert</a>
  <a class="javascript" href="#temporal.documentInsert" xmlns="http://www.w3.org/1999/xhtml">temporal:documentInsert</a>
  or later.
  <p xmlns="http://www.w3.org/1999/xhtml">Attribute nodes cannot be followed by non-attribute nodes.
  Non-attribute nodes cannot be followed by attribute nodes.
  Element nodes cannot have document node children.
  Document nodes cannot have multiple roots.
  On-the-fly constructed nodes cannot be updated.</p>
  <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">If you want to add a named node to a JSON document
  in JavaScript, use the <code>NodeBuilder</code> API to construct a
  named node.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;2014-04-03T11:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;2014-04-03T16:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("tempcol","/example.xml",
    &lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;, $options);

(: add a c node after the b node :)
temporal:node-insert-after("tempcol",fn:doc("/example.xml")/a/b,
    &lt;c&gt;ccc&lt;/c&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;c&gt;ccc&lt;/c&gt;&lt;/a&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-insert-child" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds a new last child to a node.
  For XML documents, only element nodes and document nodes can have children.
  For JSON documents, object nodes and array nodes can have children.
  Element nodes, object nodes, and array nodes cannot have document node
  children.
  Document nodes cannot have multiple roots.
  On-the-fly constructed nodes cannot be updated.
  The parameters must specify individual nodes and not node sets.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parent" type="node()">
    The parent node which will have a new child node.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new child node to be inserted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
xdmp:document-insert("/example.xml",
    &lt;a/&gt;);

(: insert a child of a :)
xdmp:node-insert-child(doc("/example.xml")/a,
    &lt;b&gt;bbb&lt;/b&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document

declareUpdate();
xdmp.documentInsert("/example.xml",
    fn.head(xdmp.unquote('&lt;a/&gt;')));

******
// insert a child of a

declareUpdate();
xdmp.nodeInsertChild(cts.doc("/example.xml").xpath("/a"),
    fn.head(xdmp.unquote('&lt;b&gt;bbb&lt;/b&gt;')).root);

******
// look at the new document

cts.doc("/example.xml");
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
xdmp:document-insert("/example.xml",
    &lt;a/&gt;);

(: insert an attribute as child of a :)
  xdmp:node-insert-child(doc("/example.xml")/a,
    attribute b { "bbb" });

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a b="bbb"/&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document

declareUpdate();
xdmp.documentInsert("/example.xml",
    fn.head(xdmp.unquote('&lt;a/&gt;')));

******
// insert an attribute as child of a

declareUpdate();
var n = new NodeBuilder();
node = n.addAttribute("b", "bbb").toNode();
xdmp.nodeInsertChild(cts.doc("/example.xml").xpath("/a"), node);

// look at the new document

cts.doc("/example.xml");
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a b="bbb"/&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-insert-child" lib="temporal" category="Temporal">
    <apidoc:summary>
  Adds a new last child to a node in a temporal document.
  For XML documents, only element nodes and document nodes can have children.
  For JSON documents, object nodes and array nodes can have children.
  Element nodes, object nodes, and array nodes cannot have document node
  children.
  Document nodes cannot have multiple roots.
  On-the-fly constructed nodes cannot be updated.
  The parameters must specify individual nodes and not node sets.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The URI for the protected temporal collection in which the document is
    to belong.  This must have been previously created by the
    <a class="xquery" href="#temporal:collection-create" xmlns="http://www.w3.org/1999/xhtml">temporal:collection-create</a>
    <a class="javascript" href="#temporal.collectionCreate" xmlns="http://www.w3.org/1999/xhtml">temporal:collectionCreate</a>
    function. All versions of the temporal document will be associated with this
    temporal collection.
  </apidoc:param>
      <apidoc:param name="parent" type="node()">
    The parent node which will have a new child node.
  </apidoc:param>
      <apidoc:param name="new" type="node()">
    The new child node to be inserted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  This function only works on documents inserted by the MarkLogic 9.0 version of
  <a class="xquery" href="#temporal:document-insert" xmlns="http://www.w3.org/1999/xhtml">temporal:document-insert</a>
  <a class="javascript" href="#temporal.documentInsert" xmlns="http://www.w3.org/1999/xhtml">temporal:documentInsert</a>
  or later.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document :)
let $options :=  
&lt;options xmlns="xdmp:document-insert"&gt;
    &lt;metadata&gt;
       &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;
         &lt;map:entry key="validStart"&gt;
           &lt;map:value&gt;2014-04-03T11:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt;
         &lt;map:entry key="validEnd"&gt;
           &lt;map:value&gt;2014-04-03T16:00:00&lt;/map:value&gt;
         &lt;/map:entry&gt; 
       &lt;/map:map&gt;
    &lt;/metadata&gt; 
&lt;/options&gt; 
return 
temporal:document-insert("tempcol","/example.xml",
    &lt;a/&gt;, $options);

(: insert a child of a :)
temporal:node-insert-child("tempcol",doc("/example.xml")/a,
    &lt;b&gt;bbb&lt;/b&gt;);

(: look at the new document :)
fn:doc("/example.xml")
 =&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;a&gt;&lt;b&gt;bbb&lt;/b&gt;&lt;/a&gt;
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-add-collections" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds the named document to the given collections.  For each collection
  that is protected, the user must have permissions to update that
  collection or have the <code xmlns="http://www.w3.org/1999/xhtml">any-collection</code> privilege.
  For each unprotected collection, the user must have the
  <code xmlns="http://www.w3.org/1999/xhtml">unprotected-collections</code> privilege.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="collections" type="xs:string*">
    A set of collection URIs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
 <p xmlns="http://www.w3.org/1999/xhtml">If adding an unprotected collection to a document, the
  <code>unprotected-collections</code> privilege
  (<code>http://marklogic.com/xdmp/privileges/unprotected-collections</code>)
  is needed; if adding a protected collection, the user must have either
  permissions to update the collection or the
  <code>any-collection</code> privilege
  (<code>http://marklogic.com/xdmp/privileges/any-collection</code>).
  </p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-add-collections(
    "/example.xml",
    ("http://examples.com", "http://marklogic.com"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var colls=["http://examples.com", "http://marklogic.com"];
xdmp.documentAddCollections(
    "/example.xml", colls);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-remove-collections" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Removes the named document from the given collections.  For each
  collection that is protected, the user must have permissions to update
  that collection or have the <code xmlns="http://www.w3.org/1999/xhtml">any-collection</code> privilege.  For each
  unprotected collection, the user must have the
  <code xmlns="http://www.w3.org/1999/xhtml">unprotected-collections</code> privilege.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="collections" type="xs:string*">
    A set of collection URIs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-remove-collections(
  "/example.xml",
  ("http://examples.com", "http://marklogic.com"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var colls = [ "http://examples.com", "http://marklogic.com" ];
xdmp.documentRemoveCollections("/example.json", colls);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-set-collections" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Sets the named document to belong to the given collections, replacing any
  previously set collections on the named document.  To preserve existing
  collections, use <code xmlns="http://www.w3.org/1999/xhtml">xdmp:document-add-collections</code>.  For each
  collection that is protected, the user must have permissions to update
  that collection or have the <code xmlns="http://www.w3.org/1999/xhtml">any-collection</code> privilege.  For each
  unprotected collection, the user must have the
  <code xmlns="http://www.w3.org/1999/xhtml">unprotected-collections</code> privilege.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="collections" type="xs:string*">
    A set of collection URIs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-set-collections(
  "/example.xml",
  ("http://examples.com", "http://marklogic.com"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var colls = [ "http://examples.com", "http://marklogic.com" ];
xdmp.documentSetCollections("/example.json", colls);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-put-metadata" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds metadata to the document.  If any key already exists in the document
  metadata, the new specified value replaces the old one.  The string value
  of a non-string metadata value is used for persistence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="metadata" type="map:map">
    Metadata in the key value pairs to set on the document.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-put-metadata(
    "foo.xml",map:map(
    &lt;map:map xmlns:map=”http://marklogic.com/xdmp/map”&gt;
      &lt;map:entry key=”w”&gt;
        &lt;map:value&gt;world&lt;/map:value&gt;
      &lt;/map:entry&gt;
      &lt;map:entry key=”h”&gt;
        &lt;map:value&gt;hello&lt;/map:value&gt;
      &lt;/map:entry&gt;
    &lt;/map:map&gt;)))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentPutMetadata(uri, {“a”,1})
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-set-metadata" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Sets metadata to the document.  All existing metadata in the document will be
  replaced with the newly specified ones.  The string value of a non-string
  value is used for persistence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="metadata" type="map:map">
    Metadata in the key value pairs to set on the document.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-set-metadata(
    "foo.xml",
    map:map(&lt;map:map xmlns:map=”http://marklogic.com/xdmp/map”&gt;
      &lt;map:entry key=”w”&gt;
        &lt;map:value&gt;world&lt;/map:value&gt;
      &lt;/map:entry&gt;
      &lt;map:entry key=”h”&gt;
        &lt;map:value&gt;hello&lt;/map:value&gt;
      &lt;/map:entry&gt;
    &lt;/map:map&gt;)))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentSetMetadata(uri, {a:1})
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-remove-metadata" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Removes metadata with certain keys from a document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param name="metadata" type="xs:string*">
    Name of the metadata to be removed.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-remove-metadata("foo.xml", ("a","b"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentRemoveMetadata("/foo.json", ["blah"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-add-permissions" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds the given permissions to the given document or directory.
  The user must have update or insert permissions on the document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*">
    Permission elements.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]">
    Permission objects.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-add-permissions(
    "/example.xml",
    (xdmp:permission("development", "update"),
     xdmp:permission("qa", "read")))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentAddPermissions(
    "/example.json", [
      xdmp.permission("development", "update"),
      xdmp.permission("qa", "read")
    ]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-remove-permissions" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Removes the given permissions from the named document or directory.
  The user must have update permissions on the document or directory.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*">
    Permission elements.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]">
    Permission objects.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-remove-permissions(
    "/example.xml",
    (xdmp:permission("development", "update"),
     xdmp:permission("qa", "read")))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentRemovePermissions(
   "/example.json", [
     xdmp.permission("development", "update"),
     xdmp.permission("qa", "read")
   ]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-set-permissions" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Sets the permissions on the named document (or directory) to the given
  permissions, replacing any permissions previously set on the
  document (or directory).  To preserve
  any existing permissions, use
  <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:document-add-permissions</code>.
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.documentAddPermissions</code>.
  The user must have update permissions on the document or directory.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*">
    Permission elements.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]">
    Permission objects.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-set-permissions(
    "/example.xml",
    (xdmp:permission("development", "update"),
     xdmp:permission("qa", "read")))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentSetPermissions(
  "/example.json", [
    xdmp.permission("development", "update"),
    xdmp.permission("qa", "read")
    ]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-set-quality" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Sets the quality of the document with the given URI.
  If the quality of the document is positive,
  the relevance score of the document is increased in text
  search functions.  The converse is true for "negative" quality.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document to which you are setting the quality.
  </apidoc:param>
      <apidoc:param name="quality" type="xs:integer">
    The quality to which to set the document.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-set-quality(
  "http://www.marklogic.com/test.xml",10)
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentSetQuality("/test.json","10");
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="merge" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Starts merging the forests of the database, subject to specified
  options.  
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options in either an XML 
    <code>options</code> element in the "xdmp:merge" namespace, or as 
    a <code>map:map</code>. The options names below are XML element 
    localnames. When using a map, replace any hyphens in an option name
    with camel casing. For example, "an-option" becomes "anOption" 
    when used as a <code>map:map</code> key.</span> This function supports 
    the following options:
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt class="xquery">merge-timestamp</dt>
    <dt class="javascript">mergeTimestamp</dt>
    <dd>Fragments with a timestamp of this or newer are not garbage collected
    during this merge.
    A negative value means the timestamp is relative to the time the merge
    starts, at ten million ticks per second.
    For example, -6000000000 means ten minutes before the merge.
    The default is 0, which means not specifying a timestamp.</dd>
    <dt class="xquery">merge-max-size</dt>
    <dt class="javascript">mergeMaxSize</dt>
    <dd>The maximum allowable size, in megabytes, of a resultant stand. 
    The default value is taken from the database configuration.  
    A value of 0 means there is no limit. 
    It is possible for a stand larger than the merge-max-size to merge if
    the stand has enough deleted fragments to trigger the merge min ratio;
    in this case, MarkLogic will do a single-stand merge, merging out the
    deleted fragments (even if the resulting stand is larger than the
    merge-max-size value specified).
    </dd>
    <dt class="xquery">merge-priority</dt>
    <dt class="javascript">mergePriority</dt>
    <dd>The CPU scheduler priority for the merge ("normal" or "lower").</dd>
    <dt class="xquery">single-stand</dt>
    <dt class="javascript">singleStand</dt>
    <dd>If any forests in the database have a single stand and this parameter
    is false, do not merge them.  The default is <code>true</code>.
    </dd>
    <dt class="xquery">forests</dt>
    <dt class="javascript">forests</dt>
    <dd>Specifies the IDs of the forests in which to perform merges.
    <span class="xquery">When you express options as an XML option node,
    specify each forest ID as a <code>forest</code> child element of this
    option, with a type of <code>xs:unsignedLong</code>. When you
    express options as a map, the value of this option is a sequence of
    forest IDs, with a type of <code>xs:unsignedLong</code>.</span>
    <span class="javascript">The value of this option is an array of
    forest IDs, as string values.</span>
    The default is to merge all of the forests in the database.</dd>
    </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-merge</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-merge/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:merge(&lt;options xmlns="xdmp:merge"&gt;
               &lt;merge-max-size&gt;500&lt;/merge-max-size&gt;
               &lt;merge-timestamp&gt;8273&lt;/merge-timestamp&gt;
               &lt;single-stand&gt;false&lt;/single-stand&gt;
               &lt;forests&gt;
                 &lt;forest&gt;{xdmp:forest("my-forest")}&lt;/forest&gt;
                 &lt;forest&gt;{xdmp:forest("my-other-forest")}&lt;/forest&gt;
               &lt;/forests&gt;
             &lt;/options&gt;)

(: Performs a merge on my-forest and my-other-forest.  If a stand
 : created by this merge would be greater than 500 megabytes, the merge
 : will be limited and not all stands will be merged (as many as can be
 : merged under 500 MB will be merged).  If my-forest or my-other-forest
 : have only one stand, they will not be merged.  Any fragments with
 : timestamp 8273 or newer will not be garbage collected.
:)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:merge(
  map:map() =&gt; map:with("mergeMaxSize", 500)
            =&gt; map:with("mergeTimestamp", 8273)
            =&gt; map:with("singleStand", fn:false())
            =&gt; map:with("forests", 
                        (xdmp:forest("my-forest"),
                         xdmp:forest("my-other-forest")))
)

(: Performs a merge on my-forest and my-other-forest.  If a stand
 : created by this merge would be greater than 500 megabytes, the merge
 : will be limited and not all stands will be merged (as many as can be
 : merged under 500 MB will be merged).  If my-forest or my-other-forest
 : have only one stand, they will not be merged.  Any fragments with
 : timestamp 8273 or newer will not be garbage collected.
:)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.merge({ mergeMaxSize: 500,
             mergeTimestamp: 8273,
             singleStand: false,
             forests: [
               xdmp.forest("my-forest"),
               xdmp.forest("my-other-forest")
             ]
          });

// Performs a merge on my-forest and my-other-forest.  If a stand
// created by this merge would be greater than 500 megabytes, the merge
// will be limited and not all stands will be merged (as many as can be
// merged under 500 MB will be merged).  If my-forest or my-other-forest
// have only one stand, they will not be merged.  Any fragments with
// timestamp 8273 or newer will not be garbage collected.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="merging" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Returns the forest IDs of any currently merging database forests.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-merging</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:merging()
=&gt; 23487234872334
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.merging()
=&gt; 23487234872334
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="lock-acquire" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Acquire a lock on a document or directory for an extended amount of time.
  Locks restrict updates to a document or directory to the user who acquires
  the lock.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document or directory to be locked.
  </apidoc:param>
      <apidoc:param name="scope" type="xs:string?" optional="true">
    The lock scope ("exclusive" or "shared").  The default is "exclusive".
  </apidoc:param>
      <apidoc:param name="depth" type="xs:string?" optional="true">
    The lock depth ("0" or "infinity").  "0" locks the URI only, and "infinity"
    locks the URI (the document or directory) and all of its children.  The
    default is "0".
  </apidoc:param>
      <apidoc:param name="owner" type="item()*" optional="true">
    Alternate description of the lock owner.  If not specified  or if
    specified as the empty sequence ( () ), then the owner is the user name
    of the user requesting the lock.
  </apidoc:param>
      <apidoc:param name="timeout" type="xs:unsignedLong?" optional="true">
    Requested lock timeout in seconds. If not specified or if specified as the
    empty sequence ( () ) or if specified as 0, then the timeout is infinite.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">If you lock a directory specifying a depth of "infinity", the directory
   and all of it children (all documents and directories with a URI started with
   the locked directory) are locked. You will not be able to add any children
   to the directory until the lock is released.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">When a user locks a URI, it is locked to other users, but not to the user
   who locked it.  For example, if the user <em>sam</em> locks the URI
   <code>/home/sam.xml</code> by issuing the statement
   <code>xdmp:lock-acquire("/home/sam.xml")</code>, the user <em>sam</em>
   can still issue update commands to the document at that URI, but other users
   (for example, the user <em>josh</em>) will get an exception if they try
   to update the document.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If you attempt to acquire a lock on a document that already has a lock,
   the XDMP-LOCKCONFLICT exception is thrown.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">If you attempt to update a document that is locked by another user,
   the XDMP-LOCKED exception is thrown.</p>
   <p xmlns="http://www.w3.org/1999/xhtml">Note that the lock described here is a relatively heavy persistent
   document lock for file system emulation through WebDAV, not a relatively
   light transaction lock for database consistency.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
declare namespace DAV="DAV:";

xdmp:lock-acquire("/example.xml",
           "exclusive",
           "0",
           &lt;DAV:href&gt;http://example.com/~user&lt;/DAV:href&gt;,
           xs:unsignedLong(120))
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.lockAcquire("/example.json",
   "exclusive", "0", "george", "120")
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="lock-release" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Unlock a document or directory.  Releases the lock created with
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:lock-acquire</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document or directory to be unlocked.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Note that the lock described here area is a relatively heavy
  persistent document lock for file system emulation through WebDAV, not
  a relatively light transaction lock for database consistency.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:lock-release("/example.xml")
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.lockRelease("/example.json");
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-set-properties" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Sets the properties of a document to the given sequence of elements,
  replacing any properties that already exist on the document. To preserve
  existing document properties, use <code xmlns="http://www.w3.org/1999/xhtml">xdmp:document-add-properties</code>.
  Each element QName is the property name and the element value is the
  property value.  Modifying properties requires update permissions on a
  document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document.
  </apidoc:param>
      <apidoc:param name="props" type="element()*">
    The properties to set. Replaces any properties already set on the
    document.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:document-set-properties(
         "example.xml",
         (&lt;priority&gt;1&lt;/priority&gt;,
          &lt;status&gt;unedited&lt;/status&gt;))
  =&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var props = [fn.head(xdmp.unquote('&lt;priority&gt;1&lt;/priority&gt;')).root,
             fn.head(xdmp.unquote('&lt;status&gt;unedited&lt;/status&gt;')).root];
xdmp.documentSetProperties(
       "/example.json", props);
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-add-properties" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Adds a sequence of properties to the properties of a document.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document.
  </apidoc:param>
      <apidoc:param name="props" type="element()*">
    The properties to add.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-add-properties(
       "example.xml",
       (&lt;priority&gt;1&lt;/priority&gt;,
        &lt;status&gt;unedited&lt;/status&gt;))
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var props = [fn.head(xdmp.unquote('&lt;priority&gt;1&lt;/priority&gt;')).root,
             fn.head(xdmp.unquote('&lt;status&gt;unedited&lt;/status&gt;')).root];
xdmp.documentAddProperties(
       "/a.xml", props);
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-remove-properties" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Removes a sequence of properties from the properties of a document.  If
  properties with the QNames given do not exist, nothing is done.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The URI of the document whose properties are being updated.
  </apidoc:param>
      <apidoc:param name="property-names" type="xs:QName*">
    The properties to remove.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-remove-properties(
       "/example.xml",
       (fn:QName("", "priority"),
        fn:QName("", "status")))
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentRemoveProperties(
       "/example.json",
       (fn.QName("", "priority"),
        fn.QName("", "status")));
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-set-property" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Sets a property on a document.  If any properties with the same property
  QName exist, they are replaced with the new property.  If no properties
  exist with the same QName, the new property is added.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI for the property setting.
  </apidoc:param>
      <apidoc:param name="prop" type="element()">
    The property to set.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-set-property(
  "http://marklogic.com/a/example.xml",
  &lt;priority xmlns="http://example.com"&gt;5&lt;/priority&gt;)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
xdmp.documentSetProperty("/example.json",
   fn.head(xdmp.unquote('&lt;priority&gt;2&lt;/priority&gt;')).root);
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-assign" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">
  Assign a document URI to a forest index,
  using the same algorithm as <code>xdmp:document-insert</code>.
  The return value will be a positive integer
  from 1 to <code>$forest-count</code>.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  This function does not insert or update the document;
  instead, it returns the index of the forest
  to which the document URI would be assigned
  if it were inserted as a new document.
  In order to match the document to the correct forest,
  use the list of forest-IDs as returned by <code>xdmp:database-forests</code>.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  If the document already exists, this function may not
  return the correct forest for the document. In this case,
  <code>xdmp:document-forest</code> will return the
  correct forest.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  If "assignment-policy" is specified, this function uses the specified
  policy to calculate the assignment. Otherwise, it uses the assignment
  policy of the context database to calculate the assignment.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  This function works only with the bucket assignment policy and
  the legacy assignment policy. It reports an error if the statistical
  policy or the range policy is set.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  Note that, if there are read-only or delete-only forests in a database that
  uses the bucket policy, the application may need to call this function twice
  to get the right assignment. The first call should pass in the total number
  of forests, including the read-only or delete-only ones. If the returned value
  happens to be a read-only or delete-only forest,  the second call should pass
  in the number of forests that excludes the read-only or delete-only ones and
  pass in "legacy" as the third parameter.
  </p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri" type="xs:string">
    The document URI to assign.
  </apidoc:param>
      <apidoc:param name="forest-count" type="xs:positiveInteger">
    Specifies the number of forests from which this document
    may be assigned.
  </apidoc:param>
      <apidoc:param name="assignment-policy" type="xs:string" optional="true">
    Specifies the assignment policy to use. The value must be
    either "legacy" or "bucket".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:positiveInteger</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-assign("document-1.xml", 2)
=&gt; 2
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-assign("document-2.xml", 2, "legacy")
=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $forests := xdmp:database-forests(xdmp:database())
let $index := xdmp:document-assign("document-1.xml", count($forests))
return $forests[$index]

=&gt; 17618760155059123769
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentAssign("document-1.xml", 2)
=&gt; 2
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.documentAssign("document-2.xml", 2, "legacy")
=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var forests = xdmp.databaseForests(xdmp.database()).toArray();
var index = xdmp.documentAssign("document-1.xml", forests.length);
forests[index-1];

=&gt; 17618760155059123769
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-partition-assign" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">
  Assign a document to a partition number,
  using the partition queries in the database or in the second argument.
  The return value is the partition number where
  the document should be inserted.
  </p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="root" type="node()">
    The document to assign.
  </apidoc:param>
      <apidoc:param name="partition-queries" type="map:map" optional="true">
    A map of partition-number to cts query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:document-partition-assign("&lt;top&gt;&lt;a&gt;hello world&lt;/a&gt;&lt;/top&gt;")
=&gt; 2
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $map := map:map()
let $put := map:put($map,"1",
  cts:element-range-query(
xs:QName("create-time"),
"&gt;=",
xs:dateTime("2014-01-01T00:00:00")))
let $put := map:put($map,"2",
  cts:element-range-query(
xs:QName("create-time"),
"&gt;=",
xs:dateTime("2013-01-01T00:00:00")))

return
xdmp:document-partition-assign(
&lt;root&gt;
&lt;name&gt;test1&lt;/name&gt;
&lt;create-time&gt;2013-07-05T00:00:00&lt;/create-time&gt;
&lt;/root&gt;,
$map
)
=&gt;2
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="range-partition-forests" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Given a value, the function returns a list of forests that have ranges the
  value falls into. This function reports an error if the context database
  doesn't have the range assignment policy configured.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
  The value, for example, xs:date("2013-01-01").
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:range-partition-forests(xs:date("2013-01-01"))
=&gt; 17618760155059123769, 71876760154452113797
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.rangePartitionForests(xs.date("2013-01-01"));
=&gt; 17618760155059123769, 71876760154452113797
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="query-partitions" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
This function returns the partition numbers of the partitions that the specified 
query will be searched on.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsigned*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:query-partitions(
  cts:element-range-query(xs:QName("create-time"), "&gt;=", xs:yearMonthDuration("P1Y"))
)
  =&gt;
    1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="partition-forests" type="builtin" lib="xdmp" category="UpdateBuiltins">
    <apidoc:summary>
  Returns a seequence of forest IDs with the specified partition number
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="partition-number" type="xs:unsignedInt" optional="false">
    A partition number.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:partition-forests(3)
=&gt; (8456374036761185098, 10615125154705099114)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.partitionForests(3);
   8456374036761185098
   10615125154705099114
</pre></apidoc:example>
  </apidoc:function></apidoc:module>