<apidoc:module name="ExtractionTemplatesBuiltins" category="Template Driven Extraction" lib="tde" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary category="Template Driven Extraction" lib="tde" access="public">
   <p xmlns="http://www.w3.org/1999/xhtml">The tde functions are built-in functions for Extraction Templates.
   The <code>tde</code> namespace prefix is built into the server.</p>
 </apidoc:summary><apidoc:function name="get-view" type="builtin" lib="tde" category="Template Driven Extraction">
    <apidoc:summary>
  This function returns a view's description using a schema and a view name.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="schema" type="xs:string">
    The schema name.
  </apidoc:param>
      <apidoc:param name="view" type="xs:string">
    The view name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

tde:get-view("Medical","Publications");
=&gt;
{
  "view": {
    "id": "14910998190353932762",
    "name": "Publications",
    "schema": "Medical",
    "viewLayout": "identical",
    "columns": [
      {
        "column": {
          "id": "11565230576730337039",
          "name": "ID",
          "scalarType": "long",
          "nullable": 0
        }
      },
      {
        "column": {
          "id": "3103479464860941160",
          "name": "ISSN",
          "scalarType": "string",
          "nullable": 0
        }
      },
      {
        "column": {
          "id": "16141727252897579172",
          "name": "Volume",
          "scalarType": "string",
          "nullable": 0
        }
      }
    ]
  }
}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
tde.getView("Medical","Publications");
=&gt;
{
  "view": {
    "id": "14910998190353932762",
    "name": "Publications",
    "schema": "Medical",
    "viewLayout": "identical",
    "columns": [
      {
        "column": {
          "id": "11565230576730337039",
          "name": "ID",
          "scalarType": "long",
          "nullable": 0
        }
      },
      {
        "column": {
          "id": "3103479464860941160",
          "name": "ISSN",
          "scalarType": "string",
          "nullable": 0
        }
      },
      {
        "column": {
          "id": "16141727252897579172",
          "name": "Volume",
          "scalarType": "string",
          "nullable": 0
        }
      }
    ]
  }
}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="node-data-extract" type="builtin" lib="tde" category="Template Driven Extraction">
    <apidoc:summary>
  Extracts row or triple data from a list of specified documents by applying
  extraction templates that are either stored in the schema database or
  provided as a second argument.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="documents" type="node()*">
    The sequence of input nodes from which row and triple data is extracted.
  </apidoc:param>
      <apidoc:param class="xquery" name="templates" type="element(tde:template)*" optional="true">
    The tde:templates to use on $documents. If not specified or if an empty
    sequence is provided, stored templates in the schema database are used.
  </apidoc:param>
      <apidoc:param class="javascript" name="documents" type="node()*">
    The array of input nodes from which row and triple data is extracted.
  </apidoc:param>
      <apidoc:param class="javascript" name="templates" type="node[]" optional="true">
    The tde:templates to use on the $documents. If not specified or if an empty
    array is provided, stored templates in the schema database are used.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $doc1 :=
&lt;Citation&gt;
  &lt;ID&gt;69152893&lt;/ID&gt;
  &lt;Article&gt;
    &lt;Journal&gt;
      &lt;ISSN&gt;0123-4567&lt;/ISSN&gt;
      &lt;Details&gt;
        &lt;Volume&gt;118-119&lt;/Volume&gt;
        &lt;PubDate&gt;
          &lt;Year&gt;1968&lt;/Year&gt;
          &lt;Month&gt;Dec&lt;/Month&gt;
          &lt;Day&gt;7&lt;/Day&gt;
        &lt;/PubDate&gt;
      &lt;/Details&gt;
    &lt;/Journal&gt;
    &lt;Authors&gt;
      &lt;Author&gt;
       &lt;LastName&gt;Doe&lt;/LastName&gt;
       &lt;ForeName&gt;John&lt;/ForeName&gt;
      &lt;/Author&gt;
      &lt;Author&gt;
        &lt;LastName&gt;Smith&lt;/LastName&gt;
        &lt;ForeName&gt;Jane&lt;/ForeName&gt;
      &lt;/Author&gt;
    &lt;/Authors&gt;
  &lt;/Article&gt;
&lt;/Citation&gt;

let $rowtde1:=
&lt;template xmlns="http://marklogic.com/xdmp/tde"&gt;
  &lt;context&gt;/Citation/Article/Journal/Details&lt;/context&gt;
  &lt;rows&gt;
    &lt;row&gt;
      &lt;schema-name&gt;Medical&lt;/schema-name&gt;
      &lt;view-name&gt;Publications&lt;/view-name&gt;
      &lt;columns&gt;
        &lt;column&gt;
          &lt;name&gt;ID&lt;/name&gt;
          &lt;scalar-type&gt;long&lt;/scalar-type&gt;
          &lt;val&gt;../../../ID&lt;/val&gt;
        &lt;/column&gt;
        &lt;column&gt;
          &lt;name&gt;ISSN&lt;/name&gt;
          &lt;scalar-type&gt;string&lt;/scalar-type&gt;
          &lt;val&gt;../ISSN&lt;/val&gt;
        &lt;/column&gt;
        &lt;column&gt;
          &lt;name&gt;Volume&lt;/name&gt;
          &lt;scalar-type&gt;string&lt;/scalar-type&gt;
          &lt;val&gt;Volume&lt;/val&gt;
        &lt;/column&gt;
        &lt;column&gt;
          &lt;name&gt;Date&lt;/name&gt;
          &lt;scalar-type&gt;string&lt;/scalar-type&gt;
          &lt;val&gt;PubDate/Year||'-'||PubDate/Month||'-'||PubDate/Day&lt;/val&gt;
        &lt;/column&gt;
      &lt;/columns&gt;
    &lt;/row&gt;
  &lt;/rows&gt;
&lt;/template&gt;

let $tripletde1:=
&lt;template xmlns="http://marklogic.com/xdmp/tde"&gt;
  &lt;context&gt;//Authors/Author&lt;/context&gt;
  &lt;vars&gt;
    &lt;var&gt;
      &lt;name&gt;prefix1&lt;/name&gt;
      &lt;val&gt;"http://marklogic.com/example/pubs/"&lt;/val&gt;
    &lt;/var&gt;
  &lt;/vars&gt;
  &lt;triples&gt;
    &lt;triple&gt;
      &lt;subject&gt;
        &lt;val&gt;sem:iri($prefix1||'person/'||./ForeName||'_'||./LastName)&lt;/val&gt;
        &lt;invalid-values&gt;reject&lt;/invalid-values&gt;
      &lt;/subject&gt;
      &lt;predicate&gt;
        &lt;val&gt;sem:iri($prefix1||'authored')&lt;/val&gt;
      &lt;/predicate&gt;
      &lt;object&gt;
        &lt;val&gt;xs:string(../../Journal/ISSN)&lt;/val&gt;
      &lt;/object&gt;
    &lt;/triple&gt;
  &lt;/triples&gt;
&lt;/template&gt;

return tde:node-data-extract(($doc1),($rowtde1,$tripletde1))

=&gt;

{
  "document1":[
    {
      "row":{
        "schema":"Medical",
        "view":"Publications",
        "data":{
          "rownum":"1",
          "ID":69152893,
          "ISSN":"0123-4567",
          "Volume":"118-119",
          "Date":"1968-Dec-7"
        }
      }
    },
    {
      "triple":{
        "subject":"http://marklogic.com/example/pubs/person/John_Doe",
        "predicate":"http://marklogic.com/example/pubs/authored",
        "object":{
          "datatype":"http://www.w3.org/2001/XMLSchema#string",
          "value":"0123-4567"
        }
      }
    },
    {
      "triple":{
        "subject":"http://marklogic.com/example/pubs/person/Jane_Smith",
        "predicate":"http://marklogic.com/example/pubs/authored",
        "object":{
          "datatype":"http://www.w3.org/2001/XMLSchema#string",
          "value":"0123-4567"
        }
      }
    }
  ]
}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var doc1 = xdmp.unquote(`
&lt;Citation&gt;
  &lt;ID&gt;69152893&lt;/ID&gt;
  &lt;Article&gt;
    &lt;Journal&gt;
      &lt;ISSN&gt;0123-4567&lt;/ISSN&gt;
      &lt;Details&gt;
        &lt;Volume&gt;118-119&lt;/Volume&gt;
        &lt;PubDate&gt;
          &lt;Year&gt;1968&lt;/Year&gt;
          &lt;Month&gt;Dec&lt;/Month&gt;
          &lt;Day&gt;7&lt;/Day&gt;
        &lt;/PubDate&gt;
      &lt;/Details&gt;
    &lt;/Journal&gt;
    &lt;Authors&gt;
      &lt;Author&gt;
       &lt;LastName&gt;Doe&lt;/LastName&gt;
       &lt;ForeName&gt;John&lt;/ForeName&gt;
      &lt;/Author&gt;
      &lt;Author&gt;
        &lt;LastName&gt;Smith&lt;/LastName&gt;
        &lt;ForeName&gt;Jane&lt;/ForeName&gt;
      &lt;/Author&gt;
    &lt;/Authors&gt;
  &lt;/Article&gt;
&lt;/Citation&gt;
`);

var rowtde1 = xdmp.toJSON(
{
  "template":{
    "context":"/Citation/Article/Journal/Details",
    "rows":[
      {
        "schemaName":"Medical",
        "viewName":"Publications",
        "columns":[
          {
            "name":"ID",
            "scalarType":"long",
            "val":"../../../ID"
          },
          {
            "name":"ISSN",
            "scalarType":"string",
            "val":"../ISSN"
          },
          {
            "name":"Volume",
            "scalarType":"string",
            "val":"Volume"
          },
          {
            "name":"Date",
            "scalarType":"string",
            "val":"PubDate/Year||'-'||PubDate/Month||'-'||PubDate/Day"
          }
        ]
      }
    ]
  }
}
);

var tripletde1 = xdmp.toJSON(
{
  "template":{
    "context":"//Authors/Author",
    "vars":[
      {
        "name":"prefix1",
        "val":"\"http://marklogic.com/example/pubs/\""
      }
    ],
    "triples":[
      {
        "subject":{
          "val":"sem:iri($prefix1||'person/'||./ForeName||'_'||./LastName)",
          "invalidValues":"reject"
        },
        "predicate":{
          "val":"sem:iri($prefix1||'authored')",
          "invalidValues":"reject"
        },
        "object":{
          "val":"xs:string(../../Journal/ISSN)",
          "invalidValues":"reject"
        }
      }
    ]
  }
}
);

tde.nodeDataExtract([doc1],[rowtde1, tripletde1]);

=&gt;

{
  "document1":[
    {
      "row":{
        "schema":"Medical",
        "view":"Publications",
        "data":{
          "rownum":"1",
          "ID":69152893,
          "ISSN":"0123-4567",
          "Volume":"118-119",
          "Date":"1968-Dec-7"
        }
      }
    },
    {
      "triple":{
        "subject":"http://marklogic.com/example/pubs/person/John_Doe",
        "predicate":"http://marklogic.com/example/pubs/authored",
        "object":{
          "datatype":"http://www.w3.org/2001/XMLSchema#string",
          "value":"0123-4567"
        }
      }
    },
    {
      "triple":{
        "subject":"http://marklogic.com/example/pubs/person/Jane_Smith",
        "predicate":"http://marklogic.com/example/pubs/authored",
        "object":{
          "datatype":"http://www.w3.org/2001/XMLSchema#string",
          "value":"0123-4567"
        }
      }
    }
  ]
}

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="validate" type="builtin" lib="tde" category="Template Driven Extraction">
    <apidoc:summary>
  In addition to 
  <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:validate</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.validate</code>
  that can be used for validating against the extraction template schema.
  <p xmlns="http://www.w3.org/1999/xhtml">
  The recommended workflow for users is to validate an extraction template
  before inserting it into the schema database. Unless you use the
   <a class="javascript" href="#tde.templateInsert">tde.templateInsert</a> 
   <a class="xquery" href="#tde:template-insert">tde:template-insert</a> function, 
  Ill-formed templates are not validated or rejected at document insertion time.
  </p>  <p xmlns="http://www.w3.org/1999/xhtml">
  For more information on extraction templates, 
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/TDE.xml%2345703'>Template Driven Extraction (TDE)</a> in the <em>Application Developer's Guide</em>.
  </p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param class="xquery" name="templates" type="element(tde:template)*">
     The templates to validate.
  </apidoc:param>
      <apidoc:param class="xquery" name="excludeTemplateURIs" type="xs:string*" optional="true">
    A sequence of URIs for stored templates to ignore during the validation.
    When a template is being updated, users can exclude a previous version
    of the template that might conflict with the version passed to tde:validate.
  </apidoc:param>
      <apidoc:param class="javascript" name="templates" type="node[]">
    The templates to validate.
  </apidoc:param>
      <apidoc:param class="javascript" name="excludeTemplateURIs" type="String[]" optional="true">
    A sequence of URIs for stored templates to ignore during the validation.
    When a template is being updated, users can exclude a previous version
    of the template that might conflict with the version passed to tde.validate.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:usage>
     <p xmlns="http://www.w3.org/1999/xhtml">
  The <code class="xquery">tde:validate</code>
  <code class="javascript">tde.validate</code>
  function enables users to do the following:
    <ul>
	  <li>Check the template structure and format.</li>
	  <li>Validate the XQuery val expressions.</li>
	  <li>Check if the context expressions are legal.</li>
	  <li>Validate against stored templates (for view declaration consistency and
    other features).</li>
	</ul> 
     </p>
   </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $t1:=
&lt;template xmlns="http://marklogic.com/xdmp/tde"&gt;
  &lt;context&gt;/Citation/Article/Journal/Details&lt;/context&gt;
  &lt;rows&gt;
    &lt;row&gt;
      &lt;schema-name&gt;Medical&lt;/schema-name&gt;
      &lt;view-name&gt;Publications&lt;/view-name&gt;
      &lt;columns&gt;
        &lt;column&gt;
          &lt;name&gt;ID&lt;/name&gt;
          &lt;scalar-type&gt;BAD_SCALAR_TYPE&lt;/scalar-type&gt;
          &lt;val&gt;../../../ID&lt;/val&gt;&lt;/column&gt;
      &lt;/columns&gt;
    &lt;/row&gt;
  &lt;/rows&gt;
&lt;/template&gt;

return tde:validate(($t1),("previous_version_of_t1.xml"))

=&gt;

&lt;map:map xmlns:map="http://marklogic.com/xdmp/map" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;map:entry key="valid"&gt;
    &lt;map:value xsi:type="xs:boolean"&gt;false&lt;/map:value&gt;
  &lt;/map:entry&gt;
  &lt;map:entry key="error"&gt;
    &lt;map:value xsi:type="xs:string"&gt;TDE-INVALIDTEMPLATENODE&lt;/map:value&gt;
  &lt;/map:entry&gt;
  &lt;map:entry key="message"&gt;
    &lt;map:value xsi:type="xs:string"&gt;TDE-INVALIDTEMPLATENODE: Invalid extraction template node: /tde:template/tde:rows/tde:row/tde:columns/tde:column/tde:scalar-type&lt;/map:value&gt;
  &lt;/map:entry&gt;
&lt;/map:map&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var t1= xdmp.toJSON(
{
  "template":{
    "context":"/Citation/Article/Journal/Details",
    "rows":[
      {
        "schemaName":"Medical",
        "viewName":"Publications",
        "columns":[
          {
            "name":"ID",
            "scalar-type":"BAD_SCALAR_TYPE",
            "val":"../../../ID"
          }
        ]
      }
    ]
  }
}
);

tde.validate([t1],["previous_version_of_t1.xml"]);

=&gt;

{
"valid": false,
"error": "TDE-INVALIDTEMPLATENODE",
"message": "TDE-INVALIDTEMPLATENODE: Invalid extraction template node: fn:doc('')/tde:template/tde:rows/tde:row/tde:columns/tde:column[1]/tde:scalar-type"
}
</pre></apidoc:example>
  </apidoc:function></apidoc:module>