<apidoc:module name="GeospatialBuiltins" category="SearchBuiltins" subcategory="Geospatial" lib="geo" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public" category="SearchBuiltins" subcategory="Geospatial">
The geospatial built-in functions are XQuery functions defined to operate on
geospatial values.
</apidoc:summary><apidoc:summary lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
  <p xmlns="http://www.w3.org/1999/xhtml">Use the geospatial constructor functions to create geospatial
  primitive types such as points, boxes, circles, and polygons from raw
  data. You can use the resulting constructs in geospatial queries,
  geospatial lexicon analysis, and geospatial operations such as
  tests for containment or interesection.</p>
</apidoc:summary><apidoc:summary lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
  <p xmlns="http://www.w3.org/1999/xhtml">Use the following geospatial built-in functions to perform operations
  on geospatial values, such as region containment or intersection, and
  conversion between MarkLogic geospatial primitive values and standard
  formats such as WKT.</p>
</apidoc:summary><apidoc:summary lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
  <p xmlns="http://www.w3.org/1999/xhtml">The following functions are deprecated. You should use the
  corresponding functions in the <code>geo</code> namespace instead.
  For example, use <code>geo:distance</code> instead of
  <code>cts:distance</code> in XQuery; use <code>geo.distance</code>
  instead of <code>cts.distance</code> in Server-Side JavaScript.</p>
</apidoc:summary><apidoc:function name="point" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a point value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="latitude" type="xs:float">
     The latitude of the point.
  </apidoc:param>
      <apidoc:param name="longitude" type="xs:float">
     The longitude of the point.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:point(0.373899653086420E+02, -0.122078578406509E+03)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.point(0.373899653086420E+02, -0.122078578406509E+03);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="point-latitude" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a point's latitude value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="point" type="cts:point">
     The point.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code>, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $point := cts:point(37.270556, -118.672778)
return cts:point-latitude($point)

=&gt; 37.27056
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const point = cts.point(37.270556, -118.672778);
cts.pointLatitude(point);

=&gt; 37.2705574035645
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="point-longitude" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a point's longitude value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="point" type="cts:point">
     The point.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code> type, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $point := cts:point(37.270556, -118.672778)
return cts:point-longitude($point)

=&gt; -118.6728
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const point = cts.point(37.270556, -118.672778);
cts.pointLongitude(point);

=&gt; -118.672775268555
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="box" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a geospatial box value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="south" type="xs:float">
    The southern boundary of the box.
  </apidoc:param>
      <apidoc:param name="west" type="xs:float">
    The western boundary of the box.
  </apidoc:param>
      <apidoc:param name="north" type="xs:float">
    The northern boundary of the box.
  </apidoc:param>
      <apidoc:param name="east" type="xs:float">
    The eastern boundary of the box.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382464'>Boxes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:box(45, -122, 78, 30)

=&gt; [45, -122, 78, 30] (as a cts:box)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.box(45, -122, 78, 30);

=&gt; [45, -122, 78, 30] (as a cts.box)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="box-south" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a box's southern boundary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="box" type="cts:box">
     The box.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code> type, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382464'>Boxes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:box-south(cts:box(45, -122, 78, 30))

=&gt; 45
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.boxSouth(cts.box(45, -122, 78, 30));

=&gt; 45
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="box-west" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a box's western boundary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="box" type="cts:box">
     The box.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code> type, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382464'>Boxes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:box-west(cts:box(45, -122, 78, 30))

=&gt; -122
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.boxWest(cts.box(45, -122, 78, 30));

=&gt; -122
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="box-north" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a box's northern boundary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="box" type="cts:box">
     The box.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code> type, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382464'>Boxes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:box-north(cts:box(45, -122, 78, 30))

=&gt; 78
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.boxNorth(cts.box(45, -122, 78, 30));

=&gt; 78
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="box-east" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a box's eastern boundary.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="box" type="cts:box">
     The box.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code> type, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382464'>Boxes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:box-east(cts:box(45, -122, 78, 30))

=&gt; 30
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.boxEast(cts.box(45, -122, 78, 30));

=&gt; 30
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="circle" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a geospatial circle value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="radius" type="xs:double">
    The radius of the circle.  The units for the radius is determined at
    runtime by the <code xmlns="http://www.w3.org/1999/xhtml">query</code> options (miles is currently the only
    option).
  </apidoc:param>
      <apidoc:param name="center" type="cts:point">
    A point representing the center of the circle.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:circle</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:circle(20, cts:point(37.655983, -122.425525))

=&gt; @20 37.655983,-122.42552 (as a cts:circle)
</pre></apidoc:example>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2378272'>Circles</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.circle(20, cts.point(37.655983, -122.425525));

=&gt; @20 37.655983,-122.42552 (as a cts.circle)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="circle-radius" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a circle's radius.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="circle" type="cts:circle">
     The circle.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:numeric</apidoc:return>
    <apidoc:usage>
 This function can return a value of either <code xmlns="http://www.w3.org/1999/xhtml">xs:float</code> or
 <code xmlns="http://www.w3.org/1999/xhtml">xs:double</code> type, depending on the precision of the governing
 coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2378272'>Circles</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:circle-radius(cts:circle(20, cts:point(37.655983, -122.425525)))

=&gt; 20
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.circleRadius(cts.circle(20, cts.point(37.655983, -122.425525)));

=&gt; 20
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="circle-center" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a circle's center point.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="circle" type="cts:circle">
     The circle.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:circle-center(cts:circle(20, cts:point(37.655983, -122.425525)))

=&gt; 37.655983, -122.425525 (as a cts:point)
</pre></apidoc:example>
    <apidoc:usage>
 This function can return either a single or double precision region,
 depending on the precision of the governing coordinate system.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2378272'>Circles</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.circleCenter(cts.circle(20, cts.point(37.655983, -122.425525)));

=&gt; 37.655983, -122.425525 (as a cts.point)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="polygon" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a geospatial polygon value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="vertices" type="cts:point*">
    The vertices of the polygon, given in order. No edge may cover
    more than 180 degrees of either latitude or longitude.
    The polygon as a whole may not encompass both
    poles.  These constraints are necessary to ensure an unambiguous
    interpretation of the polygon. There must be at least three vertices.
    The first vertex should be identical to the last vertex to close the
    polygon.
    vertexes.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:polygon</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396441'>Polygons</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  (: this polygon approximates the 94041 zip code :)
  let $points := (cts:point(0.373899653086420E+02, -0.122078578406509E+03),
    cts:point(0.373765400000000E+02, -0.122063772000000E+03),
    cts:point(0.373781400000000E+02, -0.122067972000000E+03),
    cts:point(0.373825650000000E+02, -0.122068365000000E+03),
    cts:point(0.373797400000000E+02, -0.122072172000000E+03),
    cts:point(0.373899400000000E+02, -0.122092573000000E+03),
    cts:point(0.373941400000000E+02, -0.122095573000000E+03),
    cts:point(0.373966400000000E+02, -0.122094173000000E+03),
    cts:point(0.373958400000000E+02, -0.122092373000000E+03),
    cts:point(0.374004400000000E+02, -0.122091273000000E+03),
    cts:point(0.374004400000000E+02, -0.122091273000000E+03),
    cts:point(0.373873400000000E+02, -0.122057872000000E+03),
    cts:point(0.373873400000000E+02, -0.122057872000000E+03),
    cts:point(0.373854400000000E+02, -0.122052672000000E+03),
    cts:point(0.373833400000000E+02, -0.122053372000000E+03),
    cts:point(0.373819400000000E+02, -0.122057572000000E+03),
    cts:point(0.373775400000000E+02, -0.122060872000000E+03),
    cts:point(0.373765400000000E+02, -0.122063772000000E+03) )
  return
  cts:polygon($points)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// this polygon approximates the 94041 zip code
const points = [cts.point(0.373899653086420E+02, -0.122078578406509E+03),
    cts.point(0.373765400000000E+02, -0.122063772000000E+03),
    cts.point(0.373781400000000E+02, -0.122067972000000E+03),
    cts.point(0.373825650000000E+02, -0.122068365000000E+03),
    cts.point(0.373797400000000E+02, -0.122072172000000E+03),
    cts.point(0.373899400000000E+02, -0.122092573000000E+03),
    cts.point(0.373941400000000E+02, -0.122095573000000E+03),
    cts.point(0.373966400000000E+02, -0.122094173000000E+03),
    cts.point(0.373958400000000E+02, -0.122092373000000E+03),
    cts.point(0.374004400000000E+02, -0.122091273000000E+03),
    cts.point(0.374004400000000E+02, -0.122091273000000E+03),
    cts.point(0.373873400000000E+02, -0.122057872000000E+03),
    cts.point(0.373873400000000E+02, -0.122057872000000E+03),
    cts.point(0.373854400000000E+02, -0.122052672000000E+03),
    cts.point(0.373833400000000E+02, -0.122053372000000E+03),
    cts.point(0.373819400000000E+02, -0.122057572000000E+03),
    cts.point(0.373775400000000E+02, -0.122060872000000E+03),
    cts.point(0.373765400000000E+02, -0.122063772000000E+03) ];
cts.polygon(points);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="polygon-vertices" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a polygon's vertices.
  The first vertex and last vertex will always be the same.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="polygon" type="cts:polygon">
     The polygon.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396441'>Polygons</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $node :=
    &lt;polygon zip="94041"&gt;
       0.373899653086420E+02,       -0.122078578406509E+03
       0.373765400000000E+02,       -0.122063772000000E+03
       0.373781400000000E+02,       -0.122067972000000E+03
       0.373825650000000E+02,       -0.122068365000000E+03
       0.373797400000000E+02,       -0.122072172000000E+03
       0.373899400000000E+02,       -0.122092573000000E+03
       0.373941400000000E+02,       -0.122095573000000E+03
       0.373966400000000E+02,       -0.122094173000000E+03
       0.373958400000000E+02,       -0.122092373000000E+03
       0.374004400000000E+02,       -0.122091273000000E+03
       0.374004400000000E+02,       -0.122091273000000E+03
       0.373873400000000E+02,       -0.122057872000000E+03
       0.373873400000000E+02,       -0.122057872000000E+03
       0.373854400000000E+02,       -0.122052672000000E+03
       0.373833400000000E+02,       -0.122053372000000E+03
       0.373819400000000E+02,       -0.122057572000000E+03
       0.373775400000000E+02,       -0.122060872000000E+03
       0.373765400000000E+02,       -0.122063772000000E+03
    &lt;/polygon&gt;
    return
    cts:polygon-vertices(cts:polygon(fn:data($node)))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const points = [cts.point(0.373899653086420E+02, -0.122078578406509E+03),
    cts.point(0.373765400000000E+02, -0.122063772000000E+03),
    cts.point(0.373781400000000E+02, -0.122067972000000E+03),
    cts.point(0.373825650000000E+02, -0.122068365000000E+03),
    cts.point(0.373797400000000E+02, -0.122072172000000E+03),
    cts.point(0.373899400000000E+02, -0.122092573000000E+03),
    cts.point(0.373941400000000E+02, -0.122095573000000E+03),
    cts.point(0.373966400000000E+02, -0.122094173000000E+03),
    cts.point(0.373958400000000E+02, -0.122092373000000E+03),
    cts.point(0.374004400000000E+02, -0.122091273000000E+03),
    cts.point(0.374004400000000E+02, -0.122091273000000E+03),
    cts.point(0.373873400000000E+02, -0.122057872000000E+03),
    cts.point(0.373873400000000E+02, -0.122057872000000E+03),
    cts.point(0.373854400000000E+02, -0.122052672000000E+03),
    cts.point(0.373833400000000E+02, -0.122053372000000E+03),
    cts.point(0.373819400000000E+02, -0.122057572000000E+03),
    cts.point(0.373775400000000E+02, -0.122060872000000E+03),
    cts.point(0.373765400000000E+02, -0.122063772000000E+03) ];
cts.polygonVertices(cts.polygon(points));
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="linestring" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a geospatial linestring value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="vertices" type="cts:point*">
    The waypoints of the linestring, given in order.
    vertexes.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:linestring</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2349343'>Linestrings</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $points := (cts:point(0.373899653086420E+02, -0.122078578406509E+03),
    cts:point(0.373765400000000E+02, -0.122063772000000E+03),
    cts:point(0.373781400000000E+02, -0.122067972000000E+03),
    cts:point(0.373825650000000E+02, -0.122068365000000E+03),
    cts:point(0.373797400000000E+02, -0.122072172000000E+03),
    cts:point(0.373899400000000E+02, -0.122092573000000E+03) )
  return
  cts:linestring($points)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const points = [cts.point(0.373899653086420E+02, -0.122078578406509E+03),
    cts.point(0.373765400000000E+02, -0.122063772000000E+03),
    cts.point(0.373781400000000E+02, -0.122067972000000E+03),
    cts.point(0.373825650000000E+02, -0.122068365000000E+03),
    cts.point(0.373797400000000E+02, -0.122072172000000E+03),
    cts.point(0.373899400000000E+02, -0.122092573000000E+03) ];
cts.linestring(points);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="linestring-vertices" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a linestring's vertices.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="linestring" type="cts:linestring">
     The linestring.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2349343'>Linestrings</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $linestring :=
    "LINESTRING(
       0.373899653086420E+02 -0.122078578406509E+03,
       0.373765400000000E+02 -0.122063772000000E+03,
       0.373781400000000E+02 -0.122067972000000E+03,
       0.373825650000000E+02 -0.122068365000000E+03,
       0.373797400000000E+02 -0.122072172000000E+03,
       0.373899400000000E+02 -0.122092573000000E+03,
       0.373941400000000E+02 -0.122095573000000E+03,
       0.373966400000000E+02 -0.122094173000000E+03,
       0.373958400000000E+02 -0.122092373000000E+03,
       0.374004400000000E+02 -0.122091273000000E+03)"
    return
    cts:linestring-vertices(cts:linestring($linestring))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const points = [cts.point(0.373899653086420E+02, -0.122078578406509E+03),
    cts.point(0.373765400000000E+02, -0.122063772000000E+03),
    cts.point(0.373781400000000E+02, -0.122067972000000E+03),
    cts.point(0.373825650000000E+02, -0.122068365000000E+03),
    cts.point(0.373797400000000E+02, -0.122072172000000E+03),
    cts.point(0.373899400000000E+02, -0.122092573000000E+03) ];
const ls = cts.linestring(points);
cts.linestringVertices(ls);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="complex-polygon" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a geospatial complex polygon value.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="outer" type="cts:polygon">
  The outer polygon.
  </apidoc:param>
      <apidoc:param name="inner" type="cts:polygon*">
  The innner (hole) polygons.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:complex-polygon</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2358303'>Complex Polygons</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:complex-polygon(
  cts:polygon("0,0 10,0 10,10 0,10 0,0"),
  cts:polygon("5,0 7,0 7,5 5,5 5,0"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.complexPolygon(
  cts.polygon("0,0 10,0 10,10 0,10 0,0"),
  cts.polygon("5,0 7,0 7,5 5,5 5,0"));
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="complex-polygon-outer" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a complex polygon's outer polygon.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="complexPolygon" type="cts:complex-polygon">
     The complex polygon.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:polygon?</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2358303'>Complex Polygons</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $node :=
    &lt;complexPolygon name="Arapahoe"&gt;POLYGON((
      0.396982870000000E+02 -0.104935135000000E+03,
      0.396965870000000E+02 -0.104938635000000E+03,
      0.396965870000000E+02 -0.104938635000000E+03,
      0.397110870000000E+02 -0.104931634000000E+03,
      0.397066870000000E+02 -0.104926934000000E+03,
      0.397012870000000E+02 -0.104932834000000E+03,
      0.396971870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104931534000000E+03,
      0.396966870000000E+02 -0.104934335000000E+03,
      0.396966870000000E+02 -0.104934335000000E+03,
      0.396981250000000E+02 -0.104934109000000E+03
      ),
       (
      0.396981250000000E+02 -0.104934109000000E+03,
      0.397001130000000E+02 -0.104931652000000E+03,
      0.397001870000000E+02 -0.104934034000000E+03,
      0.396981250000000E+02 -0.104934109000000E+03
       ))
    &lt;/complexPolygon&gt;
    return
    cts:complex-polygon-outer(cts:parse-wkt(fn:data($node)))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const node = {Arapahoe:"POLYGON(( \n\
            0.396982870000000E+02 -0.104935135000000E+03, \n\
            0.396965870000000E+02 -0.104938635000000E+03, \n\
            0.396965870000000E+02 -0.104938635000000E+03, \n\
            0.397110870000000E+02 -0.104931634000000E+03, \n\
            0.397066870000000E+02 -0.104926934000000E+03, \n\
            0.397012870000000E+02 -0.104932834000000E+03, \n\
            0.396971870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104931534000000E+03, \n\
            0.396966870000000E+02 -0.104934335000000E+03, \n\
            0.396966870000000E+02 -0.104934335000000E+03, \n\
            0.396981250000000E+02 -0.104934109000000E+03), \n\
            ( 0.396981250000000E+02 -0.104934109000000E+03, \n\
            0.397001130000000E+02 -0.104931652000000E+03, \n\
            0.397001870000000E+02 -0.104934034000000E+03, \n\
            0.396981250000000E+02 -0.104934109000000E+03))"};
cts.complexPolygonOuter(cts.parseWkt(node.Arapahoe));
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="complex-polygon-inner" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Constructors">
    <apidoc:summary>
  Returns a complex polygon's inner polygons.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="complexPolygon" type="cts:complex-polygon">
     The complex polygon.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:polygon*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2358303'>Complex Polygons</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $node :=
    &lt;complexPolygon name="Arapahoe"&gt;POLYGON((
      0.396982870000000E+02 -0.104935135000000E+03,
      0.396965870000000E+02 -0.104938635000000E+03,
      0.396965870000000E+02 -0.104938635000000E+03,
      0.397110870000000E+02 -0.104931634000000E+03,
      0.397066870000000E+02 -0.104926934000000E+03,
      0.397012870000000E+02 -0.104932834000000E+03,
      0.396971870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104931534000000E+03,
      0.396966870000000E+02 -0.104934335000000E+03,
      0.396966870000000E+02 -0.104934335000000E+03,
      0.396981250000000E+02 -0.104934109000000E+03
      ),

       (
      0.396981250000000E+02 -0.104934109000000E+03,
      0.397001130000000E+02 -0.104931652000000E+03,
      0.397001870000000E+02 -0.104934034000000E+03,
      0.396981250000000E+02 -0.104934109000000E+03
       ))
    &lt;/complexPolygon&gt;
    return
    cts:complex-polygon-inner(cts:parse-wkt(fn:data($node)))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const node = {Arapahoe:"POLYGON(( \n\
            0.396982870000000E+02 -0.104935135000000E+03, \n\
            0.396965870000000E+02 -0.104938635000000E+03, \n\
            0.396965870000000E+02 -0.104938635000000E+03, \n\
            0.397110870000000E+02 -0.104931634000000E+03, \n\
            0.397066870000000E+02 -0.104926934000000E+03, \n\
            0.397012870000000E+02 -0.104932834000000E+03, \n\
            0.396971870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104931534000000E+03, \n\
            0.396966870000000E+02 -0.104934335000000E+03, \n\
            0.396966870000000E+02 -0.104934335000000E+03, \n\
            0.396981250000000E+02 -0.104934109000000E+03), \n\
            ( 0.396981250000000E+02 -0.104934109000000E+03, \n\
            0.397001130000000E+02 -0.104931652000000E+03, \n\
            0.397001870000000E+02 -0.104934034000000E+03, \n\
            0.396981250000000E+02 -0.104934109000000E+03))"};
cts.complexPolygonOuter(cts.parseWkt(node.Arapahoe));
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching elements by name whose content
  represents a point contained within the given geographic box, circle, or
  polygon, or equal to the given point. Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-name" type="xs:QName*">
    One or more element QNames to match.
    When multiple QNames are specified,
    the query matches if any QName matches.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted as
         matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:element-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed in the content of the element as a pair
of numbers, separated by whitespace and punctuation (excluding decimal points
and sign characters).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Point and region coordinates are interpreted according to the governing
coordinate system of the query. When using a geographic coordinate system
such as wgs84 or wgs84/double the following also applies:</p>
<ul xmlns="http://www.w3.org/1999/xhtml">
	<li>Southern latitudes and Western longitudes take negative values.</li>
	<li>Longitudes are wrapped to the range (-180,+180).</li>
	<li>Latitudes are clipped to the range (-90,+90).</li>
      </ul>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives distinct
  scores over a smaller range of values, and produces generally higher scores.
  Using a slope factor less than 1 gives distinct scores over a wider range of
  values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2344359'>Geospatial XML Element Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.xml",
&lt;root&gt;
  &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;5.11, 40.55&lt;/point&gt;&lt;/item&gt;
&lt;/root&gt; );

cts:search(doc("/points.xml")//item,
  cts:element-geospatial-query(
    xs:QName("point"), cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:
  &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-geospatial-query(
    xs:QName("point"), cts:box(10.0, 40.0, 20.0, 35.0)));
(:
  returns the following nodes (wrapping around the Earth):
  &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-geospatial-query(
    xs:QName("point"), cts:box(20.0, 35.0, 10.0, 40.0)))
(:
  throws an error (latitudes do not wrap)
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create documents with test data
declareUpdate();
xdmp.documentInsert("/point1.xml", xdmp.unquote(
 ' &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point2.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point3.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;5.11, 40.55&lt;/point&gt;&lt;/item&gt;' ));

// ******
// Now the following search:

cts.search(cts.elementGeospatialQuery(xs.QName("point"),
                  cts.box(10.0, 35.0, 20.0, 40.0)));

// =&gt; The /point2.xml document (because
//    &lt;point&gt;15.35, 35.34&lt;/point&gt; matches).

// ******
// And the following search:

cts.search(cts.elementGeospatialQuery(xs.QName("point"),
                  cts.box(10.0, 40.0, 20.0, 35.0)));

// =&gt; The /point1.xml document(wrapping around the Earth):

******
// And the following search:

cts.search(cts.elementGeospatialQuery(xs.QName("point"),
                  cts.box(20.0, 35.0, 10.0, 40.0)));

=&gt; throws an XDMP-BADBOX error (because latitudes do not wrap)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-query-element-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-geospatial-query(
    xs:QName("point"), cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:element-geospatial-query-element-name($query)

=&gt; "point" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementGeospatialQuery(
    xs.QName("point"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementGeospatialQueryElementName(query);

=&gt; "point" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions
  with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2344359'>Geospatial XML Element Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-geospatial-query(
    xs:QName("point"), cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:element-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementGeospatialQuery(
    xs.QName("point"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2344359'>Geospatial XML Element Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-geospatial-query(
    xs:QName("point"), cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:element-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementGeospatialQuery(
    xs.QName("point"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2344359'>Geospatial XML Element Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-geospatial-query(
    xs:QName("point"), cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:element-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementGeospatialQuery(
    xs.QName("point"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching json properties by name whose content
  represents a point contained within the given geographic box, circle, or
  polygon, or equal to the given point. Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="property-name" type="xs:string*">
    One or more json property names to match.
    When multiple names are specified,
    the query matches if any name matches.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>string</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> (default) and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted as
         matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
  counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:json-property-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed in the content of the element as a pair
of numbers, separated by whitespace and punctuation (excluding decimal points
and sign characters).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Point values and boundary specifications of
boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives distinct
  scores over a smaller range of values, and produces generally higher scores.
  Using a slope factor less than 1 gives distinct scores over a wider range of
  values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2360129'>Geospatial JSON Property Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.json",
object-node {
  "item" : object-node {
    "point" : "15.35, 35.34"
  }
});

cts:search(doc("/points.json")//item,
  cts:json-property-geospatial-query("point", cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:  {"point":"15.35, 35.34"}
:)

cts:search(doc("/points.json")//item,
  cts:json-property-geospatial-query("point", cts:box(12.0, 20.0, 20.0, 35.0)));
(:
  returns ()
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document with test data
declareUpdate();
xdmp.documentInsert("/points.json",
 {"item" : {
    "point" : "15.35, 35.34" }
 });

// ******
// Now you can run the following search:

cts.search(cts.jsonPropertyGeospatialQuery("point",
        cts.box(10.0, 35.0, 20.0, 40.0)));

// =&gt; returns the following document:
//     {"item":{"point":"15.35, 35.34"}}

// ******
// And the following search:

cts.search(cts.jsonPropertyGeospatialQuery("point",
        cts.box(12.0, 20.0, 20.0, 35.0)));

// =&gt; returns ()
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="json-property-geospatial-query-property-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the json property names used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2360129'>Geospatial JSON Property Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-geospatial-query("point",
   cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:json-property-geospatial-query-property-name($query)

=&gt; "point"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyGeospatialQuery("point",
   cts.box(10.1, 10.2, 20.1, 20.2))
cts.jsonPropertyGeospatialQueryPropertyName(query);

=&gt; "point"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions
  with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2360129'>Geospatial JSON Property Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-geospatial-query("point",
   cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:json-property-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyGeospatialQuery("point",
   cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2360129'>Geospatial JSON Property Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-geospatial-query("point",
   cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:json-property-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyGeospatialQuery("point",
   cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2360129'>Geospatial JSON Property Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-geospatial-query("point",
   cts:box(10.1, 10.2, 20.1, 20.2))
return
cts:json-property-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyGeospatialQuery("point",
   cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching elements by name which has
  specific element children representing latitude and longitude values for
  a point contained within the given geographic box, circle, or polygon, or
  equal to the given point.  Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parent-element-name" type="xs:QName*">
    One or more parent element QNames to match.
    When multiple QNames are specified,
    the query matches if any QName matches.
  </apidoc:param>
      <apidoc:param name="child-element-names" type="xs:QName*">
    One or more child element QNames to match.
    When multiple QNames are specified, the query matches
    if any QName matches; however, only the first matching latitude
    child in any point instance will be checked.  The element must specify
    both latitude and longitude coordinates.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>string</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> (default) and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
         as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:element-child-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed in the content of the element as a child
of numbers, separated by whitespace and punctuation (excluding decimal points
and sign characters).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will  match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives distinct
  scores over a smaller range of values, and produces generally higher scores.
  Using a slope factor less than 1 gives distinct scores over a wider range of
  values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.xml",
&lt;root&gt;
  &lt;item&gt;&lt;point&gt;&lt;pos&gt;10.5 30.0&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;&lt;pos&gt;15.35 35.34&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;&lt;pos&gt;5.11 40.55&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;
&lt;/root&gt; );

cts:search(doc("/points.xml")//item,
  cts:element-child-geospatial-query(xs:QName("point"), xs:QName("pos"),
    cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:
  &lt;item&gt;&lt;point&gt;&lt;pos&gt;15.35 35.34&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-child-geospatial-query(xs:QName("point"), xs:QName("pos"),
    cts:box(10.0, 40.0, 20.0, 35.0)));
(:
  returns the following nodes (wrapping around the Earth):
  &lt;item&gt;&lt;point&gt;&lt;pos&gt;10.5 30.0&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-child-geospatial-query(xs:QName("point"), xs:QName("pos"),
    cts:box(20.0, 35.0, 10.0, 40.0)))
(:
  throws an error (latitudes do not wrap)
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document with test data
declareUpdate();
xdmp.documentInsert("/point01.xml", xdmp.unquote(
 ' &lt;item&gt;&lt;point&gt;&lt;pos&gt;10.5, 30.0&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point02.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;&lt;pos&gt;15.35, 35.34&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point03.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;&lt;pos&gt;5.11, 40.55&lt;/pos&gt;&lt;/point&gt;&lt;/item&gt;' ));

// ******
// Now the following search:

cts.search(cts.elementChildGeospatialQuery(xs.QName("point"),
          xs.QName("pos"),
                  cts.box(10.0, 35.0, 20.0, 40.0)));

// =&gt; The /point02.xml document (because
//    &lt;point&gt;15.35, 35.34&lt;/point&gt; matches).

// ******
// And the following search:

cts.search(cts.elementChildGeospatialQuery(xs.QName("point"),
          xs.QName("pos"),
                  cts.box(10.0, 40.0, 20.0, 35.0)));

// =&gt; The /point01.xml document(wrapping around the Earth):

// ******
// And the following search:

cts.search(cts.elementChildGeospatialQuery(xs.QName("point"),
          xs.QName("pos"),
                  cts.box(20.0, 35.0, 10.0, 40.0)));

// =&gt; throws an XDMP-BADBOX error (because latitudes do not wrap)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-query-element-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-child-geospatial-query(
     xs:QName("point"), xs:QName("pos"),
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-child-geospatial-query-element-name($query)

=&gt; "point" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementChildGeospatialQuery(
     xs.QName("point"), xs.QName("pos"),
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementChildGeospatialQueryElementName(query);

=&gt; "point" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-query-child-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-child-geospatial-query(
     xs:QName("point"), xs:QName("pos"),
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-child-geospatial-query-child-name($query)

=&gt; "pos" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementChildGeospatialQuery(
     xs.QName("point"), xs.QName("pos"),
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementChildGeospatialQueryChildName(query);

=&gt; "pos" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-child-geospatial-query(
     xs:QName("point"), xs:QName("pos"),
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-child-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementChildGeospatialQuery(
     xs.QName("point"), xs.QName("pos"),
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementChildGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-child-geospatial-query(
     xs:QName("point"), xs:QName("pos"),
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-child-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementChildGeospatialQuery(
     xs.QName("point"), xs.QName("pos"),
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementChildGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-child-geospatial-query(
     xs:QName("point"), xs:QName("pos"),
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-child-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementChildGeospatialQuery(
     xs.QName("point"), xs.QName("pos"),
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementChildGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-child-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching json properties by name which has
  specific children representing latitude and longitude values for
  a point contained within the given geographic box, circle, or polygon, or
  equal to the given point.  Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parent-property-name" type="xs:string*">
    One or more parent property names to match.
    When multiple names are specified,
    the query matches if any name matches.
  </apidoc:param>
      <apidoc:param name="child-property-names" type="xs:string*">
    One or more child property names to match.
    When multiple names are specified, the query matches
    if any name matches; however, only the first matching latitude
    child in any point instance will be checked.  The property must specify
    both latitude and longitude coordinates.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>string</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> (default) and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
         as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
  counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:json-property-child-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed in the content of the property as a child
of numbers, separated by whitespace and punctuation (excluding decimal points
and sign characters).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will  match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope
  factor will provide useful results. Using a slope factor greater than
  1 gives distinct scores over a smaller range of values, and produces
  generally higher scores.  Using a slope factor less than 1 gives distinct
  scores over a wider range of values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.json",
object-node {
  "item" : object-node {
    "point" : object-node {
      "pos" : "15.35, 35.34"
    }
  }
});

cts:search(doc("/points.json")//item,
  cts:json-property-child-geospatial-query("point", "pos",
    cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node: {"point":{"pos":"15.35, 35.34"}}
:)

cts:search(doc("/points.json")//item,
  cts:json-property-geospatial-query("point", cts:box(12.0, 20.0, 20.0, 35.0)));
(:
  returns ()
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document with test data
declareUpdate();
xdmp.documentInsert("/points.json",
  { "item" :  {
      "point" :  {
         "pos" : "15.35, 35.34"
    } } });

// *******
// Now the following search:

cts.search(
  cts.jsonPropertyChildGeospatialQuery("point", "pos",
    cts.box(10.0, 35.0, 20.0, 40.0)))

// =&gt; returns the document inserted: {"item":{"point":{"pos":"15.35, 35.34"}}}

// ******
// And the following search:

cts.search(
  cts.jsonPropertyGeospatialQuery("point",
      cts.box(12.0, 20.0, 20.0, 35.0)));

// =&gt;  returns ()
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="json-property-child-geospatial-query-property-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the names used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-child-geospatial-query("point", "pos",
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-child-geospatial-query-property-name($query)

=&gt; "point"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyChildGeospatialQuery("point", "pos",
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyChildGeospatialQueryPropertyName(query);

=&gt; "point"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-child-geospatial-query-child-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the names used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-child-geospatial-query("point", "pos",
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-child-geospatial-query-child-name($query)

=&gt; "pos"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyChildGeospatialQuery("point", "pos",
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyChildGeospatialQueryChildName(query);

=&gt; "pos"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-child-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions with which the specified query was
  constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-child-geospatial-query("point", "pos",
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-child-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyChildGeospatialQuery("point", "pos",
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyChildGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-child-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-child-geospatial-query("point", "pos",
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-child-geospatial-query-Options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyChildGeospatialQuery("point", "pos",
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyChildGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-child-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-child-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-child-geospatial-query("point", "pos",
     cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-child-geospatial-query-Weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyChildGeospatialQuery("point", "pos",
     cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyChildGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching elements by name which has
  specific element children representing latitude and longitude values for
  a point contained within the given geographic box, circle, or polygon, or
  equal to the given point.
  Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-name" type="xs:QName*">
    One or more parent element QNames to match.
    When multiple QNames are specified,
    the query matches if any QName matches.
  </apidoc:param>
      <apidoc:param name="latitude-element-names" type="xs:QName*">
    One or more latitude element QNames to match.
    When multiple QNames are specified, the query matches
    if any QName matches; however, only the first matching latitude
    child in any point instance will be checked.
  </apidoc:param>
      <apidoc:param name="longitude-element-names" type="xs:QName*">
    One or more longitude element QNames to match.
    When multiple QNames are specified, the query matches
    if any QName matches; however, only the first matching longitude
    child in any point instance will be checked.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
        as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:element-pair-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed in the content of the latitude and
longitude elements (the latitude value in the latitude element, and the
longitude value in the longitude element).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will  match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives
  distinct scores over a smaller range of values, and produces generally
  higher scores.  Using a slope factor less than 1 gives distinct scores
  over a wider range of values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.xml",
&lt;root&gt;
  &lt;item&gt;&lt;point&gt;&lt;lat&gt;10.5&lt;/lat&gt;&lt;long&gt;30.0&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;&lt;lat&gt;15.35&lt;/lat&gt;&lt;long&gt;35.34&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;&lt;lat&gt;5.11&lt;/lat&gt;&lt;long&gt;40.55&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;
&lt;/root&gt; );

cts:search(doc("/points.xml")//item,
  cts:element-pair-geospatial-query(xs:QName("point"),
    xs:QName("lat"), xs:QName("long"), cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:
  &lt;item&gt;&lt;point&gt;&lt;lat&gt;15.35&lt;/lat&gt;&lt;long&gt;35.34&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-pair-geospatial-query(xs:QName("point"),
    xs:QName("lat"), xs:QName("long"), cts:box(10.0, 40.0, 20.0, 35.0)));
(:
  returns the following nodes (wrapping around the Earth):
  &lt;item&gt;&lt;point&gt;&lt;lat&gt;10.5&lt;/lat&gt;&lt;long&gt;30.0&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-pair-geospatial-query(xs:QName("point"),
    xs:QName("lat"), xs:QName("long"), cts:box(20.0, 35.0, 10.0, 40.0)))
(:
  throws an error (latitudes do not wrap)
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create documents with test data
declareUpdate();
xdmp.documentInsert("/point01.xml", xdmp.unquote(
 ' &lt;item&gt;&lt;point&gt;&lt;lat&gt;10.5&lt;/lat&gt;&lt;long&gt;30.0&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point02.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;&lt;lat&gt;15.35&lt;/lat&gt;&lt;long&gt;35.34&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point03.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;&lt;lat&gt;5.11&lt;/lat&gt;&lt;long&gt;40.55&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;' ));

// ******
// Now the following search:

cts.search(
  cts.elementPairGeospatialQuery(xs.QName("point"),
    xs.QName("lat"), xs.QName("long"), cts.box(10.0, 35.0, 20.0, 40.0)));

// =&gt; returns /point02.xml:
//    &lt;item&gt;&lt;point&gt;&lt;lat&gt;15.35&lt;/lat&gt;&lt;long&gt;35.34&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;

// ******
// And the following search:

cts.search(
  cts.elementPairGeospatialQuery(xs.QName("point"),
    xs.QName("lat"), xs.QName("long"), cts.box(10.0, 40.0, 20.0, 35.0)));

// =&gt;  returns /point01.xml (wrapping around the Earth):
//     &lt;item&gt;&lt;point&gt;&lt;lat&gt;10.5&lt;/lat&gt;&lt;long&gt;30.0&lt;/long&gt;&lt;/point&gt;&lt;/item&gt;

cts.search(
  cts.elementPairGeospatialQuery(xs.QName("point"),
    xs.QName("lat"), xs.QName("long"), cts.box(20.0, 35.0, 10.0, 40.0)));

// =&gt; throws an XDMP-BADBOX error (because latitudes do not wrap)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query-element-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-pair-geospatial-query-element-name($query)

=&gt; "point" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementPairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementPairGeospatialQueryElementName(query);

=&gt; "point" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query-latitude-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-pair-geospatial-query-latitude-name($query)

=&gt; "lat" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementPairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementPairGeospatialQueryLatitudeName(query);

=&gt; "lat" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query-longitude-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-pair-geospatial-query-longitude-name($query)

=&gt; "long" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementPairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementPairGeospatialQueryLongitudeName(query);

=&gt; "long" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions with which the specified query was
  constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-pair-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementPairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementPairGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-pair-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementPairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementPairGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-pair-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementPairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementPairGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching json properties by name which has
  specific property children representing latitude and longitude values for
  a point contained within the given geographic box, circle, or polygon, or
  equal to the given point.
  Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="property-name" type="xs:string*">
    One or more parent property names to match.
    When multiple names are specified,
    the query matches if any name matches.
  </apidoc:param>
      <apidoc:param name="latitude-property-names" type="xs:string*">
    One or more latitude property names to match.
    When multiple names are specified, the query matches
    if any name matches; however, only the first matching latitude
    child in any point instance will be checked.
  </apidoc:param>
      <apidoc:param name="longitude-property-names" type="xs:string*">
    One or more longitude property names to match.
    When multiple names are specified, the query matches
    if any name matches; however, only the first matching longitude
    child in any point instance will be checked.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
        as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
  counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
  matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:json-property-pair-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will  match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives
  distinct scores over a smaller range of values, and produces generally
  higher scores.  Using a slope factor less than 1 gives distinct scores
  over a wider range of values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.json",
object-node {
  "item" : object-node {
    "point" : object-node {
       "lat" : 15.35,
       "long" : 35.34
    }
  }
});

cts:search(doc("/points.json")//item,
  cts:json-property-pair-geospatial-query("point",
    "lat", "long", cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:
:)

cts:search(doc("/points.json")//item,
  cts:json-property-pair-geospatial-query("point",
    "lat", "long", cts:box(12.0, 20.0, 20.0, 35.0)))
(:
  returns ()
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create a document with test data
declareUpdate();
xdmp.documentInsert("/points.json",
{ "item" :  {
    "point" : {
       "lat" : 15.35,
       "long" : 35.34
    }
  }
});

// *******
// Now the following search:

cts.search(
  cts.jsonPropertyPairGeospatialQuery("point",
    "lat", "long", cts.box(10.0, 35.0, 20.0, 40.0)));

// =&gt;  returns the document inserted above:
//     {"item":{"point":{"lat":15.35,"long":35.34}}}

// *******
// And the following search:

cts.search(
  cts.jsonPropertyPairGeospatialQuery("point",
    "lat", "long", cts.box(12.0, 20.0, 20.0, 35.0)));

// =&gt;  returns ()
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query-property-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the property names used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-pair-geospatial-query("point",
     "lat", "long", cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-pair-geospatial-query-property-name($query)

=&gt; "point"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyPairGeospatialQuery("point",
     "lat", "long", cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyPairGeospatialQueryPropertyName(query);

=&gt; "point"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query-latitude-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the property names used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-pair-geospatial-query("point",
     "lat", "long", cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-pair-geospatial-query-latitude-name($query)

=&gt; "lat"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyPairGeospatialQuery("point",
     "lat", "long", cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyPairGeospatialQueryLatitudeName(query);

=&gt; "lat"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query-longitude-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the property names used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-pair-geospatial-query("point",
     "lat", "long", cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-pair-geospatial-query-longitude-name($query)

=&gt; "long"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyPairGeospatialQuery("point",
     "lat", "long", cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyPairGeospatialQueryLongitudeName(query);

=&gt; "long"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions with which the specified query was
  constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-pair-geospatial-query("point",
     "lat", "long", cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-pair-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyPairGeospatialQuery("point",
     "lat", "long", cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyPairGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-pair-geospatial-query("point",
     "lat", "long", cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-pair-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyPairGeospatialQuery("point",
     "lat", "long", cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyPairGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="json-property-pair-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:json-property-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:json-property-pair-geospatial-query("point",
     "lat", "long", cts:box(10.1, 10.2, 20.1, 20.2))
return cts:json-property-pair-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.jsonPropertyPairGeospatialQuery("point",
     "lat", "long", cts.box(10.1, 10.2, 20.1, 20.2));
cts.jsonPropertyPairGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching elements by name which has
  specific attributes representing latitude and longitude values for
  a point contained within the given geographic box, circle, or polygon,
  or equal to the given point. Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-name" type="xs:QName*">
    One or more parent element QNames to match.
    When multiple QNames are specified,
    the query matches if any QName matches.
  </apidoc:param>
      <apidoc:param name="latitude-attribute-names" type="xs:QName*">
    One or more latitude attribute QNames to match.
    When multiple QNames are specified, the query matches
    if any QName matches; however, only the first matching latitude
    attribute in any point instance will be checked.
  </apidoc:param>
      <apidoc:param name="longitude-attribute-names" type="xs:QName*">
    One or more longitude attribute QNames to match.
    When multiple QNames are specified, the query matches
    if any QName matches; however, only the first matching longitude
    attribute in any point instance will be checked.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where
    multiple regions
    are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
        as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:element-attribute-pair-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed as the numerical values in the
textual content of the named attributes.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The point values and the boundary specifications are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary,
no points will
match. However, longitudes wrap around the globe, so that if the western
boundary is east of the eastern boundary (that is, if the value of 'w' is
greater than the value of 'e'), then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives
  distinct scores over a smaller range of values, and produces generally
  higher scores.  Using a slope factor less than 1 gives distinct scores
  over a wider range of values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.xml",
&lt;root&gt;
  &lt;item&gt;&lt;point lat="10.5" long="30.0"/&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point lat="15.35" long="35.34"/&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point lat="5.11" long="40.55"/&gt;&lt;/item&gt;
&lt;/root&gt; );

cts:search(doc("/points.xml")//item,
  cts:element-attribute-pair-geospatial-query(xs:QName("point"),
    xs:QName("lat"), xs:QName("long"), cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:
  &lt;item&gt;&lt;point lat="15.35" long="35.34"/&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-attribute-pair-geospatial-query(xs:QName("point"),
    xs:QName("lat"), xs:QName("long"), cts:box(10.0, 40.0, 20.0, 35.0)));
(:
  returns the following nodes (wrapping around the Earth):
  &lt;item&gt;&lt;point lat="10.5" long="30.0"/&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:element-attribute-pair-geospatial-query(xs:QName("point"),
    xs:QName("lat"), xs:QName("long"), cts:box(20.0, 35.0, 10.0, 40.0)))
(:
  throws an error (latitudes do not wrap)
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create documents with test data
declareUpdate();
xdmp.documentInsert("/point01.xml", xdmp.unquote(
 ' &lt;item&gt;&lt;point lat="10.5" long="30.0"/&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point02.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point lat="15.35" long="35.34"/&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point03.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point lat="5.11" long="40.55"/&gt;&lt;/item&gt;' ));

// ******
// Now the following search:

cts.search(
  cts.elementAttributePairGeospatialQuery(xs.QName("point"),
    xs.QName("lat"), xs.QName("long"), cts.box(10.0, 35.0, 20.0, 40.0)));

// =&gt; returns the document inserted above:
//    &lt;item&gt;&lt;point lat="15.35" long="35.34"/&gt;&lt;/item&gt;

cts.search(
  cts.elementAttributePairGeospatialQuery(xs.QName("point"),
    xs.QName("lat"), xs.QName("long"), cts.box(10.0, 40.0, 20.0, 35.0)));

// =&gt; returns the document inserted above (wrapping around the Earth):
//    &lt;item&gt;&lt;point lat="10.5" long="30.0"/&gt;&lt;/item&gt;

// ******
// And the following search:

cts.search(
  cts.elementAttributePairGeospatialQuery(xs.QName("point"),
    xs.QName("lat"), xs.QName("long"), cts.box(20.0, 35.0, 10.0, 40.0)));

// =&gt; throws an XDMP-BADBOX error (because latitudes do not wrap)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query-element-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-attribute-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-attribute-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-attribute-pair-geospatial-query-element-name($query)

=&gt; "point" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementAttributePairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementAttributePairGeospatialQueryElementName(query);

=&gt; "point" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query-latitude-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-attribute-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-attribute-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-attribute-pair-geospatial-query-latitude-name($query)

=&gt; "lat" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementAttributePairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementAttributePairGeospatialQueryLatitudeName(query);

=&gt; "lat" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query-longitude-name" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the QNames used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-attribute-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-attribute-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-attribute-pair-geospatial-query-longitude-name($query)

=&gt; "long" (as an xs:QName)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementAttributePairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementAttributePairGeospatialQueryLongitudeName(query);

=&gt; "long" (as an xs.QName)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-attribute-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-attribute-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-attribute-pair-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementAttributePairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementAttributePairGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-attribute-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-attribute-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-attribute-pair-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementAttributePairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementAttributePairGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:element-attribute-pair-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:element-attribute-pair-geospatial-query(xs:QName("point"),
     xs:QName("lat"), xs:QName("long"), cts:box(10.1, 10.2, 20.1, 20.2))
return cts:element-attribute-pair-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.elementAttributePairGeospatialQuery(xs.QName("point"),
     xs.QName("lat"), xs.QName("long"), cts.box(10.1, 10.2, 20.1, 20.2));
cts.elementAttributePairGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="path-geospatial-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns a query matching path expressions whose content
  represents a point contained within the given geographic box, circle, or
  polygon, or equal to the given point. Points that lie
  between the southern boundary and the northern boundary of a box,
  travelling northwards,
  and between the western boundary and the eastern boundary of the box,
  travelling eastwards, will match.
  Points contained within the given radius of the center point of a circle will
  match, using the curved distance on the surface of the Earth.
  Points contained within the given polygon will match, using great circle arcs
  over a spherical model of the Earth as edges.  An error may result
  if the polygon is malformed in some way.
  Points equal to the a given point will match, taking into account the fact
  that longitudes converge at the poles.
  Using the geospatial query constructors requires a valid geospatial
  license key; without a valid license key, searches that include
  geospatial queries will throw an exception.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path-expression" type="xs:string*">
    One or more path expressions to match.
    When multiple path expressions are specified,
    the query matches if any path expression matches.
  </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
    One or more geographic boxes, circles, polygons, or points. Where multiple
    regions are specified, the query matches if any region matches.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
        as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
        <dt>"cached"</dt>
        <dd>Cache the results of this query in the list cache.</dd>
        <dt>"uncached"</dt>
        <dd>Do not cache the results of this query in the list cache.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
      </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:path-geospatial-query</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The point value is expressed in the content of an element that matches given
 path expression as a pair of numbers, separated by whitespace and punctuation
 (excluding decimal points and sign characters).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the query uses single precision.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Point values and boundary specifications of
boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western
longitudes take negative values.  Longitudes will be wrapped to the range
(-180,+180) and latitudes will be clipped to the range (-90,+90).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the northern boundary of a box is south of the southern boundary, no
points will match. However, longitudes wrap around the globe, so that if
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">Special handling occurs at the poles, as all longitudes exist at latitudes
+90 and -90.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">If neither "cached" nor "uncached" is present, it specifies "cached".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives
  distinct scores over a smaller range of values, and produces generally
  higher scores.  Using a slope factor less than 1 gives distinct scores
  over a wider range of values, and produces generally lower scores.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">"score-function=linear" means that values that are further away from
  the bounds will score higher. "score-function=reciprocal" means that values
  that are closer to the bounds will score higher. The functions are scaled
  appropriately for different types, so that in general the default slope factor
  will provide useful results. Using a slope factor greater than 1 gives distinct
  scores over a smaller range of values, and produces generally higher scores.
  Using a slope factor less than 1 gives distinct scores over a wider range of
  values, and produces generally lower scores.
  </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: create a document with test data :)
xdmp:document-insert("/points.xml",
&lt;root&gt;
  &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;
  &lt;item&gt;&lt;point&gt;5.11, 40.55&lt;/point&gt;&lt;/item&gt;
&lt;/root&gt; );

cts:search(doc("/points.xml")//item,
  cts:path-geospatial-query("/root/item/point",
      cts:box(10.0, 35.0, 20.0, 40.0)));
(:
  returns the following node:
  &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:path-geospatial-query("//item/point", cts:box(10.0, 40.0, 20.0, 35.0)));
(:
  returns the following nodes (wrapping around the Earth):
  &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;
:)

cts:search(doc("/points.xml")//item,
  cts:path-geospatial-query("//point", cts:box(20.0, 35.0, 10.0, 40.0)))
(:
  throws an error (latitudes do not wrap)
:)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// create documents with test data
declareUpdate();
xdmp.documentInsert("/point1.xml", xdmp.unquote(
 ' &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point2.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;' )),

xdmp.documentInsert("/point3.xml", xdmp.unquote(
 '  &lt;item&gt;&lt;point&gt;5.11, 40.55&lt;/point&gt;&lt;/item&gt;' ));

// ******
// Now the following search:

cts.search(
  cts.pathGeospatialQuery("/item/point", cts.box(10.0, 35.0, 20.0, 40.0)));

// returns the /point2.xml document created above:
//    &lt;item&gt;&lt;point&gt;15.35, 35.34&lt;/point&gt;&lt;/item&gt;

// ******
// And the following search:

cts.search(
  cts.pathGeospatialQuery("//item/point", cts.box(10.0, 40.0, 20.0, 35.0)));

// =&gt; returns the point1.xml document created above (wrapping around the Earth):
//    &lt;item&gt;&lt;point&gt;10.5, 30.0&lt;/point&gt;&lt;/item&gt;

// ******
// And the following search:

cts.search(
  cts.pathGeospatialQuery("//point", cts.box(20.0, 35.0, 10.0, 40.0)));

// =&gt; throws an XDMP-BADBOX error (because latitudes do not wrap)
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="path-geospatial-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the geographical regions
  with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:path-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:path-geospatial-query("//point",
       cts:box(10.1, 10.2, 20.1, 20.2))
return cts:path-geospatial-query-region($query)

=&gt; cts:box("[10.1, 10.2, 20.1, 20.2]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.pathGeospatialQuery("//point",
       cts.box(10.1, 10.2, 20.1, 20.2))
cts.pathGeospatialQueryRegion(query);

=&gt; [10.1, 10.2, 20.1, 20.2]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="path-geospatial-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the options for the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:path-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:path-geospatial-query("//point",
       cts:box(10.1, 10.2, 20.1, 20.2))
return cts:path-geospatial-query-options($query)

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.pathGeospatialQuery("//point",
       cts.box(10.1, 10.2, 20.1, 20.2))
cts.pathGeospatialQueryOptions(query);

=&gt; coordinate-system=wgs84
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="path-geospatial-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the weight with which the specified query was constructed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:path-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:path-geospatial-query("//point",
       cts:box(10.1, 10.2, 20.1, 20.2))
return cts:path-geospatial-query-weight($query)

=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.pathGeospatialQuery("//point",
       cts.box(10.1, 10.2, 20.1, 20.2))
cts.pathGeospatialQueryWeight(query);

=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="path-geospatial-query-path-expression" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
  Returns the path expressions used to construct the specified query.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:path-geospatial-query">
    A query.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2342017'>Searching for Matching Points</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $query := cts:path-geospatial-query("//point",
       cts:box(10.1, 10.2, 20.1, 20.2))
return cts:path-geospatial-query-path-expression($query)

=&gt; "//point"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const query = cts.pathGeospatialQuery("//point",
       cts.box(10.1, 10.2, 20.1, 20.2))
cts.pathGeospatialQueryPathExpression(query);

=&gt; "//point"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-query-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
    Returns the geospatial region path index reference(s) specified
    when constructing the input query.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:geospatial-region-query">
      A geospatial region path query.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-query-reference(
  cts:geospatial-region-query(
    cts:geospatial-region-path-reference("//item/region")
    "contains", cts:box(10, 20, 30, 40))
)

=&gt; A region path index reference of the following form:

   cts:geospatial-region-path-reference(
     "//item/region",("coordinate-system=wgs84"))
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionQueryReference(
  cts.geospatialRegionQuery(
    cts.geospatialRegionPathReference('//item/region'),
    'contains', cts.box(10, 20, 30, 40))
);

=&gt; A region path index reference of the following form:

  cts.geospatialRegionPathReference(
    "//item/region",("coordinate-system=wgs84/double"))
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-query-operation" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
    Returns the comparison operation specified when constructing the
    input query.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:geospatial-region-query">
      A geospatial region path query.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-query-operation(
  cts:geospatial-region-query(
    cts:geospatial-region-path-reference("//item/region")
    "contains", cts:box(10, 20, 30, 40))
)

=&gt; "contains"
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionQueryOperation(
  cts.geospatialRegionQuery(
    cts.geospatialRegionPathReference('//item/region'),
    'contains', cts.box(10, 20, 30, 40))
)

=&gt; "contains"
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-query-region" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
    Returns the region criteria specified when constructing the
    input query.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:geospatial-region-query">
      A geospatial region path query.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-query-region(
  cts:geospatial-region-query(
    cts:geospatial-region-path-reference("//item/region")
    "contains", cts:box(10, 20, 30, 40))
)

=&gt; cts:box("[10, 20, 30, 40]")
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionQueryRegion(
  cts.geospatialRegionQuery(
    cts.geospatialRegionPathReference('//item/region'),
    'contains', cts.box(10, 20, 30, 40))
)

=&gt; cts.box("[10, 20, 30, 40]")
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-query-options" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
    Returns the options specified when constructing the input query.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:geospatial-region-query">
      A geospatial region path query.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-query-options(
  cts:geospatial-region-query(
    cts:geospatial-region-path-reference("//item/region")
    "contains", cts:box(10, 20, 30, 40),
    ("units=km", "tolerance=0.025"))
)

=&gt; ("units=km", "tolerance=0.025")
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionQueryOptions(
  cts.geospatialRegionQuery(
    cts.geospatialRegionPathReference('//item/region'),
    'contains', cts.box(10, 20, 30, 40),
    ["units=km", "tolerance=0.025"])
)

=&gt; A Sequence containing the strings "units=km" and "tolerance=0.025"
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-query-weight" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
    Returns the weight specified when constructing the input query.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="query" type="cts:geospatial-region-query">
      A geospatial region path query.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-query-weight(
  cts:geospatial-region-query(
    cts:geospatial-region-path-reference("//item/region")
    "contains", cts:box(10, 20, 30, 40), (), 2.0)
)

=&gt; 2.0
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionQueryWeight(
  cts.geospatialRegionQuery(
    cts.geospatialRegionPathReference('//item/region'),
    'contains', cts.box(10, 20, 30, 40), [], 2.0)
)

=&gt; 2.0
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-boxes" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Returns boxes derived from the specified element point lexicon(s).
  Element point lexicons are implemented using geospatial indexes; consequently
  this function requires an element geospatial index for each element
  specified in the function.  If there is not a geospatial index configured for
  each of the specified elements, an exception is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The points are divided into box-shaped buckets. The $latitude-bounds and
  $longitude-bounds parameters specify the number and the size of each
  box-shaped bucket. All included points are bucketed, even those outside
  the bounds.  An empty sequence for both $latitude-bounds and
  $longitude-bounds specifies one bucket, a single value for both specifies
  four buckets, two values for both specify nine buckets, and so on.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For each non-empty bucket, a 
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  value is returned. By default, the box value is the minimum bounding box
  of all the points in the bucket.  If the "gridded" option is specified,
  then if a bucket is bounded on a side, its corresponding
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  side is the bound.
  Empty buckets return nothing unless the "empties" option is specified.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-bounds" type="xs:double*" optional="true">
    A sequence of latitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="longitude-bounds" type="xs:double*" optional="true">
    A sequence of longitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Use the following options to customize your lexicon query:
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Boxes should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Boxes should be returned in descending order.</dd>
        <dt>"gridded"</dt>
        <dd>For each side that a bucket is bounded, return the corresponding
        bound as the edge of the box, instead of the extremum from the
        points in the bucket.</dd>
        <dt>"empties"</dt>
        <dd>Include fully-bounded ranges whose frequency is 0.  Only
        empty ranges that have
        both their upper and lower bounds specified in the $bounds
        options are returned;
        any empty ranges that are less than the first bound or greater than the
        last bound are not returned.  For example, if you specify 4 bounds
        and there are no results for any of the bounds, 3 elements are
        returned (not 5 elements).</dd>
        <dt>"any"</dt>
        <dd>Points from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Points from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Points from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Points from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Boxes should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Boxes should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included point.
        This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included point. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon that is configured with the specified coordinate
         system. Allowed values: "wgs84", "wgs84/double", "etrs89",
         "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> boxes. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Points from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only boxes for buckets with at least one point from
        the first <em>N</em> fragments after skip selected by the
        <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only points from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:box* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include points in fragments selected by this query,
    and compute frequencies from this set of included points.
    The points do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "empties"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all boxes with included points may be returned. If a <code>$query</code>
  parameter is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then points from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple boxes or no boxes.
  The number of fragments skipped does not correspond to the number of
  boxes. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered box list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2344359'>Geospatial XML Element Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Create a 15 degree latitude by 30 degree longitude grid over the
   Eastern part of the Northern hemisphere, figure out how many points in
   the element "point" are in each grid section, and return a box for each
   grid section, whether it has points in it or not. The box will have the
   actual min/max latitudes and longitudes of points in that grid section as
   its bounds. Order the boxes in increasing order of latitude and longitude,
   and return the frequency of points in the box and the box itself.
 :)
for $box in
  cts:element-geospatial-boxes(xs:QName("point"),
    (15, 30, 45, 60, 75), (0, 30, 60, 90, 120),
    ("ascending", "empties"))
return (cts:frequency($box), $box)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Create a 15 degree latitude by 30 degree longitude grid over the
//   Eastern part of the Northern hemisphere, figure out how many points in
//   the element "point" are in each grid section, and return a box for each
//   grid section, whether it has points in it or not. The box will have the
//   actual min/max latitudes and longitudes of points in that grid section as
//   its bounds. Order the boxes in increasing order of latitude and longitude,
//   and return the frequency of points in the box and the box itself.

const obj = new Object();
for (const box of
  cts.elementGeospatialBoxes(xs.QName("point"),
    [15, 30, 45, 60, 75], [0, 30, 60, 90, 120],
    ["ascending", "empties"])) {
  obj[box] = cts.frequency(box);
};
obj;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-boxes" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Returns boxes derived from the specified element point lexicon(s).
  Element point lexicons are implemented using geospatial indexes; consequently
  this function requires an element child geospatial index for each element
  specified in the function.  If there is not a geospatial index configured for
  each of the specified element/child combinations, an exception is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The points are divided into box-shaped buckets. The $latitude-bounds and
  $longitude-bounds parameters specify the number and the size of each
  box-shaped bucket. All included points are bucketed, even those outside
  the bounds.  An empty sequence for both $latitude-bounds and
  $longitude-bounds specifies one bucket, a single value for both specifies
  four buckets, two values for both specify nine buckets, and so on.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For each non-empty bucket, a 
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  value is returned.
  By default, the box value is the minimum bounding box
  of all the points in the bucket.  If the "gridded" option is specified,
  then if a bucket is bounded on a side, its corresponding
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  side is the bound.
  Empty buckets return nothing unless the "empties" option is specified.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parent-element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="child-element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-bounds" type="xs:double*" optional="true">
    A sequence of latitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="longitude-bounds" type="xs:double*" optional="true">
    A sequence of longitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Boxes should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Boxes should be returned in descending order.</dd>
        <dt>"gridded"</dt>
        <dd>For each side that a bucket is bounded, return the corresponding
        bound as the edge of the box, instead of the extremum from the
        points in the bucket.</dd>
        <dt>"empties"</dt>
        <dd>Include fully-bounded ranges whose frequency is 0.   Only
        empty ranges that have
        both their upper and lower bounds specified in the $bounds
        options are returned;
        any empty ranges that are less than the first bound or greater than the
        last bound are not returned.  For example, if you specify 4 bounds
        and there are no results for any of the bounds, 3 elements are
        returned (not 5 elements).</dd>
        <dt>"any"</dt>
        <dd>Points from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Points from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Points from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Points from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Boxes should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Boxes should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included point.
        This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included point.
        This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
         "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> boxes. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Points from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only boxes for buckets with at least one point from
        the first <em>N</em> fragments after skip selected by the
        <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only points from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:box* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include points in fragments selected by this query,
    and compute frequencies from this set of included points.
    The points do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "empties"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all boxes with included points may be returned. If a <code>$query</code>
  parameter is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then points from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple boxes or no boxes.
  The number of fragments skipped does not correspond to the number of
  boxes. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered box list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Create a 15 degree latitude by 30 degree longitude grid over the
   Eastern part of the Northern hemisphere, figure out how many points in
   the element "point" as a child of the element "location" are in each grid
   section, and return a box for each grid section, whether it has points in
   it or not. The box will have the actual min/max latitudes and longitudes
   of points in that grid section as its bounds. Order the boxes in increasing
   order of latitude and longitude, and return the frequency of points in
   the box and the box itself.
 :)
for $box in
  cts:element-child-geospatial-boxes(xs:QName("location"), xs:QName("point")
    (15, 30, 45, 60, 75), (0, 30, 60, 90, 120),
    ("ascending", "empties"))
return (cts:frequency($box), $box)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Create a 15 degree latitude by 30 degree longitude grid over the
//   Eastern part of the Northern hemisphere, figure out how many points in
//   the element "point" as a child of the element "location" are in each grid
//   section, and return a box for each grid section, whether it has points in
//   it or not. The box will have the actual min/max latitudes and longitudes
//   of points in that grid section as its bounds. Order the boxes in increasing
//   order of latitude and longitude, and return the frequency of points in
//   the box and the box itself.

const obj = new Object();
for (const box of
  cts.elementChildGeospatialBoxes(xs.QName("location"), xs.QName("point"),
    [15, 30, 45, 60, 75], [0, 30, 60, 90, 120],
    ["ascending", "empties"])) {
  obj[box] = cts.frequency(box);
};
obj;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-boxes" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Returns boxes derived from the specified element point lexicon(s).
  Element point lexicons are implemented using geospatial indexes; consequently
  this function requires a geospatial element pair index for each
  parent and pair of child elements
  specified in the function.  If there is not a geospatial index configured for
  each of the specified combinations, an exception is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The points are divided into box-shaped buckets. The $latitude-bounds and
  $longitude-bounds parameters specify the number and the size of each
  box-shaped bucket. All included points are bucketed, even those outside
  the bounds.  An empty sequence for both $latitude-bounds and
  $longitude-bounds specifies one bucket, a single value for both specifies
  four buckets, two values for both specify nine buckets, and so on.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For each non-empty bucket, a 
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  value is returned.
  By default, the box value is the minimum bounding box
  of all the points in the bucket.  If the "gridded" option is specified,
  then if a bucket is bounded on a side, its corresponding
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  side is the bound.
  Empty buckets return nothing unless the "empties" option is specified.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parent-element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="longitude-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-bounds" type="xs:double*" optional="true">
    A sequence of latitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="longitude-bounds" type="xs:double*" optional="true">
    A sequence of longitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Boxes should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Boxes should be returned in descending order.</dd>
        <dt>"gridded"</dt>
        <dd>For each side that a bucket is bounded, return the corresponding
        bound as the edge of the box, instead of the extremum from the
        points in the bucket.</dd>
        <dt>"empties"</dt>
        <dd>Include fully-bounded ranges whose frequency is 0. Only
        empty ranges that have
        both their upper and lower bounds specified in the $bounds
        options are returned;
        any empty ranges that are less than the first bound or greater than the
        last bound are not returned.  For example, if you specify 4 bounds
        and there are no results for any of the bounds, 3 elements are
        returned (not 5 elements).</dd>
        <dt>"any"</dt>
        <dd>Points from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Points from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Points from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Points from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Boxes should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Boxes should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included point. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included point. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
         "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> boxes. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Points from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only boxes for buckets with at least one point from
        the first <em>N</em> fragments after skip selected by the
        <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only points from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:box* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include points in fragments selected by this query,
    and compute frequencies from this set of included points.
    The points do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "empties"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all boxes with included points may be returned. If a <code>$query</code>
  parameter is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then points from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple boxes or no boxes.
  The number of fragments skipped does not correspond to the number of
  boxes. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered box list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Create a 15 degree latitude by 30 degree longitude grid over the
   Eastern part of the Northern hemisphere, figure out how many points are
   in each grid section, and return a box for each grid section, whether it
   has points in it or not. The box will have the actual min/max latitudes
   and longitudes of points in that grid section as its bounds. Order the boxes
   in increasing order of latitude and longitude, and return the frequency
   of points in the box and the box itself.

   The points will be those in the element "point" where the latitude value is
   in the child "lat" and the longitude value is in the child "long".
 :)
for $box in
  cts:element-pair-geospatial-boxes(
    xs:QName("point"), xs:QName("lat"), xs:QName("long"),
    (15, 30, 45, 60, 75), (0, 30, 60, 90, 120),
    ("ascending", "empties"))
return (cts:frequency($box), $box)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Create a 15 degree latitude by 30 degree longitude grid over the
//   Eastern part of the Northern hemisphere, figure out how many points are
//   in each grid section, and return a box for each grid section, whether it
//   has points in it or not. The box will have the actual min/max latitudes
//   and longitudes of points in that grid section as its bounds. Order the
//   boxes in increasing order of latitude and longitude, and return the
//   frequency of points in the box and the box itself.

//   The points will be those in the element "point" where the latitude value is
//   in the child "lat" and the longitude value is in the child "long".

const obj = new Object();
for (const box of cts.elementPairGeospatialBoxes(xs,QName("point"),
            xs.QName("lat"), xs.QName("long"),
    [15, 30, 45, 60, 75], [0, 30, 60, 90, 120],
    ["ascending", "empties"])) {
  obj[box] = cts.frequency(box);
};
obj;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-boxes" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Returns boxes derived from the specified element point lexicon(s).
  Element point lexicons are implemented using geospatial indexes; consequently
  this function requires a geospatial element attribute pair index for each
  prarent element and attribute pair
  specified in the function.  If there is not a geospatial index configured for
  each of the specified combinations, an exception is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The points are divided into box-shaped buckets. The $latitude-bounds and
  $longitude-bounds parameters specify the number and the size of each
  box-shaped bucket. All included points are bucketed, even those outside
  the bounds.  An empty sequence for both $latitude-bounds and
  $longitude-bounds specifies one bucket, a single value for both specifies
  four buckets, two values for both specify nine buckets, and so on.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For each non-empty bucket, a 
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code> 
  value is returned. By default, the 
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code> 
  value is the minimum bounding box of all the points in the bucket. If 
  the "gridded" option is specified, then if a bucket is bounded on a side, 
  its corresponding
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code> 
  side is the bound. Empty buckets return nothing unless the "empties" option 
  is specified.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parent-element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="longitude-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-bounds" type="xs:double*" optional="true">
    A sequence of latitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="longitude-bounds" type="xs:double*" optional="true">
    A sequence of longitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Boxes should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Boxes should be returned in descending order.</dd>
        <dt>"gridded"</dt>
        <dd>For each side that a bucket is bounded, return the corresponding
        bound as the edge of the box, instead of the extremum from the
        points in the bucket.</dd>
        <dt>"empties"</dt>
        <dd>Include fully-bounded ranges whose frequency is 0.  Only
        empty ranges that have
        both their upper and lower bounds specified in the $bounds
        options are returned;
        any empty ranges that are less than the first bound or greater than the
        last bound are not returned.  For example, if you specify 4 bounds
        and there are no results for any of the bounds, 3 elements are
        returned (not 5 elements).</dd>
        <dt>"any"</dt>
        <dd>Points from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Points from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Points from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Points from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Boxes should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Boxes should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included point. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included point. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
         "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> boxes. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Points from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only boxes for buckets with at least one point from
        the first <em>N</em> fragments after skip selected by the
        <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only points from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:box* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include points in fragments selected by this query,
    and compute frequencies from this set of included points.
    The points do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "empties"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all boxes with included points may be returned. If a <code>$query</code>
  parameter is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then points from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple boxes or no boxes.
  The number of fragments skipped does not correspond to the number of
  boxes. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered box list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Create a 15 degree latitude by 30 degree longitude grid over the
   Eastern part of the Northern hemisphere, figure out how many points are
   in each grid section, and return a box for each grid section, whether it
   has points in it or not. The box will have the actual min/max latitudes
   and longitudes of points in that grid section as its bounds. Order the boxes
   in increasing order of latitude and longitude, and return the frequency
   of points in the box and the box itself.

   The points will be those in the element "point" where the latitude value is
   in the attribute "lat" and the longitude value is in the attribute "long".
 :)
for $box in
  cts:element-attribute-pair-geospatial-boxes(
    xs:QName("point"), xs:QName("lat"), xs:QName("long"),
    (15, 30, 45, 60, 75), (0, 30, 60, 90, 120),
    ("ascending", "empties"))
return (cts:frequency($box), $box)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Create a 15 degree latitude by 30 degree longitude grid over the
//   Eastern part of the Northern hemisphere, figure out how many points are
//   in each grid section, and return a box for each grid section, whether it
//   has points in it or not. The box will have the actual min/max latitudes
//   and longitudes of points in that grid section as its bounds. Order the
//   boxes in increasing order of latitude and longitude, and return the
//   frequency of points in the box and the box itself.

//   The points will be those in the element "point" where the latitude value is
//   in the attribute "lat" and the longitude value is in the attribute "long".

const obj = new Object();
for (const box of cts.elementAttributePairGeospatialBoxes(
    xs.QName("point"), xs.QName("lat"), xs.QName("long"),
    [15, 30, 45, 60, 75], [0, 30, 60, 90, 120],
    ["ascending", "empties")) {
  obj[box] = cts.frequency(box);
};
obj;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-boxes" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  <p xmlns="http://www.w3.org/1999/xhtml">Returns boxes derived from the specified point lexicon(s).
  Point lexicons are implemented using geospatial indexes; consequently
  this function requires a geospatial index for each $geo-indexes
  specified in the function. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The points are divided into box-shaped buckets. The $latitude-bounds and
  $longitude-bounds parameters specify the number and the size of each
  box-shaped bucket. All included points are bucketed, even those outside
  the bounds.  An empty sequence for both $latitude-bounds and
  $longitude-bounds specifies one bucket, a single value for both specifies
  four buckets, two values for both specify nine buckets, and so on.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For each non-empty bucket, a
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  is returned.
  By default, the box value is the minimum bounding box
  of all the points in the bucket.  If the "gridded" option is specified,
  then if a bucket is bounded on a side, its corresponding
  <code><span class="xquery">cts:box</span><span class="javascript">cts.box</span></code>
  side is the bound.
  Empty buckets return nothing unless the "empties" option is specified.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="geo-indexes" type="cts:reference*">
    A sequence of references to geospatial indexes.
  </apidoc:param>
      <apidoc:param name="latitude-bounds" type="xs:double*" optional="true">
    A sequence of latitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="longitude-bounds" type="xs:double*" optional="true">
    A sequence of longitude bounds.
    The values must be in strictly ascending order, otherwise an exception
    is thrown.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Boxes should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Boxes should be returned in descending order.</dd>
        <dt>"gridded"</dt>
        <dd>For each side that a bucket is bounded, return the corresponding
        bound as the edge of the box, instead of the extremum from the
        points in the bucket.</dd>
        <dt>"empties"</dt>
        <dd>Include fully-bounded ranges whose frequency is 0.  Only
        empty ranges that have
        both their upper and lower bounds specified in the $bounds
        options are returned;
        any empty ranges that are less than the first bound or greater than the
        last bound are not returned.  For example, if you specify 4 bounds
        and there are no results for any of the bounds, 3 elements are
        returned (not 5 elements).</dd>
        <dt>"any"</dt>
        <dd>Points from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Points from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Points from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Points from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Boxes should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Boxes should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included point. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included point. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
         "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> boxes. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Points from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only boxes for buckets with at least one point from
        the first <em>N</em> fragments after skip selected by the
        <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only points from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:box* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include points in fragments selected by this query,
    and compute frequencies from this set of included points.
    The points do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "empties"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all boxes with included points may be returned. If a <code>$query</code>
  parameter is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then points from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple boxes or no boxes.
  The number of fragments skipped does not correspond to the number of
  boxes. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered box list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2330671'>Understanding Geospatial Query and Index Types</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Create a 15 degree latitude by 30 degree longitude grid over the
   Eastern part of the Northern hemisphere, figure out how many points in
   the element "point" are in each grid section, and return a box for each
   grid section, whether it has points in it or not. The box will have the
   actual min/max latitudes and longitudes of points in that grid section as
   its bounds. Order the boxes in increasing order of latitude and longitude,
   and return the frequency of points in the box and the box itself.
 :)
for $box in
  cts:geospatial-boxes(cts:element-reference(xs:QName("point")),
    (15, 30, 45, 60, 75), (0, 30, 60, 90, 120),
    ("ascending", "empties"))
return (cts:frequency($box), $box)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Create a 15 degree latitude by 30 degree longitude grid over the
//   Eastern part of the Northern hemisphere, figure out how many points in
//   the element "point" are in each grid section, and return a box for each
//   grid section, whether it has points in it or not. The box will have the
//   actual min/max latitudes and longitudes of points in that grid section as
//   its bounds. Order the boxes in increasing order of latitude and longitude,
//   and return the frequency of points in the box and the box itself.

const obj = new Object();
for (const box of cts.geospatialBoxes(cts.elementReference(xs.QName("point")),
    [15, 30, 45, 60, 75], [0, 30, 60, 90, 120],
    ["ascending", "empties"])) {
  obj[box] = cts.frequency(box);
};
obj;

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-values" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Returns values from the specified element geospatial value lexicon(s).
  Geospatial value lexicons are implemented using geospatial indexes;
  consequently this function requires an element geospatial index for each
  element specified
  in the function.  If there is not a geospatial index configured for each
  of the specified elements, an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="start" type="cts:point?" optional="true">
    A starting value.
    If the parameter value is not in the lexicon, then the values are
    returned beginning with the next value.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2330671'>Understanding Geospatial Query and Index Types</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  cts:element-geospatial-values(xs:QName("point"),cts:point(0,0))

  =&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  cts.elementGeospatialValues(xs.QName("point"), cts.point(0,0));

  =&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-values" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Returns values from the specified element-child geospatial value lexicon(s).
  Element-child geospatial value lexicons are implemented using geospatial
  indexes;
  consequently this function requires an element-child geospatial index
  of for each of the element/child pairs specified in the function.
  If there is not a range index configured for each of the specified
  element/child pairs, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="child-names" type="xs:QName*">
    One or more child element QNames.
  </apidoc:param>
      <apidoc:param name="start" type="cts:point?" optional="true">
    A starting value.
    If the parameter value is not in the lexicon, then the values are
    returned beginning with the next value.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em> fragments after
        skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">When multiple element and/or child QNames are specified,
  then all possible element/child QName combinations are used
  to select the matching values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:element-child-geospatial-values(
     xs:QName("location"), xs:QName("position"), cts:point(0,0) )

=&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementChildGeospatialValues(
     xs.QName("location"), xs.QName("position"), cts.point(0,0) );

=&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-values" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Returns values from the specified element-pair geospatial value lexicon(s).
  Element-pair geospatial value lexicons are implemented using geospatial
  indexes;
  consequently this function requires an element-pair geospatial index
  for each of the element combinations specified in the function.
  If there is not a geospatial index configured for each of the specified
  combinations, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames identifying the parent element of the
    latitude and longitude elements.
  </apidoc:param>
      <apidoc:param name="latitude-names" type="xs:QName*">
    One or more latitude element QNames.
  </apidoc:param>
      <apidoc:param name="longitude-names" type="xs:QName*">
    One or more longitude element QNames.
  </apidoc:param>
      <apidoc:param name="start" type="cts:point?" optional="true">
    A starting value.
    If the parameter value is not in the lexicon, then the values are
    returned beginning with the next value.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em> fragments after
        skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">When multiple element and/or child QNames are specified,
  then all possible element/child QName combinations are used
  to select the matching values. If an index does not exist for any
  parent-lat-lon element combination, an exception is thrown. For finer
  control over the expected index configuration, use
  <a class="xquery" href="#cts:values">cts:values</a><a class="javascript" href="#cts.values">cts.values</a>.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:element-pair-geospatial-values( xs:QName("point"),
     xs:QName("lat"), xs:QName("lon"), cts:point(0,0) )

=&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementPairGeospatialValues( xs.QName("point"),
     xs.QName("lat"), xs.QName("lon"), cts.point(0,0) );

=&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-values" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Returns values from the specified element-attribute-pair geospatial value lexicon(s).
  element-attribute-pair geospatial value lexicons are implemented using geospatial
  indexes;
  consequently this function requires an element-attribute-pair geospatial index
  for each of the combinations specified in the function.
  If there is not a geospatial index configured for each of the specified
  combinations, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-names" type="xs:QName*">
    One or more latitude element QNames.
  </apidoc:param>
      <apidoc:param name="longitude-names" type="xs:QName*">
    One or more longitude element QNames.
  </apidoc:param>
      <apidoc:param name="start" type="cts:point?" optional="true">
    A starting value.
    If the parameter value is not in the lexicon, then the values are
    returned beginning with the next value.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em> fragments after
        skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">When multiple element and/or child QNames are specified,
  then all possible element/child QName combinations are used
  to select the matching values. For finer control over the indexes, use
  <a class="xquery" href="#cts:values">cts:values</a><a class="javascript" href="#cts.values">cts.values</a>.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:element-attribute-pair-geospatial-values(
     xs:QName("location"), xs:QName("lat"),
     xs:QName("long"), cts:point(0,0) )

=&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementAttributePairGeospatialValues(
     xs.QName("location"), xs.QName("lat"),
     xs.QName("long"), cts.point(0,0) );

=&gt; (cts:point(0,0),cts:point(0,10),cts:point(0,20),...)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-geospatial-value-match" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
   Returns values from the specified element geospatial value lexicon(s)
   that match the specified wildcard pattern.  Element geospatial value lexicons
   are implemented using geospatial indexes; consequently this function
   requires an element geospatial index for each element specified in the
   function.  If there is not a geospatial index configured for each of the
   specified elements, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="pattern" type="xs:anyAtomicType">
    A pattern to match.  The parameter type must match the lexicon type.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2330671'>Understanding Geospatial Query and Index Types</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:element-geospatial-value-match(xs:QName("point"),cts:point(10,20))

=&gt; 10,20
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementGeospatialValueMatch(xs.QName("point"), cts.point(10,20));

=&gt; 10,20
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-child-geospatial-value-match" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
   Returns values from the specified element child geospatial value lexicon(s)
   that match the specified wildcard pattern.  Element
   child geospatial value lexicons
   are implemented using geospatial indexes; consequently this function
   requires an element child geospatial index for each element and child
   specified in the
   function.  If there is not a geospatial index configured for each of the
   specified elements/child combinations, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames identifying the parent element(s).
  </apidoc:param>
      <apidoc:param name="child-names" type="xs:QName*">
    One or more child element QNames.
  </apidoc:param>
      <apidoc:param name="pattern" type="xs:anyAtomicType">
    A pattern to match.  The parameter type must match the lexicon type.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"type=long-lat-point"</dt>
        <dd>Specifies the format for the point in the data as longitude first,
        latitude second.</dd>
        <dt>"type=point"</dt>
        <dd>Specifies the format for the point in the data as latitude first,
        longitude second.  This is the default format.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For finer control over the lexicon selection, use
  <a class="xquery" href="#cts:value-match">cts:value-match</a><a class="javascript" href="#cts.value-match">cts.value-match</a>.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:element-child-geospatial-value-match(
     xs:QName("location"),xs:QName("pos"),cts:point(10,20))

=&gt; 10,20
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementChildGeospatialValueMatch(
     xs.QName("location"), xs.QName("pos"), cts.point(10,20));

=&gt; 10,20
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-pair-geospatial-value-match" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
   Returns values from the specified element pair geospatial value lexicon(s)
   that match the specified wildcard pattern.  Element pair
   geospatial value lexicons
   are implemented using geospatial indexes; consequently this function
   requires an element pair geospatial index for each combination of elements
   specified in the
   function.  If there is not a geospatial index configured for each of the
   specified combinations, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-names" type="xs:QName*">
    One or more latitude element QNames.
  </apidoc:param>
      <apidoc:param name="longitude-names" type="xs:QName*">
    One or more longitude element QNames.
  </apidoc:param>
      <apidoc:param name="pattern" type="xs:anyAtomicType">
    A pattern to match.  The parameter type must match the lexicon type.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For finer control over the lexicons election, use
  <a class="xquery" href="#cts:value-match">cts:value-match</a><a class="javascript" href="#cts.value-match">cts.value-match</a>.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  cts:element-pair-geospatial-value-match(
     xs:QName("location"),xs:QName("lat"),xs:QName("long"),cts:point(10,20))
  =&gt; 10,20
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementPairGeospatialValueMatch(
     xs.QName("location"), xs.QName("lat"),
     xs.QName("long"), cts.point(10,20));

=&gt; 10,20
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-pair-geospatial-value-match" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
   Returns values from the specified element attribute pair geospatial value
   lexicon(s)
   that match the specified wildcard pattern.  Element attribute pair
   geospatial value lexicons
   are implemented using geospatial indexes; consequently this function
   requires an element attribute pair geospatial index for each combination
   of elements and attributes specified in the
   function.  If there is not a geospatial index configured for each of the
   specified combinations, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-names" type="xs:QName*">
    One or more element QNames.
  </apidoc:param>
      <apidoc:param name="latitude-names" type="xs:QName*">
    One or more latitude element QNames.
  </apidoc:param>
      <apidoc:param name="longitude-names" type="xs:QName*">
    One or more longitude element QNames.
  </apidoc:param>
      <apidoc:param name="pattern" type="xs:anyAtomicType">
    A pattern to match.  The parameter type must match the lexicon type.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"ascending"</dt>
        <dd>Values should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Values should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Values from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Values from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Values from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Values from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Values should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Values should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included value.
        This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included value. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the lexicon with the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> values. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Values from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only values from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only values from the first <em>N</em> fragments
        after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a cts:point* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include values in fragments selected by this query,
    and compute frequencies from this set of included values.
    The values do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point*</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "lazy" if "item-order" is
  specified, and "eager" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included values may be returned. If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then values from all fragments selected by the <code>$query</code> parameter
  are included.  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For finer control over the lexicon selection, use
  <a class="xquery" href="#cts:value-match">cts:value-match</a><a class="javascript" href="#cts.value-match">cts.value-match</a>.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:element-attribute-pair-geospatial-value-match(
     xs:QName("location"),xs:QName("lat"),xs:QName("long"),cts:point(10,20))

=&gt; 10,20
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.elementAttributePairGeospatialValueMatch(
     xs.QName("location"), xs.QName("lat"),
     xs.QName("long"), cts.point(10,20));

=&gt; 10,20
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-value-geospatial-co-occurrences" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Returns value co-occurrences from the specified element
  value lexicon with the specified geospatial lexicon.
  Value lexicons are implemented using range indexes;
  consequently this function requires a range index for the element
  specified in the function.
  If there is not a range index configured for the specified
  element, then an exception is thrown.
  Geospatial lexicons are implemented using geospatial indexes;
  consequently this function requires a geospatial index for the
  element/attribute combination specified in the function.
  If there is not a geospatial index configured for the specified
  element/attribute combination, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-name-1" type="xs:QName">
    A QName identifying the first lexicon. If this is a geospatial lexicon,
    it can only be an element geospatial lexicon. You should usually use
    <a href="#cts:geospatial-co-occurrences" class="xquery" xmlns="http://www.w3.org/1999/xhtml">cts:geospatial-co-occurrences</a><a href="#cts.geospatialCoOccurrences" class="javascript" xmlns="http://www.w3.org/1999/xhtml">cts.geospatialCoOccurrences</a>
    to find co-occurrences between two geospatial lexicons.
  </apidoc:param>
      <apidoc:param name="geo-element-name" type="xs:QName">
    A QName identifying the second lexicon. This must reference a geospatial
    lexicon. If it is an element child or JSON property child geospatial
    lexicon, pass the child QName in the <code xmlns="http://www.w3.org/1999/xhtml">coord-child-name-1</code>
    parameter. For an element, element attribute, or JSON property child pair
    geospatial lexicon, pass the child QNames in
    <code xmlns="http://www.w3.org/1999/xhtml">coord-child-name-1</code> and <code xmlns="http://www.w3.org/1999/xhtml">coord-child-name-2</code>.
  </apidoc:param>
      <apidoc:param name="coord-child-name-1" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name</code> that holds either the lat and
    longitude coordinates (element child geospatial lexicon) or the
    latitude coordinate (element/attribute/JSON property child pair geospatial
    lexicon). Use an empty sequence if <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name</code>
    identifies an element or JSON property geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="coord-child-name-2" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name</code> that holds the
    longitude coordinate when working with an element/attribute/JSON property
    child pair geospatial lexicon. Use empty sequence for an
    element or JSON property geospatial lexicon or element or JSON property
    child geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options. The default is (). The following options are available:
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"geospatial-format=<em>format</em>"</dt>
        <dd>Use the kind of geospatial lexicon specified by <em>format</em>
        (element, element-child, element-pair, or element-attribute-pair).
        If neither of the child QNames is specified, the default is
        "element"; if only the first of the child QNames is specified,
        the default is "element-child:; if both child QNames are specified,
        the default is "element-pair".  If the selection is not compatible
        with the number of geospatial QNames specified, an error is raised.
        </dd>
        <dt>"ascending"</dt>
        <dd>Co-occurrences should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Co-occurrences should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Co-occurrences from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Co-occurrences from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Co-occurrences from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Co-occurrences from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Co-occurrences should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Co-occurrences should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included co-occurrences. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included co-occurrence. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"type=<em>type</em>"</dt>
        <dd>For the non-geospatial lexicon, use the type specified by
        <em>type</em> (int, unsignedInt, long, unsignedLong, float, double,
        decimal, dateTime, time, date, gYearMonth, gYear, gMonth, gDay,
        yearMonthDuration, dayTimeDuration, string, or anyURI)</dd>
        <dt>"type-2=<em>type</em>"</dt>
        <dd>For the geospatial lexicon, use the type specified by
        <em>type-2</em> (point or long-lat-point)</dd>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>For the non-geospatial lexicon, use the collation specified by
        <em>URI</em>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"timezone=<em>TZ</em>"</dt>
        <dd>Return timezone sensitive values (dateTime, time, date,
        gYearMonth, gYear, gMonth, and gDay) adjusted to the timezone
        specified by <em>TZ</em>.
        Example timezones: Z, -08:00, +01:00.</dd>
        <dt>"ordered"</dt>
        <dd>Include co-occurrences only when the value from the first lexicon
        appears before the value from the second lexicon.
        Requires that word positions be enabled for both lexicons.</dd>
        <dt>"reversed"</dt>
        <dd>Consider the second lexicon as the first and vice versa.</dd>
        <dt>"proximity=<em>N</em>"</dt>
        <dd>Include co-occurrences only when the values appear within
        <em>N</em> words of each other.
        Requires that word positions be enabled for both lexicons.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> co-occurrences. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Co-occurrences from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only co-occurrences from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only co-occurrences from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a element(cts:co-occurrence)* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include co-occurrences in fragments selected by this query,
    and compute frequencies from this set of included co-occurrences.
    The co-occurrences do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(cts:co-occurrence)*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "map"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "collation=<em>URI</em>" is not specified in the options parameter,
  then the default collation is used. If a lexicon with that collation
  does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included co-occurrences may be returned.
  If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then co-occurrences from all fragments selected by the
  <code>$query</code> parameter are included.
  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2330671'>Understanding Geospatial Query and Index Types</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Get the co-occurrences of the "person" element with points encoded as
   "point" children of "location" elements. Return the co-occurrences as
   a sequence of XML nodes with frequencies.
:)
declare namespace geoex = "http://example.com/ns/geo";

cts:element-value-geospatial-co-occurrences(
     xs:QName("geoex:person"),
     xs:QName("geoex:location"),
     xs:QName("geoex:point"),
     (),
     ("collation=http://marklogic.com/collation/codepoint"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

//   Get the co-occurrences of the "person" element with points encoded as
//   "point" children of "location" elements. Return the co-occurrences as
//   a sequence of XML nodes with frequencies.

cts.elementValueGeospatialCoOccurrences(
     fn.QName("http://example.com/ns/geo", "person"),
     fn.QName("http://example.com/ns/geo", "location"),
     fn.QName("http://example.com/ns/geo", "point"),
     null,
     ["collation=http://marklogic.com/collation/codepoint"]);
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Get the co-occurrences of the "person" element with points encoded as
   "lat" and "long" children of "location" elements. Return the co-occurrences
   as a sequence of XML nodes with frequencies.
:)
declare namespace geoex = "http://example.com/ns/geo";

cts:element-value-geospatial-co-occurrences(
     xs:QName("geoex:person"),
     xs:QName("geoex:location"),
     xs:QName("geoex:lat"),
     xs:QName("geoex:long"),
     ("collation=http://marklogic.com/collation/codepoint"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Get the co-occurrences of the "person" element with points encoded as
//   "lat" and "long" children of "location" elements. Return the
//   co-occurrences as an ArrayNode with frequencies.

cts.elementValueGeospatialCoOccurrences(
     fn.QName("http://example.com/ns/geo", "person"),
     fn.QName("http://example.com/ns/geo", "location"),
     fn.QName("http://example.com/ns/geo", "lat"),
     fn.QName("http://example.com/ns/geo", "long"),
     ["collation=http://marklogic.com/collation/codepoint"]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="element-attribute-value-geospatial-co-occurrences" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Returns value co-occurrences from the specified element-attribute
  value lexicon with the specified geospatial lexicon.
  Value lexicons are implemented using range indexes;
  consequently this function requires a range index for the element and attribute
  pair specified in the function.
  If there is not a range index configured for the specified
  element and attribute pair, then an exception is thrown.
  Geospatial lexicons are implemented using geospatial indexes;
  consequently this function requires a geospatial index for the
  element/attribute combination specified in the function.
  If there is not a geospatial index configured for the specified
  element/attribute combination, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element-name-1" type="xs:QName">
    A QName identifying the parent element of the first lexicon.
  </apidoc:param>
      <apidoc:param name="attribute-name-1" type="xs:QName?">
    A QName identifying an attribute of <code xmlns="http://www.w3.org/1999/xhtml">element-name-1</code>.
  </apidoc:param>
      <apidoc:param name="geo-element-name" type="xs:QName">
    A QName identifying the second lexicon, which must reference a geospatial
    lexicon. If it is an element child or JSON property child geospatial
    lexicon, pass the child QName in the <code xmlns="http://www.w3.org/1999/xhtml">coord-child-name-1</code>
    parameter. For an element, element attribute, or JSON property child pair
    geospatial lexicon, pass the child QNames in
    <code xmlns="http://www.w3.org/1999/xhtml">coord-child-name-1</code> and <code xmlns="http://www.w3.org/1999/xhtml">coord-child-name-2</code>.
  </apidoc:param>
      <apidoc:param name="coord-child-name-1" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name</code> that holds either the lat and
    longitude coordinates (element child geospatial lexicon) or the
    latitude coordinate (element/attribute/JSON property child pair geospatial
    lexicon). Use an empty sequence if <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name</code>
    identifies an element or JSON property geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="coord-child-name-2" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name</code> that holds the
    longitude coordinate when working with an element/attribute/JSON property
    child pair geospatial lexicon. Use empty sequence for an
    element or JSON property geospatial lexicon or element or JSON property
    child geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options. The default is (). The following options are available:
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"geospatial-format=<em>format</em>"</dt>
        <dd>Use the kind of geospatial lexicon specified by <em>format</em>
        (element, element-child, element-pair, or element-attribute-pair).
        If neither of the child QNames is specified, the default is
        "element"; if only the first of the child QNames is specified,
        the default is "element-child:; if both child QNames are specified,
        the default is "element-pair".  If the selection is not compatible
        with the number of geospatial QNames specified, an error is raised.
        </dd>
        <dt>"ascending"</dt>
        <dd>Co-occurrences should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Co-occurrences should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Co-occurrences from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Co-occurrences from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Co-occurrences from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Co-occurrences from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Co-occurrences should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Co-occurrences should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included co-occurrences. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included co-occurrence. This option is used with
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"type=<em>type</em>"</dt>
        <dd>For the non-geospatial lexicon, use the type specified by
        <em>type</em> (int, unsignedInt, long, unsignedLong, float, double,
        decimal, dateTime, time, date, gYearMonth, gYear, gMonth, gDay,
        yearMonthDuration, dayTimeDuration, string, or anyURI)</dd>
        <dt>"collation=<em>URI</em>"</dt>
        <dd>For the non-geospatial lexicon, use the collation specified by
        <em>URI</em>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>For the geospatial lexicons, use the coordinate system specified
        by <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"timezone=<em>TZ</em>"</dt>
        <dd>Return timezone sensitive values (dateTime, time, date,
        gYearMonth, gYear, gMonth, and gDay) adjusted to the timezone
        specified by <em>TZ</em>.
        Example timezones: Z, -08:00, +01:00.</dd>
        <dt>"ordered"</dt>
        <dd>Include co-occurrences only when the value from the first lexicon
        appears before the value from the second lexicon.
        Requires that word positions be enabled for both lexicons.</dd>
        <dt>"reversed"</dt>
        <dd>Consider the second lexicon as the first and vice versa.</dd>
        <dt>"proximity=<em>N</em>"</dt>
        <dd>Include co-occurrences only when the values appear within
        <em>N</em> words of each other.
        Requires that word positions be enabled for both lexicons.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> co-occurrences. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Co-occurrences from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only co-occurrences from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only co-occurrences from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a element(cts:co-occurrence)* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include co-occurrences in fragments selected by this query,
    and compute frequencies from this set of included co-occurrences.
    The co-occurrences do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(cts:co-occurrence)*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "map"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "collation=<em>URI</em>" is not specified in the options parameter,
  then the default collation is used. If a lexicon with that collation
  does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included co-occurrences may be returned.
  If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then co-occurrences from all fragments selected by the
  <code>$query</code> parameter are included.
  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2330671'>Understanding Geospatial Query and Index Types</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Get the co-occurrences of the "person" element with points encoded as
   "lat" and "long" attributes of "location" elements. Return the
   co-occurrences as a sequence of XML nodes with frequencies.
:)
declare namespace geoex = "http://example.com/ns/geo";

cts:element-attribute-value-geospatial-co-occurrences(
     xs:QName("geoex:person"),
     xs:QName("name"),
     xs:QName("geoex:location"),
     xs:QName("geoex:lat"),
     xs:QName("geoex:long"),
     ("collation=http://marklogic.com/collation/codepoint"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Get the co-occurrences of the "name" attribute on the "person" element
//   with points encoded as "lat" and "long" attributes of "location"
//   elements. Return the co-occurrences as an ArrayNode with frequencies.

cts.elementAttributeValueGeospatialCoOccurrences(
     fn.QName("http://example.com/ns/geo", "person"),
     xs.QName("name"),
     fn.QName("http://example.com/ns/geo", "location"),
     fn.QName("http://example.com/ns/geo", "lat"),
     fn.QName("http://example.com/ns/geo", "long"),
     ["collation=http://marklogic.com/collation/codepoint"]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-co-occurrences" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Find value co-occurrences from two geospatial lexicons.
  Geospatial lexicons are implemented using geospatial indexes;
  consequently this function requires a geospatial index for each
  combination of elements and attributes or JSON properties
  specified in the function.
  If there is not a geospatial index configured for the specified
  element/attribute combination, then an exception is thrown.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="geo-element-name-1" type="xs:QName">
    A QName identifying the first lexicon. This must reference a geospatial
    lexicon. If it is an element child or JSON property child geospatial
    lexicon, pass the child QName in the <code xmlns="http://www.w3.org/1999/xhtml">child-1-name-1</code>
    parameter. For an element, element attribute, or JSON property child pair
    geospatial lexicon, pass the child QNames in
    <code xmlns="http://www.w3.org/1999/xhtml">child-1-name-1</code> and <code xmlns="http://www.w3.org/1999/xhtml">child-1-name-2</code>.
  </apidoc:param>
      <apidoc:param name="child-1-name-1" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name-1</code> that holds either the lat and
    longitude coordinates (element child geospatial lexicon) or the
    latitude coordinate (element/attribute/JSON property child pair geospatial
    lexicon). Use an empty sequence if <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name-1</code>
    identifies an element or JSON property geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="child-1-name-2" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name-1</code> that holds the
    longitude coordinate when working with an element/attribute/JSON property
    child pair geospatial lexicon. Use empty sequence for an
    element or JSON property geospatial lexicon or element or JSON property
    child geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="geo-element-name-2" type="xs:QName">
    A QName identifying the first lexicon. This must reference a geospatial
    lexicon. If it is an element child or JSON property child geospatial
    lexicon, pass the child QName in the <code xmlns="http://www.w3.org/1999/xhtml">child-2-name-1</code>
    parameter. For an element, element attribute, or JSON property child pair
    geospatial lexicon, pass the child QNames in
    <code xmlns="http://www.w3.org/1999/xhtml">child-2-name-1</code> and <code xmlns="http://www.w3.org/1999/xhtml">child-2-name-2</code>.
  </apidoc:param>
      <apidoc:param name="child-2-name-1" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name-2</code> that holds either the lat and
    longitude coordinates (element child geospatial lexicon) or the
    latitude coordinate (element/attribute/JSON property child pair geospatial
    lexicon). Use an empty sequence if <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name-2</code>
    identifies an element or JSON property geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="child-2-name-2" type="xs:QName?" optional="true">
    An element, element attribute QName or JSON property name identifying
    the child of <code xmlns="http://www.w3.org/1999/xhtml">geo-element-name-2</code> that holds the
    longitude coordinate when working with an element/attribute/JSON property
    child pair geospatial lexicon. Use empty sequence for an
    element or JSON property geospatial lexicon or element or JSON property
    child geospatial lexicon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options. The default is (). The following options are available:
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"geospatial-format=<em>format</em>"</dt>
        <dd>For both geospatial lexicons, use the kind of geospatial lexicon
        specified by <em>format</em>
        (element, element-child, element-pair, or element-attribute-pair).
        If neither of the child QNames is specified, the default is
        "element"; if only the first of the child QNames is specified,
        the default is "element-child:; if both child QNames are specified,
        the default is "element-pair".  If the selection is not compatible
        with the number of geospatial QNames specified, an error is raised.
        </dd>
        <dt>"geospatial-format-1=<em>format</em>"</dt>
        <dd>For the first geospatial lexicon, use the kind of geospatial lexicon
        specified by <em>format</em>
        (element, element-child, element-pair, or element-attribute-pair).
        If neither of the child QNames is specified, the default is
        "element"; if only the first of the child QNames is specified,
        the default is "element-child:; if both child QNames are specified,
        the default is "element-pair".  If the selection is not compatible
        with the number of geospatial QNames specified, an error is raised.
        </dd>
        <dt>"geospatial-format-2=<em>format</em>"</dt>
        <dd>For the second geospatial lexicons, use the kind of geospatial
        lexicon specified by <em>format</em>
        (element, element-child, element-pair, or element-attribute-pair).
        If neither of the child QNames is specified, the default is
        "element"; if only the first of the child QNames is specified,
        the default is "element-child:; if both child QNames are specified,
        the default is "element-pair".  If the selection is not compatible
        with the number of geospatial QNames specified, an error is raised.
        </dd>
        <dt>"ascending"</dt>
        <dd>Co-occurrences should be returned in ascending order.</dd>
        <dt>"descending"</dt>
        <dd>Co-occurrences should be returned in descending order.</dd>
        <dt>"any"</dt>
        <dd>Co-occurrences from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Co-occurrences from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Co-occurrences from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Co-occurrences from locks fragments should be included.</dd>
        <dt>"frequency-order"</dt>
        <dd>Co-occurrences should be returned ordered by frequency.</dd>
        <dt>"item-order"</dt>
        <dd>Co-occurrences should be returned ordered by item.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with
        an included co-occurrences. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurences of
        an included co-occurrence. This option is used with 
        <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>For both geospatial lexicons, use the coordinate system specified by
        <em>name</em>. Allowed values: "wgs84", "wgs84/double", "etrs89",
        "etrs89/double", "raw", "raw/double".</dd>
        <dt>"coordinate-system-1=<em>string</em>"</dt>
        <dd>For the first geospatial lexicon, use the coordinate system
        specified by <em>name</em>.</dd>
        <dt>"coordinate-system-2=<em>string</em>"</dt>
        <dd>For the second geospatial lexicons, use the coordinate system
        specified by <em>name</em>.</dd>
        <dt>"ordered"</dt>
        <dd>Include co-occurrences only when the value from the first lexicon
        appears before the value from the second lexicon.
        Requires that word positions be enabled for both lexicons.</dd>
        <dt>"reversed"</dt>
        <dd>Consider the second lexicon as the first and vice versa.</dd>
        <dt>"proximity=<em>N</em>"</dt>
        <dd>Include co-occurrences only when the values appear within
        <em>N</em> words of each other.
        Requires that word positions be enabled for both lexicons.</dd>
        <dt>"limit=<em>N</em>"</dt>
        <dd>Return no more than <em>N</em> co-occurrences. You should not
        use this option with the "skip" option. Use "truncate" instead.</dd>
        <dt>"skip=<em>N</em>"</dt>
        <dd>Skip over fragments selected by the <code>query</code>
        to treat the <em>Nth</em> matching fragment as the first fragment.
        Co-occurrences from skipped fragments are not included.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"sample=<em>N</em>"</dt>
        <dd>Return only co-occurrences from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option does not affect the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"truncate=<em>N</em>"</dt>
        <dd>Include only co-occurrences from the first <em>N</em>
        fragments after skip selected by the <code>query</code>.
        This option affects the number of fragments selected
        by the <code>query</code> to calculate frequencies.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtfidf"</dt>
        <dd>Compute scores using the logtfidf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-logtf"</dt>
        <dd>Compute scores using the logtf method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-simple"</dt>
        <dd>Compute scores using the simple method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-random"</dt>
        <dd>Compute scores using the random method.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"score-zero"</dt>
        <dd>Compute all scores as zero.
        Only applies when a <code>$query</code> parameter is specified.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
        to check whether a document matches a query,
        return an XDMP-TOOMANYPOSITIONS error,
        instead of accepting the document as a match.</dd>
        <dt>"eager"</dt>
        <dd>Perform most of the work concurrently before returning
        the first item from the indexes, and only some of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a complete item-order
        result or for any frequency-order result.</dd>
        <dt>"lazy"</dt>
        <dd>Perform only some the work concurrently before returning
        the first item from the indexes, and most of the work
        sequentially while iterating through the rest of the items.
        This usually takes the shortest time for a small item-order
        partial result.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
        <dt>"map"</dt>
    <dd>Return results as <span class="xquery">a single map:map
    value instead of as a element(cts:co-occurrence)* sequence</span>
    <span class="javascript">a JavaScript Object instead of as
    a Sequence</span>.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
    Only include co-occurrences in fragments selected by this query,
    and compute frequencies from this set of included co-occurrences.
    The co-occurrences do not need to match the query, but they must occur in
    fragments selected by the query.
    The fragments are not filtered to ensure they match the query,
    but instead selected in the same manner as
    <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">
    "unfiltered" <code>cts:search</code></a> operations.
  </apidoc:param>
      <apidoc:param name="quality-weight" type="xs:double?" optional="true">
    A document quality weight to use when computing scores.
    The default is 1.0.
  </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    A sequence of IDs of forests to which the search will be constrained.
    An empty sequence means to search all forests in the database.
    The default is ().
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(cts:co-occurrence)*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "frequency-order" or "item-order" may be specified
  in the options parameter.  If neither "frequency-order" nor "item-order"
  is specified, then the default is "item-order".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
  in the options parameter.  If neither "fragment-frequency" nor
  "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "ascending" or "descending" may be specified
  in the options parameter.  If neither "ascending" nor "descending"
  is specified, then the default is "ascending" if "item-order" is
  specified, and "descending" if "frequency-order" is specified.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "eager" or "lazy" may be specified
  in the options parameter.  If neither "eager" nor "lazy"
  is specified, then the default is "eager" if "frequency-order" or "map"
  is specified, otherwise "lazy".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
  may be specified in the options parameter.
  If none of "any", "document", "properties", or "locks" are specified
  and there is a $query parameter, then the default is "document".
  If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "score-logtfidf", "score-logtf", "score-simple",
  "score-random", or "score-zero" options may be specified in the options
  parameter.
  If none of "score-logtfidf", "score-logtf", "score-simple", "score-random",
  or "score-zero" are specified, then the default is "score-logtfidf".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
  in the options parameter.
  If neither "checked" nor "unchecked" are specified,
  then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
  parameter, then the default coordinate system is used. If a lexicon with
  that coordinate system does not exist, an error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "sample=<em>N</em>" is not specfied in the options parameter,
  then all included co-occurrences may be returned.
  If a <code>$query</code> parameter
  is not present, then "sample=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "truncate=<em>N</em>" is not specfied in the options parameter,
  then co-occurrences from all fragments selected by the
  <code>$query</code> parameter are included.
  If a <code>$query</code> parameter is not present, then
  "truncate=<em>N</em>" has no effect.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">To incrementally fetch a subset of the values returned by this function,
  use <a class="xquery" href="#fn:subsequence">fn:subsequence</a>
  <a class="javascript" href="#fn.subsequence">fn.subsequence</a>
  on the output, rather than
  the "skip" option. The "skip" option is based on fragments matching the
  <code>query</code> parameter (if present), not on values. A fragment
  matched by the query might produce multiple values or no values.
  The number of fragments skipped does not correspond to the number of
  values. Also, the skip is applied to the relevance ordered query matches,
  not to the ordered value list. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">When using the "skip" option, use the "truncate" option rather than
  the "limit" option to control the number of matching fragments from which
  to draw values.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2330671'>Understanding Geospatial Query and Index Types</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Get the co-occurrences of points encoded as "lat" and "long" children of
   "source" elements with points encoded as "lat" and "long" children of
   "destination" elements, where the source elements occur before the
   destination elements in the document. Return the co-occurrences as a
   map, where the key is the point from the first geospatial index and the
   values are the points from the second geospatial index.
:)
declare namespace geoex = "http://example.com/ns/geo";

cts:geospatial-co-occurrences(
     xs:QName("geoex:source"),
     xs:QName("geoex:lat"),
     xs:QName("geoex:long"),
     xs:QName("geoex:destination"),
     xs:QName("geoex:lat"),
     xs:QName("geoex:long"),
     ("ordered","map"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Get the co-occurrences of points encoded as "lat" and "long" children of
//   "source" elements with points encoded as "lat" and "long" children of
//   "destination" elements, where the source elements occur before the
//   destination elements in the document. Return the co-occurrences as a
//   map, where the key is the point from the first geospatial index and the
//   values are the points from the second geospatial index.

cts.geospatialCoOccurrences(
     fn.QName("http://example.com/ns/geo", "source"),
     fn.QName("http://example.com/ns/geo", "lat"),
     fn.QName("http://example.com/ns/geo", "long"),
     fn.QName("http://example.com/ns/geo", "destination"),
     fn.QName("http://example.com/ns/geo", "lat"),
     fn.QName("http://example.com/ns/geo", "long"),
     ["ordered","map"]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-query" type="builtin" lib="cts" category="SearchBuiltins" subcategory="cts:query Constructors">
    <apidoc:summary>
    Construct a query to match regions in documents
    that satisfy a specified relationship relative to other regions. For
    example, regions in documents that intersect with regions specified
    in the search criteria.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="geospatial-region-reference" type="cts:reference*">
      Zero or more geospatial path region index references that identify
      regions in your content. To create a reference, see
      <a class="xquery" href="#cts:geospatial-region-path-reference" xmlns="http://www.w3.org/1999/xhtml">cts:geospatial-region-path-reference</a><a class="javascript" href="#cts.geospatialRegionPathReference" xmlns="http://www.w3.org/1999/xhtml">cts.geospatialRegionPathReference</a>.
    </apidoc:param>
      <apidoc:param name="operation" type="xs:string">
      The match operation to apply between the regions specified in the
      <code xmlns="http://www.w3.org/1999/xhtml">$geospatial-region-reference</code> parameter and the
      regions in the <code xmlns="http://www.w3.org/1999/xhtml">$regions</code> parameter. Allowed values:
      <code xmlns="http://www.w3.org/1999/xhtml">contains</code>, <code xmlns="http://www.w3.org/1999/xhtml">covered-by</code>, <code xmlns="http://www.w3.org/1999/xhtml">covers</code>,
      <code xmlns="http://www.w3.org/1999/xhtml">disjoint</code>, <code xmlns="http://www.w3.org/1999/xhtml">intersects</code>, <code xmlns="http://www.w3.org/1999/xhtml">overlaps</code>,
      <code xmlns="http://www.w3.org/1999/xhtml">within</code>, <code xmlns="http://www.w3.org/1999/xhtml">equals</code>, <code xmlns="http://www.w3.org/1999/xhtml">touches</code>,
      <code xmlns="http://www.w3.org/1999/xhtml">crosses</code>. See the Usage Notes for details.
    </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
      Criteria regions to match against the regions specified in the
      <code xmlns="http://www.w3.org/1999/xhtml">$geospatial-region-reference</code> parameter. These regions
      function as the right operand of <code xmlns="http://www.w3.org/1999/xhtml">$operation</code>.
    </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
      Options to this query.  The default is (). Available options:
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distances and the radii of circles using the
         given units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, and <code>meters</code>. This option only affects
         regions provided in the <code>$regions</code> parameter, not regions
         stored in documents.</dd>
        <dt>"score-function=<em>function</em>"</dt>
        <dd>Use the selected scoring function. The score function may be:
          <dl>
          <dt>linear</dt><dd>Use a linear function of the difference between the
          specified query value and the matching value in the index to calculate
          a score for this range query.</dd>
          <dt>reciprocal</dt><dd>Use a reciprocal function of the difference
          between the specified query value and the matching value in the
          index to calculate a score for this range query.</dd>
          <dt>zero</dt><dd>This range query does not contribute to the
          score. This is the default.</dd>
          </dl>
        </dd>
        <dt>"slope-factor=<em>number</em>"</dt>
        <dd>Apply the given number as a scaling factor to the slope of the
        scoring function. The default is 1.0.</dd>
        <dt>"synonym"</dt>
        <dd>Specifies that all of the terms in the $regions parameter are
        considered synonyms for scoring purposes.  The result is that
        occurances of more than one of the synonyms are scored as if
        there are more occurance of the same term (as opposed to
        having a separate term that contributes to score). </dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
      </dl></blockquote>
    </apidoc:param>
      <apidoc:param name="weight" type="xs:double?" optional="true">
      A weight for this query.  The default is 1.0.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:geospatial-region-query</apidoc:return>
    <apidoc:usage>
   <p xmlns="http://www.w3.org/1999/xhtml">This function matches regions in documents in the database satisfying
   the relationship <em>R1 op R2</em>, where <em>R1</em> is a region in
   a database document, <em>op</em> is the operator provided in the
   <code>operation</code> parameter, and <em>R2</em> is any of the regions
   provided in the <code>regions</code> parameter. The <em>R1</em> regions
   under considerations are those in the indexes provided in the
   <code>geospatial-region-reference</code> parameter.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The database configuration must include a geospatial path region index
   corresponding to each <em>R1</em> region. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The operations are defined by the
   <a href="https://en.wikipedia.org/wiki/DE-9IM">Dimensionally Extended
   nine-Intersection Model (DE-9IM)</a> of spatial relations. They have the
   following semantics:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
   <dl>
    <dt><code>"contains"</code></dt>
    <dd><em>R1 contains R2</em> if every point of <em>R2</em> is also a point of
     <em>R1</em>, and their interiors intersect.</dd>
    <dt><code>"covered-by"</code></dt>
    <dd><em>R1</em> is <em>covered-by</em> <em>R2</em> if every point of
     <em>R1</em> is also a point of <em>R2</em>.</dd>
    <dt><code>"covers"</code></dt>
    <dd><em>R1 covers R2</em> if every point of <em>R2</em> is also a point of
     <em>R1</em>.</dd>
    <dt><code>"disjoint"</code></dt>
    <dd><em>R1</em> is <em>disjoint</em> from <em>R2</em> if they have no points
     in common.</dd>
    <dt><code>"intersects"</code></dt>
    <dd><em>R1 intersects R2</em> if the two regions have at least one point in
     common.</dd>
    <dt><code>"overlaps"</code></dt>
    <dd><em>R1 overlaps R2</em> if the two regions partially intersect -- that
     is, they have some but not all points in common -- and the intersection of
     <em>R1</em> and <em>R2</em> has the same dimension as <em>R1</em> and
     <em>R2</em>.</dd>
    <dt><code>"within"</code></dt>
    <dd><em>R1</em> is <em>within R2</em> if every point of <em>R1</em> is also
     a point of <em>R2</em>, and their interiors intersect.</dd>
    <dt><code>"equals"</code></dt>
    <dd><em>R1 equals R2</em> if every point of <em>R1</em> is a point of
     <em>R2</em>, and every point of <em>R2</em> is a point of <em>R1</em>. That
     is, the regions are topologically equal.</dd>
    <dt><code>"touches"</code></dt>
    <dd><em>R1 touches R2</em> if they have a boundary point in common but no
     interior points in common.</dd>
    <dt><code>"crosses"</code></dt>
    <dd><em>R1 crosses R2</em> if their interiors intersect and the dimension of
     the intersection is less than that of at least one of the regions.</dd>
  </dl></blockquote>
  <p xmlns="http://www.w3.org/1999/xhtml">Note: the operation <code>covers</code> differs from <code>contains</code>
   only in that <code>covers</code> does not distinguish between points in the
   boundary and the interior of geometries. In general, <code>covers</code>
   should be used in preference to <code>contains</code>. Similarly,
   <code>covered-by</code> should generally be used in preference to
   <code>within</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If either the <code>geospatial-region-reference</code> or
   <code>regions</code> parameter is an empty list, the query will not
   match any documents.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The query uses the coordinate system and precision of the geospatial
   region index reference supplied in the
   <code>geospatial-region-reference</code> parameter. If multiple index
   references are specified and they have conflicting coordinate systems,
   an <code>XDMP-INCONSCOORD</code> error is thrown.</p>
  </apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-query(
  cts:geospatial-region-path-reference("//item/region"),
    "contains", cts:box(10, 20, 30, 40))
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionQuery(
  cts.geospatialRegionPathReference('//item/region'),
    'contains', cts.box(10, 20, 30, 40))
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="distance" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:distance" xmlns="http://www.w3.org/1999/xhtml">geo:distance</a>
  instead]
  Returns the distance (in miles) between two points.
</apidoc:summary>
  </apidoc:function><apidoc:function name="distance" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns the distance (in <em xmlns="http://www.w3.org/1999/xhtml">units</em>) between two points.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="p1" type="cts:point">
  The first point.
  </apidoc:param>
      <apidoc:param name="p2" type="cts:point">
  The second point.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
     <dl>
      <dt>"coordinate-system=<var>string</var>"</dt>
      <dd>Use the given coordinate system. Valid values are:
        <dl>
        <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
        <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
        <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
        <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
        <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
        <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
        </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
        <code>float</code> and <code>double</code>.</dd>
     <dt>"units=<em>value</em>"</dt>
     <dd>Measure distance and the radii of circles in the specified units.
      Allowed values: <code>miles</code> (default), <code>km</code>,
      <code>feet</code>, <code>meters</code>.</dd>
     </dl>
   </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $sf := cts:point(37, -122)
let $ny := cts:point(40, -73)
return
geo:distance($sf, $ny)

=&gt; 2623.2017796533
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const sf = cts.point(37, -122);
const ny = cts.point(40, -73);
geo.distance(sf, ny);

=&gt; 2623.2017796533
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="shortest-distance" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:shortest-distance" xmlns="http://www.w3.org/1999/xhtml">geo:shortest-distance</a>
  instead]
  Returns the great circle distance (in miles) between a point and an
  region.  The region is defined by a <code xmlns="http://www.w3.org/1999/xhtml">cts:region</code>.
</apidoc:summary>
  </apidoc:function><apidoc:function name="shortest-distance" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns the great circle distance (in <em xmlns="http://www.w3.org/1999/xhtml">units</em>) between a point and a
  region. The region is defined by a
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:region</span><span class="javascript">cts.region</span></code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="p1" type="cts:point">
  The first point.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region+">
  A region such as a circle, box, polygon, linestring, or complex-polygon.
  For compatibility with previous versions, a sequence of points
  is interpreted as a sequence of arcs (defined pairwise) and the
  distance returned is the shortest distance to one of those points.
  If the first
  parameter is a point within the region specified in this parameter,
  then this function returns 0. If the point
  specified in the first parameter in not in the region specified in this
  parameter, then this function returns the
  shortest distance to the boundary of the region.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
     <dl>
      <dt>"coordinate-system=<var>string</var>"</dt>
      <dd>Use the given coordinate system. Valid values are:
        <dl>
        <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
        <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
        <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
        <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
        <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
        <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
        </dl>
     </dd>
     <dt>"units=<em>value</em>"</dt>
     <dd>Measure distance and the radii of circles in the specified units.
      Allowed values: <code>miles</code> (default), <code>km</code>,
      <code>feet</code>, <code>meters</code>.</dd>
     <dt>"precision=<em>value</em>"</dt>
     <dd>Use the coordinate system at the given precision. Allowed values:
      <code>float</code> and <code>double</code>.</dd>
    </dl>
  </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:shortest-distance(
  cts:point(37.494965, -122.267654),
  cts:linestring((cts:point(40.720921, -74.008878),
                  cts:point(38.950224, -77.019714)))
)

=&gt; 2431.82739813132, which is the shortest distance (in miles)
   between San Carlos, CA and an arc between New York City and
   Washington DC.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.shortestDistance(
  cts.point(37.494965, -122.267654),
  cts.linestring([cts.point(40.720921, -74.008878),
                  cts.point(38.950224, -77.019714)]);
)

=&gt; 2431.82739813132, which is the shortest distance (in miles)
   between San Carlos, CA and an arc between New York City and
   Washington DC.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="bearing" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:bearing" xmlns="http://www.w3.org/1999/xhtml">geo:bearing</a>
  instead]
  Returns the true bearing in radians of the path from the first point
  to the second.  An error is raised if the two points are the same.
</apidoc:summary>
  </apidoc:function><apidoc:function name="bearing" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns the true bearing in radians of the path from the first point
  to the second.  An error is raised if the two points are the same.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="p1" type="cts:point">
  The first point.
  </apidoc:param>
      <apidoc:param name="p2" type="cts:point">
  The second point.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
     <dl>
      <dt>"coordinate-system=<var>string</var>"</dt>
      <dd>Use the given coordinate system. Valid values are:
        <dl>
        <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
        <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
        <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
        <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
        <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
        <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
        </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
        <code>float</code> and <code>double</code>.
        </dd>
        <dt>"units=<var>value</var>"</dt>
        <dd>Unit of measure of the tolerance value. Valid values are
        <code>miles</code> (default), <code>km</code>,
        <code>feet</code>, <code>meters</code>.</dd>
     <dt>"tolerance=<var>distance</var>"</dt>
     <dd>Tolerance is the largest allowable variation in geometry calculations.
     If the distance between two points is less than tolerance, then the two
     points are considered equal. For the raw coordinate system, use the units
     of the coordinates. For geographic coordinate systems, use the units
     specified by the units option.</dd>
    </dl>
   </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code>coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code>precision</code>
  option is "float", then the operation uses single precision.
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">Tolerance reflects how accurate you believe the data is. Computing a
  bearing between two points that are effectively equal within the limits
  of data accuracy is likely to produce useless results: The tolerance
  parameter can be used to force an error in this situation. Effective
  tolerance may be limited by the limits of precision.
 </p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $sf := cts:point(37, -122)
let $ny := cts:point(40, -73)
return
geo:bearing($sf, $ny)

=&gt; 1.22127859526251
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const sf = cts.point(37, -122);
const ny = cts.point(40, -73);
geo.bearing(sf, ny);

=&gt; 1.2212785952625
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="destination" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:destination" xmlns="http://www.w3.org/1999/xhtml">geo:destination</a>
  instead]
  Returns the point at the given distance (in miles) along the given
  bearing (in radians) from the starting point.
</apidoc:summary>
  </apidoc:function><apidoc:function name="destination" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns the point at the given distance (in <em xmlns="http://www.w3.org/1999/xhtml">units</em>) along the given
  bearing (in radians) from the starting point.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="p" type="cts:point">
   The starting point.
  </apidoc:param>
      <apidoc:param name="bearing" type="xs:double">
   The bearing, in radians.
  </apidoc:param>
      <apidoc:param name="distance" type="xs:double">
   The distance, in <em xmlns="http://www.w3.org/1999/xhtml">units</em>. See the <code xmlns="http://www.w3.org/1999/xhtml">units</code> option, below.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
   Options for the operation. The default is ().
   <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
   <blockquote xmlns="http://www.w3.org/1999/xhtml">
     <dl>
      <dt>"coordinate-system=<var>string</var>"</dt>
      <dd>Use the given coordinate system. Valid values are:
        <dl>
        <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
        <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
        <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
        <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
        <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
        <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
        </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
        <code>float</code> and <code>double</code>.</dd>
      <dt>"units=<em>value</em>"</dt>
      <dd>Measure distance and the radii of circles in the specified units.
       Allowed values: <code>miles</code> (default), <code>km</code>,
       <code>feet</code>, <code>meters</code>.</dd>
     </dl>
   </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $sf := cts:point(37, -122)
let $ny := cts:point(40, -73)
return
geo:destination($sf, 1.22100904274442,
    geo:distance($sf, $ny))

=&gt; cts:point("40.009335,-72.997467")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const sf = cts.point(37, -122);
const ny = cts.point(40, -73);
geo.destination(sf, 1.22100904274442,
    geo.distance(sf, ny));

=&gt; cts:point("40.009335,-72.997467")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="arc-intersection" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:arc-intersection" xmlns="http://www.w3.org/1999/xhtml">geo:arc-intersection</a>
  instead]
  Returns the point at the intersection of two arcs. If the arcs do
  not intersect, or lie on the same great circle, or if either arc covers
  more than 180 degrees, an error is raised.
</apidoc:summary>
  </apidoc:function><apidoc:function name="arc-intersection" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns the point at the intersection of two arcs. If the arcs do
  not intersect, or lie on the same great circle, or if either arc covers
  more than 180 degrees, an error is raised.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="p1" type="cts:point">
   The starting point of the first arc.
  </apidoc:param>
      <apidoc:param name="p2" type="cts:point">
   The ending point of the first arc.
  </apidoc:param>
      <apidoc:param name="q1" type="cts:point">
   The starting point of the second arc.
  </apidoc:param>
      <apidoc:param name="q2" type="cts:point">
   The ending point of the second arc.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
   Options for the operation. The default is ().
   <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
   <blockquote xmlns="http://www.w3.org/1999/xhtml">
     <dl>
      <dt>"coordinate-system=<var>string</var>"</dt>
      <dd>Use the given coordinate system. Valid values are:
        <dl>
        <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
        <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
        <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
        <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
        <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
        <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
        </dl>
     </dd>
     <dt>"precision=<em>value</em>"</dt>
     <dd>Use the coordinate system at the given precision. Allowed values:
     <code>float</code> and <code>double</code>.</dd>
     <dt>"units=<em>value</em>"</dt>
     <dd>Measure distance and the radii of circles in the specified units.
     Allowed values: <code>miles</code> (default), <code>km</code>,
     <code>feet</code>, <code>meters</code>.</dd>
     <dt>"tolerance=<em>distance</em>"</dt>
     <dd>Tolerance is the largest allowable variation in geometry calculations.
     If the distance between two points is less than tolerance, then the two
     points are considered equal. For the raw coordinate system, use the units
     of the coordinates. For geographic coordinate systems, use the units
     specified by the units option.</dd>
    </dl>
   </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $sf := cts:point(37, -122)
let $ny := cts:point(40, -73)
let $a := cts:point(35,-100)
let $b := cts:point(41,-70)
return
geo:arc-intersection($sf,$ny,$a,$b)

=&gt; 40.458347,-76.203682
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const sf = cts.point(37, -122);
const ny = cts.point(40, -73)
const a = cts.point(35,-100)
const b = cts.point(41,-70)
geo.arcIntersection(sf, ny, a, b);

=&gt; 40.458347,-76.203682
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="box-intersects" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:box-intersects" xmlns="http://www.w3.org/1999/xhtml">geo:box-intersects</a>
  instead]
  Returns true if the box intersects with a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="box-intersects" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the box intersects with a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="box" type="cts:box">
  A geographic box.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, polygons, or points).
    Where multiple regions are specified, return true if any region intersects
    the box.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted as
        matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Does the lat-long box between Greenwich and Edinburgh intersect with
  a 10 mile circle around Birmingham? Yes. :)
geo:box-intersects(
  cts:box(51.48, -3.188889, 55.953056, 0.0),
  cts:circle(10, cts:point(52.483056, -1.893611)))

=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Does the lat-long box between Greenwich and Edinburgh intersect with
// a 10 mile circle around Birmingham? Yes.
geo.boxIntersects(
  cts.box(51.48, -3.188889, 55.953056, 0.0),
  cts.circle(10, cts.point(52.483056, -1.893611)));

=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="circle-intersects" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:circle-intersects" xmlns="http://www.w3.org/1999/xhtml">geo:circle-intersects</a>
  instead]
  Returns true if the circle intersects with a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="circle-intersects" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the circle intersects with a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="circle" type="cts:circle">
  A geographic circle.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, polygons, or points).
    Where multiple regions are specified, return true if any region intersects
    the target circle.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted as
        matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Is the Greenwich Observatory within a mile of the A2 Blackheath Road? Yes.
 :)
geo:circle-intersects(
  cts:circle(1, cts:point(51.48,0)),
  cts:linestring((
    cts:point(51.4745404, -0.0238609),
    cts:point(51.4742464, -0.0212431),
    cts:point(51.4731772, -0.0186682),
    cts:point(51.4729901, -0.0151920),
    cts:point(51.4722950, -0.0132608),
    cts:point(51.4727495, -0.0084972),
    cts:point(51.4718139, -0.0015020),
    cts:point(51.4728029, 0.0095701),
    cts:point(51.4747810, 0.0241184))))

==&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Is the Greenwich Observatory within a mile of the A2 Blackheath Road? Yes.

geo.circleIntersects(
  cts.circle(1, cts.point(51.48,0)),
  cts.linestring([
    cts.point(51.4745404, -0.0238609),
    cts.point(51.4742464, -0.0212431),
    cts.point(51.4731772, -0.0186682),
    cts.point(51.4729901, -0.0151920),
    cts.point(51.4722950, -0.0132608),
    cts.point(51.4727495, -0.0084972),
    cts.point(51.4718139, -0.0015020),
    cts.point(51.4728029, 0.0095701),
    cts.point(51.4747810, 0.0241184)]));

==&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="polygon-intersects" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:polygon-intersects" xmlns="http://www.w3.org/1999/xhtml">geo:polygon-intersects</a>
  instead]
  Returns true if the polygon intersects with a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="polygon-intersects" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the polygon intersects with a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="polygon" type="cts:polygon">
  A geographic polygon.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, polygons, or points).
    Where multiple regions are specified, return true if any region intersects
    the target polygon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
        as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Is Regent's Park within a mile of the American School in London? Yes :)
geo:polygon-intersects(
    cts:polygon((
      cts:point(51.5298921,-0.1674557),
      cts:point(51.5327487,-0.1660395),
      cts:point(51.5343504,-0.1644945),
      cts:point(51.5354716,-0.1620483),
      cts:point(51.5367796,-0.1574993),
      cts:point(51.5374737,-0.1526499),
      cts:point(51.5369398,-0.1488304),
      cts:point(51.5351513,-0.1468134),
      cts:point(51.5319478,-0.1460838),
      cts:point(51.5284771,-0.1460409),
      cts:point(51.5253265,-0.1455688),
      cts:point(51.5237779,-0.1450968),
      cts:point(51.5227899,-0.1461697),
      cts:point(51.5233507,-0.1478004),
      cts:point(51.5246323,-0.1483583),
      cts:point(51.5248192,-0.1587868),
      cts:point(51.5266348,-0.1604605),
      cts:point(51.5292514,-0.1644945),
      cts:point(51.5298387,-0.1665545)
    )),
    cts:circle(1,cts:point(51.5347842,-0.1766932)))

==&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Is Regent's Park within a mile of the American School in London? Yes

geo.polygonIntersects(
    cts.polygon([
      cts.point(51.5298921,-0.1674557),
      cts.point(51.5327487,-0.1660395),
      cts.point(51.5343504,-0.1644945),
      cts.point(51.5354716,-0.1620483),
      cts.point(51.5367796,-0.1574993),
      cts.point(51.5374737,-0.1526499),
      cts.point(51.5369398,-0.1488304),
      cts.point(51.5351513,-0.1468134),
      cts.point(51.5319478,-0.1460838),
      cts.point(51.5284771,-0.1460409),
      cts.point(51.5253265,-0.1455688),
      cts.point(51.5237779,-0.1450968),
      cts.point(51.5227899,-0.1461697),
      cts.point(51.5233507,-0.1478004),
      cts.point(51.5246323,-0.1483583),
      cts.point(51.5248192,-0.1587868),
      cts.point(51.5266348,-0.1604605),
      cts.point(51.5292514,-0.1644945),
      cts.point(51.5298387,-0.1665545)
    ]),
    cts.circle(1,cts.point(51.5347842,-0.1766932)));

==&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="polygon-contains" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:polygon-contains" xmlns="http://www.w3.org/1999/xhtml">geo:polygon-contains</a>
  instead]
  Returns true if the polygon contains a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="polygon-contains" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the polygon contains a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="polygon" type="cts:polygon">
  A geographic polygon.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, polygons, or points).
    Where multiple regions are specified, return true if any region contains
    the target polygon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted
        as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Is the London Zoo in Regent's Park? Yes :)
geo:polygon-contains(
    cts:polygon((
      cts:point(51.5298921,-0.1674557),
      cts:point(51.5327487,-0.1660395),
      cts:point(51.5343504,-0.1644945),
      cts:point(51.5354716,-0.1620483),
      cts:point(51.5367796,-0.1574993),
      cts:point(51.5374737,-0.1526499),
      cts:point(51.5369398,-0.1488304),
      cts:point(51.5351513,-0.1468134),
      cts:point(51.5319478,-0.1460838),
      cts:point(51.5284771,-0.1460409),
      cts:point(51.5253265,-0.1455688),
      cts:point(51.5237779,-0.1450968),
      cts:point(51.5227899,-0.1461697),
      cts:point(51.5233507,-0.1478004),
      cts:point(51.5246323,-0.1483583),
      cts:point(51.5248192,-0.1587868),
      cts:point(51.5266348,-0.1604605),
      cts:point(51.5292514,-0.1644945),
      cts:point(51.5298387,-0.1665545)
    )),
    cts:polygon((
      cts:point(51.5361190,-0.1590335),
      cts:point(51.5366529,-0.1568234),
      cts:point(51.5372001,-0.1537657),
      cts:point(51.5372868,-0.1527464),
      cts:point(51.5334561,-0.1509440),
      cts:point(51.5332359,-0.1517808),
      cts:point(51.5348643,-0.1584756),
      cts:point(51.5355250,-0.1592481),
      cts:point(51.5360522,-0.1590765)
  )))

==&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Is the London Zoo in Regent's Park? Yes

geo.polygonContains(
    cts.polygon([
      cts.point(51.5298921,-0.1674557),
      cts.point(51.5327487,-0.1660395),
      cts.point(51.5343504,-0.1644945),
      cts.point(51.5354716,-0.1620483),
      cts.point(51.5367796,-0.1574993),
      cts.point(51.5374737,-0.1526499),
      cts.point(51.5369398,-0.1488304),
      cts.point(51.5351513,-0.1468134),
      cts.point(51.5319478,-0.1460838),
      cts.point(51.5284771,-0.1460409),
      cts.point(51.5253265,-0.1455688),
      cts.point(51.5237779,-0.1450968),
      cts.point(51.5227899,-0.1461697),
      cts.point(51.5233507,-0.1478004),
      cts.point(51.5246323,-0.1483583),
      cts.point(51.5248192,-0.1587868),
      cts.point(51.5266348,-0.1604605),
      cts.point(51.5292514,-0.1644945),
      cts.point(51.5298387,-0.1665545)
    ]),
    cts.polygon([
      cts.point(51.5361190,-0.1590335),
      cts.point(51.5366529,-0.1568234),
      cts.point(51.5372001,-0.1537657),
      cts.point(51.5372868,-0.1527464),
      cts.point(51.5334561,-0.1509440),
      cts.point(51.5332359,-0.1517808),
      cts.point(51.5348643,-0.1584756),
      cts.point(51.5355250,-0.1592481),
      cts.point(51.5360522,-0.1590765)
  ]));

=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="complex-polygon-intersects" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:complex-polygon-intersects" xmlns="http://www.w3.org/1999/xhtml">geo:complex-polygon-intersects</a>
  instead]
  Returns true if the complex-polygon intersects with a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="complex-polygon-intersects" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the complex-polygon intersects with a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="complex-polygon" type="cts:complex-polygon">
  A geographic complex-polygon.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, complex-polygons, or
    points).
    Where multiple regions are specified, return true if any region intersects
    the target complex-polygon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and complex-polygons' boundaries are
        counted as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and complex-polygons' boundaries are
    not counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $cp := cts:complex-polygon(
  cts:polygon("0,0 10,0 10,10 0,10 0,0"),
  cts:polygon("5,0 7,0 7,5 5,5 5,0"))
let $reg := cts:box(51.48, -3.188889, 55.953056, 0.0)
return geo:complex-polygon-intersects($cp, $reg)

=&gt; false
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const cp = cts.complexPolygon(
  cts.polygon("0,0 10,0 10,10 0,10 0,0"),
  cts.polygon("5,0 7,0 7,5 5,5 5,0"));
const reg = cts.box(51.48, -3.188889, 55.953056, 0.0)
geo.complexPolygonIntersects(cp, reg);

=&gt; false
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="complex-polygon-contains" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:complex-polygon-contains" xmlns="http://www.w3.org/1999/xhtml">geo:complex-polygon-contains</a>
  instead]
  Returns true if the complex-polygon contains a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="complex-polygon-contains" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the complex-polygon contains a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="complex-polygon" type="cts:complex-polygon">
  A geographic complex polygon.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, polygons, or points).
    Where multiple regions are specified, return true if any region intersects
    the target polygon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and complex-polygons' boundaries are
        counted as matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and complex-polygons' boundaries are
    not counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $cp :=
  cts:complex-polygon(
    cts:polygon("0,0 10,0 10,10 0,10 0,0"),
    cts:polygon("5,0 7,0 7,5 5,5 5,0"))
let $poly :=
  cts:polygon("6,8 6.5,8 6.5,9 6,9 6,8")
return geo:complex-polygon-contains($cp, $poly)
(: returns true :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const cp =
  cts.complexPolygon(
    cts.polygon("0,0 10,0 10,10 0,10 0,0"),
    cts.polygon("5,0 7,0 7,5 5,5 5,0"));
const poly =
  cts.polygon("6,8 6.5,8 6.5,9 6,9 6,8");
geo.complexPolygonContains(cp, poly);
// returns true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-intersects" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:region-intersects" xmlns="http://www.w3.org/1999/xhtml">geo:region-intersects</a>
  instead]
  Returns true if the region intersects with a region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="region-intersects" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the target region intersects with a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="target" type="cts:region">
  A geographic region (box, circle, polygon, or point).
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions.
    Where multiple regions are specified, return true if any region intersects
    the target region.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on regions' boundaries are counted as matching.
        This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on regions' boundaries are not counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Is the Greenwich Observatory within a mile of the A2 Blackheath Road? Yes.
 :)
geo:region-intersects(
  cts:circle(1, cts:point(51.48,0)),
  cts:linestring((
    cts:point(51.4745404, -0.0238609),
    cts:point(51.4742464, -0.0212431),
    cts:point(51.4731772, -0.0186682),
    cts:point(51.4729901, -0.0151920),
    cts:point(51.4722950, -0.0132608),
    cts:point(51.4727495, -0.0084972),
    cts:point(51.4718139, -0.0015020),
    cts:point(51.4728029, 0.0095701),
    cts:point(51.4747810, 0.0241184))))

==&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Is the Greenwich Observatory within a mile of the A2 Blackheath Road? Yes.

geo.regionIntersects(
  cts.circle(1, cts.point(51.48,0)),
  cts.linestring([
    cts.point(51.4745404, -0.0238609),
    cts.point(51.4742464, -0.0212431),
    cts.point(51.4731772, -0.0186682),
    cts.point(51.4729901, -0.0151920),
    cts.point(51.4722950, -0.0132608),
    cts.point(51.4727495, -0.0084972),
    cts.point(51.4718139, -0.0015020),
    cts.point(51.4728029, 0.0095701),
    cts.point(51.4747810, 0.0241184)]));

==&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-contains" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:region-contains" xmlns="http://www.w3.org/1999/xhtml">geo:region-contains</a>
  instead]
  Returns true if the region contains the other region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="region-contains" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if one region contains the other region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A geographic region.
  </apidoc:param>
      <apidoc:param name="region" type="cts:region*">
    One or more geographic regions (boxes, circles, polygons, or points).
    Where multiple regions are specified, return true if any region intersects
    the target polygon.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and regions' boundaries are counted as
        matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and regions' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Does the lat-long box between Greenwich and Edinburgh contain the
   10 mile circle around Birmingham? Yes. :)
geo:region-contains(
  cts:box(51.48, -3.188889, 55.953056, 0.0),
  cts:circle(10, cts:point(52.483056, -1.893611)))

=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Does the lat-long box between Greenwich and Edinburgh contain the
// 10 mile circle around Birmingham? Yes.

geo.regionContains(
  cts.box(51.48, -3.188889, 55.953056, 0.0),
  cts.circle(10, cts.point(52.483056, -1.893611)));

=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-relate" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
    Compares geospatial regions based on a specified relationship. For
    example, determine if two regions overlap.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region-1" type="cts:region">
      The first geospatial region to compare. This region is the left operand of
      <code xmlns="http://www.w3.org/1999/xhtml">$operation</code>.
    </apidoc:param>
      <apidoc:param name="operation" type="xs:string">
      The operation to apply between the region specified in the
      <code xmlns="http://www.w3.org/1999/xhtml">$region-1</code> and <code xmlns="http://www.w3.org/1999/xhtml">$region-2</code> parameters. Allowed
      values: <code xmlns="http://www.w3.org/1999/xhtml">contains</code>, <code xmlns="http://www.w3.org/1999/xhtml">covered-by</code>,
      <code xmlns="http://www.w3.org/1999/xhtml">covers</code>, <code xmlns="http://www.w3.org/1999/xhtml">crosses</code>, <code xmlns="http://www.w3.org/1999/xhtml">disjoint</code>,
      <code xmlns="http://www.w3.org/1999/xhtml">equals</code>, <code xmlns="http://www.w3.org/1999/xhtml">intersects</code>, <code xmlns="http://www.w3.org/1999/xhtml">overlaps</code>,
      <code xmlns="http://www.w3.org/1999/xhtml">touches</code>, <code xmlns="http://www.w3.org/1999/xhtml">within</code>. See the Usage Notes
      for details.
    </apidoc:param>
      <apidoc:param name="region-2" type="cts:region">
      The second geospatial region to compare. This region is the right operand
      of <code xmlns="http://www.w3.org/1999/xhtml">$operation</code>.
    </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
      Options to this operation.  The default is (). Available options:
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
          <dt>"units=<em>value</em>"</dt>
          <dd>Measure distance, radii of circles, and tolerance in the specified units.
           Allowed values: <code>miles</code> (default), <code>km</code>,
           <code>feet</code>, <code>meters</code>.</dd>
          <dt>"tolerance=<em>distance</em>"</dt>
          <dd>Tolerance is the largest allowable variation in geometry calculations.
          If the distance between two points is less than tolerance, then the two
          points are considered equal. For the raw coordinate system, use the units
          of the coordinates. For geographic coordinate systems, use the units
          specified by the units option.</dd>
      </dl></blockquote>
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">This function determines whether the two regions
   <em>R1=<code>$region-1</code></em> and <em>R2=<code>$region-2</code></em>
   satisfy the relationship <em>R1 op R2</em>, where
   <em>op=<code>$operation</code></em>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The operations are defined by the
   <a href="https://en.wikipedia.org/wiki/DE-9IM">Dimensionally Extended
   nine-Intersection Model (DE-9IM)</a> of spatial relations. They have the
   following semantics:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
   <dl>
    <dt><code>"contains"</code></dt>
    <dd><em>R1 contains R2</em> if every point of <em>R2</em> is also a point of
     <em>R1</em>, and their interiors intersect.</dd>
    <dt><code>"covered-by"</code></dt>
    <dd><em>R1</em> is <em>covered-by</em> <em>R2</em> if every point of
     <em>R1</em> is also a point of <em>R2</em>.</dd>
    <dt><code>"covers"</code></dt>
    <dd><em>R1 covers R2</em> if every point of <em>R2</em> is also a point of
     <em>R1</em>.</dd>
    <dt><code>"crosses"</code></dt>
    <dd><em>R1 crosses R2</em> if their interiors intersect and the dimension of
     the intersection is less than that of at least one of the regions.</dd>
    <dt><code>"disjoint"</code></dt>
    <dd><em>R1</em> is <em>disjoint</em> from <em>R2</em> if they have no points
     in common.</dd>
    <dt><code>"equals"</code></dt>
    <dd><em>R1 equals R2</em> if every point of <em>R1</em> is a point of
     <em>R2</em>, and every point of <em>R2</em> is a point of <em>R1</em>. That
     is, the regions are topologically equal.</dd>
    <dt><code>"intersects"</code></dt>
    <dd><em>R1 intersects R2</em> if the two regions have at least one point in
     common.</dd>
    <dt><code>"overlaps"</code></dt>
    <dd><em>R1 overlaps R2</em> if the two regions partially intersect -- that
     is, they have some but not all points in common -- and the intersection of
     <em>R1</em> and <em>R2</em> has the same dimension as <em>R1</em> and
     <em>R2</em>.</dd>
    <dt><code>"touches"</code></dt>
    <dd><em>R1 touches R2</em> if they have a boundary point in common but no
     interior points in common.</dd>
    <dt><code>"within"</code></dt>
    <dd><em>R1</em> is <em>within R2</em> if every point of <em>R1</em> is also
     a point of <em>R2</em>, and their interiors intersect.</dd>
  </dl></blockquote>
  <p class="xquery" xmlns="http://www.w3.org/1999/xhtml">The operations in this function are the same as those used
   in <a href="#cts:geospatial-region-query">cts:geospatial-region-query</a>,
   with identical semantics. For example,
   <code>geo:region-relate($r1,$op,$r2)</code>
   returns true if and only if a document containing the region
   <code>$r1</code> would match the geospatial region query
   <code>cts:geospatial-region-query($index,$op,$r2)</code>.
   (Where <code>$index</code> is a geospatial region path index configured on
   the same coordinate system and units used in
   <code>geo:region-relate</code>.)</p>
  <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">The operations in this function are the same as those
   used in <a href="#cts.geospatialRegionQuery">cts.geospatialRegionQuery</a>.
   For example, <code>geo.regionRelate($r1,$op,$r2)</code>
   returns true if and only if a document containing the region
   <code>$r1</code> would match the geospatial region query
   <code>cts.geospatialRegionQuery($index,$op,$r2)</code>.
   (Where <code>$index</code> is a geospatial region path index configured on
   the same coordinate system and units used in
   <code>geo.regionRelate</code>.)
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">Note: the operation <code>covers</code> differs from <code>contains</code>
   only in that <code>covers</code> does not distinguish between points in the
   boundary and the interior of geometries. In general, <code>covers</code>
   should be used in preference to <code>contains</code>. Similarly,
   <code>covered-by</code> should generally be used in preference to
   <code>within</code>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The DE9-IM operators are defined in terms of the underlying intersection
   matrix between the two regions. To calculate this matrix for two regions,
   use
<a class="xquery" href="#geo:region-de9im">geo:region-de9im</a><a class="javascript" href="#geo.regionDe9im">geo.regionDe9im</a>.</p>

<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
  </apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2334997'>Searching for Matching Regions</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $r1 := cts:polygon("POLYGON((-122.427520751953 37.6555576956251,-122.459106445313 37.5658069549294,-122.289505004883 37.5946477878735,-122.427520751953 37.6555576956251))")
let $r2 := cts:linestring("LINESTRING(-122.571029663086 37.5728821555562,-122.400054931641 37.6077041124284,-122.161102294922 37.5696167618573)")
return geo:region-relate($r1,"crosses",$r2,("coordinate-system=wgs84","precision=double"))

(: returns true :)
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const r1 = cts.polygon('POLYGON((-122.427520751953 37.6555576956251,-122.459106445313 37.5658069549294,-122.289505004883 37.5946477878735,-122.427520751953 37.6555576956251))');
const r2 = cts.linestring('LINESTRING(-122.571029663086 37.5728821555562,-122.400054931641 37.6077041124284,-122.161102294922 37.5696167618573)');
geo.regionRelate(r1,'crosses',r2,['coordinate-system=wgs84','precision=double'])

// returns true
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-de9im" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
    Calculates the <a href="https://en.wikipedia.org/wiki/DE-9IM" xmlns="http://www.w3.org/1999/xhtml">Dimensionally
    Extended nine-Intersection Matrix (DE-9IM)</a> of two geospatial regions.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region-1" type="cts:region">
      The first geospatial region to compare.
    </apidoc:param>
      <apidoc:param name="region-2" type="cts:region">
      The second geospatial region to compare.
    </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
      Options to this operation.  The default is (). Available options:
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
          <dt>"units=<em>value</em>"</dt>
          <dd>Measure distance, radii of circles, and tolerance in the specified units.
           Allowed values: <code>miles</code> (default), <code>km</code>,
           <code>feet</code>, <code>meters</code>.</dd>
          <dt>"tolerance=<em>distance</em>"</dt>
          <dd>Tolerance is the largest allowable variation in geometry calculations.
          If the distance between two points is less than tolerance, then the two
          points are considered equal. For the raw coordinate system, use the units
          of the coordinates. For geographic coordinate systems, use the units
          specified by the units option.</dd>
      </dl></blockquote>
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">This function calculates the Dimensionally Extended nine-Intersection Matrix (DE-9IM) of the two input regions, and returns the result as a string. In this model, a region divides the coordinate space into 3 sets of points: interior (I), boundary (B), and exterior (E). Each of these 3 sets from the first region is intersected with each of the 3 sets from the second region, and the dimensions of the intersections are calculated. This results in 9 dimensions, which are the entries of the matrix. These dimensions are also denoted using terms II, IB, IE, BI, etc. For instance, "IB" is the dimension of the intersection of the interior (I) of <code>$region-1</code> with the boundary (B) of <code>$region-2</code>.</p>

  <p xmlns="http://www.w3.org/1999/xhtml">The output of this function is a string of nine characters, which correspond to the 9 entries in the intersection matrix (in order): II, IB, IE, BI, BB, BE, EI, EB, EE. Each character will either be an integer "0", "1", or "2", representing the dimension of the intersection, or "F", indicating no intersection.</p>

  <p xmlns="http://www.w3.org/1999/xhtml">DE9-IM also defines spatial predicates based on the intersection matrix, including "intersects", "overlaps", and "contains". To test whether two regions satisfy one of these predicates, use
<a class="xquery" href="#geo:region-relate">geo:region-relate</a><a class="javascript" href="#geo.regionRelate">geo.regionRelate</a>.</p>

  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code>coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code>precision</code>
  option is "float", then the operation uses single precision.
  </p>
  </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $r1 := cts:polygon("POLYGON((-122.427520751953 37.6555576956251,-122.459106445313 37.5658069549294,-122.289505004883 37.5946477878735,-122.427520751953 37.6555576956251))")
let $r2 := cts:linestring("LINESTRING(-122.571029663086 37.5728821555562,-122.400054931641 37.6077041124284,-122.161102294922 37.5696167618573)")
return geo:region-de9im($r1,$r2,("coordinate-system=wgs84","precision=double"))

(: returns "1F20F1102", which reflects a "crosses" relationship :)
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const r1 = cts.polygon('POLYGON((-122.427520751953 37.6555576956251,-122.459106445313 37.5658069549294,-122.289505004883 37.5946477878735,-122.427520751953 37.6555576956251))');
const r2 = cts.linestring('LINESTRING(-122.571029663086 37.5728821555562,-122.400054931641 37.6077041124284,-122.161102294922 37.5696167618573)');
geo.regionDe9im(r1, r2, ['coordinate-system=wgs84','precision=double']);

// returns '1F20F1102', which reflects a "crosses" relationship
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="bounding-boxes" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:bounding-boxes" xmlns="http://www.w3.org/1999/xhtml">geo:bounding-boxes</a>
  instead]
  Returns a sequence of boxes that bound the given region.
</apidoc:summary>
  </apidoc:function><apidoc:function name="bounding-boxes" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns a sequence of boxes that bound the given region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A geographic region (box, circle, polygon, or point).
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Options for the operation. The default is ().
  <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
          </dd>
          <dt>"precision=<em>value</em>"</dt>
          <dd>Use the coordinate system at the given precision. Allowed values:
          <code>float</code> and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.</dd>
        <dt>"box-percent=n"</dt>
        <dd>An integer between 0 and 100 (default is 100) that indicates what
        percentage of a polygon's bounding box slivers should be returned.
        Lower numbers give fewer, less accurate boxes; larger numbers give
        more, more accurate boxes.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        The bounding boxes will be padded to cover any points within tolerance
        of the region. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option. The default value is 0 (no padding).</dd>
        <dt>"boundaries-included"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are counted as
        matching.  This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
        <dd>Points on boxes', circles', and polygons' boundaries are not
    counted as matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
        <dd>Points on boxes' latitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
        <dd>Points on boxes' longitude boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
        <dd>Points on the boxes' southern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
        <dd>Points on the boxes' western boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
        <dd>Points on the boxes' northern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
        <dd>Points on the boxes' eastern boundaries are not counted as
    matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
        <dt>"boundaries-endpoints-excluded"</dt>
        <dd>Points on linestrings' boundary (the endpoints) are not counted as matching.</dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box*</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the operation uses single precision.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:bounding-boxes(
  cts:polygon("0,0 20,20 -10,18 5,5 0,0")
);
(: Returns two boxes:
   [-10, 0, 5, 18.976505]
   [5, 4.7157488, 20, 20]
:)

geo:bounding-boxes(
  cts:polygon("0,0 20,20 -10,18 5,5 0,0"),
  "box-percent=50"
)
(: Returns one box:
   [-10, 0, 20, 20]
:)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.boundingBoxes(
  cts.polygon("0,0 20,20 -10,18 5,5 0,0")
);
// Returns two boxes:
//   [-10, 0, 5, 18.976505]
//   [5, 4.7157488, 20, 20]

// **************
geo.boundingBoxes(
  cts.polygon("0,0 20,20 -10,18 5,5 0,0"),
  "box-percent=50"
);
// Returns one box:
//   [-10, 0, 20, 20]

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="parse-wkt" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:parse-wkt" xmlns="http://www.w3.org/1999/xhtml">geo:parse-wkt</a>
  instead]
  Returns a sequence of geospatial regions parsed from Well-Known Text format.
</apidoc:summary>
  </apidoc:function><apidoc:function name="parse-wkt" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns a sequence of geospatial regions parsed from Well-Known Text format.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="wkt" type="xs:string*">
    A sequence of strings in Well-Known Text format.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396147'>Converting To and From Common Geospatial Representations</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $node :=
    &lt;complexPolygon name="Arapahoe"&gt;POLYGON((
      0.396982870000000E+02 -0.104935135000000E+03,
      0.396965870000000E+02 -0.104938635000000E+03,
      0.396965870000000E+02 -0.104938635000000E+03,
      0.397110870000000E+02 -0.104931634000000E+03,
      0.397066870000000E+02 -0.104926934000000E+03,
      0.397012870000000E+02 -0.104932834000000E+03,
      0.396971870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104928134000000E+03,
      0.396965870000000E+02 -0.104931534000000E+03,
      0.396966870000000E+02 -0.104934335000000E+03,
      0.396966870000000E+02 -0.104934335000000E+03,
      0.396981250000000E+02 -0.104934109000000E+03
      ),
       (
      0.396981250000000E+02 -0.104934109000000E+03,
      0.397001130000000E+02 -0.104931652000000E+03,
      0.397001870000000E+02 -0.104934034000000E+03,
      0.396981250000000E+02 -0.104934109000000E+03
       ))
    &lt;/complexPolygon&gt;
    return
    geo:parse-wkt(fn:data($node))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const node = {Arapahoe:"POLYGON(( \n\
            0.396982870000000E+02 -0.104935135000000E+03, \n\
            0.396965870000000E+02 -0.104938635000000E+03, \n\
            0.396965870000000E+02 -0.104938635000000E+03, \n\
            0.397110870000000E+02 -0.104931634000000E+03, \n\
            0.397066870000000E+02 -0.104926934000000E+03, \n\
            0.397012870000000E+02 -0.104932834000000E+03, \n\
            0.396971870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104928134000000E+03, \n\
            0.396965870000000E+02 -0.104931534000000E+03, \n\
            0.396966870000000E+02 -0.104934335000000E+03, \n\
            0.396966870000000E+02 -0.104934335000000E+03, \n\
            0.396981250000000E+02 -0.104934109000000E+03), \n\
            ( 0.396981250000000E+02 -0.104934109000000E+03, \n\
            0.397001130000000E+02 -0.104931652000000E+03, \n\
            0.397001870000000E+02 -0.104934034000000E+03, \n\
            0.396981250000000E+02 -0.104934109000000E+03))"};
geo.parseWkt(node.Arapahoe);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="to-wkt" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:to-wkt" xmlns="http://www.w3.org/1999/xhtml">geo:to-wkt</a> instead]
  Returns a sequence of strings in Well-Known Text format.
</apidoc:summary>
  </apidoc:function><apidoc:function name="to-wkt" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns a sequence of strings in Well-Known Text format.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="wkt" type="cts:region*">
    A sequence of geospatial regions.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396147'>Converting To and From Common Geospatial Representations</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

geo:to-wkt(cts:point(36, 71))

=&gt; POINT(71 36)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.toWkt(cts.point(36, 71));

=&gt; POINT(71 36)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="validate-wkt" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the string is valid Well-Known Text for a supported region type.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="wkt" type="xs:string">
    A string to validate.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396147'>Converting To and From Common Geospatial Representations</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  geo:validate-wkt("LINESTRING(-112.25 47.1,-112.3 47.1,-112.4 47.2)")

=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.validateWkt("LINESTRING(-112.25 47.1,-112.3 47.1,-112.4 47.2)")

=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="parse-wkb" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns a sequence of geospatial regions parsed from Well-Known Binary format.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="wkb" type="binary()">
    A binary node containing WKB data.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396147'>Converting To and From Common Geospatial Representations</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  geo:parse-wkb(
    binary{"00000000020000000340478ccccccccccdc05c10000000000040478ccccccccccdc05c133333333334404799999999999ac05c19999999999a"}
  )

=&gt; LINESTRING(-112.25 47.1,-112.3 47.1,-112.4 47.2)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const nb = new NodeBuilder();
nb.addBinary("00000000020000000340478ccccccccccdc05c10000000000040478ccccccccccdc05c133333333334404799999999999ac05c19999999999a");
geo.parseWkb(nb.toNode());

=&gt; LINESTRING(-112.25 47.1,-112.3 47.1,-112.4 47.2)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="to-wkb" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns a binary node in Well-Known Binary format.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="wkb" type="cts:region*">
    A sequence of geospatial regions.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396147'>Converting To and From Common Geospatial Representations</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:describe(geo:to-wkb(cts:point(36, 71)))

=&gt; binary{"000000000140420000000000004051c00000000000"}
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.describe(geo.toWkb(cts.point(36, 71)))

=&gt; binary{"000000000140420000000000004051c00000000000"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="validate-wkb" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Returns true if the binary data can be parsed as WKB into a supported region
  type.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="wkb" type="binary()">
    A binary node containing WKB data.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2396147'>Converting To and From Common Geospatial Representations</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  geo:validate-wkb(
    binary{"50000000020000000340478ccccccccccdc05c10000000000040478ccccccccccdc05c133333333334404799999999999ac05c19999999999a"}
  )

=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const nb = new NodeBuilder();
nb.addBinary("00000000020000000340478ccccccccccdc05c10000000000040478ccccccccccdc05c133333333334404799999999999ac05c19999999999a");
geo.validateWkb(nb.toNode());

=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-element-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial element range index, for use as a
  parameter to
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element" type="xs:QName">
    An element name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options. The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from
        <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception is
  thrown if no index with the specified precision exists.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2344359'>Geospatial XML Element Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-element-reference(xs:QName("point"))

=&gt; cts:geospatial-element-reference(fn:QName("","point"),
     ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialElementReference(xs.QName("point"));

=&gt; cts.geospatialElementReference(fn.QName("","point"),
     ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-json-property-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial json property range index, for use as a
  parameter to 
<code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="property" type="xs:string">
    A JSON property name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options. The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
        <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with the specified precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2360129'>Geospatial JSON Property Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-json-property-reference("point")

=&gt; cts:geospatial-json-property-reference("point",
     ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialJsonPropertyReference("point")

=&gt; cts.geospatialJsonPropertyReference("point",
     ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-element-child-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial element child range index, for use as a
  parameter to 
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element" type="xs:QName">
    An element QName name.</apidoc:param>
      <apidoc:param name="child" type="xs:QName">
    An element QName name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
  <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with the corresponding precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2385173'>Geospatial XML Element Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-element-child-reference(xs:QName("location"), xs:QName("point"))

=&gt; cts:geospatial-element-child-reference(fn:QName("","location"),
     fn:QName("","point"), ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialElementChildReference(xs.QName("location"), xs.QName("point"));

=&gt; cts.geospatialElementChildReference(fn.QName("","location"),
     fn.QName("","point"), ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-json-property-child-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial json property child range index, for use as a
  parameter to cts:value-tuples
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="property" type="xs:string">
    A JSON property name.</apidoc:param>
      <apidoc:param name="child" type="xs:string">
    A JSON property name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
  <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with the corresponding precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2313149'>Geospatial JSON Property Child Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-json-property-child-reference("location", "point")

=&gt; cts:geospatial-json-property-child-reference("location", "point",
     ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialJsonPropertyChildReference("location", "point")

=&gt; cts.geospatialJsonPropertyChildReference("location", "point",
     ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-element-pair-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial element pair range index, for use as a
  parameter to 
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element" type="xs:QName">
    An element QName name.</apidoc:param>
      <apidoc:param name="lat" type="xs:QName">
    An element QName name.</apidoc:param>
      <apidoc:param name="long" type="xs:QName">
    An element QName name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
        <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with specified precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2323010'>Geospatial XML Element Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-element-pair-reference(xs:QName("pt"), xs:QName("lat"),
  xs:QName("long"))

=&gt; cts:geospatial-element-pair-reference(fn:QName("","pt"), fn:QName("","lat"),
     fn:QName("","long"), ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialElementPairReference(xs.QName("pt"), xs.QName("lat"),
  xs.QName("long"));

=&gt; cts.geospatialElementPairReference(fn:QName("","pt"), fn.QName("","lat"),
     fn.QName("","long"), ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-json-property-pair-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial JSON property pair range index, for use
  as a parameter to 
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if
  the specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="property" type="xs:string">
    A JSON property name.</apidoc:param>
      <apidoc:param name="lat" type="xs:string">
    A JSON property name.</apidoc:param>
      <apidoc:param name="long" type="xs:string">
    A JSON property name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<em>name</em>"</dt>
        <dd>Use the given coordinate system. Possible values
         Allowed values: "wgs84", "wgs84/double", "etrs89",
         "etrs89/double", "raw", "raw/double".</dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
        <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with the specified precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2333159'>Geospatial JSON Property Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-json-property-pair-reference("pt", "lat", "long")

=&gt; cts:geospatial-json-property-pair-reference("pt", lat", "long",
     ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialJsonPropertyPairReference("pt", "lat", "long")

=&gt; cts.geospatialJsonPropertyPairReference("pt", lat", "long",
     ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-attribute-pair-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial attribute pair range index, for use as a
  parameter to 
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="element" type="xs:QName">
    An element QName name.</apidoc:param>
      <apidoc:param name="lat" type="xs:QName">
    An attribute QName name.</apidoc:param>
      <apidoc:param name="long" type="xs:QName">
    An attribute QName name.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
        <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with the specified precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2395631'>Geospatial XML Attribute Pair Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-attribute-pair-reference(xs:QName("pt"),
  xs:QName("lat"), xs:QName("long"))

=&gt; cts:geospatial-attribute-pair-reference(fn:QName("","pt"),
     fn:QName("","lat"), fn:QName("","long"),
     ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialAttributePairReference(xs.QName("pt"),
  xs.QName("lat"), xs.QName("long"));

=&gt; cts.geospatialAttributePairReference(fn.QName("","pt"),
     fn.QName("","lat"), fn.QName("","long"),
     ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-path-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
  Creates a reference to a geospatial path range index, for use as a
  parameter to 
  <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>.
  This function will throw an exception if the
  specified range index does not exist.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path-expression" type="xs:string">
    A path expression.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"type=<em>type</em>"</dt>
        <dd>Use the lexicon with the type specified by <em>type</em>
        (point or long-lat-point)</dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>.</dd>
        <dt>"nullable"</dt>
        <dd>Allow null values in tuples reported from 
        <code><span class="xquery">cts:value-tuples</span><span class="javascript">cts.valueTuples</span></code>
        when using this lexicon.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the scalar type and coordinate-system info
        only from the input. Do not check the definition against the
        context database.</dd>
     </dl></blockquote>
  </apidoc:param>
      <apidoc:param name="map" type="map:map" optional="true">
  A map of namespace bindings. The keys should be namespace prefixes and the
  values should be namespace URIs. These namespace bindings will be added to
  the in-scope namespace bindings in the interpretation of the path.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
  The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
  that implied by the governing coordinate system name, including the
  value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
  option is "float", then the reference uses single precision. An exception
  is thrown if an index with the specified precision does not exist.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-path-reference("//item/point")

=&gt; cts:geospatial-path-reference("//item/point",
     ("type=point","coordinate-system=wgs84"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialPathReference("//item/point");

=&gt; cts.geospatialPathReference("//item/point",
     ["type=point","coordinate-system=wgs84"])
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geospatial-region-path-reference" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
    Create a reference to a geospatial region path index, for use as a
    parameter to
    <a class="xquery" href="#cts:geospatial-region-query" xmlns="http://www.w3.org/1999/xhtml">cts:geospatial-region-query</a>
    <a class="javascript" href="#cts.geospatialRegionQuery" xmlns="http://www.w3.org/1999/xhtml">cts.geospatialRegionQuery</a>
    and other query operations on geospatial region indexes. This function
    throws an exception if the specified region path index does not exist.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="path-expression" type="xs:string">
      The XPath expression specified in the index configuration.
    </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
      Index configuration options. The default is (). These options
      should match the configuration used when creating the index.
      Available options:
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> (default) and <code>double</code>.</dd>
        <dt>"unchecked"</dt>
        <dd>Read the coordinate-system info only from the input. Do not check
         the definition against the context database.</dd>
     </dl></blockquote>
    </apidoc:param>
      <apidoc:param name="namespaces" type="map:map" optional="true">
     A map of namespace bindings. The keys should be namespace prefixes and the
     values should be namespace URIs. These namespace bindings will be added to
     the in-scope namespace bindings in the interpretation of the path.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:reference</apidoc:return>
    <apidoc:usage>
   The value of the <code xmlns="http://www.w3.org/1999/xhtml">precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code xmlns="http://www.w3.org/1999/xhtml">coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code xmlns="http://www.w3.org/1999/xhtml">precision</code>
   option is "float", then the reference uses single precision. An exception
   is thrown if an index with the specified precision does not exist.
  </apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2382772'>Geospatial Region Queries and Indexes</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-path-reference("//item/region")

=&gt; A region path index reference of the following form:

   cts:geospatial-region-path-reference(
     "//item/region",("coordinate-system=wgs84"))
  </pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts:geospatial-region-path-reference(
  "//item/region", ("precision=double", "coordinate-system=wgs84")

=&gt; A region path index reference of the following form:

  cts:geospatial-region-path-reference(
    "//item/region",("coordinate-system=wgs84/double"))
  </pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
let $namespaces := map:map()
let $_ := map:put($namespaces, "kml", "http://www.opengis.net/kml/2.2")
return cts:geospatial-region-path-reference(
  "//kml:LinearRing/kml:coordinates", (),$namespaces)

=&gt; A region path index reference of the following form:

  cts:geospatial-region-path-reference(
    "//kml:LinearRing/kml:coordinates",("coordinate-system=wgs84"),map:map(...))
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionPathReference('//item/region')

=&gt; A region path index reference of the following form:

  cts.geospatialRegionPathReference("//item/region",["coordinate-system=wgs84"])
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionPathReference(
  '//item/region', ['coordinate-system=wgs84','precision=double'])

=&gt; A region path index reference of the following form:

  cts.geospatialRegionPathReference(
    "//item/region",["coordinate-system=wgs84/double"])
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.geospatialRegionPathReference(
  '//kml:LinearRing/kml:coordinates', [],
  {kml: 'http://www.opengis.net/kml/2.2'})

=&gt; A region path index reference of the following form:

   cts.geospatialRegionPathReference(
     "//kml:LinearRing/kml:coordinates",
     ["coordinate-system=wgs84"],
     {kml:"http://www.opengis.net/kml/2.2"})
  </pre></apidoc:example>
  </apidoc:function><apidoc:function name="approx-center" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial (Deprecated)">
    <apidoc:summary>
  [DEPRECATED: use <a href="#geo:approx-center" xmlns="http://www.w3.org/1999/xhtml">geo:approx-center</a>
  instead]
   Return a point approximating the center of the given region.
   For a point, this is the point itself.
   For a circle, it is the center point.
   For a box, it is the point whose latitude is half-way between the northern
   and southern limits and whose longitude is half-way between the western and
   eastern limits.
   For a linestring, it is the middle point of the line.
   For polygons and complex polygons an approximate centroid
   is returned. This approximation is rough, and useful for quick comparisons.
</apidoc:summary>
  </apidoc:function><apidoc:function name="approx-center" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
   Return a point approximating the center of the given region.
   For a point, this is the point itself.
   For a circle, it is the center point.
   For a box, it is the point whose latitude is half-way between the northern
   and southern limits and whose longitude is half-way between the western and
   eastern limits.
   For polygons, complex polygons, and linestrings, an approximate centroid
   is returned. This approximation is rough, and useful for quick comparisons.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
    A geospatial region.</apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options.  The default is ().
    <p xmlns="http://www.w3.org/1999/xhtml">
      Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"box-percent=n"</dt>
        <dd>An integer between 0 and 100 (default is 100) that indicates what
        percentage of a polygon's bounding box slivers should be used in
        constructing the approximate centroid.  Lower numbers use fewer
        slivers, giving faster but less accurate results; larger numbers use
        more slivers, giving slower but more accurate results.
        </dd>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double precision.</dd>
          <dt>raw</dt><dd>The raw (unmapped) coordinate system.</dd>
          <dt>raw/double</dt><dd>The raw coordinate system at double precision.</dd>
          </dl>
        </dd>
        <dt>"precision=<em>value</em>"</dt>
        <dd>The precision use for this operation, including the interpretation
        of input values. Allowed values: <code>float</code>, <code>double</code>.
        Default: The precision of the governing coordinate system.
        </dd>
     </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option always takes precedence
  over the implied by the governing coordinate system name, including the
  value of the <code>coordinate-system</code> option. For example, if the
  governing coordinate system is "wgs84/double" and the <code>precision</code>
  option is "float", then the operation uses single precision.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The precision of the returned region is determined by the
   <code>precision</code> option, if present. Otherwise, the precision of
   the returned region is determined by the precision of the governing
  coordinate system.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Approximate center of London Zoo :)
geo:approx-center(
    cts:polygon((
      cts:point(51.5361190,-0.1590335),
      cts:point(51.5366529,-0.1568234),
      cts:point(51.5372001,-0.1537657),
      cts:point(51.5372868,-0.1527464),
      cts:point(51.5334561,-0.1509440),
      cts:point(51.5332359,-0.1517808),
      cts:point(51.5348643,-0.1584756),
      cts:point(51.5355250,-0.1592481),
      cts:point(51.5360522,-0.1590765)
  )))

==&gt; cts:point(51.535511,-0.15516526)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Approximate center of London Zoo
geo.approxCenter(
    cts.polygon([
      cts.point(51.5361190,-0.1590335),
      cts.point(51.5366529,-0.1568234),
      cts.point(51.5372001,-0.1537657),
      cts.point(51.5372868,-0.1527464),
      cts.point(51.5334561,-0.1509440),
      cts.point(51.5332359,-0.1517808),
      cts.point(51.5348643,-0.1584756),
      cts.point(51.5355250,-0.1592481),
      cts.point(51.5360522,-0.1590765)
  ]));

==&gt; cts.point(51.535511,-0.15516526)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="coordinate-system-canonical" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Get the canonical name for the coordinate system. An exception is thrown
if no such coordinate system exists.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
  Coordinate system name. Allowed values: "wgs84", "wgs84/double", "etrs89",
  "etrs89/double", "raw", "raw/double".
  </apidoc:param>
      <apidoc:param name="precision" type="xs:string" optional="true">
    The precision, either "float" or "double". Default: The precision
    implicit in the coordinate system that is the value of the
    <code xmlns="http://www.w3.org/1999/xhtml">name</code> parameter.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The <code>precision</code> parameter takes precedence over any precision
implicit in the coordinate system name. For example, if <code>name</code> is
"wgs84/double" and <code>precision</code> is "float", then "wgs84"
is returned.</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:coordinate-system-canonical("wgs84","double")

=&gt; "wgs84/double"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.coordinateSystemCanonical('wgs84','double')

=&gt; "wgs84/double"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="default-coordinate-system" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Get the canonical name for the coordinate system currently in effect.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
The current coordinate system is derived from the App Server default
coordinate system and any module-specific coordinate system specification,
such as by the <code xmlns="http://www.w3.org/1999/xhtml">xdmp:coordinate-system</code> XQuery prolog option.
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2320718'>Controlling Coordinate System and Precision</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
geo:default-coordinate-system()

=&gt; "wgs84"
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
declare option xdmp:coordinate-system "wgs84/double";
geo:default-coordinate-system()

=&gt; "wgs84/double"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.defaultCoordinateSystem()

=&gt; "wgs84"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-affine-transform" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Perform an affine transformation on a geospatial region. The transformation
  is always applied in the raw coordinate system (Cartesian).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  </apidoc:param>
      <apidoc:param name="transform" type="map:map*">
  A sequence of maps that specify the transformation to apply. Each map
  should contain at least one of the following transform specifications:
  <dl xmlns="http://www.w3.org/1999/xhtml">
  <dt><code>translation</code></dt>
  <dd>Translate the points of the region by the given amount in the x and y
  coordinates. The value is a map with the following keys:
    <dl>
    <dt><code>tx</code></dt><dd>Amount to shift the points in the x direction. (Required.)</dd>
    <dt><code>ty</code></dt><dd>Amount to shift the points in the y direction. (Required.)</dd>
    </dl>
  </dd>
  <dt><code>scaling</code></dt>
  <dd>Scale the points of the region by the given amount of the x and y
  coordinates. The value is a map with the following keys:
    <dl>
    <dt><code>sx</code></dt><dd>Amount to scale the points in the x direction. (Required.)</dd>
    <dt><code>sy</code></dt><dd>Amount to scale the points in the y direction. (Required.)</dd>
    <dt><code>psc</code></dt><dd>Point to scale relative to. (Optional. Default is the origin.)</dd>
    </dl>
  </dd>
  <dt><code>rotation</code></dt>
  <dd>Rotate the points of the region by the given angle.
  The value is a map with the following keys:
    <dl>
    <dt><code>angle</code></dt><dd>Amount to rotate the points (radians). (Required.)</dd>
    <dt><code>prot</code></dt><dd>Point to rotate relative to. (Optional. Default is the origin.)</dd>
    </dl>
  </dd>
  <dt><code>shearing</code></dt>
  <dd>Shear the points of the region by the given amounts.
  The value is a map with the following keys:
    <dl>
    <dt><code>shxy</code></dt><dd>Amount of shearing due to x in y direction. (Required.)</dd>
    <dt><code>shyx</code></dt><dd>Amount of shearing due to y in x direction. (Required.)</dd>
    </dl>
  </dd>
  <dt><code>reflection</code></dt>
  <dd>Reflect the points of the region around a line or a point.
  The value is a map with the following keys:
    <dl>
    <dt><code>lineR</code></dt><dd>Line of reflection.</dd>
    <dt><code>pref</code></dt><dd>Point to reflect points around. The value
    is a map with the following keys:
      <dl>
      <dt><code>start</code></dt><dd>The starting point of the line.</dd>
      <dt><code>end</code></dt><dd>The ending point of the line.</dd>
      </dl>
    </dd>
    </dl>
    Exactly of <code>lineR</code> or <code>pref</code> must be specified.
  </dd>
  </dl>
  If no transform specifications are provided, the points are transformed by the identity transform. That is, they remain unchanged.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
  Geospatial options that affect the transformation. Currently there are no
  relevant options.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The ordering of transformations applied makes a difference. For example,
scaling the point (1,1) by x=2 and y=3 and then translating it by x=1 and y=1
gives us the point (4,4). But translating it by x=1 and y=1 and then scaling
it by x=2 and y=3 gives us (4,5). When multiple transformation are mentioned
in a single map, the ordering is: translation, scaling, rotation, shearing,
and then reflection. In general it is better to put separate transformations
in separate maps in the sequence so there is no confusion. Transforms in the
sequence are applied in order.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Reflection about the line from point (2.5,0) to point (2.5,2.0) :)
geo:region-affine-transform(
  cts:polygon((
    cts:point(1.5,0),cts:point(2.5,1),cts:point(1.5,2),
    cts:point(0.5,2),cts:point(0.5,0),cts:point(1.5,0))),
  xdmp:from-json-string('
    {reflection: { lineR: {start: [2.5,0], end:[2.5,2.0]} }
  }'))

=&gt; 3.5,0 2.5,1 3.5,2 4.5,2 4.5,0 3.5,0
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Reflection about the line from point (2.5,0) to point (2.5,2.0)
geo.regionAffineTransform(
  cts.polygon([
    cts.point(1.5,0),cts.point(2.5,1),cts.point(1.5,2),
    cts.point(0.5,2),cts.point(0.5,0),cts.point(1.5,0)]),
  {reflection: { lineR: {start: [2.5,0], end:[2.5,2.0]} }}
)

// =&gt; 3.5,0 2.5,1 3.5,2 4.5,2 4.5,0 3.5,0
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="count-vertices" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
This function returns a count of the number of vertices in a region.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A cts region.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The vertex that closes the ring is only counted once.</p>
<p xmlns="http://www.w3.org/1999/xhtml">For a complex polygon this function returns a count of the vertices
in the outer polygon. For points it returns 1. For circles it returns 0.
For boxes it returns the number of distinct points in the set
(sw, se, nw, ne).</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:count-vertices(
  cts:polygon((cts:point(1,2),cts:point(3,4),cts:point(3,4),cts:point(4,5),
  cts:point(1,2))) )

=&gt; 4
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.countVertices(
  cts.polygon([cts.point(1,2),cts.point(3,4),cts.point(3,4),cts.point(4,5),
  cts.point(1,2)]) )

// =&gt; 4
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="count-distinct-vertices" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Return a count of the distinct number of vertices in a region, taking
tolerance into account.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A cts region.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, radii of circles, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
         <dt>"tolerance=<em>distance</em>"</dt>
         <dd>Tolerance is the largest allowable variation in geometry calculations.
         If the distance between two points is less than tolerance, then the two
         points are considered equal. For the raw coordinate system, use the units
         of the coordinates. For geographic coordinate systems, use the units
         specified by the units option.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:usage>
 <p xmlns="http://www.w3.org/1999/xhtml">This function returns a count of the distinct number of vertices in a
  region. It takes into account tolerance. The vertex that closes the ring
  is only counted once. For a complex polygon this is a count of the vertices
  in the outer polygon. For points it returns 1, for circles it returns 0,
  and for boxes it returns the number of distinct points in the set
  (sw, se, nw, ne).
 </p>

<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:count-distinct-vertices(
  cts:polygon((cts:point(1,2),cts:point(3,4),cts:point(3,4),cts:point(4,5),
cts:point(1,2))) )

=&gt; 3
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.countDistinctVertices(
  cts.polygon([cts.point(1,2),cts.point(3,4),cts.point(3,4),
               cts.point(4,5), cts.point(1,2)]) )

// =&gt; 3
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-clean" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
This function fixes various problems with the region or raises an error if it is
not repairable. The only relevant fix for MarkLogic is to remove duplicate
adjacent vertices in polygons (including inner and outer polygons of
complex polygons). The only relevant options are options controlling the
coordinate system and the tolerance option.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A cts region.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    The tolerance, units, coordinate system.
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, radii of circles, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
         <dt>"tolerance=<em>distance</em>"</dt>
         <dd>Tolerance is the largest allowable variation in geometry calculations.
         If the distance between two points is less than tolerance, then the two
         points are considered equal. For the raw coordinate system, use the units
         of the coordinates. For geographic coordinate systems, use the units
         specified by the units option.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:region-clean(
  cts:polygon((
    cts:point(40.1234567890,-120.1234567890),
    cts:point(40.123456543,-120.123456543),
    cts:point(40.12455,-120.123467),
    cts:point(40.13456,-120.1455195))))

=&gt; A cts:region with the following coordinates:
    40.123457,-120.12346 40.12455,-120.12347 40.13456,-120.14552
    40.123457, -120.12346
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.regionClean(
  cts.polygon([
    cts.point(40.1234567890,-120.1234567890),
    cts.point(40.123456543,-120.123456543),
    cts.point(40.12455,-120.123467),
    cts.point(40.13456,-120.1455195)]))

// =&gt; a cts.region with the following coordinates:
//    40.123457,-120.12346 40.12455,-120.12347 40.13456,-120.14552
//    40.123457,-120.12346"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="interior-point" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
This function returns a point that is guaranteed to be inside the bounds of the
given region. For a given region and set of options, the point returned should
be stable from one call to the next.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A cts region.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, radii of circles, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
         <dt>"tolerance=<em>distance</em>"</dt>
         <dd>Tolerance is the largest allowable variation in geometry calculations.
         If the distance between two points is less than tolerance, then the two
         points are considered equal. For the raw coordinate system, use the units
         of the coordinates. For geographic coordinate systems, use the units
         specified by the units option.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point?</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">
Under extreme circumstances a point may be returned that may in fact
not be inside a polygon, due to the limits of floating point arithmetic.
Double precision should be used to get more accurate results.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:interior-point(cts:polygon("10,10 20,20 50,50 10,10"))

 =&gt; a cts:point with the coordinates 30,25
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.interiorPoint(cts.polygon('10,10 20,20 50,50 10,10'))

// =&gt; a cts.point with the coordinates 30,25
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="distance-convert" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
This function converts a distance from one unit of measure to another.
The supported units are "miles", "feet", "km", and "meters".
This is a proper superset of the units supported as options to various
geospatial functions ("miles","km").
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="distance" type="xs:double">
  The distance.
  </apidoc:param>
      <apidoc:param name="unit1" type="xs:string">
    The unit of the input distance parameter.
  </apidoc:param>
      <apidoc:param name="unit2" type="xs:string">
    The unit to which the distance should be converted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:distance-convert(100, "meters", "miles")

=&gt; 0.0621371192237334032
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.distanceConvert(100, 'meters', 'miles')

// =&gt; 0.0621371192237334032
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="remove-duplicate-vertices" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Remove duplicate (adjacent) vertices.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A cts region.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    The tolerance, units, coordinate system.
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, radii of circles, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
       <dt>"tolerance=<em>distance</em>"</dt>
       <dd>Tolerance is the largest allowable variation in geometry calculations.
       If the distance between two points is less than tolerance, then the two
       points are considered equal. For the raw coordinate system, use the units
       of the coordinates. For geographic coordinate systems, use the units
       specified by the units option.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">Whether a vertex counts as a duplicate depends on the governing coordinate
system and whether it is single or double precision unless tolerance is
specified.</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the <code>region</code> parameter is a box, circle, or point,
no action is taken and the region is returned unchanged.</p>

<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:remove-duplicate-vertices(
  cts:polygon((
    cts:point(40.1234567890,-120.1234567890),
    cts:point(40.123456543,-120.123456543),
    cts:point(40.12455,-120.123467),
    cts:point(40.13456,-120.1455195))))

=&gt; A cts:region with the following coordinates:
   40.123457,-120.12346 40.12455,-120.12347 40.13456,-120.14552
   40.123457,-120.12346"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.removeDuplicateVertices(
  cts.polygon([
    cts.point(40.1234567890,-120.1234567890),
    cts.point(40.123456543,-120.123456543),
    cts.point(40.12455,-120.123467),
    cts.point(40.13456,-120.1455195)]))

// =&gt; A cts.region with the following coordinates:
//    40.123457,-120.12346 40.12455,-120.12347 40.13456,-120.14552
//    40.123457,-120.12346"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="region-approximate" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
This function returns a simplified approximation of the region,
using the Douglas-Peucker algorithm.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
  A cts region.
  </apidoc:param>
      <apidoc:param name="threshold" type="xs:double">
   How close the approximation should be, in the units specified by
   the <code xmlns="http://www.w3.org/1999/xhtml">units</code> option.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, radii of circles, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
       <dt>"tolerance=<em>distance</em>"</dt>
       <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option. Tolerance must be smaller than
        the value of the <code>threhold</code> parameter.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">Tolerance must be smaller than the threshold.</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:region-approximate(
  cts:polygon((
    cts:point(0,0),
    cts:point(4,0),
    cts:point(2,10),
    cts:point(2,14),
    cts:point(2,11),
    cts:point(0,4),
    cts:point(0,0))), 400, ("tolerance=1"))

 =&gt; A cts:region with the coorindates 0,0 2,14 2,11 0,0
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.regionApproximate(
  cts.polygon([
    cts.point(0,0),
    cts.point(4,0),
    cts.point(2,10),
    cts.point(2,14),
    cts.point(2,11),
    cts.point(0,4),
    cts.point(0,0)]), 400, ['tolerance=1'])

// =&gt; A cts.region with the coordinates 0,0 2,14 2,11 0,0
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="circle-polygon" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Construct a polygon approximating a circle.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="circle" type="cts:circle">
  A cts circle that defines the circle to be approximated.
  </apidoc:param>
      <apidoc:param name="arc-tolerance" type="xs:double">
   How far the approximation can be from the actual circle, specified
   in the same units as the <code xmlns="http://www.w3.org/1999/xhtml">units</code> option. Arc-tolerance
   should be greater than the value of the <code xmlns="http://www.w3.org/1999/xhtml">tolerance</code> option.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    Options with which you can customize this operation. The following
    options are available:
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, radii of circles, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
       <dt>"tolerance=<em>distance</em>"</dt>
       <dd>Tolerance is the largest allowable variation in geometry calculations.
       If the distance between two points is less than tolerance, then the two
       points are considered equal. For the raw coordinate system, use the units
       of the coordinates. For geographic coordinate systems, use the units
       specified by the units option. Tolerance should be smaller than the
       value of the <code>arc-tolerance</code> parameter.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">When approximating the polygon, if the distance between two points is
  less than <code>tolerance</code>, then they are considered to be the
  same point. The <code>arc-tolerance</code> parameter specifies the
  allowable error in the polygon approximation. That is, the resulting
  polygon will differ from the provided circle by at most
  <code>arc-tolerance</code>.</p>
 <p xmlns="http://www.w3.org/1999/xhtml">
  The <code>arc-tolerance</code> parameter value must be greater than
  the tolerance, and both <code>arc-tolerance</code> and <code>tolerance</code>
  should be expressed in the same units. For example, if the <code>units</code>
  option is set to "km" and you're using a geodetic coordinate system, then
  <code>arc-tolerance</code> and <code>tolerance</code> (if specified) should
  also be in kilometers. The default tolerance is 0.05km (or the equivalent in
  other units). Use the <code>tolerance</code> option to override the default.
 </p>

<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:circle-polygon(cts:circle(7,cts:point(10,20)),4, ("tolerance=1"));

=&gt; A cts:region with the following coordinates:
   10.10185,20 10.050913,20.088997 9.9490623,20.08897 9.8981495,20
   9.9490623,19.91103 10.050913,19.911001 10.10185,20
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.circlePolygon(cts.circle(7,cts.point(10,20)),4, ["tolerance=1"]);

// =&gt; A cts.region with the following coordinates:
//    10.10185,20 10.050913,20.088997 9.9490623,20.08897 9.8981495,20
//    9.9490623,19.91103 10.050913,19.911001 10.10185,20
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="ellipse-polygon" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
  Construct a polygon approximating an ellipse.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="center" type="cts:point">
  Center of the ellipse.
  </apidoc:param>
      <apidoc:param name="semi-major-axis" type="xs:double">
   The semi major axis of the ellipse. The units are governed by the
   <code xmlns="http://www.w3.org/1999/xhtml">units</code> option.
  </apidoc:param>
      <apidoc:param name="semi-minor-axis" type="xs:double">
   The semi minor axis of the ellipse. The units are governed by the
   <code xmlns="http://www.w3.org/1999/xhtml">units</code> option.
  </apidoc:param>
      <apidoc:param name="azimuth" type="xs:double">
  The azimuth.
  </apidoc:param>
      <apidoc:param name="arc-tolerance" type="xs:double">
   How far the approximation can be from the actual ellipse, specified
   in the same units as the <code xmlns="http://www.w3.org/1999/xhtml">units</code> option. Arc-tolerance
   should be greater than the value of the <code xmlns="http://www.w3.org/1999/xhtml">tolerance</code> option,
   which defaults to 0.05km (0.3106856 miles).
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
    <p xmlns="http://www.w3.org/1999/xhtml">Options with which to configure the behavior. Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
      <dl>
       <dt>"coordinate-system=<em>value</em>"</dt>
       <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
       <dt>"precision=<em>value</em>"</dt>
       <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
         <dt>"units=<em>value</em>"</dt>
         <dd>Measure distance, the axes of the ellipse, and tolerance in the
         specified units. Allowed values: <code>miles</code> (default),
         <code>km</code>, <code>feet</code>, <code>meters</code>.</dd>
       <dt>"tolerance=<em>distance</em>"</dt>
       <dd>Tolerance is the largest allowable variation in geometry calculations.
       If the distance between two points is less than tolerance, then the two
       points are considered equal. For the raw coordinate system, use the units
       of the coordinates. For geographic coordinate systems, use the units
       specified by the units option.</dd>
      </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:region</apidoc:return>
    <apidoc:usage>
  When approximating the polygon, if the distance between two points is
  less than <code xmlns="http://www.w3.org/1999/xhtml">tolerance</code>, then they are considered to be the
  same point. The <code xmlns="http://www.w3.org/1999/xhtml">arc-tolerance</code> parameter specifies the
  allowable error in the polygon approximation. That is, the resulting
  polygon will differ from the provided ellipse by at most
  <code xmlns="http://www.w3.org/1999/xhtml">arc-tolerance</code>.
 <p xmlns="http://www.w3.org/1999/xhtml">
  The <code>arc-tolerance</code> parameter value should be greater than
  the tolerance, and both <code>arc-tolerance</code> and <code>tolerance</code>
  should be expressed in the same units. For example, if the <code>units</code>
  option is set to "km" and you're using a geodetic coordinate system, then
  <code>arc-tolerance</code> and <code>tolerance</code> (if specified) should
  also be in kilometers. The default tolerance is 0.05km (or the equivalent in
  other units). Use the <code>tolerance</code> option to override the default.
 </p>

<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:ellipse-polygon(cts:point(1,1),4,2,math:pi() div 2.0,1,("tolerance=0.1"))

=&gt; A cts:region with the following coordinates:
   1,1.0582174 0.97955137,1.0411657 0.97108173,0.99999946
   0.97955191,0.95883381 1,0.94178247 1.0204481,0.95883381
   1.0289183,0.99999946 1.0204486,1.0411657 1,1.0582174
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.ellipsePolygon(cts.point(1,1),4,2,math.pi() / 2.0,1,['tolerance=0.1'])

// =&gt; A cts:region with the following coordinates:
//    1,1.0582174 0.97955137,1.0411657 0.97108173,0.99999946
//    0.97955191,0.95883381 1,0.94178247 1.0204481,0.95883381
//    1.0289183,0.99999946 1.0204486,1.0411657 1,1.0582174
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geohash-encode" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Compute a set of covering geohashes for the given region, to the given
level of precision.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="region" type="cts:region">
    The region to encode.
  </apidoc:param>
      <apidoc:param name="geohash-precision" type="xs:integer?" optional="true">
   The desired precision (length of the geohash). The precision should be
   between 1 and 12. If the precision is less than 1, or unspecified, the
   default geohash-precision of 6 is used. A geohash-precision greater than 12
   is treated as the same as 12.  In the worst case (at the equator) a precision
   of 12 gives resolution of less than a centimeter.
  </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
   Options for the operation. The default is ().
   <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
      <blockquote xmlns="http://www.w3.org/1999/xhtml">
        <dl>
        <dt>"coordinate-system=<var>string</var>"</dt>
        <dd>Use the given coordinate system. Valid values are:
          <dl>
          <dt>wgs84</dt><dd>The WGS84 coordinate system.</dd>
          <dt>wgs84/double</dt><dd>The WGS84 coordinate system at double
           precision.</dd>
          <dt>etrs89</dt><dd>The ETRS89 coordinate system.</dd>
          <dt>etrs89/double</dt><dd>The ETRS89 coordinate system at double
           precision.</dd>
          </dl>
          Geohashing is not allowed for non-geodetic coordinate systems.
          Attempting to use this function with the raw or raw/double coordinate
          system will result in an <code>XDMP-GEOHASH-COORD</code> error.
        </dd>
        <dt>"precision=<em>string</em>"</dt>
        <dd>Use the coordinate system at the given precision. Allowed values:
        <code>float</code> (default) and <code>double</code>.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Measure distance, radii of circles, and tolerance in the specified units.
        Allowed values: <code>miles</code> (default), <code>km</code>,
        <code>feet</code>, <code>meters</code>.</dd>
        <dt>"tolerance=<em>distance</em>"</dt>
        <dd>Tolerance is the largest allowable variation in geometry calculations.
        If the distance between two points is less than tolerance, then the two
        points are considered equal. For the raw coordinate system, use the units
        of the coordinates. For geographic coordinate systems, use the units
        specified by the units option.</dd>
        <dt>geohashes=<em>value</em></dt>
        <dd>Specify which geohashes to return. Allowed values:
         <dl>
          <dt>all</dt>
          <dd>Return a complete set of covering hashes for the region
           (boundary + interior). This is the default behavior.</dd>
          <dt>boundary</dt>
          <dd>Return only geohashes that intersect with the boundary of the
           region.</dd>
          <dt>interior</dt>
          <dd>Return only geohashes completely contained in the interior
           of the region.</dd>
          <dt>exterior</dt>
          <dd>Return all geohashes disjoint from the region. That is, all
           geohashes completely contained in the exterior of the region.</dd>
         </dl>
        </dd>
      </dl></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">The default geohash-precision is 6. Care should be taken in the selection of
 higher geohash-precisions for non-point regions: Converging on a sufficiently
 precise covering set on polygons with many vertices can be costly.</p>
<p xmlns="http://www.w3.org/1999/xhtml">Geohashes of circles are calculated by approximating the circle by a polygon.
 This approximation is accurate to within 0.001% of the radius of the circle. If
 additional precision is required, use
 <a href="#geo:circle-polygon" class="xquery">geo:circle-polygon</a>
 <a href="#geo.circlePolygon" class="javascript">geo.circlePolygon</a>
 to convert the circle before calling this function.</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:geohash-encode(cts:point(1.23354,66.67),12)

=&gt; t2prj0e9gssb
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.geohashEncode(cts.point(1.23354,66.67),12)

=&gt; t2prj0e9gssb
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geohash-decode" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Given a geohash string, return the bounding box for that hash.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hash" type="xs:string">
  The geohash value, as produced by
  <a class="xquery" href="#geo:geohash-encode" xmlns="http://www.w3.org/1999/xhtml">geo:geohash-encode</a><a class="javascript" href="#geo.geohashEncode" xmlns="http://www.w3.org/1999/xhtml">geo.geohashEncode</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:box</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:geohash-decode("c3k6svq")

=&gt; cts:box("[52.499542, -117.55646, 52.500916, -117.55508]")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.geohashDecode('c3k6svq')

=&gt; cts.box('[52.499542, -117.55646, 52.500916, -117.55508]')
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geohash-decode-point" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Given a geohash string, return the point for that hash.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hash" type="xs:string">
  The geohash string, as produced from the function
  <a class="xquery" href="#geo:geohash-encode" xmlns="http://www.w3.org/1999/xhtml">geo:geohash-encode</a><a class="javascript" href="#geo.geohashEncode" xmlns="http://www.w3.org/1999/xhtml">geo.geohashEncode</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>cts:point</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:geohash-decode-point("c3k6svq")

=&gt; 52.500229,-117.55577
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.geohashDecodePoint("c3k6svq")

=&gt; 52.500229,-117.55577
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geohash-neighbors" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Given a geohash string, return hashes for the neighbors. The result is
a map with the keys "N", "NE", "E", "SE", "S", "SW", "W", "NW" for the
neighbors in those directions.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hash" type="xs:string">
  The geohash string, as produced by
  <a class="xquery" href="#geo:geohash-encode" xmlns="http://www.w3.org/1999/xhtml">geo:geohash-encode</a><a class="javascript" href="#geo.geohashEncode" xmlns="http://www.w3.org/1999/xhtml">geo.geohashEncode</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>map:map</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:geohash-neighbors("c3k6svq")

=&gt; a map:map with the following keys and values:

   key  :   value
   ----------------
   "NE" : "c3k6svx"
   "S"  : "c3k6svn"
   "E"  : "c3k6svr"
   "W"  : "c3k6svm"
   "N"  : "c3k6svw"
   "SW" : "c3k6svj"
   "SE" : "c3k6svp"
   "NW" : "c3k6svt"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.geohashNeighbors("c3k6svq")

=&gt; {"NE":"c3k6svx", "S":"c3k6svn", "E":"c3k6svr", "W":"c3k6svm",
    "N":"c3k6svw", "SW":"c3k6svj", "SE":"c3k6svp", "NW":"c3k6svt"}
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geohash-precision-dimensions" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Given a geohash string, return the height and width for the given precision.
The result is a pair of double: the height (latitude span) followed by the
width (longitude span).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="precision" type="xs:integer">
  The precision. This should be a number between 0 and 12, as with
  <a class="xquery" href="#geo:geohash-encode" xmlns="http://www.w3.org/1999/xhtml">geo:geohash-encode</a><a class="javascript" href="#geo.geohashEncode" xmlns="http://www.w3.org/1999/xhtml">geo.geohashEncode</a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double+</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:geohash-precision-dimensions(12)

=&gt; 1.67638063430786E-7
   3.35276126861572E-7
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.geohashPrecisionDimensions(12)

=&gt; 1.67638063430786E-7
   3.35276126861572E-7
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="geohash-subhashes" type="builtin" lib="geo" category="SearchBuiltins" subcategory="Geospatial Operations">
    <apidoc:summary>
Given a geohash string, return the 32 subhashes.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hash" type="xs:string">
  The geohash string, as produced from the function geo:geohash-encode.
  </apidoc:param>
      <apidoc:param name="which" type="xs:string">
  Which subhashes to return, one of "S","W","N","E","SW","SE","NW","NE" or
  "ALL". The default is "ALL".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:usage>
</apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo:geohash-subhashes("c3k6svq")

=&gt; a sequence of the following strings:
   c3k6svq0 c3k6svq1 c3k6svq2 c3k6svq3 c3k6svq4 c3k6svq5
   c3k6svq6 c3k6svq7 c3k6svq8 c3k6svq9 c3k6svqb c3k6svqc
   c3k6svqd c3k6svqe c3k6svqf c3k6svqg c3k6svqh c3k6svqj
   c3k6svqk c3k6svqm c3k6svqn c3k6svqp c3k6svqq c3k6svqr
   c3k6svqs c3k6svqt c3k6svqu c3k6svqv c3k6svqw c3k6svqx
   c3k6svqy c3k6svqz
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
geo.geohashSubhashes('c3k6svq')

=&gt; a Sequence of the following strings:
   c3k6svq0 c3k6svq1 c3k6svq2 c3k6svq3 c3k6svq4 c3k6svq5
   c3k6svq6 c3k6svq7 c3k6svq8 c3k6svq9 c3k6svqb c3k6svqc
   c3k6svqd c3k6svqe c3k6svqf c3k6svqg c3k6svqh c3k6svqj
   c3k6svqk c3k6svqm c3k6svqn c3k6svqp c3k6svqq c3k6svqr
   c3k6svqs c3k6svqt c3k6svqu c3k6svqv c3k6svqw c3k6svqx
   c3k6svqy c3k6svqz
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="match-regions" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Geospatial Lexicon">
    <apidoc:summary>
    Find regions in documents that have a spatial relationship to
    one or more caller-supplied regions.
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="range-indexes" type="cts:reference*">
      References to range indexes that store the string serialization
      of regions to match against.
    </apidoc:param>
      <apidoc:param name="operation" type="xs:string">
    The operation to test. Must be one of the following:
    <code xmlns="http://www.w3.org/1999/xhtml">contains</code>, <code xmlns="http://www.w3.org/1999/xhtml">covered-by</code>, <code xmlns="http://www.w3.org/1999/xhtml">covers</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">crosses</code>, <code xmlns="http://www.w3.org/1999/xhtml">disjoint</code>, <code xmlns="http://www.w3.org/1999/xhtml">equals</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">intersects</code>, <code xmlns="http://www.w3.org/1999/xhtml">overlaps</code>, <code xmlns="http://www.w3.org/1999/xhtml">touches</code>,
    <code xmlns="http://www.w3.org/1999/xhtml">within</code>. See the Usage Notes for details.
    </apidoc:param>
      <apidoc:param name="regions" type="cts:region*">
      One or more cts:region values to test against. A region matches
      if it matches against any of these regions.
    </apidoc:param>
      <apidoc:param name="options" type="xs:string*" optional="true">
      String options you can use to control the operation. The following
      options are supported:
      <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
        <dt>"coordinate-system=<em>value</em>"</dt>
        <dd>Use the given coordinate system. Valid values are
         <code>wgs84</code>, <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>
         and <code>raw/double</code>. Defaults to the governing coordinating
         system.</dd>
         <dt>"precision=<em>value</em>"</dt>
         <dd>Use the coordinate system at the given precision. Allowed values:
         <code>float</code> and <code>double</code>. Defaults to the precision
         of the governing coordinate system.</dd>
        <dt>"units=<em>value</em>"</dt>
        <dd>Compute distances and radii of circles using the given
          units. Allowed values: <code>miles</code> (default), <code>km</code>,
          <code>feet</code>, and <code>meters</code>. </dd>
        <dt>"strings"</dt>
        <dd>Return results as strings instead of as 
         <code><span class="xquery">cts:region</span>
         <span class="javascript">cts.region</span></code> values.</dd>
        <dt>"any"</dt>
        <dd>Co-occurrences from any fragment should be included.</dd>
        <dt>"document"</dt>
        <dd>Co-occurrences from document fragments should be included.</dd>
        <dt>"properties"</dt>
        <dd>Co-occurrences from properties fragments should be included.</dd>
        <dt>"locks"</dt>
        <dd>Co-occurrences from locks fragments should be included.</dd>
        <dt>"fragment-frequency"</dt>
        <dd>Frequency should be the number of fragments with an
          included co-occurrence. This option is used with
          <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"item-frequency"</dt>
        <dd>Frequency should be the number of occurrences of an
          included co-occurrence. This option is used with
          <code><span class="xquery">cts:frequency</span><span class="javascript">cts.frequency</span></code>.</dd>
        <dt>"checked"</dt>
        <dd>Word positions should be checked when resolving the query.</dd>
        <dt>"unchecked"</dt>
        <dd>Word positions should not be checked when resolving the query.</dd>
        <dt>"too-many-positions-error"</dt>
        <dd>If too much memory is needed to perform positions calculations
          to check whether a document matches a query, return an
          XDMP-TOOMANYPOSITIONS error, instead of accepting the document
          as a match.</dd>
        <dt>"concurrent"</dt>
        <dd>Perform the work concurrently in another thread. This is a hint
        to the query optimizer to help parallelize the lexicon work, allowing
        the calling query to continue performing other work while the lexicon
        processing occurs.  This is especially useful in cases where multiple
        lexicon calls occur in the same query (for example, resolving many
        facets in a single query).</dd>
     </dl></blockquote>
    </apidoc:param>
      <apidoc:param name="query" type="cts:query?" optional="true">
      Limit the region comparison to documents that match this query.
      Also, compute frequencies from the set of included regions. The
      values do not need to match the query, but they must occur in fragments
      selected by the query. The fragments are not filtered ot ensure they
      match the query. Instead, they are selected in the same manner as
      <a href="cts:search#unfiltered" xmlns="http://www.w3.org/1999/xhtml">"unfiltered" <code>cts:search</code></a>
      operations.
    </apidoc:param>
      <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
      A sequence of IDs of forests to which the search should be constrained.
      An empty sequence means search all forests in the databse. The default
      is an empty sequence.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">This function matches regions in documents in the database satisfying
   the relationship <em>R1 op R2</em>, where <em>R1</em> is a region in
   a database document, <em>op</em> is the operator provided in the
   <code>operation</code> parameter, and <em>R2</em> is any of the regions
   provided in the <code>regions</code> parameter. The <em>R1</em> regions
   under considerations are those in the indexes provided in the
   <code>range-indexes</code> parameter. The <em>R1</em> regions can be
   further constrained to those in documents that match a query.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The operations are defined by the
   <a href="https://en.wikipedia.org/wiki/DE-9IM">Dimensionally Extended
   nine-Intersection Model (DE-9IM)</a> of spatial relations. They have the
   following semantics:</p>
  <blockquote xmlns="http://www.w3.org/1999/xhtml">
   <dl>
    <dt><code>"contains"</code></dt>
    <dd><em>R1 contains R2</em> if every point of <em>R2</em> is also a point of
     <em>R1</em>, and their interiors intersect.</dd>
    <dt><code>"covered-by"</code></dt>
    <dd><em>R1</em> is <em>covered-by</em> <em>R2</em> if every point of
     <em>R1</em> is also a point of <em>R2</em>.</dd>
    <dt><code>"covers"</code></dt>
    <dd><em>R1 covers R2</em> if every point of <em>R2</em> is also a point of
     <em>R1</em>.</dd>
    <dt><code>"crosses"</code></dt>
    <dd><em>R1 crosses R2</em> if their interiors intersect and the dimension of
     the intersection is less than that of at least one of the regions.</dd>
    <dt><code>"disjoint"</code></dt>
    <dd><em>R1</em> is <em>disjoint</em> from <em>R2</em> if they have no points
     in common.</dd>
    <dt><code>"equals"</code></dt>
    <dd><em>R1 equals R2</em> if every point of <em>R1</em> is a point of
     <em>R2</em>, and every point of <em>R2</em> is a point of <em>R1</em>. That
     is, the regions are topologically equal.</dd>
    <dt><code>"intersects"</code></dt>
    <dd><em>R1 intersects R2</em> if the two regions have at least one point in
     common.</dd>
    <dt><code>"overlaps"</code></dt>
    <dd><em>R1 overlaps R2</em> if the two regions partially intersect -- that
     is, they have some but not all points in common -- and the intersection of
     <em>R1</em> and <em>R2</em> has the same dimension as <em>R1</em> and
     <em>R2</em>.</dd>
    <dt><code>"touches"</code></dt>
    <dd><em>R1 touches R2</em> if they have a boundary point in common but no
     interior points in common.</dd>
    <dt><code>"within"</code></dt>
    <dd><em>R1</em> is <em>within R2</em> if every point of <em>R1</em> is also
     a point of <em>R2</em>, and their interiors intersect.</dd>
  </dl></blockquote>
  <p xmlns="http://www.w3.org/1999/xhtml">Note: the operation <code>covers</code> differs from <code>contains</code>
   only in that <code>covers</code> does not distinguish between points in the
   boundary and the interior of geometries. In general, <code>covers</code>
   should be used in preference to <code>contains</code>. Similarly,
   <code>covered-by</code> should generally be used in preference to
   <code>within</code>.</p>
  <p class="xquery" xmlns="http://www.w3.org/1999/xhtml">The return value is either a sequence of
   <code><span class="xquery">cts:region</span>
   <span class="javascript">cts.region</span></code> values
   or a sequence of strings containing the serialized regions, depending on
   whether or not the <code>strings</code> option is included.</p>
  <p class="javascript" xmlns="http://www.w3.org/1999/xhtml">The return value is either an iterator over
   <code>cts.region</code> values or an iterator over strings containing
   the serialized regions, depending on whether or not the
   <code>strings</code> option is included.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If the range indexes provided through the <code>range-indexes</code>
   parameter contain any string that cannot be parsed into a region, an
   error is thrown.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
   that implied by the governing coordinate system name, including the
   value of the <code>coordinate-system</code> option. For example, if the
   governing coordinate system is "wgs84/double" and the <code>precision</code>
   option is "float", then the query uses single precision.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "fragment-frequency" or "item-frequency" may be specified
   in the options parameter.  If neither "fragment-frequency" nor
   "item-frequency" is specified, then the default is "fragment-frequency".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of "any", "document", "properties", or "locks"
   may be specified in the options parameter.
   If none of "any", "document", "properties", or "locks" are specified
   and there is a $query parameter, then the default is "document".
   If there is no $query parameter then the default is "any".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Only one of the "checked" or "unchecked" options may be specified
   in the options parameter.
   If neither "checked" nor "unchecked" are specified,
   then the default is "checked".</p>
  <p xmlns="http://www.w3.org/1999/xhtml">If "coordinate-system=<em>name</em>" is not specified in the options
   parameter, then the governing coordinate system is used.</p>
<p xmlns="http://www.w3.org/1999/xhtml">The value of the <code>precision</code> option takes precedence over
 that implied by the governing coordinate system name, including the
 value of the <code>coordinate-system</code> option. For example, if the
 governing coordinate system is "wgs84/double" and the <code>precision</code>
 option is "float", then the operation uses single precision.
</p>
  </apidoc:usage>
    <apidoc:see-also-list>
  <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2386523'>Geospatial Search Applications</a> in the <em>Search Developer's Guide</em>
  </apidoc:see-also>
</apidoc:see-also-list>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
cts:match-regions(
  cts:element-reference(xs:QName("parcel")),
  "intersects",
  (cts:polygon("POLYGON((1 1,2 2,0 1,1 1))"),cts:circle(10,cts:point(7,0))))
)

==&gt; Any parcel that intersects either the triangle with vertices
    (1,1), (2,2), (0,1), or the circle of radius 10 centered at (7,0).
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
cts.matchRegions(cts.elementReference('parcel'), 'intersects',
  [cts.polygon('POLYGON((1 1,2 2,0 1,1 1))'), cts.circle(10,cts.point(7,0))])

==&gt; Any parcel that intersects either the triangle with vertices
    (1,1), (2,2), (0,1), or the circle of radius 10 centered at (7,0).
  </pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: NOTE: newlines added for readability :)
let $africa := cts:polygon(
  "POLYGON((32.34375 34.74161249883172,37.265625
   28.149503211544566,56.07421875 8.059229627200192,46.23046875
   -41.244772343082076,4.04296875 -39.77476948529545,-33.75
   29.53522956294847,7.03125 39.50404070558415,32.34375 34.74161249883172))")

return cts:match-regions(
  cts:element-reference(xs:QName("country")),
  "within",
  $africa,
  ("coordinate-system=wgs84"),
  cts:element-value-query(xs:QName("state-bird"), ("eagle", "turkey"))
)

==&gt; Every country in Africa that has either an eagle or a turkey as
    its state bird.
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const africa = cts.polygon(
  'POLYGON((32.34375 34.74161249883172,37.265625 ' +
  '28.149503211544566,56.07421875 8.059229627200192,46.23046875 ' +
  '-41.244772343082076,4.04296875 -39.77476948529545,-33.75 ' +
  '29.53522956294847,7.03125 39.50404070558415,32.34375 34.74161249883172))')
cts.matchRegions(
  cts.jsonPropertyReference('country'), 'within',
    africa, ['coordinate-system=wgs84'],
    cts.jsonPropertyValueQuery('state-bird', ['eagle','turkey']))

==&gt; Every country in Africa that has either an eagle or a turkey as
    its state bird.
  </pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $region_strings :=
  cts:match-regions(
    cts:element-reference(xs:QName("zone")),
    "overlaps",
    (cts:polygon((
       cts:point(0,0), cts:point(1,1),
       cts:point(0,2), cts:point(2,2),
       cts:point(2,0), cts:point(0,0)))),
    ("coordinate-system=raw", "strings")
  )
return cts:search(
  fn:doc(),
  cts:element-range-query( xs:QName("zone"), "=", $region_strings)
)

==&gt; Every document that contains a zone which overlaps with the specified
    polygon.
  </pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const regionStrings = cts.matchRegions(
  cts.jsonPropertyReference('zone'), 'overlaps',
  cts.polygon([
    cts.point(0,0), cts.point(1,1),
    cts.point(0,2), cts.point(2,2),
    cts.point(2,0), cts.point(0,0)
  ]),
  ['coordinate-system=raw', 'strings']);
cts.search(cts.jsonPropertyRangeQuery('zone', '=', regionStrings))

==&gt; Every document that contains a zone which overlaps with the specified
    polygon.
  </pre></apidoc:example>
  </apidoc:function></apidoc:module>