<apidoc:module name="ConfigurationManagementModule" category="Configuration Management"
  bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml" lib="cma">
  <apidoc:summary access="public">
    <p>The configuration management functions are used to to retrieve a configuration of an
      individual resource, a set of resources, or a full cluster, to generate a configuration from
      scenarios, and to apply a configuration.</p>
    <p>The configuration management function module is installed at the following file:</p>
    <ul>
      <li>
        <code class="xquery"><em>install_dir</em>/Modules/MarkLogic/cma.xqy</code>
        <code class="javascript"><em>install_dir</em>/Modules/MarkLogic/cma.sjs</code>
      </li>
    </ul>
    <p>where <code><em>install_dir</em></code> is the directory in which MarkLogic Server is
      installed.</p>
    <span class="xquery">
      <p>To use this module in your own XQuery modules, include the following line in your XQuery
        prolog:</p>
      <p>
        <code>import module namespace cma="http://marklogic.com/manage/config" at
          "/MarkLogic/cma.xqy"</code>
      </p>
    </span>
    <span class="javascript">
      <p>To use this module in your JavaScript code, include a <code>require</code> statement
        similar to the following in your code:</p>
      <p>
        <code>const cma = require('/MarkLogic/cma.sjs');</code>
      </p>
    </span>
  </apidoc:summary>

  <apidoc:function name="generate-config" type="cma" lib="cma" category="Configuration Management"
    bucket="XQuery Library Modules">
    <apidoc:summary> Retrieve an individual resource, set of resources, or full cluster
      configuration; generate a configuration from scenarios. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="(binary()|node())?" optional="true"> A zip file or xml|json
        configuration which filters resource configurations returned by the function. </apidoc:param>
      <apidoc:param name="config-options" type="map:map?" optional="true"> Configuration options
        control how the configuration is created. This function supports the following configuration
        options: <blockquote><dl>
            <dt>name</dt>
            <dd>The configuration profile name, for example <code>"myClusterTestConfig"</code>. </dd>
            <dt>desc</dt>
            <dd>The configuration description, for example <code>"Test configuration for my
                cluster"</code>. </dd>
            <dt class="xquery">embed-tokens</dt>
            <dt class="javascript">embedTokens</dt>
            <dd>Embed replacement tokens (ex. %%sometoken%%) in configuration. The allowed values
              are <code>true</code> or <code>false</code>. The default value is <code>false</code>
              for <code>xml|json</code> format and <code>true</code> for <code>zip</code> format. </dd>
            <dt class="xquery">include-properties</dt>
            <dt class="javascript">includeProperties</dt>
            <dd>Include resource properties in the configuration. By default, all resource
              properties are provided. If set <code>false</code> - only resource name and identifier
              are provided. The allowed values are <code>true</code> or <code>false</code>. The
              default value is <code>true</code>. </dd>
            <dt>format</dt>
            <dd>The response format; the value supplied in the <code>$format</code> parameter of the
              function overrides this value. The allowed values are <code>xml | json | zip</code>.
              The default value is <code class="xquery">xml</code><code class="javascript"
                >json</code>. </dd>
            <dt>scenario</dt>
            <dd>The scenario to generate configuration from; the value supplied in the
                <code>$scenario</code> parameter of the function overrides this value. The allowed
              values are: <code>"ha-local", "ha-shared"</code>. </dd>
            <dt>installer</dt>
            <dd>The type of the installer script to include (with a configuration in
                <code>zip</code> format). Currently the only supported value is
                <code>"ml-gradle"</code>. </dd>
            <!-- Commented out temporarily, as not implemented in 9.0-5; to be uncommented in 9.0-6.		  
          <dt class="xquery">export-database</dt>
          <dt class="javascript">exportDatabase</dt>
          <dd>The export database (with a configuration in <code>zip</code> format) controls if a database's content 
		  is included in the zip. Example of usage: Modules database.
		  As the best practice, you shall NOT use it for large databases that contain production data.
		  The value is string array: <code>["database-name", "database-id", ...]</code>.
          </dd>
-->
            <dt class="xquery">resource-type</dt>
            <dt class="javascript">resourceType</dt>
            <dd>The resource type - for selecting/filtering resources by type. The allowed values
              are: <code>"forest", "database", "server", "group", "user", "role"</code>. </dd>
            <dt class="xquery">resource-id</dt>
            <dt class="javascript">resourceId</dt>
            <dd>The list of resources' identifiers to select specific resources. The value is string
              array, for example: <code>["resource-id1", "resource-id2", ...]</code>. </dd>
            <dt class="xquery">resource-name</dt>
            <dt class="javascript">resourceName</dt>
            <dd>The regular expression to select specific resources by their names, for example
                <code>"ha-*"</code>. </dd>
          </dl></blockquote>
      </apidoc:param>
      <apidoc:param name="default-params" type="map:map?" optional="true"> Scenario-specific default
        values for parameters to be embedded into the configuration. See Usage Notes for details. </apidoc:param>
      <apidoc:param name="format" type="xs:string?" optional="true"> The response format. The
        allowed values are <code>xml | json | zip</code>. The default value is <code class="xquery"
          >xml</code><code class="javascript">json</code>. </apidoc:param>
      <apidoc:param name="scenario" type="xs:string?" optional="true"> The scenario to generate the
        configuration from. The allowed values are: <code> "ha-local", "ha-shared"</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>(binary()|node())</apidoc:return>
    <apidoc:usage>
      <p>This function retrieves selected resource(s) configuration or generates a configuration
        from scenarios. Configuration options define how the configuration is generated.</p>
      <p> The default namespace for configuration packages is
          <code>http://marklogic.com/manage/config</code>.</p>
      <p/> XML root element: <pre xml:space="preserve"><![CDATA[
<configuration xmlns="http://marklogic.com/manage/config">
      ]]></pre>
      <p> The available core scenarios are summarized below. The details on each scenario follow. <ul>
          <li><a href="#HALocal">HA Local Failover</a></li>
          <!-- Commented out temporarily, as not implemented in 9.0-5; to be uncommented in 9.0-6.
          <li><a href="#HAShared">HA Shared Disk Failover</a></li>
-->
        </ul>
      </p><p>
        <a id="HALocal"/><b>HA Local Failover</b>
        <p/> Local disk failover provides High Availability (HA) by replicating forest data to other
        hosts. When any particular host goes down, forests' replicas will mount on the other hosts. </p><p>
        <p>The parameters for HA Local Failover scenario are:</p>
        <dl>
          <dt class="xquery"><code>replica-same-zone-as-master</code></dt>
          <dt class="javascript"><code>replicaSameZoneAsMaster</code></dt>
          <dd>Create forests on hosts in the same zone. The allowed values are <code>true</code> or
              <code>false</code>. The default value is <code>true</code>.</dd>
          <dt class="xquery"><code>master-database</code></dt>
          <dt class="javascript"><code>masterDatabase</code></dt>
          <dd>Create if does not exist, add replicas (if none exist). The value is string, for
            example <code>"myHADatabase"</code>.</dd>
          <dt class="xquery"><code>triggers-database</code></dt>
          <dt class="javascript"><code>triggersDatabase</code></dt>
          <dd>Create if does not exist, add replicas (if none exist). The value is string, for
            example <code>"myHATriggers"</code>.</dd>
          <dt class="xquery"><code>schemas-database</code></dt>
          <dt class="javascript"><code>schemasDatabase</code></dt>
          <dd>Create if does not exist, add replicas (if none exist). The value is string, for
            example <code>"myHASchemas"</code>.</dd>
          <dt class="xquery"><code>security-database</code></dt>
          <dt class="javascript"><code>securityDatabase</code></dt>
          <dd>When defined, will attempt to add replicas to xdmp:security-database() (if none 
		    exist) if create-security-database-replicas is set to <code>true</code>.</dd>
          <dt class="xquery"><code>add-replica-to-existing-forests</code></dt>
          <dt class="javascript"><code>addReplicaToExistingForests</code></dt>
          <dd>When set to <code>false</code> - no attempt is made to add replicas; when set to
              <code>true</code> - replicas will be added to the forest, with total summing up to
              <code>number-of-replicas-per-forest</code>. The allowed values are <code>true</code>
            or <code>false</code>. The default value is <code>false</code>.</dd> <dt class="xquery"
              ><code>create-security-database-replicas</code></dt>
          <dt class="javascript"><code>createSecurityDatabaseReplicas</code></dt>
          <dd>When set to <code>true</code>, will create replicas for security database. Note that
            this is particularly dangerous when uninstalling a package. The default value is
              <code>false</code>.</dd> <dt class="xquery"><code>number-of-master-forests</code></dt>
          <dt class="javascript"><code>numberOfMasterForests</code></dt>
          <dd>Calculated number of master forests. The value is positive integer.</dd> <dt
            class="xquery"><code>number-of-ancillary-forests</code></dt>
          <dt class="javascript"><code>numberOfAncillaryForests</code></dt>
          <dd>Number of master forests for ancillary databases (e.g. triggers and schemas
            databases). The value is positive integer.</dd> <dt class="xquery"
              ><code>number-of-replicas-per-master-forest</code></dt>
          <dt class="javascript"><code>numberOfReplicasPerMasterForest</code></dt>
          <dd>Calculated number of replicas per master forest. The value is positive integer.</dd>
            <dt class="xquery"><code>number-of-replicas-per-ancillary-forest</code></dt>
          <dt class="javascript"><code>numberOfReplicasPerAncillaryForest</code></dt>
          <dd>Calculated number of replicas per ancillary forest. The value is positive
            integer.</dd> <dt class="xquery"><code>number-of-master-forests-per-host</code></dt>
          <dt class="javascript"><code>numberOfMasterForestsPerHost</code></dt>
          <dd>When set overrides <code>number-of-forests-per-host</code>, arbitrarily setting
            absolute number of master forests per host. The value is positive integer.</dd> <dt
            class="xquery"><code>number-of-forests-per-host</code></dt>
          <dt class="javascript"><code>numberOfForestsPerHost</code></dt>
          <dd>Calculated based on number of available hosts, equally balance forests across hosts.
            The value is positive integer.</dd> <dt class="xquery"
              ><code>master-data-directory</code></dt>
          <dt class="javascript"><code>masterDataDirectory</code></dt>
          <dd>Data directory used by master forests. The value is string, for example
              <code>"/tmp"</code> (e.g. returned by <code>xdmp:data-directory())</code> function
            call).</dd>
          <dt class="xquery"><code>master-fast-data-directory</code></dt>
          <dt class="javascript"><code>masterFastDataDirectory</code></dt>
          <dd>Fast directory used by master forests. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-large-data-directory</code></dt>
          <dt class="javascript"><code>masterLargeDataDirectory</code></dt>
          <dd>Large directory used by master forests. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-replica-data-directory</code></dt>
          <dt class="javascript"><code>masterReplicaDataDirectory</code></dt>
          <dd>Data directory used by master forest replicas. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-replica-fast-data-directory</code></dt>
          <dt class="javascript"><code>masterReplicaFastDataDirectory</code></dt>
          <dd>Fast directory used by master forest replicas. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-replica-large-data-directory</code></dt>
          <dt class="javascript"><code>masterReplicaLargeDataDirectory</code></dt>
          <dd>Large directory used by master forest replicas. The value is string, for example
              <code>"/tmp"</code>.</dd>
        </dl>
        <!-- Commented out temporarily, as not implemented in 9.0-5; to be uncommented in 9.0-6.  
      </p><p>
        <a id="HAShared"/><b>HA Shared Disk Failover</b>
        <p/> Shared disk failover provides High Availability (HA) via setting up forests to use a shared file system. 
		When a host goes down, other host nodes will mount forests.</p><p>
      <p>The parameters for HA Shared Disk Failover scenario are:</p>
      <dl>
        <dt><code>prefix</code></dt>
        <dd>All created resource names will use this prefix.
        The value is string, for example <code>"ha-"</code>.</dd>
        <dt class="xquery"><code>failover-same-zone-as-master</code></dt>
        <dt class="javascript"><code>failoverSameZoneAsMaster</code></dt>
        <dd>Create forests on hosts in the same zone.
        The allowed values are <code>true</code> or <code>false</code>. 
        The default value is <code>false</code>.</dd>
        <dt><code>hosts</code></dt>
        <dd>Explicitly define list of hosts to use for HA. 
        The value is array of strings.</dd>
        <dt class="xquery"><code>master-hosts</code></dt>
        <dt class="javascript"><code>masterHosts</code></dt>
        <dd>Denote host(s) to use for master forests. 
        The value is array of strings.</dd>
        <dt class="xquery"><code>master-database</code></dt>
        <dt class="javascript"><code>masterDatabase</code></dt>
        <dd>Denote existing master database (which adds replicas to master forests). 
        The value is string, for example <code>"myHADatabase"</code>.</dd>
        <dt class="xquery"><code>triggers-database</code></dt>
        <dt class="javascript"><code>triggersDatabase</code></dt>
        <dd>Denote existing trigger database (which adds replicas to master forests). 
        The value is string, for example <code>"myHATriggers"</code>.</dd>
        <dt class="xquery"><code>add-failovers-to-existing-database-forests</code></dt>
        <dt class="javascript"><code>addFailoversToExistingDatabaseForests</code></dt>
        <dd>Whether to add failovers to existing database forests. 
        The allowed values are <code>true</code> or <code>false</code>. 
        The default value is <code>false</code>.</dd>
        <dt class="xquery"><code>forest-to-vcpu-ratio</code></dt>
        <dt class="javascript"><code>forestToVcpuRatio</code></dt>
        <dd>Calculated ratio of forests to vCPUs, e.g. number of vCPUs / 4. 
        The value is positive integer.</dd>
        <dt class="xquery"><code>number-of-master-forests</code></dt>
        <dt class="javascript"><code>numberOfMasterForests</code></dt>
        <dd>If forests to vCPUs ratio is less than one then this parameter will be equal to 3.
		Otherwise it will be equal to the forests to vCPUs ratio. 
        The value is positive integer.</dd>
        <dt class="xquery"><code>number-of-forests-per-host</code></dt>
        <dt class="javascript"><code>numberOfForestsPerHost</code></dt>
        <dd>Calculated based on number of available hosts, equally balance forests across hosts. 
        The value is positive integer.</dd>
        <dt class="xquery"><code>master-data-directory</code></dt>
        <dt class="javascript"><code>masterDataDirectory</code></dt>
        <dd>Data directory used by master forests. 
        The value is string, for example <code>"/tmp"</code> 
		(e.g. returned by <code>xdmp:data-directory())</code> function call).</dd>
        <dt class="xquery"><code>master-fast-data-directory</code></dt>
        <dt class="javascript"><code>masterFastDataDirectory</code></dt>
        <dd>Fast directory used by master forests. 
        The value is string, for example <code>"/tmp"</code>.</dd>
        <dt class="xquery"><code>master-large-data-directory</code></dt>
        <dt class="javascript"><code>masterLargeDataDirectory</code></dt>
        <dd>Large directory used by master forests. 
        The value is string, for example <code>"/tmp"</code>.</dd>
      </dl>
-->
      </p><p> </p>
    </apidoc:usage>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Generate configuration of the entire cluster. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:generate-config()
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Generate configuration of the entire cluster without properties - just resource names and identifiers. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:generate-config((),map:new()=>map:with("include-properties",false()),(),"xml",())
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Generate forests configuration. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:generate-config((),map:new()=>map:with("resource-type","forest"),(),"xml",())
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Generate configuration XML of ha-local scenario. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:generate-config((),(),(),"xml","ha-local")
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Generate configuration ZIP of ha-local scenario. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:generate-config((),(),(),"zip","ha-local")
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="javascript">
      <pre xml:space="preserve"><![CDATA[
// Generate configuration of the entire cluster.
'use strict';
const cma = require('/MarkLogic/cma.sjs');
cma.generateConfig();
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="javascript">
      <pre xml:space="preserve"><![CDATA[
// Generate configuration, selecting all forests with resourceType configuration option.
'use strict';
const cma = require('/MarkLogic/cma.sjs');
cma.generateConfig({},{"resourceType":"forest"});
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="javascript">
      <pre xml:space="preserve"><![CDATA[
// Generate configuration JSON of ha-local scenario.
'use strict';
const cma = require('/MarkLogic/cma.sjs');
cma.generateConfig({},{},{},"json","ha-local");
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="javascript">
      <pre xml:space="preserve"><![CDATA[
// Generate configuration XML of ha-local scenario where replicas will be added to the existing forests.
'use strict';
const cma = require('/MarkLogic/cma.sjs');
cma.generateConfig(null,null,{"numberOfForestsPerHost":3},"xml","ha-local");
    ]]></pre>
    </apidoc:example>

  </apidoc:function>


  <apidoc:function name="apply-config" type="cma" lib="cma" category="Configuration Management"
    bucket="XQuery Library Modules">
    <apidoc:summary> Apply a named configuration, overriding parameters and setting options. </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="(binary()|node())*" optional="false"> A zip file or xml|json
        configuration to be applied. </apidoc:param>
      <apidoc:param name="config-options" type="map:map?" optional="true"> Configuration options
        control how the configuration is applied. This function supports the following configuration
        options: <blockquote><dl>
            <dt>name</dt>
            <dd>The configuration profile name to be run, for example
                <code>"myClusterTestConfig"</code>. </dd>
            <dt>format</dt>
            <dd>The configuration format; the value supplied in the <code>$format</code> parameter
              of the function overrides this value. The allowed values are <code>xml | json</code>.
              The default value is <code class="xquery">xml</code><code class="javascript"
                >json</code>. </dd>
            <!-- Commented out temporarily, as not implemented in 9.0-5; to be uncommented in 9.0-6.		  
          <dt class="xquery">require-params</dt>
          <dt class="javascript">requireParams</dt>
          <dd>Include parameter values to override default values when the configuration is applied. 
		  The allowed values are <code>true</code> or <code>false</code>. 
		  The default value is <code>false</code>.
		  When set to <code>true</code>, <code>$params</code> parameter must be non-empty sequence, otherwise CMA-INVALIDPARAMS is thrown.
          </dd>
-->
            <dt class="xquery">resource-type</dt>
            <dt class="javascript">resourceType</dt>
            <dd>The resource type the configuration applies to. The allowed values are:
                <code>"forest", "database", "server", "group", "user", "role"</code>. </dd>
            <dt class="xquery">resource-id</dt>
            <dt class="javascript">resourceId</dt>
            <dd>The list of specific resources' identifiers to apply the configuration to. The value
              is string array, for example <code>["resource-id1", "resource-id2", ...]</code>. </dd>
            <dt class="xquery">resource-name</dt>
            <dt class="javascript">resourceName</dt>
            <dd>The regular expression to select specific resources by their names, for example
                <code>"ha-*"</code>. </dd>
          </dl></blockquote>
      </apidoc:param>
      <apidoc:param name="params" type="map:map?" optional="true"> Scenario-specific values for
        parameters to override default values when the configuration is applied. See Usage Notes for
        details. </apidoc:param>
      <apidoc:param name="format" type="xs:string?" optional="true"> The response format. The
        allowed values are empty sequence or <code>xml | json</code>. The default value is <code
          class="xquery">xml</code><code class="javascript">json</code>. </apidoc:param>
    </apidoc:params>
    <apidoc:return>(empty-seq|node())</apidoc:return>
    <apidoc:usage>
      <p>This function applies a named configuration, overriding parameters and setting options.</p>
      <p> The default namespace for configuration packages is
          <code>http://marklogic.com/manage/config</code>.</p>
      <p/> XML root element: <pre xml:space="preserve"><![CDATA[
<configuration xmlns="http://marklogic.com/manage/config">
      ]]></pre>
      <p> The available core scenarios are summarized below. The details on each scenario follow. <ul>
          <li><a href="#HALocal">HA Local Failover</a></li>
          <!-- Commented out temporarily, as not implemented in 9.0-5; to be uncommented in 9.0-6.		  
          <li><a href="#HAShared">HA Shared Disk Failover</a></li>
-->
        </ul>
      </p><p>
        <a id="HALocal"/><b>HA Local Failover</b>
        <p/> Local disk failover provides High Availability (HA) by replicating forest data to other
        hosts. When any particular host goes down, forests' replicas will mount on the other hosts. </p><p>
        <p>The parameters for HA Local Failover scenario are:</p>
        <dl>
          <dt class="xquery"><code>replica-same-zone-as-master</code></dt>
          <dt class="javascript"><code>replicaSameZoneAsMaster</code></dt>
          <dd>Create forests on hosts in the same zone. The allowed values are <code>true</code> or
              <code>false</code>. The default value is <code>true</code>.</dd>
          <dt class="xquery"><code>master-database</code></dt>
          <dt class="javascript"><code>masterDatabase</code></dt>
          <dd>Create if does not exist, add replicas (if none exist). The value is string, for
            example <code>"myHADatabase"</code>.</dd>
          <dt class="xquery"><code>triggers-database</code></dt>
          <dt class="javascript"><code>triggersDatabase</code></dt>
          <dd>Create if does not exist, add replicas (if none exist). The value is string, for
            example <code>"myHATriggers"</code>.</dd>
          <dt class="xquery"><code>schemas-database</code></dt>
          <dt class="javascript"><code>schemasDatabase</code></dt>
          <dd>Create if does not exist, add replicas (if none exist). The value is string, for
            example <code>"myHASchemas"</code>.</dd>
          <dt class="xquery"><code>security-database</code></dt>
          <dt class="javascript"><code>securityDatabase</code></dt>
          <dd>When defined, will attempt to add replicas to xdmp:security-database() (if none
            exist). The value is string, for example <code>"Security"</code>.</dd>
          <dt class="xquery"><code>add-replica-to-existing-forests</code></dt>
          <dt class="javascript"><code>addReplicaToExistingForests</code></dt>
          <dd>When set to <code>false</code> - no attempt is made to add replicas; when set to
              <code>true</code> - replicas will be added to the forest, with total summing up to
              <code>number-of-replicas-per-forest</code>. The allowed values are <code>true</code>
            or <code>false</code>. The default value is <code>false</code>.</dd>
          <dt class="xquery"><code>number-of-master-forests</code></dt>
          <dt class="javascript"><code>numberOfMasterForests</code></dt>
          <dd>Calculated number of master forests. The value is positive integer.</dd>
          <dt class="xquery"><code>number-of-replicas-per-forest</code></dt>
          <dt class="javascript"><code>numberOfReplicasPerForest</code></dt>
          <dd>Calculated number of replicas per forest. The value is positive integer.</dd>
          <dt class="xquery"><code>number-of-forests-per-host</code></dt>
          <dt class="javascript"><code>numberOfForestsPerHost</code></dt>
          <dd>Calculated based on number of available hosts, equally balance forests across hosts.
            The value is positive integer.</dd>
          <dt class="xquery"><code>master-data-directory</code></dt>
          <dt class="javascript"><code>masterDataDirectory</code></dt>
          <dd>Data directory used by master forests. The value is string, for example
              <code>"/tmp"</code> (e.g. returned by <code>xdmp:data-directory())</code> function
            call).</dd>
          <dt class="xquery"><code>master-fast-data-directory</code></dt>
          <dt class="javascript"><code>masterFastDataDirectory</code></dt>
          <dd>Fast directory used by master forests. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-large-data-directory</code></dt>
          <dt class="javascript"><code>masterLargeDataDirectory</code></dt>
          <dd>Large directory used by master forests. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-replica-data-directory</code></dt>
          <dt class="javascript"><code>masterReplicaDataDirectory</code></dt>
          <dd>Data directory used by master forest replicas. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-replica-fast-data-directory</code></dt>
          <dt class="javascript"><code>masterReplicaFastDataDirectory</code></dt>
          <dd>Fast directory used by master forest replicas. The value is string, for example
              <code>"/tmp"</code>.</dd>
          <dt class="xquery"><code>master-replica-large-data-directory</code></dt>
          <dt class="javascript"><code>masterReplicaLargeDataDirectory</code></dt>
          <dd>Large directory used by master forest replicas. The value is string, for example
              <code>"/tmp"</code>.</dd>
        </dl>
        <!-- Commented out temporarily, as not implemented in 9.0-5; to be uncommented in 9.0-6.	  
      </p><p>
        <a id="HAShared"/><b>HA Shared Disk Failover</b>
        <p/> Shared disk failover provides High Availability (HA) via setting up forests to use a shared file system. 
		When a host goes down, other host nodes will mount forests.</p><p>
      <p>The parameters for HA Shared Disk Failover scenario are:</p>
      <dl>
        <dt><code>prefix</code></dt>
        <dd>All created resource names will use this prefix.
        The value is string, for example <code>"ha-"</code>.</dd>
        <dt class="xquery"><code>failover-same-zone-as-master</code></dt>
        <dt class="javascript"><code>failoverSameZoneAsMaster</code></dt>
        <dd>Create forests on hosts in the same zone.
        The allowed values are <code>true</code> or <code>false</code>. 
        The default value is <code>false</code>.</dd>
        <dt><code>hosts</code></dt>
        <dd>Explicitly define list of hosts to use for HA. 
        The value is array of strings.</dd>
        <dt class="xquery"><code>master-hosts</code></dt>
        <dt class="javascript"><code>masterHosts</code></dt>
        <dd>Denote host(s) to use for master forests. 
        The value is array of strings.</dd>
        <dt class="xquery"><code>master-database</code></dt>
        <dt class="javascript"><code>masterDatabase</code></dt>
        <dd>Denote existing master database (which adds replicas to master forests). 
        The value is string, for example <code>"myHADatabase"</code>.</dd>
        <dt class="xquery"><code>triggers-database</code></dt>
        <dt class="javascript"><code>triggersDatabase</code></dt>
        <dd>Denote existing trigger database (which adds replicas to master forests). 
        The value is string, for example <code>"myHATriggers"</code>.</dd>
        <dt class="xquery"><code>add-failovers-to-existing-database-forests</code></dt>
        <dt class="javascript"><code>addFailoversToExistingDatabaseForests</code></dt>
        <dd>Whether to add failovers to existing database forests. 
        The allowed values are <code>true</code> or <code>false</code>. 
        The default value is <code>false</code>.</dd>
        <dt class="xquery"><code>forest-to-vcpu-ratio</code></dt>
        <dt class="javascript"><code>forestToVcpuRatio</code></dt>
        <dd>Calculated ratio of forests to vCPUs, e.g. number of vCPUs / 4. 
        The value is positive integer.</dd>
        <dt class="xquery"><code>number-of-master-forests</code></dt>
        <dt class="javascript"><code>numberOfMasterForests</code></dt>
        <dd>If forests to vCPUs ratio is less than one then this parameter will be equal to 3.
		Otherwise it will be equal to the forests to vCPUs ratio. 
        The value is positive integer.</dd>
        <dt class="xquery"><code>number-of-forests-per-host</code></dt>
        <dt class="javascript"><code>numberOfForestsPerHost</code></dt>
        <dd>Calculated based on number of available hosts, equally balance forests across hosts. 
        The value is positive integer.</dd>
        <dt class="xquery"><code>master-data-directory</code></dt>
        <dt class="javascript"><code>masterDataDirectory</code></dt>
        <dd>Data directory used by master forests. 
        The value is string, for example <code>"/tmp"</code> 
		(e.g. returned by <code>xdmp:data-directory())</code> function call).</dd>
        <dt class="xquery"><code>master-fast-data-directory</code></dt>
        <dt class="javascript"><code>masterFastDataDirectory</code></dt>
        <dd>Fast directory used by master forests. 
        The value is string, for example <code>"/tmp"</code>.</dd>
        <dt class="xquery"><code>master-large-data-directory</code></dt>
        <dt class="javascript"><code>masterLargeDataDirectory</code></dt>
        <dd>Large directory used by master forests. 
        The value is string, for example <code>"/tmp"</code>.</dd>
      </dl>
-->
      </p><p> </p>
    </apidoc:usage>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Apply configuration to create three forests. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:apply-config(
    <configuration xmlns="http://marklogic.com/manage/config">
      <configs>
        <config>
          <forests>
            <forest>
              <forest-name>f11</forest-name>
            </forest>
            <forest>
              <forest-name>f21</forest-name>
            </forest>
            <forest>
              <forest-name>f31</forest-name>
            </forest>
          </forests>
        </config>
      </configs>
    </configuration>)
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Apply configuration ZIP. :)
xquery version "1.0-ml";
import module namespace cma="http://marklogic.com/manage/config"
   at "/MarkLogic/cma.xqy";
cma:apply-config($zip)
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Create server embedding tokens for replacement by parameters. :)
xquery version "1.0-ml";
 
import module namespace cma="http://marklogic.com/manage/config"
at "/MarkLogic/cma.xqy";
 
let $config := <configuration xmlns="http://marklogic.com/manage/config">
    <configs>
      <config>
      <servers>
        <server>
          <server-name>test1</server-name>
          <server-type>http</server-type>
          <group-name>Default</group-name>
          <root>/</root>
          <port>%%mlFinalPort%%</port>
          <modules-database>Modules</modules-database>
          <content-database>Documents</content-database>
          <authentication>basic</authentication>
        </server>
      </servers>
      </config>
    </configs>
  </configuration>
 
let $params := map:new()
        =>map:with("mlFinalPort", 8011)
     
return cma:apply-config($config,(),$params)
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="xquery">
      <pre xml:space="preserve"><![CDATA[
(: Create protected-paths and query-rolesets. :)
xquery version "1.0-ml";
 
import module namespace cma="http://marklogic.com/manage/config"
at "/MarkLogic/cma.xqy";
 
let $config := <configuration xmlns="http://marklogic.com/manage/config">
    <configs>
      <config>
      <protected-paths>
        <protected-path>
            <path-expression>//h</path-expression>
            <path-namespaces/>
            <permissions>
               <permission>
                  <role-name>manage-user</role-name>
                  <capability>read</capability>
               </permission>
            </permissions>
        </protected-path>
      </protected-paths>
      <query-rolesets>
        <query-roleset>
          <role-name>manage-admin</role-name>
        </query-roleset>
      </query-rolesets>
      </config>
    </configs>
  </configuration>
     
return cma:apply-config($config)
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="javascript">
      <pre xml:space="preserve"><![CDATA[
// Apply configuration ZIP.
'use strict';
const cma = require('/MarkLogic/cma.sjs');
cma.applyConfig($zip);
    ]]></pre>
    </apidoc:example>

    <apidoc:example class="javascript">
      <pre xml:space="preserve"><![CDATA[
// Create a REST server.
'use strict';

var cma = require('/MarkLogic/cma.sjs');

var json = {
    "config": [{
    "forest":[{"forest-name":"mydb1-f1"},{"forest-name":"mymodulesdb-f1"}],
        "database": [{
                "database-name": "myDb",
        "forest":["mydb1-f1"]
            },
            {
                "database-name": "myModulesDb",
        "forest":["mymodulesdb1-f1"]
            }
        ],
        "server": [{
            "server-name": "restapiServer",
            "server-type": "http",
      "group-name":"Default",
            "root": "/",
            "port": "8900",
      "url-rewriter": "/MarkLogic/rest-api/8000-rewriter.xml",
            "content-database": "myDb",
            "modules-database": "myModulesDb"
        }]
    }]
};
 
cma.applyConfig(json);
    ]]></pre>
    </apidoc:example>

  </apidoc:function>

</apidoc:module>
