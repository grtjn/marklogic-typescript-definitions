<apidoc:module name="StringBuiltins" category="StringBuiltins" lib="fn" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public" category="StringBuiltins">
<p xmlns="http://www.w3.org/1999/xhtml">The string built-in functions are XQuery functions defined to operate on
string values. They are defined in
<a href="http://www.w3.org/TR/xpath-functions/">XQuery 1.0
and XPath 2.0 Functions and Operators</a>.
</p>
<p xmlns="http://www.w3.org/1999/xhtml">The string built-in functions use the <code>fn</code> namespace
prefix, which is predefined in the server.  Also, the <code>fn</code>
prefix is the default prefix for function calls if none is specified.</p>
</apidoc:summary><apidoc:function name="codepoints-to-string" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Creates an <code xmlns="http://www.w3.org/1999/xhtml">xs:string</code> from a sequence of Unicode code points.
Returns the zero-length string if $arg is the empty sequence.
If any of the code points in $arg is not a legal XML character,
an error is raised.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:integer*">
A sequence of Unicode code points.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:codepoints-to-string(
  (104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100))
=&gt; hello world
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.codepointsToString(
  [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]);
=&gt; hello world
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="string-to-codepoints" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns the sequence of Unicode code points that constitute an xs:string.
If $arg is a zero-length string or the empty sequence, the empty sequence is
returned.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:string">
A string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:string-to-codepoints("Thèrése")

returns the sequence (84, 104, 233, 114, 232, 115, 101)</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.stringToCodepoints("Thérèse")

returns the sequence (84, 104, 233, 114, 232, 115, 101)</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="compare" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
  Returns -1, 0, or 1, depending on whether the value of the $comparand1 
  is respectively less than, equal to, or greater than the value of 
  $comparand2, according to the rules of the collation that is used.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="comparand1" type="xs:string?">
  A string to be compared.
  </apidoc:param>
      <apidoc:param name="comparand2" type="xs:string?">
  A string to be compared.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string" optional="true">
  The optional name of a valid collation URI.  For information on the
  collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:compare("hello", "goodbye")

=&gt; 1
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.compare("hello", "goodbye")

=&gt; 1
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="codepoint-equal" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns <code>true</code> if the specified parameters are the same Unicode
code point, otherwise returns <code>false</code>. The codepoints are
compared according to the Unicode code point collation
(<a href="http://www.w3.org/2005/xpath-functions/collation/codepoint">http://www.w3.org/2005/xpath-functions/collation/codepoint</a>).
</p>
<p xmlns="http://www.w3.org/1999/xhtml">
If either argument is the empty sequence, the result is the empty sequence.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="comparand1" type="xs:string?">
A string to be compared.
  </apidoc:param>
      <apidoc:param name="comparand2" type="xs:string?">
A string to be compared.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $cp := fn:string-to-codepoints("123456")
return
fn:codepoint-equal("123456", fn:codepoints-to-string($cp) )

=&gt; true
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var cp = fn.stringToCodepoints("123456");
fn.codepointEqual("123456", fn.codepointsToString(cp) );

=&gt; true
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="concat" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns the <code>xs:string</code> that is the concatenation of the values
of the specified parameters. Accepts two or more <code>xs:anyAtomicType</code>
arguments and casts them to <code>xs:string</code>. If any of the parameters
is the empty sequence, the parameter is treated as the zero-length string.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parameter1" type="xs:anyAtomicType?">
A value.
  </apidoc:param>
      <apidoc:param name="parameterN" type="xs:anyAtomicType?,..." optional="true">
A value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:concat("a", "b", "c")

=&gt; abc
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.concat("a", "b", "c")

=&gt; abc
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="string-join" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">
Returns an <code>xs:string</code> created by concatenating the members of
the $parameter1 sequence using $parameter2 as a separator. If the value of $arg2 is the
zero-length string, then the members of $parameter1 are concatenated without a
separator.
</p><p xmlns="http://www.w3.org/1999/xhtml">
If the value of $parameter1 is the empty sequence, the zero-length string is returned.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parameter1" type="xs:string*">
  A sequence of strings.
  </apidoc:param>
      <apidoc:param name="parameter2" type="xs:string">
  A separator string to concatenate between the items in $parameter1.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:string-join(("hello", "goodbye"), " and ")

=&gt; hello and goodbye
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $string := "this is a string"
return
fn:string-join(fn:tokenize($string, " "),
               "-")

=&gt; this-is-a-string
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.stringJoin(["hello", "goodbye"], " and ");

=&gt; hello and goodbye
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var string = "this is a string";
fn.stringJoin(fn.tokenize(string, " "),
               "-");

=&gt; this-is-a-string
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="starts-with" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
 Returns <code xmlns="http://www.w3.org/1999/xhtml">true</code> if the first parameter starts with the string
 from the second parameter, otherwise returns <code xmlns="http://www.w3.org/1999/xhtml">false</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parameter1" type="xs:string?">
  The string from which to test.
  </apidoc:param>
      <apidoc:param name="parameter2" type="xs:string?">
  The string to test whether it is at the beginning of the first parameter.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string" optional="true">
  The optional name of a valid collation URI.  For information on the
  collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:starts-with("abcd", "ab")

=&gt; true
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.startsWith("abcd", "ab");

=&gt; true
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="ends-with" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
 Returns <code xmlns="http://www.w3.org/1999/xhtml">true</code> if the first parameter ends with the string
 from the second parameter, otherwise returns <code xmlns="http://www.w3.org/1999/xhtml">false</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parameter1" type="xs:string?">
  The parameter from which to test.
  </apidoc:param>
      <apidoc:param name="parameter2" type="xs:string?">
  The string to test whether it is at the end of the first parameter.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string" optional="true">
  The optional name of a valid collation URI.  For information on the
  collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:ends-with("this is a string", "a string")

=&gt; true
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.endsWith("this is a string", "a string");

=&gt; true
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="contains" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
  Returns <code xmlns="http://www.w3.org/1999/xhtml">true</code> if the first parameter contains the string
  from the second parameter, otherwise returns <code xmlns="http://www.w3.org/1999/xhtml">false</code>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parameter1" type="xs:string?">
  The string from which to test.
  </apidoc:param>
      <apidoc:param name="parameter2" type="xs:string?">
  The string to test for existence in the first parameter.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string" optional="true">
  The optional name of a valid collation URI.  For information on the
  collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:contains("this is a string", "s a s")

=&gt; true
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.contains("this is a string", "s a s");

=&gt; true
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="substring" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Returns a substring starting from the $startingLoc and continuing
for $length characters.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="sourceString" type="xs:string?">
  The string from which to create a substring.
  </apidoc:param>
      <apidoc:param name="startingLoc" type="xs:double">
  The number of characters from the start of the $sourceString.
  </apidoc:param>
      <apidoc:param name="length" type="xs:double" optional="true">
  The number of characters beyond the $startingLoc.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:substring("123456", 2, 2)

=&gt; "23"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.substring("123456", 2, 2);

=&gt; "23"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="string-length" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Returns an integer representing the length of the specified string.  The
length is 1-based, so a string that is one character long returns a value of 1.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="sourceString" type="xs:string?" optional="true">
  The string to calculate the length.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:string-length("12345")

=&gt; 5
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.stringLength("12345")

=&gt; 5
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="substring-before" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
  Returns the substring created by taking all of the input characters
  that occur before the specified $before characters.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="input" type="xs:string?">
  The string from which to create the substring.
  </apidoc:param>
      <apidoc:param name="before" type="xs:string?">
  The string before which the substring is created.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string" optional="true">
  The optional name of a valid collation URI.  For information on the
  collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:substring-before("abcdef", "def")

=&gt; abc
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.substringBefore("abcdef", "def");

=&gt; abc
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="substring-after" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
  Returns the substring created by taking all of the input characters
  that occur after the specified $after characters.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="input" type="xs:string?">
  The string from which to create the substring.
  </apidoc:param>
      <apidoc:param name="after" type="xs:string?">
  The string after which the substring is created.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string" optional="true">
  The optional name of a valid collation URI.  For information on the
  collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:substring-after("123456", "3")

=&gt; "456"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.substringAfter("123456", "3");

=&gt; "456"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="normalize-space" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
 Returns the specified string with normalized whitespace, which strips off
 any leading or trailing whitespace and replaces any other sequences of
 more than one whitespace characters with a single space
 character (#x20).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="input" type="xs:string?" optional="true">
  The string from which to normalize whitespace.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:normalize-space("
this
is
  a string
  ")

=&gt; this is a string
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.normalizeSpace(" \n\
this \n\
is    \n\
  a string   \n\
  ");

=&gt; this is a string
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="normalize-unicode" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Return the argument normalized according to the
normalization criteria for a normalization form identified by the
value of $normalizationForm. The effective value of the
$normalizationForm is computed by removing leading and trailing
blanks, if present, and converting to upper case.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:string?">
  The string to normalize.
  </apidoc:param>
      <apidoc:param name="normalizationForm" type="xs:string" optional="true">
  The form under which to normalize the specified string: NFC, NFD,
  NFKC, or NFKD.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:normalize-unicode("Abcd")

=&gt; Abcd
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.normalizeUnicode("Abcd");

=&gt; Abcd
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="upper-case" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Returns the specified string converting all of the characters to upper-case
characters.  If a character does not have a corresponding upper-case character,
then the original character is returned. The upper-case characters are
determined using the <a href="http://www.unicode.org/unicode/reports/tr21/" xmlns="http://www.w3.org/1999/xhtml">Unicode Case Mappings</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string?">
  The string to upper-case.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:upper-case("Abcd")

=&gt; ABCD 
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.upperCase("Abcd");

=&gt; ABCD 
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="lower-case" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Returns the specified string converting all of the characters to lower-case
characters.  If a character does not have a corresponding lower-case character,
then the original character is returned. The lower-case characters are
determined using the <a href="http://www.unicode.org/unicode/reports/tr21/" xmlns="http://www.w3.org/1999/xhtml">Unicode Case Mappings</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string?">
  The string to convert.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:lower-case("aBCD")

=&gt; abcd 
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.lowerCase("aBCD");

=&gt; abcd 
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="translate" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
Returns a string where every character in $src that occurs in some
position in the $mapString is translated into the $transString character
in the corresponding location of the $mapString character.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="src" type="xs:string?">
  The string to translate characters.
  </apidoc:param>
      <apidoc:param name="mapString" type="xs:string?">
  The string representing characters to be translated.
  </apidoc:param>
      <apidoc:param name="transString" type="xs:string?">
  The string representing the characters to which the
  $mapString characters are translated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:translate("abcd", "abcd", "wxyz")

=&gt; wxyz
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.translate("abcd", "abcd", "wxyz");

=&gt; wxyz
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="string-pad" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
   [0.9-ml only] Returns a string representing the $padString
   concatenated with itself the number of times specifed in $padCount.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="padString" type="xs:string?">
  The string to pad.
  </apidoc:param>
      <apidoc:param name="padCount" type="xs:integer">
  The number of times to pad the string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:string-pad("abc", 3)

=&gt; abcabcabc
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="escape-uri" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
 This is a May 2003 function, and is only available in compatibility mode
 (XQuery 0.9-ML)--it has been replaced with <code xmlns="http://www.w3.org/1999/xhtml">fn:encode-for-uri</code>,
 <code xmlns="http://www.w3.org/1999/xhtml">fn:iri-to-uri</code>, and <code xmlns="http://www.w3.org/1999/xhtml">fn:escape-html-uri</code>.
 Returns a string representing the specified URI either with escaped reserved
 characters ($escape-reserved=true) or with the reserved characters left as
 specified ($escape-reserved=true).  For more details, see the <a href="http://www.w3.org/TR/2003/WD-xpath-functions-20030502/#func-escape-uri" xmlns="http://www.w3.org/1999/xhtml">W3C XQuery Functions and Operators specification</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri-part" type="xs:string">
  A string representing an unescaped URI.
  </apidoc:param>
      <apidoc:param name="escape-reserved" type="xs:boolean">
  Specify a boolean value of <code xmlns="http://www.w3.org/1999/xhtml">true</code> to return an escaped URI or
  a boolean value of <code xmlns="http://www.w3.org/1999/xhtml">false</code> to return an unescaped URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:escape-uri("http://developer.marklogic.com", fn:true())

=&gt; http%3A%2F%2Fdeveloper.marklogic.com

fn:escape-uri("http://developer.marklogic.com", fn:false())

=&gt; http://developer.marklogic.com
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="encode-for-uri" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
   Invertible function that escapes characters required to be escaped
   inside path segments of URIs.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri-part" type="xs:string">
  A string representing an unescaped URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:encode-for-uri("http://example.com/Weather/Los%20Angeles#ocean")
=&gt; "http%3A%2F%2Fexample.com%2FWeather%2FLos%2520Angeles%23ocean"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.encodeForUri("http://example.com/Weather/Los%20Angeles#ocean");
=&gt; "http%3A%2F%2Fexample.com%2FWeather%2FLos%2520Angeles%23ocean"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="iri-to-uri" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
   Idempotent function that escapes non-URI characters.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri-part" type="xs:string">
  A string representing an unescaped URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:iri-to-uri("http://example.com/Weather/Los%20Angeles#ocean")
=&gt; "http://example.com/Weather/Los%20Angeles#ocean"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.iriToUri("http://example.com/Weather/Los%20Angeles#ocean");
=&gt; "http://example.com/Weather/Los%20Angeles#ocean"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="escape-html-uri" type="builtin" lib="fn" category="StringBuiltins" bucket="W3C-Standard Functions">
    <apidoc:summary>
   %-escapes everything except printable ASCII characters.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="uri-part" type="xs:string">
  A string representing an unescaped URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:escape-html-uri("http://example.com/Weather/Los Angeles#ocean")
=&gt; "http://example.com/Weather/Los Angeles#ocean"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.escapeHtmlUri("http://example.com/Weather/Los Angeles#ocean");
=&gt; "http://example.com/Weather/Los Angeles#ocean"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="encode-for-NCName" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
   Invertible function that escapes characters required to be part of an NCName.
   This is useful when translating names from other representations such as
   JSON to XML.
   Given any string, the result is always a valid NCName.
   Providing all names are passed through this function the result is
   distinct NCNames so the results can be used for searching as well as
   name generation.
   The inverse function is 
   <a href="#xdmp:decode-for-NCName" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:decode-for-NCName</code></a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
  A string which is used as an NCName (such as the localname for an
  element or attribute).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:encode-for-NCName("A name")
=&gt; "A_20_Name"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.encodeForNCName("A name");
=&gt; "A_20_Name"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="decode-from-NCName" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
   Invertible function that decodes characters an NCName produced by
   <a href="#xdmp:encode-for-NCName" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:encode-for-NCName</code></a>.
   Given the NCName produced by <code xmlns="http://www.w3.org/1999/xhtml">xdmp:encode-for-NCName</code> this
   function returns the original string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
  A string representing an NCName.  This string must have been the result of
  a previous call to <code xmlns="http://www.w3.org/1999/xhtml">xdmp:decode-from-NCName</code> or undefined
  results will occur.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:decode-from-NCName("A_20_Name")
=&gt; "A name"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.decodeFromNCName("A_20_Name")
=&gt; "A name"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="position" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns an integer value representing the starting position of a
  string within the search string. Note, the string starting position is 1.
  If the first parameter is empty, the result is the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="test" type="xs:string?">
  The string to test for existence in the second parameter.
  </apidoc:param>
      <apidoc:param name="target" type="xs:string?">
  The string from which to test.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string?" optional="true">
The optional name of a valid collation URI.  For information on the
collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:position("chin","searchintext")

=&gt; 5
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.position("chin","searchintext");

=&gt; 5
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="initcap" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the string where the first letter of each token has been uppercased.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string?">
  The string to modify.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:initcap("my simple example")

=&gt; "My Simple Example"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.initcap("my simple example");

=&gt; "My Simple Example"
</pre></apidoc:example>
  </apidoc:function></apidoc:module>