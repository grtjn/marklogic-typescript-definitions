<apidoc:module name="AdminBuiltins" category="AdminBuiltins" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:function name="forest-backup" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Backs up forest data files.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestID" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A forest backup pathname.  If the directory does not exist, it is
    created when you run this function.  The filesystem permissions must be
    such that the directory is writable by the
    operating system user under which MarkLogic Server is running.  The
    directory cannot be the MarkLogic Server install directory or the
    MarkLogic Server data directory.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-backup</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-backup/forest/{id}</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-backup/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Reindexing will stop while a backup or restore is in progress. </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-backup(11183608861595735720,"/backups/Data/Forests/Documents")
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestBackup(xdmp.forest("Documents"),"/space/backups");
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-restore" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Restores forest data files.
  Restarts the forest to complete the restoration.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestID" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A forest backup pathname.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-restore</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-restore/forest/{id}</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-restore/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Reindexing will stop while a backup or restore is in progress.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-restore(xdmp:forest("My-Forest"),"/backups/Data/Forests/Documents")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestRestore(xdmp.forest("My-Forest"),"/backups/Data/Forests/Documents");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-clear" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Clears forest data files, including all stands and journals.
  <p xmlns="http://www.w3.org/1999/xhtml">If any of the forests being cleared are attached to the context database,
  then <code>xdmp:forest-clear</code> is run asynchronously, returning
  immediately but doing the clear in a background thread. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If the forest being cleared is not attached to the context database, it
  is run synchronously and will block until it returns. </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The <code>xdmp:forest-clear</code> function is not transactional, and
  the best practice is to not call it in a transaction that is also doing
  updates.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    The IDs of the forests to clear. If a forest has replica forests, the
    replicas are cleared as well.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-clear</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-clear/forest/{id}</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-clear/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-clear(11183608861595735720)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestClear(11183608861595735720)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-restart" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Restarts a forest. If multiple forest IDs are specified, the restarts
  occur in parallel.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-restart</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-restart/forest/{id}</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-restart/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-restart((11183608861595735720,29382837261839278))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestRestart([11183608861595735720,29382837261839278]);
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-restart(xdmp:database-forests(xdmp:database("My-Database")))
=&gt; Restarts all of the forests in the database named My-Database
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestRestart(xdmp.databaseForests(xdmp.database("My-Database")));
=&gt; Restarts all of the forests in the database named My-Database
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-rollback" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Rolls forests back to a previous point in time, marking any fragment
  newer than the specified timestamp as deleted.  Also, any fragments that
  were created before the specified timestamp and deleted after will be
  rolled back (un-deleted).
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="timestamp" type="xs:unsignedLong">
    The system timestamp to which you want to roll back.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-rollback</code></p>
</apidoc:privilege>
    <apidoc:usage>
<p xmlns="http://www.w3.org/1999/xhtml">If the timestamp specified is greater than the current system timestamp
(that is, greater than the value of <code>xdmp:request-timestamp()</code>),
then an exception is thrown.</p>
<p xmlns="http://www.w3.org/1999/xhtml">If the specified timestamp is less than (earlier) then the oldest
timestamp in the specified forest(s), then an exception is thrown.</p>
<p xmlns="http://www.w3.org/1999/xhtml">You should not have any updates occurring on a forest while it is being
rolled back; the best practice is for the forest to be quiesced during
a rollback operation.</p>
<p xmlns="http://www.w3.org/1999/xhtml">If you have failover replication configured for a forest, the replica
forest(s) will be rolled back at the same time as the specified forest(s).</p>
<p xmlns="http://www.w3.org/1999/xhtml">If MarkLogic Server restarts during a rollback operation, the rollback will
complete when the forest comes back online.</p>
<p xmlns="http://www.w3.org/1999/xhtml">You can only roll back a forest that is in the "Open" state.</p>
<p xmlns="http://www.w3.org/1999/xhtml">The <code>updates-allowed</code> setting must be set to
 <code>all</code> in order to successfully roll a forest back
to a previous timestamp.</p>
<p xmlns="http://www.w3.org/1999/xhtml">As part of the <code>xdmp:forest-rollback</code> operation, the
specified forest(s) are restarted.</p>
<p xmlns="http://www.w3.org/1999/xhtml">As a consequence of the forest(s) restarting, if
the forest is a failover forest and it is failed over to another host,
the system will attempt to mount the forest on the original host
(that is, it will un-failover the forest).</p>
<p xmlns="http://www.w3.org/1999/xhtml">If you perform an <code>xdmp:forest-rollback</code> operation on a
forest attached to the context database or any of its auxilliary databases (the security, modules, or triggers databases for that database), then the
rollback is performed asyncronously in the background, and any exceptions
that occur will not be reported back to the program; in this case, if an
exception occurs it might be reported to the <code>ErrorLog.txt</code> file.
Additionally, because the rollback of forests in the context database (or in
its auxilliary databases) is run asyncronously, there might be a small delay
between when the rollback is issued and when the forest is restarted, and
the rollback state is not reflected until the forest restart is completed.
Therefore, it is best practice to call <code>xdmp:forest-rollback</code>
against forests not attached to the context database.  </p>
<p xmlns="http://www.w3.org/1999/xhtml">After an <code>xdmp:forest-clear</code> operation on a forest, you will
no longer be able to roll that forest back (because the forest clear deletes
all of the stands in the forest).</p>
<p xmlns="http://www.w3.org/1999/xhtml">The forest rollback operation cannot be undone (except by restoring from
backup); that is, after rolling a forest back to a point in time, you cannot
roll the forest "forward" to where you started.  </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-rollback(11183608861595735720, 12345623)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(:
   Run this against a different database context then
   the my-db database.
:)
xdmp:forest-rollback(
     xdmp:database-forests(xdmp:database("my-db")), 12345623)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestRollback(11183608861595735720, 12345623)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
//   Run this against a different database context then
//   the my-db database.

xdmp.forestRollback(
     xdmp.databaseForests(xdmp.database("my-db")), 12345623)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-backup-validate" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Validates that the specified list of forests can be backed up to the
  backup data directory.  Optionally verifies that the list of forests
  can enable journal archiving to the journal archive directory with the
  specified lag limit. Returns a database backup set node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A backup data directory pathname.
  </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean?" optional="true">
    Whether or not to include replica forests
  </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
    Whether or not to enable journal archiving
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
    Maximum difference in seconds that the archived journal can lag behind its
    forest's active journal. Defaults to 15.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-validate</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-validate/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage schema="backup-plan.xsd" element-name="forest" camel-case="true"> </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:database-backup-validate((11183608861595735720,898513504988507762),
    "/backups/Data", fn:false(), fn:true())
  =&gt;
&lt;bp:backup-plan
   xsi:schemaLocation="http://marklogic.com/xdmp/backup-plan backup-plan.xsd"
   xmlns:bp="http://marklogic.com/xdmp/backup-plan"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance";&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;Documents&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;9157142760003704384&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/tmp&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;backup&lt;/bp:action&gt;
    &lt;bp:journal-archiving&gt;true&lt;/bp:journal-archiving&gt;
    &lt;bp:journal-archive-path&gt;/tmp&lt;/bp:journal-archive-path&gt;
    &lt;bp:journal-archive-path-status&gt;okay&lt;/bp:journal-archive-path-status&gt;
    &lt;bp:journal-archive-lag-limit&gt;15&lt;/bp:journal-archive-lag-limit&gt;
    &lt;bp:journal-archive-lag-limit-status&gt;okay&lt;/bp:journal-archive-lag-limit-status&gt;
  &lt;/bp:forest&gt;
&lt;/bp:backup-plan&gt;</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackupValidate(xdmp.databaseForests(xdmp.database("Documents")),
    "/space/backups", false, true);
=&gt;
{
 "journalArchiveForestSelectionStatus": "okay",
 "forests": [
   {
    "forestName": "Documents",
    "forestId": "18080252238750949856",
    "forestStatus": "okay",
    "directoryPath": "/space/backups",
    "directoryStatus": "okay",
    "action": "backup",
    "incrementalBackup": "false",
    "journalArchiving": "true",
    "forestUpdate": "all",
    "forestUpdateStatus": "okay",
    "journalArchivePath": "/space/backups",
    "journalArchivePathStatus": "okay",
    "journalArchiveLagLimit": "15",
    "journalArchiveLagLimitStatus": "okay"
   }
  ,
   {
    "forestName": "test",
    "forestId": "15032873714652460194",
    "forestStatus": "okay",
    "directoryPath": "/space/backups",
    "directoryStatus": "okay",
    "action": "backup",
    "incrementalBackup": "false",
    "journalArchiving": "true",
    "forestUpdate": "all",
    "forestUpdateStatus": "okay",
    "journalArchivePath": "/space/backups",
    "journalArchivePathStatus": "okay",
    "journalArchiveLagLimit": "15",
    "journalArchiveLagLimitStatus": "okay"
   } ]
}

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-incremental-backup-validate" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Validates that the specified list of forests can be backed up to the
  backup data directory.  Optionally verifies that the list of forests
  can enable journal archiving to the journal archive directory with the
  specified lag limit. Returns a database backup set node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A backup data directory pathname.
  </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean?" optional="true">
    Whether or not to include replica forests
  </apidoc:param>
      <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
    Path to where incremental backups are stored.
  </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
    Whether or not to enable journal archiving
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
    Maximum difference in seconds that the archived journal can lag behind its
    forest's active journal. Defaults to 15.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-incremental-backup-validate</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-incremental-backup-validate/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage schema="backup-plan.xsd" element-name="forest" camel-case="true"> </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:database-incremental-backup-validate(
    (11183608861595735720,898513504988507762),
    "/backups/Data", fn:false(), "/backups/Data2", fn:true())
  =&gt;
&lt;bp:backup-plan
   xsi:schemaLocation="http://marklogic.com/xdmp/backup-plan backup-plan.xsd"
   xmlns:bp="http://marklogic.com/xdmp/backup-plan"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance";&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;Documents&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;9157142760003704384&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/backups/Data&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;incremental-backup&lt;/bp:action&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-backup-path&gt;/backups/Data2&lt;/bp:incremental-backup-path&gt;
    &lt;bp:journal-archiving&gt;true&lt;/bp:journal-archiving&gt;
    &lt;bp:journal-archive-path&gt;/tmp&lt;/bp:journal-archive-path&gt;
    &lt;bp:journal-archive-path-status&gt;okay&lt;/bp:journal-archive-path-status&gt;
    &lt;bp:journal-archive-lag-limit&gt;15&lt;/bp:journal-archive-lag-limit&gt;
    &lt;bp:journal-archive-lag-limit-status&gt;okay&lt;/bp:journal-archive-lag-limit-status&gt;
  &lt;/bp:forest&gt;
&lt;/bp:backup-plan&gt;</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseIncrementalBackupValidate(
    xdmp.databaseForests(xdmp.database("Documents")),
    "/space/backups", false, "/space/backups/data2", true);
=&gt;
{
  "journalArchiveForestSelectionStatus": "okay",
  "forests": [
  {
   "forestName": "Documents",
   "forestId": "18080252238750949856",
   "forestStatus": "okay",
   "directoryPath": "/space/backups",
   "directoryStatus": "non-existent",
   "action": "incremental-backup",
   "incrementalBackup": "true",
   "incrementalDirectoryPath": "/space/backups/data2",
   "fullBackupStatus": "okay",
   "journalArchiving": "true",
   "forestUpdate": "all",
   "forestUpdateStatus": "okay",
   "journalArchivePath": "/space",
   "journalArchivePathStatus": "okay",
   "journalArchiveLagLimit": "15",
   "journalArchiveLagLimitStatus": "okay"
   }
  ,
   {
   "forestName": "test",
   "forestId": "15032873714652460194",
   "forestStatus": "okay",
   "directoryPath": "/space/backups",
   "directoryStatus": "non-existent",
   "action": "incremental-backup",
   "incrementalBackup": "true",
   "incrementalDirectoryPath": "/space/backups/data2",
   "fullBackupStatus": "okay",
   "journalArchiving": "true",
   "forestUpdate": "all",
   "forestUpdateStatus": "okay",
   "journalArchivePath": "/space",
   "journalArchivePathStatus": "okay",
   "journalArchiveLagLimit": "15",
   "journalArchiveLagLimitStatus": "okay"
   } ]
}

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-backup" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Starts an asynchronous backup of the specified list of forests to the
  backup data directory.  Optionally starts journal archiving of the specified
  list of forests to the specified journal archive directory.  Returns a job
  ID that uniquely identifies the backup task.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A backup data directory pathname.  The directory must exist and be
    writable by the operating system user under which MarkLogic Server
    is running.  The directory cannot be the MarkLogic Server install
    directory or the MarkLogic Server data directory.  The directory
    specified can be an operating system mounted directory path, it can be
    an HDFS path, or it can be an S3 path. For detail on using HDFS and S3
    storage in MarkLogic, see
    <a href="../guide/performance/disk-storage#id_90620" xmlns="http://www.w3.org/1999/xhtml">Disk Storage
    Considerations</a>.
  </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
    Whether or not to enable journal archiving. Defaults to <code xmlns="http://www.w3.org/1999/xhtml">false</code>.
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
    Maximum difference in seconds that the archived journal can lag behind its
    forest's active journal. Defaults to 15.
  </apidoc:param>
      <apidoc:param name="backup-kek-id" type="xs:string?" optional="true">
    An additional backup key encryption key (KEK) that can be used to restore from backup. 
    This parameter is only applicable when database encryption is enabled for use with an external KMS.
  </apidoc:param>
      <apidoc:param name="backup-passphrase" type="xs:string?" optional="true">
    An additional backup passphrase that can be used to encrypt the backup.
    If a passphrase is specified, it must have a length between 16 and 1000 characters
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">You cannot restore to a read-only forest.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Reindexing will stop while a backup or restore is in progress.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The backup directory must exist on each host that has a forest
  specified in the database backup call (that is, the d-nodes in which the
  forests being backed up are hosted). </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If enabling journal archiving, all forests must belong to the same database.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-backup((11183608861595735720,898513504988507762),
    "/backups/Data")
=&gt; 33030877979801813489
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-backup(xdmp:database-forests(xdmp:database("Documents")),
    "/backups/Data", fn:true(), "/backups/JournalArchiving", 15)
=&gt; 437302857479804813287
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackup([11183608861595735720,898513504988507762],
    "/backups/Data");
=&gt; 33030877979801813489
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackup(xdmp.databaseForests(xdmp.database("Documents")),
    "/backups/Data", fn:true(), "/backups/JournalArchiving", 15);
=&gt; 437302857479804813287
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-incremental-backup" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Starts an asynchronous incremental backup of the specified list of forests to the
  backup data directory.  Optionally starts journal archiving of the specified
  list of forests to the specified journal archive directory.  Returns a job
  ID that uniquely identifies the backup task.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A backup data directory pathname.  The directory must exist and be
    writable by the operating system user under which MarkLogic Server
    is running.  The directory cannot be the MarkLogic Server install
    directory or the MarkLogic Server data directory.
  </apidoc:param>
      <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
    An incremental backup directory.
  </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
    Whether or not to enable journal archiving. Defaults to <code xmlns="http://www.w3.org/1999/xhtml">false</code>.
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
    Maximum difference in seconds that the archived journal can lag behind its
    forest's active journal. Defaults to 15.
  </apidoc:param>
      <apidoc:param name="backup-kek-id" type="xs:string?" optional="true">
    An backup key encryption key (KEK) that can be used to encrypt this backup. 
    This parameter is only applicable when encryption is enabled for use with an external KMS.
  </apidoc:param>
      <apidoc:param name="backup-passphrase" type="xs:string?" optional="true">
    An backup passphrase that can be used to encrypt this backup. 
    If the full backup was encrypted with a passphrase, the passphrase here must be the same.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-incremental-backup</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-incremental-backup/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">You cannot restore to a read-only forest.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Reindexing will stop while a backup or restore is in progress.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The backup directory must exist on each host that has a forest
  specified in the database backup call (that is, the d-nodes in which the
  forests being backed up are hosted). </p>
  <p xmlns="http://www.w3.org/1999/xhtml">If enabling journal archiving, all forests must belong to the same database.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-incremental-backup((11183608861595735720,898513504988507762),
    "/backups/Data")
=&gt; 33030877979801813489
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseIncrementalBackup(
    xdmp.databaseForests(xdmp.database("My-Database")),
    "/backups/Data");
=&gt; 33030877979801813489
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="start-journal-archiving" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Starts journal archiving to the specified list of forests.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
    Maximum difference in seconds that the archived journal can lag behind its
    forest's active journal. Defaults to 15.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:start-journal-archiving(
xdmp:database-forests(xdmp:database("Documents")),"/backups/Data",500)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.startJournalArchiving(
    xdmp.databaseForests(xdmp.database("Documents")),"/backups/Data",500);
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="stop-journal-archiving" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Stops journal archiving to the specified list of forests.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:stop-journal-archiving(
  xdmp:database-forests(xdmp:database("Documents")))
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.stopJournalArchiving(
  xdmp.databaseForests(xdmp.database("Documents")));
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-backup-status" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Checks the status of the outstanding backup job with the specified
  job ID.  Returns a database backup status <span class="javascript" xmlns="http://www.w3.org/1999/xhtml"> as a JSON</span>
  node<span class="xquery" xmlns="http://www.w3.org/1999/xhtml"> defined in the <code>job-status.xsd</code> schema</span>.
  If you don't specify a job ID for the first parameter, status for all currently
  running backup jobs will be returned.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="jobid" type="xs:unsignedLong*">
    A backup job ID.
  </apidoc:param>
      <apidoc:param name="hostid" type="xs:unsignedLong*" optional="true">
    The ID of the host that the backup was started on.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()*</apidoc:return>
    <apidoc:return class="javascript">ObjectNode*</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-status</code></p>
</apidoc:privilege>
    <apidoc:usage schema="job-status.xsd" element-name="job-status">
  <p xmlns="http://www.w3.org/1999/xhtml">If the host coordinating the backup restarts, information about the backup
  will be lost. </p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $b := xdmp:eval('xdmp:database-backup(
               xdmp:database-forests(xdmp:database("Documents")),
                     "/space/backup")')
return
xdmp:database-backup-status($b)
=&gt; the backup status for the backup initiated in the xdmp:eval
&lt;job:job-status xsi:schemaLocation="http://marklogic.com/xdmp/job-status job-status.xsd" xmlns:job="http://marklogic.com/xdmp/job-status" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;job:job-id&gt;9457138413104448788&lt;/job:job-id&gt;
  &lt;job:status&gt;in-progress&lt;/job:status&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Documents&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;15810433344251984001&lt;/job:forest-id&gt;
    &lt;job:status&gt;in-progress&lt;/job:status&gt;
    &lt;job:host-name&gt;host1.marklogic.com&lt;/job:host-name&gt;
    &lt;job:backup-path&gt;/space/backup/20150807-1353536714460&lt;/job:backup-path&gt;
    &lt;job:incremental-backup&gt;false&lt;/job:incremental-backup&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
&lt;/job:job-status&gt;
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $b := xdmp:eval('xdmp:database-incremental-backup(
               xdmp:database-forests(xdmp:database("Documents")),
                     "/space/backup","/space/incrbackup")')
return
xdmp:database-backup-status($b)
=&gt; the backup status for the incremental backup initiated in the xdmp:eval
&lt;job:job-status xsi:schemaLocation="http://marklogic.com/xdmp/job-status job-status.xsd" xmlns:job="http://marklogic.com/xdmp/job-status" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;job:job-id&gt;11676716897085375508&lt;/job:job-id&gt;
  &lt;job:status&gt;in-progress&lt;/job:status&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Documents&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;15810433344251984001&lt;/job:forest-id&gt;
    &lt;job:status&gt;in-progress&lt;/job:status&gt;
    &lt;job:host-name&gt;host1.marklogic.com&lt;/job:host-name&gt;
    &lt;job:backup-path&gt;/space/backup/20150807-1353536714460&lt;/job:backup-path&gt;
    &lt;job:incremental-backup&gt;true&lt;/job:incremental-backup&gt;
    &lt;job:incremental-backup-path&gt;/space/incrbackup/20150807-1353536714460/20150807/1355436552150&lt;/job:incremental-backup-path&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
&lt;/job:job-status&gt;
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-backup-status((), xdmp:hosts())
=&gt;
&lt;job:job-status xsi:schemaLocation="http://marklogic.com/xdmp/job-status job-status.xsd" xmlns:job="http://marklogic.com/xdmp/job-status" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;job:job-id&gt;7138588173658949103&lt;/job:job-id&gt;
  &lt;job:status&gt;completed&lt;/job:status&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Documents&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;15810433344251984001&lt;/job:forest-id&gt;
    &lt;job:status&gt;completed&lt;/job:status&gt;
    &lt;job:host-name&gt;host1.marklogic.com&lt;/job:host-name&gt;
    &lt;job:backup-path&gt;/space/backup/20150807-1356535579770&lt;/job:backup-path&gt;
    &lt;job:incremental-backup&gt;false&lt;/job:incremental-backup&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Security&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;14856907692299796171&lt;/job:forest-id&gt;
    &lt;job:status&gt;completed&lt;/job:status&gt;
    &lt;job:host-name&gt;host1.marklogic.com&lt;/job:host-name&gt;
    &lt;job:backup-path&gt;/space/backup/20150807-1356535579770&lt;/job:backup-path&gt;
    &lt;job:incremental-backup&gt;false&lt;/job:incremental-backup&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Schemas&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;18265087540925870633&lt;/job:forest-id&gt;
    &lt;job:status&gt;completed&lt;/job:status&gt;
    &lt;job:host-name&gt;host1.marklogic.com&lt;/job:host-name&gt;
    &lt;job:backup-path&gt;/space/backup/20150807-1356535579770&lt;/job:backup-path&gt;
    &lt;job:incremental-backup&gt;false&lt;/job:incremental-backup&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Triggers&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;16709030055805263427&lt;/job:forest-id&gt;
    &lt;job:status&gt;completed&lt;/job:status&gt;
    &lt;job:host-name&gt;host1.marklogic.com&lt;/job:host-name&gt;
    &lt;job:backup-path&gt;/space/backup/20150807-1356535579770&lt;/job:backup-path&gt;
    &lt;job:incremental-backup&gt;false&lt;/job:incremental-backup&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
&lt;/job:job-status&gt;
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackupStatus(
    xdmp.databaseBackup(
        xdmp.databaseForests(xdmp.database("Documents")),
        "/space/backup"
    )
)
=&gt;
{
  "jobId": "13024644333983038299",
  "status": "in-progress",
  "forests": [
      {
        "forestName": "Documents",
        "forestId": "15810433344251984001",
        "status": "in-progress",
        "hostName": "host1.marklogic.com",
        "backupPath": "/space/backup/20150807-1358346259160",
        "incrementalBackup": false,
        "journalArchiving": false
      }
   ]
}
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackupStatus([], xdmp.hosts())
=&gt;
{
  "jobId": "7138588173658949103",
  "status": "completed",
  "forests": [
    {
      "forestName": "Documents",
      "forestId": "15810433344251984001",
      "status": "completed",
      "hostName": "host1.marklogic.com",
      "backupPath": "/space/backup/20150807-1356535579770",
      "incrementalBackup": false,
      "journalArchiving": false
    },
    {
      "forestName": "Security",
      "forestId": "14856907692299796171",
      "status": "completed",
      "hostName": "host1.marklogic.com",
      "backupPath": "/space/backup/20150807-1356535579770",
      "incrementalBackup": false,
      "journalArchiving": false
    },
    {
      "forestName": "Schemas",
      "forestId": "18265087540925870633",
      "status": "completed",
      "hostName": "host1.marklogic.com",
      "backupPath": "/space/backup/20150807-1356535579770",
      "incrementalBackup": false,
      "journalArchiving": false
    },
    {
      "forestName": "Triggers",
      "forestId": "16709030055805263427",
      "status": "completed",
      "hostName": "host1.marklogic.com",
      "backupPath": "/space/backup/20150807-1356535579770",
      "incrementalBackup": false,
      "journalArchiving": false
    }
  ]
}
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="forest-backup-status" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Checks the status of the specified forests for any outstanding backup jobs.
  Returns the specified forests portion a database backup status
  <span class="javascript" xmlns="http://www.w3.org/1999/xhtml"> as a JSON</span> node<span class="xquery" xmlns="http://www.w3.org/1999/xhtml"> defined
  in the <code>job-status.xsd</code> schema</span>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestid" type="xs:unsignedLong*">
    One or more forest IDs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()*</apidoc:return>
    <apidoc:return class="javascript">ObjectNode*</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-status</code></p>
</apidoc:privilege>
    <apidoc:usage schema="backup-plan.xsd" element-name="forest" camel-case="true"> </apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-backup-status(33030877979801813489, 16529920850295602277)
=&gt;
&lt;job:job-status xsi:schemaLocation="http://marklogic.com/xdmp/job-status
   job-status.xsd" xmlns:job="http://marklogic.com/xdmp/job-status"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Documents&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;9157142760003704384&lt;/job:forest-id&gt;
    &lt;job:status&gt;in-progress&lt;/job:status&gt;
    &lt;job:journal-archiving&gt;true&lt;/job:journal-archiving&gt;
    &lt;job:journal-archive-path&gt;/backup/JournalArchive&lt;/job:journal-archive-path&gt;
    &lt;job:journal-archive-lag-limit&gt;15&lt;/job:journal-archive-lag-limit&gt;
  &lt;/job:forest&gt;
&lt;/job:job-status&gt;
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestBackupStatus(xdmp.forest("My-Forest"));
=&gt;
{
  "jobId":"1261339155818839957",
  "forests":
  {
   "forestName":"bill",
   "forestId":"7201957734358937355",
   "status":"completed",
   "incrementalBackup":"false",
   "journalArchiving":"false"
   }
}
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-backup-cancel" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Cancels an outstanding backup job with the specified job ID, returning
  true if the cancel operation is successful, false if the cancel operation
  is not successful. The <code xmlns="http://www.w3.org/1999/xhtml">xdmp:database-backup-cancel</code> function
  must be run on the host in which the backup was initiated.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="jobid" type="xs:unsignedLong">
    A backup job ID.  You can find the job IDs for running backups by calling
    <a href="#xdmp:host-status" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:host-status</code></a>
    and looking in the <code xmlns="http://www.w3.org/1999/xhtml">&lt;host-status:backup-jobs&gt;</code> element
    (where the <code xmlns="http://www.w3.org/1999/xhtml">host-status</code> prefix is bound to the
    <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/status/host</code> namespace).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-cancel</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-cancel/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-backup-cancel(3303087797980181348)
=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackupCancel(3303087797980181348)
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-restore-validate" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Validates that the specified list of forests can be restored from the
  backup data directory.  Returns a database restore set node.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A backup data directory pathname.
  </apidoc:param>
      <apidoc:param name="restoreToTime" type="xs:dateTime?" optional="true">
    The date and time to restore the forest data to.
  </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean?" optional="true">
    Whether to include replica forests
  </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
    Whether to restore from archived journals. Defaults to false.
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="incremental-backup" type="xs:boolean?" optional="true">
    Whether to restore using incremental backups. Defaults to false.
  </apidoc:param>
      <apidoc:param name="incremental-backup-path" type="xs:string?" optional="true">
    Path to where incremental backups are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="backup-passphrase" type="xs:string?" optional="true">
    An backup passphrase that can be used to decrypt this backup. 
  </apidoc:param>
      <apidoc:param name="forest-map" type="map:map?" optional="true">
    An optional forest map that specify the change if forest topology.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore-validate</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore-validate/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-restore-validate((11183608861595735720,898513504988507762),
    "/backups/Data")
=&gt; ..database restore set node
&lt;bp:backup-plan xsi:schemaLocation="http://marklogic.com/xdmp/backup-plan
  backup-plan.xsd" xmlns:bp="http://marklogic.com/xdmp/backup-plan"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;bp:taginfo&gt;
    &lt;bp:version&gt;8.0-20141030&lt;/bp:version&gt;
    &lt;bp:jobid&gt;10780760300302561575&lt;/bp:jobid&gt;
    &lt;bp:startdate&gt;2014-10-31T14:52:11&lt;/bp:startdate&gt;
    &lt;bp:enddate&gt;2014-10-31T14:52:19&lt;/bp:enddate&gt;
  &lt;/bp:taginfo&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;bill&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;7201957734358937355&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/Backups/20141031-1452115365630&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:incremental-backup&gt;false&lt;/bp:incremental-backup&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
  &lt;/bp:forest&gt;
  &lt;bp:database&gt;
    &lt;bp:database-name&gt;bill&lt;/bp:database-name&gt;
    &lt;bp:database-id&gt;16618783434388932604&lt;/bp:database-id&gt;
    &lt;bp:assignment-policy-name&gt;bucket&lt;/bp:assignment-policy-name&gt;
    &lt;bp:database-forests&gt;
      &lt;bp:database-forest&gt;
        &lt;bp:forest-name&gt;bill&lt;/bp:forest-name&gt;
        &lt;bp:forest-id&gt;7201957734358937355&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
    &lt;/bp:database-forests&gt;
  &lt;/bp:database&gt;
&lt;/bp:backup-plan&gt;
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: database-restore-validate with incremental backup :)
xdmp:database-restore-validate(
xdmp:database-forests(xdmp:database("db1")),
"/space/backup", (), fn:false(),
fn:false(),(),
fn:true(),())
=&gt; ..database restore set node
&lt;bp:backup-plan xsi:schemaLocation="http://marklogic.com/xdmp/backup-plan backup-plan.xsd" xmlns:bp="http://marklogic.com/xdmp/backup-plan" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;bp:taginfo&gt;
    &lt;bp:version&gt;9.0-20171103&lt;/bp:version&gt;
    &lt;bp:jobid&gt;897252092727381381&lt;/bp:jobid&gt;
    &lt;bp:startdate&gt;2017-11-03T13:38:42&lt;/bp:startdate&gt;
    &lt;bp:enddate&gt;2017-11-03T13:38:43&lt;/bp:enddate&gt;
  &lt;/bp:taginfo&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;forest1&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;172083195763380802&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/backup/20171103-1337145777320&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:backup-timestamp&gt;15097414345777320&lt;/bp:backup-timestamp&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-directory-path&gt;/space/backup/20171103-1337145777320/20171103/1338338439870&lt;/bp:incremental-directory-path&gt;
    &lt;bp:incremental-directory-path-status&gt;okay&lt;/bp:incremental-directory-path-status&gt;
    &lt;bp:incremental-backup-timestamp&gt;15097415138439870&lt;/bp:incremental-backup-timestamp&gt;
    &lt;bp:incremental-min-query-timestamp&gt;15097409220413550&lt;/bp:incremental-min-query-timestamp&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
  &lt;/bp:forest&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;forest2&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;7765837070180252819&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/backup/20171103-1337145777320&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:backup-timestamp&gt;15097414345777320&lt;/bp:backup-timestamp&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-directory-path&gt;/space/backup/20171103-1337145777320/20171103/1338338439870&lt;/bp:incremental-directory-path&gt;
    &lt;bp:incremental-directory-path-status&gt;okay&lt;/bp:incremental-directory-path-status&gt;
    &lt;bp:incremental-backup-timestamp&gt;15097415138439870&lt;/bp:incremental-backup-timestamp&gt;
    &lt;bp:incremental-min-query-timestamp&gt;15097409220413550&lt;/bp:incremental-min-query-timestamp&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
  &lt;/bp:forest&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;forest3&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;8801375350195007054&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/backup/20171103-1337145777320&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:backup-timestamp&gt;15097414345777320&lt;/bp:backup-timestamp&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-directory-path&gt;/space/backup/20171103-1337145777320/20171103/1338338439870&lt;/bp:incremental-directory-path&gt;
    &lt;bp:incremental-directory-path-status&gt;okay&lt;/bp:incremental-directory-path-status&gt;
    &lt;bp:incremental-backup-timestamp&gt;15097415138439870&lt;/bp:incremental-backup-timestamp&gt;
    &lt;bp:incremental-min-query-timestamp&gt;15097409220413550&lt;/bp:incremental-min-query-timestamp&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
  &lt;/bp:forest&gt;
  &lt;bp:database&gt;
    &lt;bp:database-name&gt;db1&lt;/bp:database-name&gt;
    &lt;bp:database-id&gt;10598856079264601200&lt;/bp:database-id&gt;
    &lt;bp:assignment-policy-name&gt;bucket&lt;/bp:assignment-policy-name&gt;
    &lt;bp:database-forests&gt;
      &lt;bp:database-forest&gt;
	&lt;bp:forest-name&gt;forest1&lt;/bp:forest-name&gt;
	&lt;bp:forest-id&gt;172083195763380802&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
      &lt;bp:database-forest&gt;
	&lt;bp:forest-name&gt;forest2&lt;/bp:forest-name&gt;
	&lt;bp:forest-id&gt;7765837070180252819&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
      &lt;bp:database-forest&gt;
	&lt;bp:forest-name&gt;forest3&lt;/bp:forest-name&gt;
	&lt;bp:forest-id&gt;8801375350195007054&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
    &lt;/bp:database-forests&gt;
  &lt;/bp:database&gt;
&lt;/bp:backup-plan&gt;
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $map := map:new((
  map:entry("forest1", ("forest2","forest3")),
  map:entry("forest2", ("forest1")),
  map:entry("forest3", ())
))
return xdmp:database-restore-validate(
xdmp:database-forests(xdmp:database("db1")),
"/space/backup", (),
fn:false(),
fn:false(),(),
fn:true(),(),
"",$map
)
=&gt; ..database restore set node
&lt;bp:backup-plan xsi:schemaLocation="http://marklogic.com/xdmp/backup-plan backup-plan.xsd" xmlns:bp="http://marklogic.com/xdmp/backup-plan" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;bp:taginfo&gt;
    &lt;bp:version&gt;9.0-20171103&lt;/bp:version&gt;
    &lt;bp:jobid&gt;897252092727381381&lt;/bp:jobid&gt;
    &lt;bp:startdate&gt;2017-11-03T13:38:42&lt;/bp:startdate&gt;
    &lt;bp:enddate&gt;2017-11-03T13:38:43&lt;/bp:enddate&gt;
  &lt;/bp:taginfo&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;forest1&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;172083195763380802&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/backup/20171103-1337145777320&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:backup-timestamp&gt;15097414345777320&lt;/bp:backup-timestamp&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-directory-path&gt;/space/backup/20171103-1337145777320/20171103/1338338439870&lt;/bp:incremental-directory-path&gt;
    &lt;bp:incremental-directory-path-status&gt;okay&lt;/bp:incremental-directory-path-status&gt;
    &lt;bp:incremental-backup-timestamp&gt;15097415138439870&lt;/bp:incremental-backup-timestamp&gt;
    &lt;bp:incremental-min-query-timestamp&gt;15097409220413550&lt;/bp:incremental-min-query-timestamp&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
    &lt;bp:backup-forests&gt;
      &lt;bp:backup-forest&gt;
	&lt;bp:forest-name&gt;forest2&lt;/bp:forest-name&gt;
	&lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
      &lt;/bp:backup-forest&gt;
      &lt;bp:backup-forest&gt;
	&lt;bp:forest-name&gt;forest3&lt;/bp:forest-name&gt;
	&lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
      &lt;/bp:backup-forest&gt;
    &lt;/bp:backup-forests&gt;
  &lt;/bp:forest&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;forest2&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;7765837070180252819&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/backup/20171103-1337145777320&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:backup-timestamp&gt;15097414345777320&lt;/bp:backup-timestamp&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-directory-path&gt;/space/backup/20171103-1337145777320/20171103/1338338439870&lt;/bp:incremental-directory-path&gt;
    &lt;bp:incremental-directory-path-status&gt;okay&lt;/bp:incremental-directory-path-status&gt;
    &lt;bp:incremental-backup-timestamp&gt;15097415138439870&lt;/bp:incremental-backup-timestamp&gt;
    &lt;bp:incremental-min-query-timestamp&gt;15097409220413550&lt;/bp:incremental-min-query-timestamp&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
    &lt;bp:backup-forests&gt;
      &lt;bp:backup-forest&gt;
	&lt;bp:forest-name&gt;forest1&lt;/bp:forest-name&gt;
	&lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
      &lt;/bp:backup-forest&gt;
    &lt;/bp:backup-forests&gt;
  &lt;/bp:forest&gt;
  &lt;bp:forest&gt;
    &lt;bp:forest-name&gt;forest3&lt;/bp:forest-name&gt;
    &lt;bp:forest-id&gt;8801375350195007054&lt;/bp:forest-id&gt;
    &lt;bp:forest-status&gt;okay&lt;/bp:forest-status&gt;
    &lt;bp:directory-path&gt;/space/backup/20171103-1337145777320&lt;/bp:directory-path&gt;
    &lt;bp:directory-status&gt;okay&lt;/bp:directory-status&gt;
    &lt;bp:action&gt;restore&lt;/bp:action&gt;
    &lt;bp:backup-timestamp&gt;15097414345777320&lt;/bp:backup-timestamp&gt;
    &lt;bp:incremental-backup&gt;true&lt;/bp:incremental-backup&gt;
    &lt;bp:incremental-directory-path&gt;/space/backup/20171103-1337145777320/20171103/1338338439870&lt;/bp:incremental-directory-path&gt;
    &lt;bp:incremental-directory-path-status&gt;okay&lt;/bp:incremental-directory-path-status&gt;
    &lt;bp:incremental-backup-timestamp&gt;0&lt;/bp:incremental-backup-timestamp&gt;
    &lt;bp:incremental-min-query-timestamp&gt;0&lt;/bp:incremental-min-query-timestamp&gt;
    &lt;bp:journal-archiving&gt;false&lt;/bp:journal-archiving&gt;
    &lt;bp:backup-forests/&gt;
  &lt;/bp:forest&gt;
  &lt;bp:database&gt;
    &lt;bp:database-name&gt;db1&lt;/bp:database-name&gt;
    &lt;bp:database-id&gt;10598856079264601200&lt;/bp:database-id&gt;
    &lt;bp:assignment-policy-name&gt;bucket&lt;/bp:assignment-policy-name&gt;
    &lt;bp:database-forests&gt;
      &lt;bp:database-forest&gt;
	&lt;bp:forest-name&gt;forest1&lt;/bp:forest-name&gt;
	&lt;bp:forest-id&gt;172083195763380802&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
      &lt;bp:database-forest&gt;
	&lt;bp:forest-name&gt;forest2&lt;/bp:forest-name&gt;
	&lt;bp:forest-id&gt;7765837070180252819&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
      &lt;bp:database-forest&gt;
	&lt;bp:forest-name&gt;forest3&lt;/bp:forest-name&gt;
	&lt;bp:forest-id&gt;8801375350195007054&lt;/bp:forest-id&gt;
      &lt;/bp:database-forest&gt;
    &lt;/bp:database-forests&gt;
  &lt;/bp:database&gt;
&lt;/bp:backup-plan&gt;
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseRestoreValidate(
  xdmp.databaseForests(
            xdmp.database("MyDB")),
    // previously backed-up dir
    "/tmp/database_backup"
)
=&gt;
{
    "tagInfo": {
        "version": "8.0-20141119",
        "jobid": "1975326905393827288",
        "startdate": "2014-11-19T10:37:37",
        "enddate": "2014-11-19T10:37:38"
    }
    ,
    "forests": [
        {
            "forestName": "forest1",
            "forestId": "12393306467180079458",
            "forestStatus": "okay",
            "directoryPath": "/tmp/database_backup/20141119-1037377997450",
            "directoryStatus": "okay",
            "action": "restore",
            "incrementalBackup": false,
            "journalArchiving": false
            "backupForests" : [
              {
                "forestName": "foresta",
                "directoryStatus": "okay",
              }
              {
                "forestName": "forestb",
                "directoryStatus": "okay",
              }
            ]
        },
        {
            "forestName": "forest2",
            "forestId": "2102578687500930109",
            "forestStatus": "okay",
            "directoryPath": "/tmp/database_backup/20141119-1037377997450",
            "directoryStatus": "okay",
            "action": "restore",
            "incrementalBackup": false,
            "journalArchiving": false
        }
    ],
    "databases": [
        {
            "databaseName": "MyDB",
            "databaseId": "13433268924640794832",
            "assignmentPolicyName": "bucket",
            "databaseForests": [
                {
                    "forestName": "forest1",
                    "forestId": "12393306467180079458"
                },
                {
                    "forestName": "forest2",
                    "forestId": "2102578687500930109"
                }
            ]
        }
    ]
}
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const map = {
    forest1: xdmp.arrayValues(["forest2", "forest3"]),
    forest2: xdmp.arrayValues(["forest1"]),
    forest3: xdmp.arrayValues([])
};
xdmp.databaseRestoreValidate(
xdmp.databaseForests(xdmp.database("db1")), "/space/tsoi/backup",
null, true, false, "", true, "", "", map);
=&gt;
{
    "tagInfo": {
        "version": "9.0-20171103", 
        "jobid": "897252092727381381", 
        "startdate": "2017-11-03T13:38:42", 
        "enddate": "2017-11-03T13:38:43"
    }, 
    "forests": [
        {
        "forestName": "forest1", 
        "forestId": "172083195763380802", 
        "forestStatus": "okay", 
        "directoryPath": "/space/tsoi/backup/20171103-1337145777320", 
        "directoryStatus": "okay", 
        "action": "restore", 
        "incrementalBackup": true, 
        "incrementalDirectoryPath": "/space/tsoi/backup/20171103-1337145777320/20171103/1338338439870", 
        "incrementalDirectoryPathStatus": "okay", 
        "incrementalBackupTimestamp": "15097415138439870", 
        "incrementalMinQueryTimestamp": "15097409220413550", 
        "journalArchiving": false, 
        "backupForests": [
            {
            "forestName": "forest2", 
            "directoryStatus": "okay"
            }, 
            {
            "forestName": "forest3", 
            "directoryStatus": "okay"
            }
            ]
        }, 
        {
        "forestName": "forest2", 
        "forestId": "7765837070180252819", 
        "forestStatus": "okay", 
        "directoryPath": "/space/tsoi/backup/20171103-1337145777320", 
        "directoryStatus": "okay", 
        "action": "restore", 
        "incrementalBackup": true, 
        "incrementalDirectoryPath": "/space/tsoi/backup/20171103-1337145777320/20171103/1338338439870", 
        "incrementalDirectoryPathStatus": "okay", 
        "incrementalBackupTimestamp": "15097415138439870", 
        "incrementalMinQueryTimestamp": "15097409220413550", 
        "journalArchiving": false, 
        "backupForests": [
            {
            "forestName": "forest1", 
            "directoryStatus": "okay"
            }
            ]
        }, 
        {
        "forestName": "forest3", 
        "forestId": "8801375350195007054", 
        "forestStatus": "okay", 
        "directoryPath": "/space/tsoi/backup/20171103-1337145777320", 
        "directoryStatus": "okay", 
        "action": "restore", 
        "incrementalBackup": true, 
        "incrementalDirectoryPath": "/space/tsoi/backup/20171103-1337145777320/20171103/1338338439870", 
        "incrementalDirectoryPathStatus": "okay", 
        "incrementalBackupTimestamp": 0, 
        "incrementalMinQueryTimestamp": 0, 
        "journalArchiving": false, 
        "backupForests": [
            ]
        }
    ], 
    "databases": [
        {
        "databaseName": "db1", 
        "databaseId": "10598856079264601200", 
        "assignmentPolicyName": "bucket", 
        "databaseForests": [
            {
            "forestName": "forest1", 
            "forestId": "172083195763380802"
            }, 
            {
            "forestName": "forest2", 
            "forestId": "7765837070180252819"
            }, 
            {
            "forestName": "forest3", 
            "forestId": "8801375350195007054"
            }
            ]
        }
    ]
}
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-restore" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Starts an asynchronous restore of the specified list of forests from the
  backup data directory.  Returns a job ID that uniquely identifies the
  restore task.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestIDs" type="xs:unsignedLong*">
    A sequence of forest IDs.
  </apidoc:param>
      <apidoc:param name="pathname" type="xs:string">
    A backup data directory pathname.
  </apidoc:param>
      <apidoc:param name="restoreToTime" type="xs:dateTime?" optional="true">
    The date and time to restore the forest data to.
  </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
    Whether to restore from archived journals. Defaults to false.
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path to where archived journals are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="incremental-backup" type="xs:boolean?" optional="true">
    Whether to restore using incremental backups. Defaults to false.
  </apidoc:param>
      <apidoc:param name="incremental-backup-path" type="xs:string?" optional="true">
    Path to where incremental backups are stored. Defaults to the backup data
    directory.
  </apidoc:param>
      <apidoc:param name="backup-passphrase" type="xs:string?" optional="true">
    An additional backup passphrase that can be used to restore from backup.
  </apidoc:param>
      <apidoc:param name="forest-map" type="map:map?" optional="true">
    An optional forest map that specify the change of forest topology.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">Reindexing will stop while a backup or restore is in progress.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-restore((11183608861595735720,898513504988507762),
    "/backups/Data")
=&gt; 33030877979801813489
</pre>
</apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $map := map:new((map:entry("forest1", ("forest2","forest3")),
                     map:entry("forest2", ("forest1")),
                     map:entry("forest3", ())))
return xdmp:database-restore(xdmp:database-forests(xdmp:database("db1")),
                             "/backups/Data", (), fn:false(),
                             "",fn:false(),"","",$map)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseRestore([11183608861595735720,898513504988507762],
    "/backups/Data")
=&gt; 33030877979801813489
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const map = {
    forest1: xdmp.arrayValues(["forest2", "forest3"]),
    forest2: xdmp.arrayValues(["forest1"]),
    forest3: xdmp.arrayValues([""])
};
xdmp.databaseRestore(
xdmp.databaseForests(xdmp.database("db1")), "/backups/Data",
null, false, "", false, "", "", map);
=&gt; 33030877979801813489
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-restore-status" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Checks the status of the outstanding restore job with the specified
  job ID.  Returns a database restore status <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">node</span>
<span class="javascript" xmlns="http://www.w3.org/1999/xhtml">Object</span>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="jobid" type="xs:unsignedLong">
    A restore job ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element()</apidoc:return>
    <apidoc:return class="javascript">Object</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore-status</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-restore-status(15810433344251984001)
=&gt;
&lt;job:job-status xsi:schemaLocation="http://marklogic.com/xdmp/job-status job-status.xsd"
  xmlns:job="http://marklogic.com/xdmp/job-status" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;job:status&gt;completed&lt;/job:status&gt;
  &lt;job:forest&gt;
    &lt;job:forest-name&gt;Documents&lt;/job:forest-name&gt;
    &lt;job:forest-id&gt;15810433344251984001&lt;/job:forest-id&gt;
    &lt;job:status&gt;completed&lt;/job:status&gt;
    &lt;job:journal-archiving&gt;false&lt;/job:journal-archiving&gt;
  &lt;/job:forest&gt;
&lt;/job:job-status&gt;
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseRestoreStatus(
  xdmp.databaseRestore(
    xdmp.databaseForests(
      xdmp.database("Documents")),
    "/space/backup"
    )
  );
=&gt;
{
  "status": "in-progress",
  "forests": [
    {
      "forestName": "Documents",
      "forestId": "15810433344251984001",
      "status": "in-progress",
      "journalArchiving": false
    }
  ]
}
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="database-restore-cancel" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Cancels an outstanding restore job with the specified job ID, returning
  true if the cancel operation is successful, false if the cancel operation
  is not successful.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="jobid" type="xs:unsignedLong">
    A restore job ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore-cancel</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-restore-cancel/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-restore-cancel(33030877979801813489)
=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseRestoreCancel(33030877979801813489)
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="shutdown" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Shutdown servers on hosts.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hostIDs" type="xs:unsignedLong*">
    A sequence of host IDs, or empty sequence for the local host.
  </apidoc:param>
      <apidoc:param name="reason" type="xs:string">
    Prepositional phrase describing the reason to shutdown.
  </apidoc:param>
      <apidoc:param name="failover" type="xs:boolean" optional="true">
    True if other hosts in the cluster should take over the replica forests.  False if not specified.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-shutdown</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:shutdown((), "for software upgrade", fn:true())
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.shutdown(null, "for software upgrade", true);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="restart" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Restart servers on hosts.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hostIDs" type="xs:unsignedLong*">
    A sequence of host IDs, or empty sequence for the local host.
  </apidoc:param>
      <apidoc:param name="reason" type="xs:string">
    Prepositional phrase describing the reason to restart.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-restart</code></p>
</apidoc:privilege>
    <apidoc:usage>
  The restart signal is sent asyncronously and
  is not a blocking operation, so code that runs after the
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:restart</code> call is not guaranteed to run after the host
  restarts.  If you need to verify that the host was restarted, you can
  compare the value of <code xmlns="http://www.w3.org/1999/xhtml">last-startup</code> from
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:host-status</code> before and after the restart.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:restart((), "to reload server.xml")
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.restart(null, "to reload server.xml");
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-directory" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Performs a directory listing of the given file pathname.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the directory to be listed.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(dir:directory)</apidoc:return>
    <apidoc:return class="javascript">Array</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-directory</code></p>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">The user under which MarkLogic Server is running must have permissions
  to read the specified directory.  For example, on Windows systems,
  MarkLogic Server typically runs as the SYSTEM user, and therefore the
  SYSTEM user must have permissions to read the directory (even a
  mapped network drive directory).  Similarly, on UNIX systems,
  MarkLogic Server typically runs as the daemon user, and that user
  needs to have read permission to the specified directory.  If the user
  in which MarkLogic Server runs does not have the needed permissions, then
  an error such as SVC-DIROPEN or SVC-FILOPN is thrown when you
  attempt to call this built-in.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-directory("/etc")
=&gt;
&lt;dir:directory
   xmlns:dir="http://marklogic.com/xdmp/directory"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://marklogic.com/xdmp/directory directory.xsd"&gt;
   &lt;dir:entry&gt;
      &lt;dir:filename&gt;rpm&lt;/dir:filename&gt;
      &lt;dir:pathname&gt;/etc/rpm&lt;/dir:pathname&gt;
      &lt;dir:type&gt;directory&lt;/dir:type&gt;
      &lt;dir:content-length&gt;4096&lt;/dir:content-length&gt;
      &lt;dir:last-modified&gt;2015-03-12T18:23:56-07:00&lt;/dir:last-modified&gt;
   &lt;/dir:entry&gt;
   &lt;dir:entry&gt;
      &lt;dir:filename&gt;sudoers.d&lt;/dir:filename&gt;
      &lt;dir:pathname&gt;/etc/sudoers.d&lt;/dir:pathname&gt;
      &lt;dir:type&gt;directory&lt;/dir:type&gt;
      &lt;dir:content-length&gt;4096&lt;/dir:content-length&gt;
      &lt;dir:last-modified&gt;2015-02-18T02:02:00-08:00&lt;/dir:last-modified&gt;
   &lt;/dir:entry&gt;
   ...
&lt;/dir:directory&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemDirectory("/etc");
=&gt;
[
  {
    "filename":"rpm",
    "pathname":"/etc/rpm",
    "type":"directory",
    "contentLength":4096,
    "lastModified":"2014-10-24T23:25:00"
  },
  {
    "filename":"sudoers.d",
    "pathname":"/etc/sudoers.d",
    "type":"directory",
    "contentLength":4096,
    "lastModified":"2013-09-30T22:36:00"
  },
    ...
]
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-directory-create" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Creates the directory specified by pathname.
  Returns the empty sequence upon success.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the directory to be created.
  </apidoc:param>
      <apidoc:param class="xquery" name="options" type="element()?|map:map?" optional="true">
  An <code xmlns="http://www.w3.org/1999/xhtml">options</code> node in the
  <code xmlns="http://www.w3.org/1999/xhtml">xdmp:filestystem-directory-create</code> namespace.
  If <code xmlns="http://www.w3.org/1999/xhtml">create-parents</code> is <code xmlns="http://www.w3.org/1999/xhtml">true</code>, then if necessary
  it will create the parent directories all the way down to the
  final directory in the path. If <code xmlns="http://www.w3.org/1999/xhtml">false</code> it will merely complain
  that the parents do not exist. The default for <code xmlns="http://www.w3.org/1999/xhtml">create-parents</code>
   is <code xmlns="http://www.w3.org/1999/xhtml">false</code>.  You can optionally specify a map with a key of
   <code xmlns="http://www.w3.org/1999/xhtml">createParents</code> and a boolean value.
  </apidoc:param>
      <apidoc:param class="javascript" name="options" type="Object?" optional="true">
  If <code xmlns="http://www.w3.org/1999/xhtml">createParents</code> is <code xmlns="http://www.w3.org/1999/xhtml">true</code>, then if necessary
  it will create the parent directories all the way down to the
  final directory in the path. If <code xmlns="http://www.w3.org/1999/xhtml">false</code> it will merely complain
  that the parents do not exist. The default for <code xmlns="http://www.w3.org/1999/xhtml">createParents</code>
  is <code xmlns="http://www.w3.org/1999/xhtml">false</code>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-directory-create</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:filesystem-directory-create("/mydata/datafiles/newdir")
  =&gt; ()
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-directory-create("/mydata/datafiles/newdir",
  &lt;options xmlns="xdmp:filesystem-directory-create"&gt;
     &lt;create-parents&gt;true&lt;/create-parents&gt;
  &lt;/options&gt;)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-directory-create("/mydata/datafiles/newdir",
  map:new(map:entry("createParents", fn:false())))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemDirectoryCreate("/tmp/a/b/c",
                               { createParents: true }
                              )
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-directory-delete" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Deletes the directory specified by pathname.
  Returns the empty sequence upon success.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the directory to be deleted.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-directory-delete</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-directory-delete("/mydata/datafiles/olddir")
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemDirectoryDelete("/mydata/datafiles/olddir")
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-file" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Reads a file from the filesystem.  The file at the specified path
  must be UTF-8 encoded.  This function is typically used for text files; for
  binary files, consider using the <code xmlns="http://www.w3.org/1999/xhtml">xdmp:external-binary</code> function.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file to be read.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-file</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-file("/etc/motd")
=&gt; contents of /etc/motd
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemFile("/etc/motd");
=&gt; contents of /etc/motd
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-file-encryption-status" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Return the encryption status of a file.  Returns empty sequence if there is no file.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(file-encryption-status)?</apidoc:return>
    <apidoc:return class="javascript">ObjectNode?</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-file</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-file-encryption-status("/var/opt/MarkLogic/Forests/Documents/Label")
=&gt;
  &lt;file-encryption-status xmlns="http://marklogic.com/xdmp/status/fileEncryption"&gt;
    &lt;pathname&gt;/var/opt/MarkLogic/Forests/Documents/Label&lt;/pathname&gt;
    &lt;encrypted&gt;true&lt;/encrypted&gt;
    &lt;encryption-key-id&gt;317085c9-5c65-4b08-b8bf-2ac5a5c0943e&lt;/encryption-key-id&gt;
    &lt;encryption-size&gt;1920&lt;/encryption-size&gt;
  &lt;/file-encryption-status&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemFileEncryptionStatus("/var/opt/MarkLogic/Forests/Documents/Label");
=&gt;
  {
    "pathname": "/var/opt/MarkLogic/Forests/Documents/Label"
    "encrypted": "true",
    "encryptionKeyId": "317085c9-5c65-4b08-b8bf-2ac5a5c0943e",
    "encryptionSize": "1920"
 }
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-filepath" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Returns the canonicalized file path of the input path.  The file at the
  specified path must be UTF-8 encoded.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-filepath</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-filepath("/etc/motd")
=&gt; /etc/motd
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemFilepath("/etc/motd");
=&gt; /etc/motd
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-file-length" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Reads the length of a file from the filesystem. It returns empty sequence
  if the object named by the pathname does not exist or is not a file.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file to be read.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-file-length</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-file-length("/testdata1/a.jpg")
=&gt; length of /testdata1/a.jpg
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemFileLength("/testdata1/a.jpg");
=&gt; length of /testdata1/a.jpg
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-file-exists" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Return true if a file exists on a host; otherwise false.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file on a certain host.
  </apidoc:param>
      <apidoc:param name="host" type="xs:unsignedLong?" optional="true">
    ID of the host.  If omitted, uses the current host ID (for example, the
    output of a call to <code xmlns="http://www.w3.org/1999/xhtml">xdmp:host</code>).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-file-exists</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:filesystem-file-exists("/testdata1/a.jpg")
=&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.filesystemFileExists("/testdata1/a.jpg");
=&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-file-get-time" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Returns access and modification time for a file.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file to get time for.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">xs:dateTime*</apidoc:return>
    <apidoc:return class="javascript">xs:dateTime[]?</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-file-get-time</code></p>
</apidoc:privilege>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:filesystem-file-get-time("/path/foo.xml")
  =&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filesystem-file-set-time" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Sets access and modification time for a file.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathname" type="xs:string">
    Pathname of the file to set time for.
  </apidoc:param>
      <apidoc:param name="actime" type="xs:string">
    New access time.
  </apidoc:param>
      <apidoc:param name="modtime" type="xs:string">
    New modification time.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-filesystem-file-set-time</code></p>
</apidoc:privilege>
    <apidoc:example><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  xdmp:filesystem-file-get-time("/path/foo.xml")
  =&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="castable-as" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns true if a value is castable.
  This is similar to the "castable as" XQuery predicate, except that the
  type is determined at runtime.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace-uri" type="xs:string">
    The namespace URI of the type.
  </apidoc:param>
      <apidoc:param name="local-name" type="xs:string">
    The local-name of the type.
  </apidoc:param>
      <apidoc:param name="item" type="item()?">
    The item to be cast.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:castable-as(
    "http://www.w3.org/2001/XMLSchema",
    "integer",
    "12")
=&gt; true()
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.castableAs(
    "http://www.w3.org/2001/XMLSchema",
    "integer",
    "12")
=&gt; true()
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="merge-cancel" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Cancel the merge with the specified merge ID on a forest with the
  specified forest ID.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest-ID" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
      <apidoc:param name="merge-ID" type="xs:unsignedLong">
    A merge ID, which is available from the output of
    <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:forest-status</code>
    <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.forestStatus</code>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/request-my-requests</code>
  or
  <code>http://marklogic.com/xdmp/privileges/request-any-requests</code></p>
</apidoc:privilege>
    <apidoc:usage>
  To cancel a merge on a database, find all of the forests in the database
  and use <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:merge-cancel</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.mergeCancel</code> on each forest.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:merge-cancel(98394839084390843,3838938902783)
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.mergeCancel(98394839084390843,3838938902783)
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-database-replication-suspend" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Suspend database replication with the specified forest IDs.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest-ID" type="xs:unsignedLong*">
    forest IDs.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-database-replication-suspend</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-database-replication-suspend/forest/{id}</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-database-replication-suspend/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  To suspend database replication on a database, find all the open forests in the database
  and use <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:forest-database-replication-suspend</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.forestDatabaseReplicationSuspend</code> on each forest.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-database-replication-suspend(98394839084390843,fn:true())
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestDatabaseReplicationSuspend(98394839084390843,fn:true())
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="forest-database-replication-resume" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Resume database replication with the specified forest IDs.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forest-ID" type="xs:unsignedLong*">
    forest IDs.
  </apidoc:param>
      <apidoc:param name="forceBulkReplication" type="xs:boolean">
    Whether to force bulk replication or not.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-database-replication-resume</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-database-replication-resume/forest/{id}</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-forest-database-replication-resume/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:usage>
  To resume database replication on a database, find all the open forests in the database
  and use <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:forest-database-replication-resume</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.forestDatabaseReplicationResume</code> on each forest.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:forest-database-replication-resume(98394839084390843,fn:true())
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.forestDatabaseReplicationResume(98394839084390843,fn:true())
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="request-cancel" type="builtin" lib="xdmp" category="Server Monitoring">
    <apidoc:summary>
  Cancel the request with the given host, server, and request IDs.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="hostID" type="xs:unsignedLong">
    The ID of the host on which the request is running.  Typically, you
    get the ID of a host by executing code similar to:
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
    <code><pre xml:space="preserve">
    xdmp:host("myhost")</pre></code></blockquote>
  </apidoc:param>
      <apidoc:param name="serverID" type="xs:unsignedLong">
   The ID of the App Server in which the request is running.   Typically, you
    get the ID of an App Server by executing code similar to:
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
    <code><pre xml:space="preserve">
    xdmp:server("myAppServerName")</pre>
    </code></blockquote>
  </apidoc:param>
      <apidoc:param name="requestID" type="xs:unsignedLong">
    The ID of the request.  You can access the request IDs in the
    <code xmlns="http://www.w3.org/1999/xhtml">request</code> elements of the <code xmlns="http://www.w3.org/1999/xhtml">xdmp:server-status</code>
    output. You get the request ID by executing code similar to:
    <blockquote xmlns="http://www.w3.org/1999/xhtml">
    <code><pre xml:space="preserve">
    declare namespace status=
        "http://marklogic.com/xdmp/status/server"

    xdmp:server-status( xdmp:host("myhost"),
      xdmp:server("myAppServerName") )//status:request
      </pre>
      </code></blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/cancel-any-request</code>
  or
  <code xmlns="http://www.w3.org/1999/xhtml">http://marklogic.com/xdmp/privileges/cancel-my-requests</code>
</apidoc:privilege>
    <apidoc:usage>
  <p xmlns="http://www.w3.org/1999/xhtml">To find out the status of the request after it has been canceled,
  you can call <code>xdmp:server-status</code>, which has information
  about each request active or being canceled on the server.  Once a request
  has completed canceling, it will no longer appear in the output of
  <code>xdmp:server-status</code>.</p>
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:request-cancel(xdmp:host("myhost"),
                      xdmp:server("myAppServerName"),
                      98394839084390843)
=&gt; ()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.requestCancel(xdmp.host("myhost"),
                      xdmp.server("myAppServerName"),
                      98394839084390843)
=&gt; ()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-backup-purge" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Purge old backups from a directory.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dir" type="xs:string">
    The directory under which to look for backups.
  </apidoc:param>
      <apidoc:param name="keep-num-backups" type="xs:unsignedInt">
    The maximum number of old backups to keep.
  </apidoc:param>
      <apidoc:param name="incremental-dir" type="xs:string" optional="true">
    The directory under which to look for incremental backups.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-purge</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-purge/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-backup-purge("/my/backupdir/", 10, "/my/incrementaldir")
=&gt;
()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseBackupPurge("/my/backupdir/", 10, "/my/incrementaldir");
=&gt;
()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="database-journal-archive-purge" type="builtin" lib="xdmp" category="AdminBuiltins">
    <apidoc:summary>
  Purge journal archive before last incremental backup from a directory.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="dir" type="xs:string">
    The directory under which to look for backups.
  </apidoc:param>
      <apidoc:param name="incremental-dir" type="xs:string" optional="true">
    The directory under which to look for incremental backups.
  </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string" optional="true">
    The directory under which to look for journal archive.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  This operation requires at least one of the following privileges:
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-purge</code></p>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-database-backup-purge/database/{id}</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:database-journal-archive-purge("/my/backupdir/", "/my/incrementaldir")
=&gt;
()
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.databaseJournalArchivePurge("/my/backupdir/", "/my/incrementaldir");
=&gt;
()
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-orphaned-binaries" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Returns a sequence of the IDs of all orphaned large binaries in a given
  forest.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="id" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-get-orphaned-binaries</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:get-orphaned-binaries(8456374036761185098)
=&gt;
1236374036761185456
1236378936761185098
1256374036761185951
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.getOrphanedBinaries(xdmp.forest("my-forest"));
=&gt;
1236374036761185456
1236378936761185098
1256374036761185951
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="remove-orphaned-binary" type="builtin" lib="xdmp" category="Extension" subcategory="MarkLogic Server">
    <apidoc:summary>
  Remove an orphaned large binary
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="forestID" type="xs:unsignedLong">
    A forest ID.
  </apidoc:param>
      <apidoc:param name="binaryID" type="xs:unsignedLong">
    The ID of an orphaned large binary.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
  <p xmlns="http://www.w3.org/1999/xhtml"><code>http://marklogic.com/xdmp/privileges/xdmp-remove-orphaned-binary</code></p>
</apidoc:privilege>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:remove-orphaned-binary(8456374036761185098, 1236374036761185456)
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.removeOrphanedBinary(8456374036761185098, 1236374036761185456);
</pre>
</apidoc:example>
  </apidoc:function></apidoc:module>