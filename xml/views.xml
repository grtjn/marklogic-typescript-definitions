<apidoc:module name="ViewsModule" category="Views" 
  bucket="XQuery Library Modules" 
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml" lib="view">
  <apidoc:summary access="public">
    <p>The views module is used to create and manage SQL schemas and views.
       This API only creates and manages Range Views, as described in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-range-views.xml%2376795'>Creating Range Views</a> in the <em>SQL Data Modeling Guide</em>.  The
       functions in this API will not work on Template Views, as described in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-template-views.xml%2314631'>Creating Template Views</a> in the <em>SQL Data Modeling Guide</em>.
    </p>
    <p>A schema defines a logical scoping for views.  A schema has a unique ID,
	    a name (which must also be unique), and a collection of views.  
	    During SQL execution, the schema provides the naming context for 
	    its views, which enables you have have multiple views of the same 
	    name in different schemas. The default schema is called "main". 
	    Even though it is a default, you must create the "main" schema 
	    before it can be used.</p> 
    <p>A view is an abstraction of a SQL "table."  However, unlike in a 
	    relational database, a view in MarkLogic server is implemented 
	    on top of element range indexes.  A view consists of a unique ID, 
	    a name (which must be unique in the context of a particular 
	    schema), a view scope, and a sequence of column specifications.  
	    Each column has a name and a range index reference.  The range 
	    index for each column must be created before creating the view. 
	    The view scope is used to constrain the subset of the database 
	    to which the view applies. The view scope can either limit rows 
	    in the view to documents with a specific element (localname + 
	    namespace) or to documents in a particular collection. </p>

    <p>The views function module is installed as the following file:</p>
 <ul><li><code><em>install_dir</em>/Modules/MarkLogic/views.xqy</code></li></ul>
    <p>where <code><em>install_dir</em></code> is the directory in which 
    MarkLogic Server is installed.</p>

    <p>To use the <code>views.xqy</code> module in your own XQuery modules, 
    include the following line in your XQuery prolog:</p>

    <p><code>import module namespace view="http://marklogic.com/xdmp/view" 
		    at "/MarkLogic/views.xqy";</code></p>
   
    <p>You must have the <code>view-admin</code> role to execute the 
	    functions in the View library.  </p>

  </apidoc:summary>

<apidoc:function name="schema-create" lib="view" category="Views" 
bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
   <apidoc:summary>
	This function creates a new relational schema in the Schema database.  
	The schema id is returned.  Every SQL deployment must include a default
	schema, called "main," as shown in the example below.
    <p>
    This schema is typically created for Range Views.  However, such a schema can also
    contain Template Views. Note that Range Views cannot be created in a schema
    created by a Template View.
    </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">The schema name.
    The schema name must be unique. A valid schema name is a single word that starts with an 
    alpha character. The schema name may contain numeric characters, but cannot contain 
    punctuation or special characters.	  
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    Permissions that control access to the schema.  
	    If no permissions are specified, the default permissions are used.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:schema-create("main", ())

  (: Create a new schema, named 'main', using the default permissions. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemaCreate('main', [] );

// Create a new schema, named 'main', using the default permissions.
     
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="schema-remove" lib="view" category="Views" 
bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function removes the specified schema. 
  Removing a schema removes all the views that are part of that schema.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema to be removed.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:schema-remove("main")

  (: Remove the schema, named 'main'. :) 
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemaRemove('main');

// Remove the schema, named 'main'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="schema-get" lib="view" category="Views" 
bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the named schema specification document.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification to return.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:schema)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:schema-get("main")

  (: Return the schema, named 'main'. :)  
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemaGet('main');
  
// Return the schema, named 'main'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="schema-set-permissions" lib="view" category="Views" 
bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets permissions on the specified schema specification. 
  Any existing permissions for the schema and removed.  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions to set on the schema specification.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:schema-set-permissions("main", (xdmp:permission("app-user", "read"),
                                       xdmp:permission("app-user", "update")))

  (: Enables only users with the app-user role to read and update the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemaSetPermissions('main', (xdmp.permission('app-user', 'read'),
                                       xdmp.permission('app-user', 'update')));

// Enables only users with the app-user role to read and update the 'main' schema.
     
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="schema-add-permissions" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function adds permissions to the specified schema specification. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions to add to the schema specification.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:schema-add-permissions("main", (xdmp:permission("test-user", "read"),
                                       xdmp:permission("test-user", "update")))

  (: Enables users with the test-user role to read and update the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemaAddPermissions('main', (xdmp.permission('test-user', 'read'),
                                       xdmp.permission('test-user', 'update')));

// Enables users with the test-user role to read and update the 'main' schema. 
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="schema-remove-permissions" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function removes permissions from the specified schema specification. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions to remove from the schema specification.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:schema-remove-permissions("main", (xdmp:permission("test-user", "read"),
                                          xdmp:permission("test-user", "update")))

  (: Disables users with the test-user role from reading and updating the 'main' schema. :) 
     ]]></pre>
  </apidoc:example>
<apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');  

view.schemaRemovePermissions('main', (xdmp.permission('test-user', 'read'),
                                          xdmp.permission('test-user', 'update')));

// Disables users with the test-user role from reading and updating the 'main' schema.
     
   ]]></pre>
</apidoc:example>
</apidoc:function>
<!--
<apidoc:function name="create" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>
  This function creates a new view in the specified schema specification.  The id of the view is returned.
  The view is checked for validity.
   <p>
    Prior to executing this function, you must create a range index for each column 
    in your view.  For details on element range indexes, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/range_index.xml%2321361'>Range Indexes and Lexicons</a> in the <em>Administrator's Guide</em>.
    </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification in which the view is created.
    </apidoc:param>
    <apidoc:param name="name" type="xs:string">
    The name of the view.  The view name must be unique in the context of the schema in which it 
    is created. A valid view name is a single word that starts with an alpha character. The view
    name may contain numeric characters, but cannot contain punctuation or special characters.
    </apidoc:param>
    <apidoc:param name="scope" type="element(*,view:view-scope)">
    The scope of the view used to constrain the subset of the database to which the view applies. 
    The scope can either limit rows in the view to documents with a specific element 
    (localname + namespace) or to documents in a particular collection.  Use the 
    <code><a href="#view:element-view-scope">view:element-view-scope</a></code> function to
    set the scope to an element or the
    <code><a href="#view:collection-view-scope">view:collection-view-scope</a></code> function to
    set the scope to a collection.
    <p>
 For details on view scoping, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-range-views.xml%2392377'>Defining View Scope</a> in the <em>SQL Data Modeling Guide</em>.
    </p>
    </apidoc:param>
    <apidoc:param name="ordered" type="xs:boolean">
    Set to <code>fn:true()</code> for ordered columns.  Otherwise set to <code>fn:false()</code>.
    The ordered flag can only be used if all the range indexes referenced as columns have 
    range value positions set to <code>fn:true()</code>.
    </apidoc:param>
    <apidoc:param name="columns" type="element(view:column)*">
    A sequence of view columns. Each column has a name and a range index reference.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
    The permissions required to access this view.
    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:create(
      "main",
      "songs",
      view:element-view-scope(xs:QName("SONG")),
      false(),
      ( view:column("uri", cts:uri-reference()), 
        view:column("title", cts:element-reference(xs:QName("TITLE"))),
        view:column("album", cts:element-reference(xs:QName("ALBUM"), ("nullable"))),
        view:column("year", cts:element-reference(xs:QName("YEAR"))) ),
      () )

  (: Creates a view, named 'songs', of the 'main' schema that contains four columns, 
     with a scope on the element, 'SONG'. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
-->
<apidoc:function name="create" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function creates a new view in the specified schema specification.  The id of the view is returned.
  The view is checked for validity.
   <p>
    Prior to executing this function, you must create a range index for each column 
    in your view.  For details on element range indexes, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/admin/range_index.xml%2321361'>Range Indexes and Lexicons</a> in the <em>Administrator's Guide</em>.
    </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification in which the view is created.
    </apidoc:param>
    <apidoc:param name="name" type="xs:string">
    The name of the view.  The view name must be unique in the context of the schema in which it 
    is created. A valid view name is a single word that starts with an alpha character. The view
    name may contain numeric characters, but cannot contain punctuation or special characters.
    </apidoc:param>
    <apidoc:param name="scope" type="element(*,view:view-scope)">
    The scope of the view used to constrain the subset of the database to which the view applies. 
    The scope can either limit rows in the view to documents with a specific element 
    (localname + namespace) or to documents in a particular collection.  Use the 
    <code><a href="#view:element-view-scope">view:element-view-scope</a></code> function to
    set the scope to an element or the
    <code><a href="#view:collection-view-scope">view:collection-view-scope</a></code> function to
    set the scope to a collection.
    <p>
 For details on view scoping, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-range-views.xml%2392377'>Defining View Scope</a> in the <em>SQL Data Modeling Guide</em>.
    </p>    
    </apidoc:param>
    <apidoc:param name="columns" type="element(view:column)*">
    A sequence of view columns. Each column has a name and a range index reference.
    </apidoc:param>
    <apidoc:param name="fields" type="element(view:field)*">
    A sequence of view fields. Each field has a name and a field reference.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions required to access this view.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:create(
      "main",
      "songs",
      view:element-view-scope(xs:QName("SONG")),
      ( view:column("uri", cts:uri-reference()), 
        view:column("title", cts:element-reference(xs:QName("TITLE"))),
        view:column("album", cts:element-reference(xs:QName("ALBUM"), ("nullable"))),
        view:column("year", cts:element-reference(xs:QName("YEAR"))) ),
      (),
      () )

  (: Creates a view, named 'songs', of the 'main' schema that contains four columns, 
     with a scope on the element, 'SONG'. :)
     ]]></pre>
  </apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

  view.create(
      'main',
      'songs',
      view.elementViewScope(xs.QName('SONG')),
      ( view.column('uri', cts.uriReference()), 
        view.column('title', cts.elementReference(xs.QName('TITLE'))),
        view.column('album', cts.elementReference(xs.QName('ALBUM'), ('nullable'))),
        view.column('year', cts.elementReference(xs.QName('YEAR'))))
      );

  // Creates a view, named 'songs', of the 'main' schema that contains four columns, 
  // with a scope on the element, 'SONG'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="get" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the named view from the named schema specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:view)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:get("main", "songs")

  (: Returns the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.get('main', 'songs');

// Returns the 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="get-by-id" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the view with the specified id.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="view-id" type="xs:unsignedLong">
    The id of the view to be returned.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:view)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:get-by-id(5423110979916486998)
 
  (: Return the view with the specified id. :)  
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.getById(5423110979916486998);
 
// Return the view with the specified id.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="remove" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function removes the named view from the named schema specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema containing the view to be removed.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view to be removed.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:remove("main", "songs")

  (: Removes the 'songs' view from the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.remove('main', 'songs');

// Removes the 'songs' view from the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="set-name" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function renames the named view in the named schema specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The current name of the view to be renamed.
    </apidoc:param>
    <apidoc:param name="new-name" type="xs:string">
    The new name of the view.  The view name must be unique in the context of the schema in which 
    it resides. A valid view name is a single word that starts with an alpha character. The view 
    name may contain numeric characters, but cannot contain punctuation or special characters.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:set-name("main", "songs", "tunes")

  (: Renames the 'songs' view in the 'main' schema to 'tunes'. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.setName('main', 'songs', 'tunes');

// Renames the 'songs' view in the 'main' schema to 'tunes'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="set-ordered" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function sets the ordered flag on the view.
  The ordered flag can only be used if all the range indexes referenced as columns have positions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
     The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view on which the ordered flag is to be set.
    </apidoc:param>
    <apidoc:param name="ordered" type="xs:boolean">
    Set to <code>fn:true()</code> for ordered columns.  Otherwise set to <code>fn:false()</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:set-ordered("main", "songs", fn:true())

  (: Sets the ordered flag on the 'songs' view in the 'main' schema to 'true'. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="get-ordered" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function returns the ordered flag setting from the named view in the named
  schema specification.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view on which the ordered flag is set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:get-ordered("main", "songs")
 
  (: Returns the ordered flag setting on the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="set-view-scope" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the scope of the named view in the named 
  schema specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view on which the scope is set.
    </apidoc:param>
    <apidoc:param name="scope" type="element(*,view:view-scope)">
    The scope to be set on the view. Use the 
    <code><a href="#view:element-view-scope">view:element-view-scope</a></code> function to
    set the scope to an element or the
    <code><a href="#view:collection-view-scope">view:collection-view-scope</a></code> function to
    set the scope to a collection.
    <p>
 For details on view scoping, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-range-views.xml%2392377'>Defining View Scope</a> in the <em>SQL Data Modeling Guide</em>.
    </p>    
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:set-view-scope("main", "songs", view:element-view-scope(xs:QName("SONG"))) 

  (: Sets the scope of the 'songs' view in the 'main' schema to the 
     element, 'SONGS'. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.setViewScope('main', 'songs', view.elementViewScope(xs.QName('SONG')));

// Sets the scope of the 'songs' view in the 'main' schema to the 
// element, 'SONGS'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="set-permissions" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the permissions for the named view in the 
  named schema specification.  Any existing permissions for the view and
  removed. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view for which the permissions are to be set.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions for the view.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:set-permissions("main", "songs", (xdmp:permission("app-user", "read"),
                                         xdmp:permission("app-user", "update")))

  (: Enables only users with the app-user role to read and update the 'songs' view
     in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');
  
view.setPermissions('main', 'songs', (xdmp.permission('app-user', 'read'),
                                         xdmp.permission('app-user', 'update')));

// Enables only users with the app-user role to read and update the 'songs' view
// in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="add-permissions" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function adds permissions to those already set for the named view in the 
  named schema specification.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view to which the permissions are to be added.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions to be added to the view.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:add-permissions("main", "songs", (xdmp:permission("test-user", "read"),
                                         xdmp:permission("test-user", "update")))

  (: Enables users with the test-user role to read and update the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.addPermissions('main', 'songs', (xdmp.permission('test-user', 'read'),
                                         xdmp.permission('test-user', 'update')));

// Enables users with the test-user role to read and update the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="remove-permissions" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function removes permissions from those set for the named view in the 
  named schema specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view from which the permissions are to be removed.
    </apidoc:param>
    <apidoc:param name="permissions" type="item()*">
	    The permissions to be removed from the view.
	    When run in an XQuery context, the permissions are a sequence of
	    XML elements (sec:permission). When importing this module into 
	    a Server-Side JavaScript context, the permissions are an array
	    of Objects.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:remove-permissions("main", "songs", (xdmp:permission("test-user", "read"),
                                            xdmp:permission("test-user", "update")))

  (: Disables users with the test-user role from reading and updating the 
     'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.removePermissions('main', 'songs', (xdmp.permission('test-user', 'read'),
                                            xdmp.permission('test-user', 'update')));

// Disables users with the test-user role from reading and updating the 
// 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="set-columns" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function replaces the current set of column specifications on the named 
  view in the named schema with a new set of columns.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view containing the column specifications to be reset.
    </apidoc:param>
    <apidoc:param name="columns" type="element(view:column)*">
    A sequence of column specifications for the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:set-columns("main", "songs",
    ( view:column("uri", cts:uri-reference()), 
      view:column("title", cts:element-reference(xs:QName("TITLE"))),
      view:column("author", cts:element-reference(xs:QName("AUTHOR"))),
      view:column("album", cts:element-reference(xs:QName("ALBUM"), ("nullable"))),
      view:column("year", cts:element-reference(xs:QName("YEAR"))) ) )
 
  (: Sets five columns in the 'songs' view in the 'main' schema. :) 
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

  view.setColumns('main', 'songs',
    [view.column('uri', cts.uriReference()), 
      view.column('title', cts.elementReference(xs.QName('TITLE'))),
      view.column('author', cts.elementReference(xs.QName('AUTHOR'))),
      view.column('album', cts.elementReference(xs.QName('ALBUM'), ('nullable'))),
      view.column('year', cts.elementReference(xs.QName('YEAR')))] );
 
// Sets five columns in the 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="add-column" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function adds column specifications to the current set of column specifications on the named 
  view in the named schema.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view to which the column specifications are to be added.
    </apidoc:param>
    <apidoc:param name="column" type="element(view:column)">
    The column specifications to be added to the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:add-column("main", "songs",
      (view:column("author", cts:element-reference(xs:QName("AUTHOR")))) )

  (: Adds an 'author' column to the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.addColumn('main', 'songs',
      (view.column('author', cts.elementReference(xs.QName('AUTHOR')))) );

// Adds an 'author' column to the 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="remove-column" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function removes a column specification from the named 
  view in the named schema.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view from which the column specification is to be removed.
    </apidoc:param>
    <apidoc:param name="column-name" type="xs:string">
    The name of the column specification to be removed from the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:remove-column("main", "songs", "year")  

  (: Removes the 'year' column from the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.removeColumn('main', 'songs', 'year');  

// Removes the 'year' column from the 'songs' view in the 'main' schema.
     
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="columns" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the sequence of column specifications set in the named 
  view in the named schema.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view containing the column specifications.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:column)*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:columns("main", "songs")

  (: Returns the columns set in the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

  view.columns('main', 'songs');

  // Returns the columns set in the 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="get-column" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the named column specification set in the named 
  view in the named schema.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view containing the column specification.
    </apidoc:param>
    <apidoc:param name="column-name" type="xs:string">
    The name of the column specification to be returned.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:column)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:get-column("main", "songs", "title") 

  (: Returns the 'title' column from the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.getColumn('main', 'songs', 'title');

// Returns the 'title' column from the 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="schemas" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns all of the schema specifications.</apidoc:summary>
  <apidoc:return>element(view:schema)*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:schemas()

  (: Returns all of the schema specifications. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemas();

// Returns all of the schema specifications.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="views" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns all of the view specifications in the named schema.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the views to be returned.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:view)*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:views("main")

  (: Returns all of the views in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.views('main');

// Returns all of the views in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="element-view-scope" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function constructs a new element-style view scope specification.
    <p>
 For details on view scoping, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-range-views.xml%2392377'>Defining View Scope</a> in the <em>SQL Data Modeling Guide</em>.
    </p>		
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="localname" type="xs:QName">
    The name of the element on which to define the view scope.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(*, view:view-scope)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:element-view-scope(xs:QName("SONG"))

  (: Returns the view scope specification for the element, 'SONG'. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.elementViewScope(xs.QName('SONG'));

// Returns the view scope specification for the element, 'SONG'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="collection-view-scope" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function constructs a new collection-style view scope specification.
    <p>
 For details on view scoping, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/sql/creating-range-views.xml%2392377'>Defining View Scope</a> in the <em>SQL Data Modeling Guide</em>.
    </p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="collection" type="xs:string">
    The name of the collection to define the view scope.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(*, view:view-scope)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:collection-view-scope("http://marklogic.com/xdmp/view/songs")

  (: Returns a collection-style view scope specification. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

  view.collectionViewScope('http://marklogic.com/xdmp/view/songs');

  // Returns a collection-style view scope specification.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="column" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function constructs a new column specification.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="xs:string">
    The name of the column specification.
    </apidoc:param>
    <apidoc:param name="range-index" type="cts:reference">
    The range index for the column.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:column)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:column("title", cts:element-reference(xs:QName("TITLE")))
 
  (: Constructs a column, named 'title', over an element range index, named 'TITLE'. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

  view.column('title', cts.elementReference(xs.QName('TITLE')));
 
  // Constructs a column, named 'title', over an element range index, named 'TITLE'.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="collection" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function return the URI of the protected collection holding all the views.</apidoc:summary>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";

  view:collection()
 
  (: Returns the URI of the protected collection holding all of the views. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

  view.collection();
 
// Returns the URI of the protected collection holding all of the views.
   ]]></pre>
</apidoc:example>
</apidoc:function>


<apidoc:function name="get-view-scope" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the scope of the named view in the
  named schema.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema specification containing the view.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view from which to return the scope.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(*, view:view-scope)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:get-view-scope("main", "songs")
 
  (: Returns the scope of the 'songs' view in the 'main' schema. :)
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.getViewScope('main', 'songs');

// Returns the scope of the 'songs' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>

<apidoc:function name="remove-by-id" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function removes the view with the specified id.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="view-id" type="xs:unsignedLong">The id of the view to be removed.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[ 

  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:remove-by-id(5423110979916486998)

  (: Remove the view with the specified id. :)  
     ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.removeById(5423110979916486998);

// Remove the view with the specified id.
     
   ]]></pre>
</apidoc:example>
</apidoc:function>

<apidoc:function name="schema-get-permissions" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the permissions set on the specified schema.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">The name of the schema.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)*</apidoc:return>
  <apidoc:example clsas="xquery"><pre xml:space="preserve"><![CDATA[

  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:schema-get-permissions("main")

  (: Returns the permissions set on the 'main' schema. :)
    ]]></pre>
  </apidoc:example>
<apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.schemaGetPermissions('main');

// Returns the permissions set on the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="get-permissions" lib="view" category="Views" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the permissions set on the specified view.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">The name of the schema that contains the view.</apidoc:param>
    <apidoc:param name="view-name" type="xs:string">The name of the view.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(sec:permission)*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

  xquery version "1.0-ml"; 
 
  import module namespace view = "http://marklogic.com/xdmp/view" 
      at "/MarkLogic/views.xqy";
 
  view:get-permissions("main", "employees")

  (: Returns the permissions set on the 'employees' view in the 'main' schema. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.getPermissions('main', 'employees');

// Returns the permissions set on the 'employees' view in the 'main' schema.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="set-fields" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the specified fields on the specified view.  Any existing fields are 
  replaced or removed.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view.
    </apidoc:param>
    <apidoc:param name="fields" type="element(view:field)*">
    The sequence of field elements to be set on the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";
 
view:set-fields("main",
                "employees", 
                (view:field("Employee"), view:field("EmployeeID")) )

(: Sets the "Employee" and "EmployeeID" fields on the "employees" view. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.setFields('main',
                'employees', 
                [view.field('Employee'), view.field('EmployeeID')] );

// Sets the "Employee" and "EmployeeID" fields on the "employees" view.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="add-field" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function adds a field to the named view.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view.
    </apidoc:param>
    <apidoc:param name="field" type="element(view:field)">
    The field element to be added to the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";
 
view:add-field("main", "employees", view:field("Employee"))

(: Adds the "Employee" field to the "employees" view. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.addField('main', 'employees', view.field('Employee'));

// Adds the "Employee" field to the "employees" view.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="remove-field" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function removes a field from the named view.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
   The name of the view.
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
    The name of the field to be removed.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";
 
view:remove-field("main", "employees", "Employee")

(: Removes the "Employee" field from the "employees" view. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.removeField('main', 'employees', 'Employee');

// Removes the "Employee" field from the "employees" view.
     
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="fields" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the fields set on the named view.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:field)*</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";
 
view:fields("main", "employees") 

(: Returns the fields set on the "employees" view. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.fields('main', 'employees'); 

// Returns the fields set on the "employees" view.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="get-field" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the element specification for the named field.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view.
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
    The name of the field.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:field)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";

view:get-field("main", "employees",  "Employee") 

(: Returns the element specification for the "Employee" field. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.getField('main', 'employees',  'Employee');

// Returns the element specification for the "Employee" field.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="get-bindings" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function generates a binding map suitable for use with 
  <code>cts:parse</code> from the named view.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="schema-name" type="xs:string">
    The name of the schema.
    </apidoc:param>
    <apidoc:param name="view-name" type="xs:string">
    The name of the view.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>map:map</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";
 
view:get-bindings("main", "employees")

(: Returns binging map from the "employees" view. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.getBindings('main', 'employees');

// Returns binging map from the "employees" view.
   ]]></pre>
</apidoc:example>
</apidoc:function>
<apidoc:function name="field" lib="view" category="Views" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function constructs a new element-style field specification for the named field. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="xs:string">
    The name of the field.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(view:field)</apidoc:return>
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace view = "http://marklogic.com/xdmp/views" 
      at "/MarkLogic/views.xqy";
 
view:field("Employee")

(: Constructs and element field specification for the "Employee" field. :)
    ]]></pre>
  </apidoc:example>
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
const view = require('/MarkLogic/views');

view.field('Employee');

// Constructs and element field specification for the "Employee" field. 
   ]]></pre>
</apidoc:example>
</apidoc:function>

</apidoc:module>

