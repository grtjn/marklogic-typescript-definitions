<apidoc:module name="OfficeConvert" category="Document Conversion" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
  <p xmlns="http://www.w3.org/1999/xhtml">Includes the Microsoft Office convert functions using the AntennaHouse
  technology.</p>
</apidoc:summary><apidoc:function name="word-convert" type="builtin" lib="xdmp" category="Document Conversion">
    <apidoc:summary>
  Converts a Microsoft Word document to XHTML. Returns several nodes,
  including a parts node, the converted document xml node, and any
  other document parts (for example, css files and images).  The first
  node is the parts node, which contains a manifest of all of the parts
  generated as result of the conversion.  Does not convert Microsoft Office
  2007 and later documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="doc" type="node()" optional="false">
  Microsoft Word document to convert to HTML, as binary node().
  </apidoc:param>
      <apidoc:param name="filename" type="xs:string" optional="false">
    The root for the name of the converted files and directories. If the
    specified filename includes an extension, then the extension is appended
    to the root with an underscore. The directory for other parts of the
    conversion (images, for example) has the string "_parts" appended to the
    root. For example, if you specify a filename of "myFile.doc", the
    generated names will be "myFile_doc.xhtml" for the xml node and
    "myFile_doc_parts" for the directory containing the any other parts
    generated by the conversion (images, css files, and so on).
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options in either an XML 
    <code>options</code> element
    in the "xdmp:word-convert" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace any hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:tidy" xmlns="http://www.w3.org/1999/xhtml">xdmp:tidy</a>
    <a class="javascript" href="#xdmp.tidy" xmlns="http://www.w3.org/1999/xhtml">xdmp.tidy</a> function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>tidy</dt>
    <dd>Specify <code>true</code> to run tidy on the document and
    <code>false</code> not to run tidy. If you run tidy, you can also
    include <a class="xquery" href="#xdmp:tidy">xdmp:tidy</a>
    <a class="javascript" href="#xdmp.tidy">xdmp.tidy</a> options.
    <span class="xquery">Any tidy option elements must be in the
    <code>xdmp:tidy</code> namespace.</span></dd>
    <dt>compact</dt>
    <dd>Specify <code>true</code> to produce
    "compact" HTML, that is, without style information. The default is
    <code>false</code>.</dd>
    </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  This function is not available on Mac OS X.
  <p xmlns="http://www.w3.org/1999/xhtml">This function requires separate converter installation package starting with release 9.0-4, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/install_all/intro.xml%2334694'>MarkLogic Converters Installation Changes Starting at Release 9.0-4</a> in the <em>Installation Guide for All Platforms</em>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function supports the following file formats: Microsoft 
  Word 97/98 (Mac)/2000/2001 (Mac)/XP/2003 (Native format).</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The convert functions return several nodes.  The first node is a manifest
  containing the various parts of the conversion. Typically there will be
  an xml part, a css part, and some image parts.  Each part is returned as
  a separate node in the order shown in the manifest.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Therefore, given the following manifest: </p>
  <pre xmlns="http://www.w3.org/1999/xhtml">
&lt;parts&gt;
  &lt;part&gt;myFile_doc.xhtml&lt;/part&gt;
  &lt;part&gt;myFile_doc_parts/conv.css&lt;/part&gt;
  &lt;part&gt;myFile_doc_parts/toc.xml&lt;/part&gt;
&lt;/parts&gt;
</pre>
  <p xmlns="http://www.w3.org/1999/xhtml">the first node of the returned query is the manifest, the second is the
  "myFile_doc.xhtml" node, the third is the "myFile_doc_parts/conv.css" node,
  and the fourth is the myFile_doc_parts/toc.xml node.</p>

</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: This example uses a combination of xdmp:word-convert options ("tidy")
 : and xdmp:tidy options ("clean"), expressed as an options element. :)
let $results := 
  xdmp:word-convert(
    xdmp:document-get("myFile.doc"),
    "myFile.doc",
    &lt;options xmlns="xdmp:word-convert" xmlns:tidy="xdmp:tidy"&gt;
      &lt;tidy&gt;true&lt;/tidy&gt;
      &lt;tidy:clean&gt;yes&lt;/tidy:clean&gt;
    &lt;/options&gt;
 ),
 $manifest := $results[1]
return $results[2 to last()]

(: returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: This example uses a combination of xdmp:word-convert options ("tidy")
 : and xdmp:tidy options ("clean"), expressed as a map:map. :)
let $results := 
  xdmp:word-convert(
    xdmp:document-get("myFile.doc"),
    "myFile.doc",
    map:map() =&gt; map:with("tidy", fn:true())
              =&gt; map:with("clean", "yes")

 ),
 $manifest := $results[1]
return $results[2 to last()]

(: returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const results = xdmp.wordConvert(
                  fn.head(xdmp.documentGet('myFile.doc')),
                  'myFile.doc');
const it = results[Symbol.iterator]();
const manifest= it.next().value;
const wordAsXHTML = it.next().value;
wordAsXHTML;

// The word document converted as xhtml.  The results variable
// is a Sequence, where the first item is the manifest, and the 
// remaining items are the converted nodes.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Including an mix of xdmp.wordConvert options ('tidy') and 
// xdmp.tidy options ('clean') in a conversion call.

const results = Array.from(
  xdmp.wordConvert(
    fn.head(xdmp.documentGet('myFile.doc')),
    'myFile.doc',
    {tidy: true, clean: 'yes'}
 ));

const manifest = results[0];
const parts = results.slice(1);
parts[0];
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="excel-convert" type="builtin" lib="xdmp" category="Document Conversion">
    <apidoc:summary>
  Converts a Microsoft Excel document to XHTML. Returns several nodes,
  including a parts node, the converted document xml node, and any
  other document parts (for example, css files and images).  The first
  node is the parts node, which contains a manifest of all of the parts
  generated as result of the conversion.  Does not convert Microsoft Office
  2007 and later documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="doc" type="node()" optional="false">
    Microsoft Office Excel document to convert to HTML, as binary node().
  </apidoc:param>
      <apidoc:param name="filename" type="xs:string" optional="false">
    The root for the name of the converted files and directories. If the
    specified filename includes an extension, then the extension is appended
    to the root with an underscore. The directory for other parts of the
    conversion (images, for example) has the string "_parts" appended to the
    root. For example, if you specify a filename of "myFile.xls", the
    generated names will be "myFile_xls.xhtml" for the xml node and
    "myFile_xls_parts" for the directory containing the any other parts
    generated by the conversion (images, css files, and so on).
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML 
    <code>options</code> element
    in the "xdmp:excel-convert" namespace, or as a <code>map:map</code>. The
    options names below are XML element localnames. When using a map,
    replace any hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:tidy" xmlns="http://www.w3.org/1999/xhtml">xdmp:tidy</a>
    <a class="javascript" href="#xdmp.tidy" xmlns="http://www.w3.org/1999/xhtml">xdmp.tidy</a> function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>tidy</dt>
    <dd>Specify <code>true</code> to run tidy on the document and
    <code>false</code> not to run tidy. If you run tidy, you can also
    include <a class="xquery" href="#xdmp:tidy">xdmp:tidy</a>
    <a class="javascript" href="#xdmp.tidy">xdmp.tidy</a> options.
    <span class="xquery">Any tidy option elements must be in the
    <code>xdmp:tidy</code> namespace.</span></dd>
    <dt>sheetID</dt>
    <dd>An integer specifying which sheet of the input Excel document
    to convert. If this option is not set, this function converts all 
    sheets.</dd>
    <dt>compact</dt>
    <dd>Specify <code>true</code> to produce
    "compact" HTML, that is, without style information. The default is
    <code>false</code>.</dd>
    <dt class="xquery">print-area-only</dt>
    <dt class="javascript">print-area-only</dt>
    <dd>Set to <code>true</code> to convert only the print area of 
    the sheet.</dd>
    <dt class="xquery">sheet-by-sheet</dt>
    <dt class="javascript">sheetBySheet</dt>
    <dd>Set to <code>true</code> to produce one document for each sheet. 
    The default is <code>false</code>.</dd>
    </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  This function is not available on Mac OS X.
  <p xmlns="http://www.w3.org/1999/xhtml">This function requires separate converter installation package starting with release 9.0-4, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/install_all/intro.xml%2334694'>MarkLogic Converters Installation Changes Starting at Release 9.0-4</a> in the <em>Installation Guide for All Platforms</em>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function supports the following file formats: Microsoft 
  Excel 97/98 (Mac)/2000/2001 (Mac)/XP/2003.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The convert functions return several nodes.  The first node is a manifest
  containing the various parts of the conversion. Typically there will be
  an xml part, a css part, and some image parts.  Each part is returned as
  a separate node in the order shown in the manifest.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Therefore, given the following manifest: </p>
  <pre xmlns="http://www.w3.org/1999/xhtml">
&lt;parts&gt;
  &lt;part&gt;myFile_xls.xhtml&lt;/part&gt;
  &lt;part&gt;myFile_xls_parts/conv.css&lt;/part&gt;
  &lt;part&gt;myFile_xls_parts/toc.xml&lt;/part&gt;
&lt;/parts&gt;
</pre>
  <p xmlns="http://www.w3.org/1999/xhtml">the first node of the returned query is the manifest, the second is the
  "myFile_xls.xhtml" node, the third is the "myFile_xls_parts/conv.css" node,
  and the fourth is the myFile_xls_parts/toc.xml node.</p>

</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $results := xdmp:excel-convert(
                         xdmp:document-get("myFile.xls"),
                         "myFile.xls" ),
    $manifest := $results[1]
return
$results[2 to last()]

(: Returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: The following example includes a combination of xdmp:excel-convert
 : options and xdmp:tidy options in the options element. :)
let $results := xdmp:excel-convert(
      xdmp:document-get("myFile.xls"),
      "myFile.xls",
      &lt;options xmlns="xdmp:excel-convert" xmlns:tidy="xdmp:tidy"&gt;
        &lt;tidy&gt;true&lt;/tidy&gt;
        &lt;tidy:clean&gt;yes&lt;/tidy:clean&gt;
        &lt;sheetID&gt;2&lt;/sheetID&gt;
      &lt;/options&gt;),
    $manifest := $results[1]
return
$results[2 to last()]

(: Returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: The following example includes a combination of xdmp:excel-convert
 : options and xdmp:tidy options in the options map. :)
let $results := xdmp:excel-convert(
      xdmp:document-get("myFile.xls"),
      "myFile.xls",
      map:map() =&gt; map:with("tidy", fn:true())
                =&gt; map:with("printAreaOnly", "yes")
                =&gt; map:with("sheetID", 2),
    $manifest := $results[1]
return
$results[2 to last()]

(: Returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const results = xdmp.excelConvert(
                fn.head(xdmp.documentGet('myFile.xls')),
                'myFile.xls');
const it = results[Symbol.iterator]();
const manifest= it.next().value;
const excelAsXHTML = it.next().value;
excelAsXHTML;

// The excel document converted as xhtml.  The results variable
// is a Sequence, where the first item is the manifest, and the 
// remaining items are the converted nodes.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Using a combination of xdmp.excelConvert and xdmp.tidy options
const results = Array.from(
  xdmp.excelConvert(
    fn.head(xdmp.documentGet('myFile.xls')),
    'myFile.xls',
    { tidy: true, clean: 'yes', sheetID: 2 }
));
const manifest = results[0];
const parts = results.slice(1);
parts[0];
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="powerpoint-convert" type="builtin" lib="xdmp" category="Document Conversion">
    <apidoc:summary>
  Converts a Microsoft Powerpoint document to XHTML. Returns several nodes,
  including a parts node, the converted document xml node, and any
  other document parts (for example, css files and images).  The first
  node is the parts node, which contains a manifest of all of the parts
  generated as result of the conversion.  Does not convert Microsoft Office
  2007 and later documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="doc" type="node()" optional="false">
    Microsoft Powerpoint document to convert to HTML, as binary node().
  </apidoc:param>
      <apidoc:param name="filename" type="xs:string" optional="false">
    The root for the name of the converted files and directories. If the
    specified filename includes an extension, then the extension is appended
    to the root with an underscore. The directory for other parts of the
    conversion (images, for example) has the string "_parts" appended to the
    root. For example, if you specify a filename of "myFile.ppt", the
    generated names will be "myFile_ppt.xhtml" for the xml node and
    "myFile_ppt_parts" for the directory containing the any other parts
    generated by the conversion (images, css files, and so on).
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    Options with which to customize this operation.
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">You can specify options as either an XML 
    <code>options</code> element
    in the "xdmp:powerpoint-convert" namespace, or as a <code>map:map</code>.
    The options names below are XML element localnames. When using a map,
    replace any hyphens with camel casing. For example, "an-option"
    becomes "anOption" when used as a <code>map:map</code> key.</span>
    This function supports the following options, plus the options from the
    <a class="xquery" href="#xdmp:tidy" xmlns="http://www.w3.org/1999/xhtml">xdmp:tidy</a>
    <a class="javascript" href="#xdmp.tidy" xmlns="http://www.w3.org/1999/xhtml">xdmp.tidy</a> function.
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt>tidy</dt>
    <dd>Specify <code>true</code> to run tidy on the document and
    <code>false</code> not to run tidy. If you run tidy, you can also
    include <a class="xquery" href="#xdmp:tidy">xdmp:tidy</a>
    <a class="javascript" href="#xdmp.tidy">xdmp.tidy</a> options.
    <span class="xquery">Any tidy option elements must be in the
    <code>xdmp:tidy</code> namespace.</span></dd>
    <dt>compact</dt>
    <dd>Specify <code>true</code> to produce
    "compact" HTML, that is, without style information. The default is
    <code>false</code>.</dd>
    <dt>slideID</dt>
    <dd>An integer specifying which slide of the input Powerpoint document
    to convert. If this option is not set, all slides are converted. </dd>
    <dt class="xquery">slide-by-slide</dt>
    <dt class="javascript">slideBySlide</dt>
    <dd>Specify <code>true</code> to produce
    one document for each slide.  The default is <code>false</code>.</dd>
    <dt class="xquery">speaker-notes</dt>
    <dt class="javascript">speakerNotes</dt>
    <dd>Specify <code>true</code> to include speaker notes in the output. 
    The default is <code>false</code>.</dd>
    </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  This function is not available on Mac OS X.
  <p xmlns="http://www.w3.org/1999/xhtml">This function requires separate converter installation package starting with release 9.0-4, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/install_all/intro.xml%2334694'>MarkLogic Converters Installation Changes Starting at Release 9.0-4</a> in the <em>Installation Guide for All Platforms</em>.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">This function supports the following file formats: Microsoft PowerPoint 
  97/2000/2001 (Mac)/XP/2003, except that 95/97 compound file format is not
  supported.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">The convert functions return several nodes.  The first node is a manifest
  containing the various parts of the conversion. Typically there will be
  an xml part, a css part, and some image parts.  Each part is returned as
  a separate node in the order shown in the manifest.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">Therefore, given the following manifest: </p>
  <pre xmlns="http://www.w3.org/1999/xhtml">
&lt;parts&gt;
  &lt;part&gt;myFile_ppt.xhtml&lt;/part&gt;
  &lt;part&gt;myFile_ppt_parts/conv.css&lt;/part&gt;
  &lt;part&gt;myFile_ppt_parts/toc.xml&lt;/part&gt;
&lt;/parts&gt;
</pre>
  <p xmlns="http://www.w3.org/1999/xhtml">the first node of the returned query is the manifest, the second is the
  "myFile_ppt.xhtml" node, the third is the "myFile_ppt_parts/conv.css" node,
  and the fourth is the myFile_ppt_parts/toc.xml node.</p>

</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $results := xdmp:powerpoint-convert(
                         xdmp:document-get("myFile.ppt"),
                         "myFile.ppt" ),
    $manifest := $results[1]
return
$results[2 to last()]

(: Returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a combination of xdmp:powerpoint-convert and xdmp:tidy options
 : in an options element. :)
let $results := 
      xdmp:powerpoint-convert(
        xdmp:document-get("myFile.ppt"),
        "myFile.ppt",
        &lt;options xmlns="xdmp:powerpoint-convert" xmlns:tidy="xdmp:tidy"&gt;
          &lt;tidy&gt;true&lt;/tidy&gt;
          &lt;tidy:clean&gt;yes&lt;/tidy:clean&gt;
          &lt;speaker-notes&gt;true&lt;/speaker-notes&gt;
        &lt;/options&gt;
      ),
    $manifest := $results[1]
return
$results[2 to last()]

(: Returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
(: Using a combination of xdmp:powerpoint-convert and xdmp:tidy options
 : in an options map. :)
let $results := 
      xdmp:powerpoint-convert(
        xdmp:document-get("myFile.ppt"),
        "myFile.ppt",
        map:map() =&gt; map:with("tidy", fn:true())
                  =&gt; map:with("clean", "yes")
                  =&gt; map:with("speakerNotes", fn:true())
      ),
    $manifest := $results[1]
return
$results[2 to last()]

(: Returns all of the converted nodes :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
const results = xdmp.powerpointConvert(
                  fn.head(xdmp.documentGet('/space/Hello.ppt')),
                  'Hello.ppt');
const it = results[Symbol.iterator]();
const manifest= it.next().value;
const pptAsXHTML = it.next().value;
pptAsXHTML;

// The powerpoint document converted as xhtml.  The results variable
// is a Sequence, where the first item is the manifest, and the 
// remaining items are the converted nodes.
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Using a combinary of xdmp.powerpointConvert and xdmp.tidy options.
const results = Array.from(
  xdmp.powerpointConvert(
    fn.head(xdmp.documentGet('/space/Hello.ppt')),
    'Hello.ppt',
    { tidy: true, clean: 'yes', speakerNotes: true }
);
const manifest = results[0];
const parts = results.slice(1);
parts[0];
</pre></apidoc:example>
  </apidoc:function></apidoc:module>