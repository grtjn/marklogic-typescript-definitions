<apidoc:module name="SQLBuiltins" category="SQL" lib="SQL" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
The SQL built-in functions.
</apidoc:summary><apidoc:function name="bit-length" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns the length of the string "str" in bits.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="xs:string">
    The string to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:bit-length("text")
  =&gt; 32
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.bitLength("text")
  =&gt; 32
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="octet-length" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns the length of the string "str" in bits.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:string">
    The string to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:octet-length("text")
  =&gt; 4
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.octetLength("text")
  =&gt; 4
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sign" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns the sign of number x.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="x" type="xs:double">
  The number to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:sign(19.5)
  =&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.sign(19.5)
  =&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="repeat" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a string that concatenates the first argument as many times as
  specified by the second argument.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="item()">
  The string to duplicate. If the value is not a string, its string value
  will be used.
  </apidoc:param>
      <apidoc:param name="n" type="xs:double">
  The number of times to repeat the string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:repeat("ab",2)
  =&gt; "abab"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.repeat("ab",2)
  =&gt; "abab"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="left" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a string that is the leftmost characters of the target string.
  The number of characters to return is specified by the second argument.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="item()">
  The base string. If the value is not a string, its string value
  will be used.
  </apidoc:param>
      <apidoc:param name="n" type="xs:double">
  The number of leftmost characters of the string to return.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:left("abcde",2)
  =&gt; "ab"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.left("abcde",2)
  =&gt; "ab"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="right" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a string that is the rightmost characters of the target string.
  The number of characters to return is specified by the second argument.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="item()">
  The base string. If the value is not a string, its string value
  will be used.
  </apidoc:param>
      <apidoc:param name="n" type="xs:double">
  The number of rightmost characters of the string to return.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:right("abcde",2)
  =&gt; "de"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.right("abcde",2)
  =&gt; "de"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="space" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a string that is the given number of spaces.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="n" type="xs:double">
  The number of spaces to return as a string.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.space(2)
  =&gt; "  "
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:space(2)
  =&gt; "  "
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="insert" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a string that that is the first argument with <var xmlns="http://www.w3.org/1999/xhtml">length</var> characters
  removed starting at <var xmlns="http://www.w3.org/1999/xhtml">start</var> and the second string has been inserted 
  beginning at <var xmlns="http://www.w3.org/1999/xhtml">start</var>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="xs:string">
  The string to manipulate.
  </apidoc:param>
      <apidoc:param name="start" type="xs:double">
  The starting position where characters will be inserted.
  </apidoc:param>
      <apidoc:param name="length" type="xs:double">
  The number of characters to be removed.
  </apidoc:param>
      <apidoc:param name="str2" type="xs:string">
  The string to insert.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:insert("abcdef",2,1,"(REDACTED)")
  =&gt; "ab(REDACTED)def"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.insert("abcdef",2,1,"(REDACTED)")
  =&gt; "ab(REDACTED)def"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="rand" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Return a random number. This differs from xdmp:random in 
  that the argument is a seed.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="n" type="xs:unsignedLong">
  The random seed. Currently this parameter is ignored.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:example class="xquery"><pre xml:rand="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:rand()
  =&gt; 147365250
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:rand="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.rand()
  =&gt; 147365250
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="ltrim" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Return a string that removes leading empty spaces in the input string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="xs:string">
    The string to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:ltrim("             this is text")
  =&gt; this is text
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.ltrim("             this is text")
  =&gt; this is text
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="rtrim" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Return a string that removes trailing empty spaces in the input string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="xs:string">
    The string to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:rtrim("             this is text")
  =&gt; this is text
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.rtrim("             this is text")
  =&gt; this is text
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="trim" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Return a string that removes leading empty spaces in the input string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="xs:string">
    The string to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:trim("             this is text    ")
  =&gt; this is text
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.trim("             this is text    ")
  =&gt; this is text
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="instr" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Find the starting location of a pattern in a string.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="str" type="xs:string">
  The string to be evaluated.
  </apidoc:param>
      <apidoc:param name="n" type="xs:string">
  The pattern to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsigned</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql:instr("abcd rf","bc")
  =&gt; 2
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  sql.instr("abcd rf","bc")
  =&gt; 2
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="ifnull" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  If the first expression is NULL, then the value of the second
  expression is returned. If not null, the first expression is
  returned.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expr1" type="item()*">
    First expression to be evaluated.
  </apidoc:param>
      <apidoc:param name="expr2" type="item()*">
    Second expression to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:ifnull((),1) 
=&gt;
1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.ifnull(null,1) 
=&gt;
1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="nullif" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns a NULL value if the two specified values are equal.
  Returns the first value if they are not equal
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="expr1" type="item()*">
    First expression to be evaluated.
  </apidoc:param>
      <apidoc:param name="expr2" type="item()*">
    Second expression to be evaluated.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:nullif(1,1) 
=&gt;
NULL
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.nullif(1,1) 
=&gt;
NULL
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="columnID" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns the column ID from a schema name, a view name and a column name.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="schema" type="xs:string">
    The schema name.
  </apidoc:param>
      <apidoc:param name="view" type="xs:string">
    The view name.
  </apidoc:param>
      <apidoc:param name="column" type="xs:string">
    The column name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sql:columnID</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:columnID("medline","Publications","ISSN");
=&gt;
sql:columnID(2991075902483323029)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.columnID("medline","Authors","LastName")
=&gt;
2991075902483323029
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="soundex" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:string">
The string whose soundex will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:soundex("Smith")
=&gt; "S5351000"
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.soundex("Smith")
=&gt; "S5351000"
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="difference" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
<p xmlns="http://www.w3.org/1999/xhtml">Returns an integer value that indicates the difference between the SOUNDEX values of two character expressions.
</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="arg" type="xs:string">
The string whose difference will be returned.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:difference('Green','Greene')
=&gt; 4
</pre>
</apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.difference('Green','Greene')
=&gt; 4
</pre>
</apidoc:example>
  </apidoc:function><apidoc:function name="strpos" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns an integer value representing the starting position of a
  string within the search string. Note, the string starting position is 1.
  If the first parameter is empty, the result is the empty sequence.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="target" type="xs:string?">
  The string from which to test.
  </apidoc:param>
      <apidoc:param name="test" type="xs:string?">
  The string to test for existence in the second parameter.
  </apidoc:param>
      <apidoc:param name="collation" type="xs:string?" optional="true">
The optional name of a valid collation URI.  For information on the
collation URI syntax, see the <em xmlns="http://www.w3.org/1999/xhtml">Search Developer's Guide</em>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:strpos("searchintext","chin")

=&gt; 5
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.strpos("searchintext","chin");

=&gt; 5
</pre></apidoc:example>
  </apidoc:function></apidoc:module>