<apidoc:module name="Extensions" category="Semantics" lib="rdf" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary category="Semantics" lib="rdf">
   This category contains built-in and library functions for working
   with semantic data. 
   <p xmlns="http://www.w3.org/1999/xhtml">
   For more details, see the [xref name="semantics/intro#chapter"] 
  <em>Semantics Developer's Guide</em>.
   </p>
   
  </apidoc:summary><apidoc:summary category="Semantics" lib="rdf" subcategory="RDF Functions">
   <p xmlns="http://www.w3.org/1999/xhtml">The rdf functions are built-in functions to construct and use
   rdf:langString types. The <code>rdf</code> namespace prefix is built into
   the server.</p>
  </apidoc:summary><apidoc:function name="datatype" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the name of the simple type of the atomic value argument as a SPARQL
  style IRI. If the value is derived from <code xmlns="http://www.w3.org/1999/xhtml">sem:unknown</code> or <code xmlns="http://www.w3.org/1999/xhtml">sem:invalid</code>, the datatype IRI part of those values is returned.
  This XQuery function backs up the SPARQL datatype() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to return the type of.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:iri</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:datatype("some string")
=&gt;
http://www.w3.org/2001/XMLSchema#string
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.datatype("some string")
=&gt;
http://www.w3.org/2001/XMLSchema#string
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="bnode" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  This function returns an identifier for a blank node, allowing the construction 
  of a triple that refers to a blank node.
  This XQuery function backs up the SPARQL BNODE() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType" optional="true">
    If provided, the same blank node identifier is returned for the same argument
    value passed to the function.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:blank</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
      at "/MarkLogic/semantics.xqy";

let $person1 := sem:bnode()
let $person2 := sem:bnode()
let $t1 := sem:triple($person1,
         sem:iri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
	       sem:iri("http://xmlns.com/foaf/0.1/Person"))
let $t2 := sem:triple($person2,
	       sem:iri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
	       sem:iri("http://xmlns.com/foaf/0.1/Person"))
let $t3 := sem:triple($person1,
	       sem:iri("http://xmlns.com/foaf/0.1/knows"), $person2) return ($t1,$t2,$t3)

 =&gt; (: returns identifiers for blank nodes :)
sem:triple(
  sem:blank("http://marklogic.com/semantics/blank/3098376212503391907"),
  sem:iri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
  sem:iri("http://xmlns.com/foaf/0.1/Person"))

sem:triple(
  sem:blank("http://marklogic.com/semantics/blank/3280643260770921296"),
  sem:iri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
  sem:iri("http://xmlns.com/foaf/0.1/Person"))

sem:triple(
  sem:blank("http://marklogic.com/semantics/blank/3098376212503391907"),
  sem:iri("http://xmlns.com/foaf/0.1/knows"),
  sem:blank("http://marklogic.com/semantics/blank/3280643260770921296"))

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

var person1 = sem.bnode();
var person2 = sem.bnode();
var t1 = sem.triple(person1,
         sem.iri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
	       sem.iri("http://xmlns.com/foaf/0.1/Person"));
var t2 = sem.triple(person2,
	       sem.iri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
	       sem.iri("http://xmlns.com/foaf/0.1/Person"));
var t3 = sem.triple(person1,
	       sem.iri("http://xmlns.com/foaf/0.1/knows"), person2)
var results = new Array();
results.push(t1, t2, t3);
results;

 =&gt; // returns identifiers for blank nodes 
[{"triple":
  {"subject":
    {"value":"http://marklogic.com/semantics/blank/2404403597012311801"}, 
   "predicate":
    {"value":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}, 
   "object":
    {"value":"http://xmlns.com/foaf/0.1/Person"}
   }
  }, 
 {"triple":
  {"subject":
    {"value":"http://marklogic.com/semantics/blank/499971585800807003"}, 
   "predicate":
    {"value":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}, 
   "object":
    {"value":"http://xmlns.com/foaf/0.1/Person"}}}, 
 {"triple":{
   "subject":
    {"value":"http://marklogic.com/semantics/blank/2404403597012311801"}, 
   "predicate":
    {"value":"http://xmlns.com/foaf/0.1/knows"}, 
   "object":
    {"value":"http://marklogic.com/semantics/blank/499971585800807003"}
	  }
 }]

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="type" type="builtin" lib="xdmp" category="Extension" subcategory="Extension">
    <apidoc:summary>
  Returns the name of the simple type of the atomic value argument as an 
  <code xmlns="http://www.w3.org/1999/xhtml">xs:QName</code>.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to return the type of.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:type(3)
=&gt;
integer
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.type(3)
=&gt;
integer
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="isIRI" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns true if the argument is an RDF IRI - that is, derived from
  type <code xmlns="http://www.w3.org/1999/xhtml">sem:iri</code>, but not derived from type <code xmlns="http://www.w3.org/1999/xhtml">sem:blank</code>.
  This XQuery function backs up the SPARQL isIRI() and isURI() functions.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to test.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "MarkLogic/semantics.xqy";

let $triple := sem:triple(sem:iri("subject"), sem:iri("predicate"), "object", sem:iri("foo"))

return
  sem:isIRI(sem:triple-subject($triple))

 =&gt; (: Returns fn:true. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

var triple = sem.triple(sem.iri("subject"), sem.iri("predicate"), "object", 
                sem.iri("foo"));
sem.isIRI(sem.tripleSubject(triple));

 =&gt; 
 true 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="isBlank" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns true if the argument is an RDF blank node - that is, derived from
  type <code xmlns="http://www.w3.org/1999/xhtml">sem:blank</code>.
  This XQuery function backs up the SPARQL isBlank() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to test.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:isBlank(sem:bnode())
=&gt;
true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.isBlank(sem.bnode());
=&gt;
true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="isLiteral" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns true if the argument is an RDF literal - that is, derived from
  type <code xmlns="http://www.w3.org/1999/xhtml">xs:anyAtomicType</code>, but not derived from type <code xmlns="http://www.w3.org/1999/xhtml">sem:iri</code>.
  This XQuery function backs up the SPARQL isLiteral() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to test.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:isLiteral("subject text")
=&gt;
true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.isLiteral("subject text");
=&gt;
true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="isNumeric" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns true if the argument is a valid numeric RDF literal.
  This XQuery function backs up the SPARQL isNumeric() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to test.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:isNumeric(51)
=&gt;
true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.isNumeric(51);
=&gt;
true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="sameTerm" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns true if the arguments are the same RDF term as defined by
  the RDF concepts specification.
  This XQuery function backs up the SPARQL sameTerm() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="a" type="xs:anyAtomicType">
    The first value to test.
  </apidoc:param>
      <apidoc:param name="b" type="xs:anyAtomicType">
    The second value to test.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:sameTerm("hello", "goodbye")
=&gt;
false
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.sameTerm("hello", "goodbye");
=&gt;
false
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="lang" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the language of the value passed in, or the empty string if the 
  value has no language. Only values derived from <code xmlns="http://www.w3.org/1999/xhtml">rdf:langString</code> have a 
  language. This XQuery function backs up the SPARQL lang() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:anyAtomicType">
    The value to return the language of.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:lang("hello")
=&gt;
empty (because the term has no language value)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.lang("hello");
=&gt;
empty (because the term has no language value)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="langMatches" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns true if <code xmlns="http://www.w3.org/1999/xhtml">$lang-tag</code> matches <code xmlns="http://www.w3.org/1999/xhtml">$lang-range</code> 
  according to the basic filtering scheme defined in RFC4647.
  This XQuery function backs up the SPARQL langMatches() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="lang-tag" type="xs:string">
    The language tag.
  </apidoc:param>
      <apidoc:param name="lang-range" type="xs:string">
    The language range.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $triple := sem:triple(sem:iri("subject"), sem:iri("predicate"), "object")
return
sem:langMatches(sem:triple-subject($triple), "fr")
=&gt;
false
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var triple = sem.triple(sem.iri("subject"), sem.iri("predicate"), "object");
sem.langMatches(sem.tripleSubject(triple), "fr");
=&gt;
false
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="random" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns a random double between 0 and 1.
  This XQuery function backs up the SPARQL RAND() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:double</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:random()
=&gt;
0.462153059928251
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.random()
=&gt;
0.462153059928251
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="default-graph-iri" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the iri of the default graph.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>sem:iri</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:default-graph-iri()
=&gt;
http://marklogic.com/semantics#default-graph
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.defaultGraphIri();
=&gt;
http://marklogic.com/semantics#default-graph
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="graph-add-permissions" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Add permissions to the graph specified.
  The user must have update or insert permissions on the graph.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="graph" type="sem:iri">
    The graph IRI.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*">
    Security permission elements corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp:default-permissions(). A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code xmlns="http://www.w3.org/1999/xhtml">admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-MUSTHAVEUPDATE</code>
    exception.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]">
    Security permission objects corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp.defaultPermissions(). A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code xmlns="http://www.w3.org/1999/xhtml">admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-MUSTHAVEUPDATE</code>
    exception.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

sem:graph-add-permissions(sem:iri("/my/graph/"), 
  (xdmp:permission("my-role", "read"), 
   xdmp:permission("my-role", "update")))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
sem.graphAddPermissions(sem.iri("/my/graph/"), 
  [xdmp.permission("my-role", "read"), 
   xdmp.permission("my-role", "update")]);
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="graph-set-permissions" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Set permissions to the graph specified.
  The user must have update permissions on the graph.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="graph" type="sem:iri">
    The graph IRI.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*">
    Security permission elements corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp:default-permissions(). A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code xmlns="http://www.w3.org/1999/xhtml">admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-MUSTHAVEUPDATE</code>
    exception.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]">
    Security permission objects corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp.defaultPermissions(). A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code xmlns="http://www.w3.org/1999/xhtml">admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-MUSTHAVEUPDATE</code>
    exception.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
      at "/MarkLogic/semantics.xqy";
	
sem:graph-set-permissions((sem:iri("graphs/MyDemoGraph")),
(
    xdmp:permission( "demo-reader", "read" ),
    xdmp:permission( "demo-writer", "update"  )
  )
 )
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require('/MarkLogic/semantics'); 

sem.graphSetPermissions((sem.iri("graphs/MyDemoGraph")),
(
    xdmp.permission( "demo-reader", "read" ),
    xdmp.permission( "demo-writer", "update"  )
  )
 )
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="graph-remove-permissions" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Remove permissions from the graph specified.
  The user must have update permissions on the graph.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="graph" type="sem:iri">
    The graph IRI.
  </apidoc:param>
      <apidoc:param class="xquery" name="permissions" type="element(sec:permission)*">
    Security permission elements corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp:default-permissions(). A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code xmlns="http://www.w3.org/1999/xhtml">admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-MUSTHAVEUPDATE</code>
    exception.
  </apidoc:param>
      <apidoc:param class="javascript" name="permissions" type="Object[]">
    Security permission objects corresponding to the permissions
    for the document. If not supplied, the current user's default
    permissions are applied.  The default value used for $permissions
    can be obtained by calling xdmp.defaultPermissions(). A document that is
    created by a non-admin user (that is, by any user who does not have the
    <code xmlns="http://www.w3.org/1999/xhtml">admin</code> role) must have at least one update permission,
    otherwise the creation will throw an <code xmlns="http://www.w3.org/1999/xhtml">XDMP-MUSTHAVEUPDATE</code>
    exception.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
      at "/MarkLogic/semantics.xqy";
	  
let $perms := xdmp:default-permissions("graphs/MyDemoGraph2")
return 
sem:graph-remove-permissions(sem:iri("MyGraph"),($perms))

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var sem = require('/MarkLogic/semantics');
var perms = xdmp.defaultPermissions("graphs/myDemoGraph");

sem.graphRemovePermissions(sem.iri("MyGraph"), perms);

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="graph-get-permissions" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Get permissions to the graph specified.
  The user must have read permissions on the graph.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="graph" type="sem:iri">
    The graph IRI.
  </apidoc:param>
      <apidoc:param class="xquery" name="format" type="xs:string" optional="true">
    Specify what format the result should be in.
    It can be either "elements" or "objects".
    With "elements", the built-in returns a sequence of XML elements.
    With "objects",  the built-in returns a sequence of map:map.
    The default is "elements".
  </apidoc:param>
      <apidoc:param class="javascript" name="format" type="xs:string" optional="true">
    Specify what format the result should be in.
    It can be either "objects" or "elements".
    With "objects",  the built-in returns an array of objects.
    With "elements", the built-in returns an array of XML element nodes.
    The default is "objects".
  </apidoc:param>
    </apidoc:params>
    <apidoc:return class="xquery">element(sec:permission)*</apidoc:return>
    <apidoc:return class="javascript">Object[]</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
      at "/MarkLogic/semantics.xqy";
  
sem:graph-get-permissions(sem:iri("PlayerGraph"))

=&gt;
&lt;sec:permission xmlns:sec="http://marklogic.com/xdmp/security"&gt;
&lt;sec:capability&gt;read&lt;/sec:capability&gt;
&lt;sec:role-id&gt;5995163769635647336&lt;/sec:role-id&gt;
&lt;/sec:permission&gt;

&lt;sec:permission xmlns:sec="http://marklogic.com/xdmp/security"&gt;
&lt;sec:capability&gt;update&lt;/sec:capability&gt;
&lt;sec:role-id&gt;5995163769635647336&lt;/sec:role-id&gt;
&lt;/sec:permission&gt;

(: the role ID 5995163769635647336 has read and update capability on this graph :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require('/MarkLogic/semantics'); 

sem.graphGetPermissions(sem.iri("PlayerGraph"))

=&gt;
[
 {
 "capability": "read",
 "roleId": "5995163769635647336"
 }
,
 {
 "capability": "update",
 "roleId": "5995163769635647336"
 }
]
//the role ID 5995163769635647336 has read and update capability on this graph
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="if" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  The IF function form evaluates the first argument, interprets it as a
  effective boolean value, then returns the value of expression2 if the EBV is
  true, otherwise it returns the value of expression3. Only one of expression2
  and expression3 is evaluated. If evaluating the first argument raises an
  error, then an error is raised for the evaluation of the IF expression.
  This XQuery function backs up the SPARQL IF() functional form.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="condition" type="xs:boolean">
    The condition.
  </apidoc:param>
      <apidoc:param name="then" type="item()*">
    The then expression.
  </apidoc:param>
      <apidoc:param name="else" type="item()*">
    The else expression.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:if( fn:true(), "This is true", "This is not true")
=&gt;
This is true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.if( true, "This is true", "This is not true");
=&gt;
This is true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="coalesce" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the value of the first argument that evaluates without error.
  This XQuery function backs up the SPARQL COALESCE() functional form.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="parameter1" type="item()*">
   A value.
  </apidoc:param>
      <apidoc:param name="parameterN" type="item()*,..." optional="true">
   A value.  You can specify as many parameters as you need.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:coalesce("foo", "bar", "baz");
=&gt;
foo
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.coalesce("foo", "bar", "baz");
=&gt;
foo
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="timezone-string" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the timezone of an <code xmlns="http://www.w3.org/1999/xhtml">xs:dateTime</code> value as a string.
  This XQuery function backs up the SPARQL TZ() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:dateTime">
    The dateTime value
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:timezone-string(fn:current-dateTime())
=&gt;
-08:00
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.timezoneString(fn.currentDateTime());
=&gt;
-08:00
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="uuid-string" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Return a string that is the scheme specific part of random UUID URN (RFC4122).
  This XQuery function backs up the SPARQL STRUUID() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:uuid-string()
=&gt;
3e25ff09-c6a8-4176-bb83-b771a9eb0e4c
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.uuidString();
=&gt;
3e25ff09-c6a8-4176-bb83-b771a9eb0e4c
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="uuid" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Return a UUID URN (RFC4122) as a <code xmlns="http://www.w3.org/1999/xhtml">sem:iri</code> value.
  This XQuery function backs up the SPARQL UUID() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>sem:iri</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:uuid()
=&gt;
urn:uuid:3e25ff09-c6a8-4176-bb83-b771a9eb0e4c
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.uuid()
=&gt;
urn:uuid:3e25ff09-c6a8-4176-bb83-b771a9eb0e4c
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="triple" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Creates a triple object, which represents an RDF triple
  containing atomic values representing the subject, predicate, object, and
  optionally graph identifier (graph IRI).
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="subject_or_node" type="item()">
    The triple's subject as an atomic value, or the whole triple as a
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">node</span><span class="javascript" xmlns="http://www.w3.org/1999/xhtml">JavaScript object</span>.
    If specifying a node as a triple, this function must be used
    as a single-parameter version (that is, you cannot specify a triple
    in this parameter and also use the other parameters).
  </apidoc:param>
      <apidoc:param name="predicate" type="xs:anyAtomicType" optional="true">
    The triple's predicate.
  </apidoc:param>
      <apidoc:param name="object" type="xs:anyAtomicType" optional="true">
    The triple's object.
  </apidoc:param>
      <apidoc:param name="graph" type="sem:iri?" optional="true">
    The triple's graph IRI.  This parameter is only available if you have
    specified a subject, predicate, and object, and is not available if you
    have specified an element as a triple in the first parameter.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:triple</apidoc:return>
    <apidoc:usage class="xquery">
   It is possible to create triples with <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> that might not
   be valid RDF triples.  For example, you can create a triple with a blank
   node (<code xmlns="http://www.w3.org/1999/xhtml">sem:bnode()</code>) as a predicate,
   even though that is not allowed in RDF.  This is because the triples
   you can create with <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> are more general than what is
   allowed in RDF.
</apidoc:usage>
    <apidoc:usage class="javascript">
   It is possible to create triples with <code xmlns="http://www.w3.org/1999/xhtml">sem.triple</code> that might not
   be valid RDF triples.  For example, you can create a triple with a number as
   a predicate, even though that is not allowed in RDF.  This is because the
   triples you can create with <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> are more general than
   what is allowed in RDF.
</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
   at "MarkLogic/semantics.xqy";

sem:triple(sem:iri("subject"), sem:iri("predicate"), "object")

(: Returns the specified triple. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

sem.triple(sem.iri("subject"), sem.iri("predicate"), "object")

(: Returns the specified triple. :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
   at "MarkLogic/semantics.xqy";

sem:triple(
&lt;sem:triple xmlns:sem="http://marklogic.com/semantics"&gt;
  &lt;sem:subject&gt;subject&lt;/sem:subject&gt;
  &lt;sem:predicate&gt;predicate&lt;/sem:predicate&gt;
  &lt;sem:object
   datatype="http://www.w3.org/2001/XMLSchema#string"&gt;object&lt;/sem:object&gt;
&lt;/sem:triple&gt;)

(: Returns the specified triple. :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
   at "MarkLogic/semantics.xqy";

sem:triple(
  object-node {
    "triple" : object-node {
      "subject" : "subject",
      "predicate" : "predicate",
      "object" : object-node {
        "value" : "object",
        "datatype" : "http://www.w3.org/2001/XMLSchema#string"
      }
    }
  }
)

(: Returns the specified triple. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

sem.triple(
  {
    "triple" : {
      "subject" : "subject",
      "predicate" : "predicate",
      "object" : {
        "value" : "object",
        "datatype" : "http://www.w3.org/2001/XMLSchema#string"
      }
    }
  }
)

(: Returns the specified triple. :)
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
   at "MarkLogic/semantics.xqy";

sem:triple(
&lt;foo&gt;{sem:triple(sem:iri("subject"), sem:iri("predicate"),
      "object")}
&lt;/foo&gt;/element())

(: Returns the specified triple. :)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="triple-subject" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the subject from a <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="triple" type="sem:triple">
    The triple.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:anyAtomicType</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
   at "/MarkLogic/semantics.xqy";

let $triple := sem:triple(sem:iri("subject"), sem:iri("predicate"), "object")

return
    sem:triple-subject($triple)

    (: Returns 'subject'. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

var triple = sem.triple(sem.iri("subject"), sem.iri("predicate"), "object");
sem.tripleSubject(triple);
=&gt;
"subject"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="triple-predicate" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the predicate from a <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="triple" type="sem:triple">
    The triple.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:anyAtomicType</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
  at "/MarkLogic/semantics.xqy";

let $triple := sem:triple(sem:iri("subject"), sem:iri("predicate"), "object")

return
    sem:triple-predicate($triple)

(: Returns 'predicate'. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

var triple = sem.triple(sem.iri("subject"), sem.iri("predicate"), "object");
sem.triplePredicate(triple);
=&gt;
"predicate"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="triple-object" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the object from a <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="triple" type="sem:triple">
    The triple.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:anyAtomicType</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
   at "/MarkLogic/semantics.xqy";

let $triple := sem:triple(sem:iri("subject"), sem:iri("predicate"), "object")

return
    sem:triple-object($triple)

(: Returns 'object'. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

var triple = sem.triple(sem.iri("subject"), sem.iri("predicate"), "object");
sem.tripleObject(triple);
=&gt;
"object"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="triple-graph" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the graph identifier (graph IRI) from a <code xmlns="http://www.w3.org/1999/xhtml">sem:triple</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="triple" type="sem:triple">
    The triple.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:iri?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" 
   at "/MarkLogic/semantics.xqy";

let $triple := sem:triple(sem:iri("subject"), sem:iri("predicate"), "object")

return
    sem:triple-graph($triple)

=&gt;
empty (because there is no graph URI)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");

var triple = sem.triple(sem.iri("subject"), sem.iri("predicate"), "object");
sem.tripleGraph(triple);
=&gt;
empty (because there is no graph URI)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="unknown" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns a <code xmlns="http://www.w3.org/1999/xhtml">sem:unknown</code> value with the given literal value and 
  datatype IRI. The <code xmlns="http://www.w3.org/1999/xhtml">sem:unknown</code> type extends <code xmlns="http://www.w3.org/1999/xhtml">xs:untypedAtomic</code>, and represents an RDF value with a datatype IRI for which no schema is available.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
    The lexical value.
  </apidoc:param>
      <apidoc:param name="datatype" type="sem:iri">
    The datatype IRI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:unknown</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:describe(sem:unknown("unknown value", sem:iri("string")))
=&gt;
sem:unknown("unknown value", sem:iri("string"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.describe(sem.unknown("unknown value", sem.iri("string")));
=&gt;
sem.unknown("unknown value", sem.iri("string"))
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="unknown-datatype" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the datatype IRI of a <code xmlns="http://www.w3.org/1999/xhtml">sem:unknown</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="sem:unknown">
    The sem:unknown value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:iri</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:unknown-datatype(sem:unknown("unknown value", sem:iri("string")));
=&gt;
"string"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.unknownDatatype(sem.unknown("unknown value", sem.iri("string")));
=&gt;
"string"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="invalid" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns a <code xmlns="http://www.w3.org/1999/xhtml">sem:invalid</code> value with the given literal value and 
  datatype IRI. The <code xmlns="http://www.w3.org/1999/xhtml">sem:invalid</code> type extends <code xmlns="http://www.w3.org/1999/xhtml">xs:untypedAtomic</code>,
  and represents an RDF value whose literal string is invalid according to the 
  schema for it's datatype.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
    The lexical value.
  </apidoc:param>
      <apidoc:param name="datatype" type="sem:iri">
    The datatype IRI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:invalid</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:describe(sem:invalid("invalid value", sem:iri("string")))
=&gt;
sem:invalid("invalid value", sem:iri("string"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.describe(sem.invalid("invalid value", sem.iri("string")));
=&gt;
sem.invalid("invalid value", sem.iri("string"))
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="invalid-datatype" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns the datatype IRI of a <code xmlns="http://www.w3.org/1999/xhtml">sem:invalid</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="sem:invalid">
    The sem:invalid value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>sem:iri</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem:invalid-datatype(sem:invalid("invalid value", sem:iri("string")))
=&gt;
string (as a sem:iri)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sem.invalidDatatype(sem.invalid("invalid value", sem.iri("string")));
=&gt;
string (as a sem:iri)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="langString" type="builtin" lib="rdf" category="Semantics" subcategory="RDF Functions">
    <apidoc:summary>
  Returns an <code xmlns="http://www.w3.org/1999/xhtml">rdf:langString</code> value with the given value and language 
  tag. The <code xmlns="http://www.w3.org/1999/xhtml">rdf:langString</code> type extends <code xmlns="http://www.w3.org/1999/xhtml">xs:string</code>, and 
  represents a language tagged string in RDF.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
    The lexical value.
  </apidoc:param>
      <apidoc:param name="lang" type="xs:string">
    The language.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>rdf:langString</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
rdf:langString("http://foo/bar", "en")
=&gt; an rdf:langString representing "http://foo/bar" in english

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
rdf.langString("http://foo/bar", "en")
=&gt; an rdf:langString representing "http://foo/bar" in english

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="langString-language" type="builtin" lib="rdf" category="Semantics" subcategory="RDF Functions">
    <apidoc:summary>
  Returns the language of an <code xmlns="http://www.w3.org/1999/xhtml">rdf:langString</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="rdf:langString">
    The rdf:langString value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
rdf:langString-language(rdf:langString("http://foo/bar", "en"))
=&gt; en
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
rdf.langStringLanguage(rdf.langString("http://foo/bar", "en"));
=&gt; en
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="collated-string" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns an <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">rdf:collatedString</code> 
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">rdf.collatedString</code>
  value with the given value and collation
  tag. The <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">rdf:collatedString</code> 
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">rdf.collatedString</code>
  type extends <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xs:string</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">String</code>, and
  represents a collation tagged string in RDF.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="string" type="xs:string">
    The lexical value.
  </apidoc:param>
      <apidoc:param name="collationURI" type="xs:string">
    The collation URI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>rdf:collatedString</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:collated-string("http://foo/bar", "http://marklogic.com/collation/fr/S1/EO")
=&gt; an rdf:collatedString representing "http://foo/bar" in english

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.collatedString("http://foo/bar", "http://marklogic.com/collation/fr/S1/EO")
=&gt; an rdf.collatedString representing "http://foo/bar" in english

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="collatedString-collation" type="builtin" lib="sql" category="SQL">
    <apidoc:summary>
  Returns the collation of an <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">sql:collatedString</code>
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">sql.collatedString</code> value.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="val" type="sql:collatedString">
    The sql:collatedString value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql:collatedString-collation(sql:collatedString("http://foo/bar", "http://marklogic.com/collation/codepoint"))
=&gt; http://marklogic.com/collation/codepoint
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
sql.collatedStringcollation(sql.collatedString("http://foo/bar", "http://marklogic.com/collation/codepoint"));
=&gt; http://marklogic.com/collation/codepoint
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="typed-literal" type="builtin" lib="sem" category="Semantics" subcategory="Semantic Functions">
    <apidoc:summary>
  Returns a value to represent the RDF typed literal with lexical value 
  <code xmlns="http://www.w3.org/1999/xhtml">$value</code> and datatype IRI <code xmlns="http://www.w3.org/1999/xhtml">$datatype</code>. Returns a value 
  of type <code xmlns="http://www.w3.org/1999/xhtml">sem:unknown</code> for datatype IRIs for which there is no schema, 
  and a value of type <code xmlns="http://www.w3.org/1999/xhtml">sem:invalid</code> for lexical values which are invalid according to the schema for the given datatype. This XQuery function backs up the 
  SPARQL STRDT() function.
  <p xmlns="http://www.w3.org/1999/xhtml">This function is a built-in.</p>
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="value" type="xs:string">
    The lexical value.
  </apidoc:param>
      <apidoc:param name="datatype" type="sem:iri">
    The datatype IRI.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:anyAtomicType</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
 
xdmp:describe(sem:typed-literal("object", sem:iri("http://www.w3.org/2001/XMLSchema#string")))
=&gt;
"object"
&lt;http://www.w3.org/2001/XMLSchema#string&gt;
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var sem = require("/MarkLogic/semantics.xqy");
xdmp.describe(sem.typedLiteral("object", sem.iri("http://www.w3.org/2001/XMLSchema#string"))); 
=&gt;
"object"
</pre></apidoc:example>
  </apidoc:function></apidoc:module>