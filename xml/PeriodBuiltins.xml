<apidoc:module name="PeriodBuiltins" category="PeriodBuiltins" bucket="W3C-Standard Functions" lib="cts" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public" category="PeriodBuiltins">
The format-date, format-time, format-dateTime and format-number built-in functions are XSLT functions that operate on date-, time-, dateTime-, number-related values.
</apidoc:summary><apidoc:function name="period-compare" type="builtin" lib="cts" category="SearchBuiltins" subcategory="Temporal">
    <apidoc:summary>
  Compares two periods using the specified comparision operator.
  Returns <code xmlns="http://www.w3.org/1999/xhtml">true</code> if the two periods meet the operator
  conditions or <code xmlns="http://www.w3.org/1999/xhtml">false</code> if they do not meet the conditions.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="period-1" type="cts:period">
    The first period to compare.
  </apidoc:param>
      <apidoc:param name="operator" type="xs:string">
    A comparison operator.
  </apidoc:param>
      <apidoc:param name="period-2" type="cts:period">
   The second period to compare against the first.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $period1 := cts:period(xs:dateTime("2000-05-31T09:30:10-08:00"),
                           xs:dateTime("2003-05-31T09:30:10-08:00"))

let $period2 := cts:period(xs:dateTime("2003-05-31T09:30:10-08:00"), 
                           xs:dateTime("2004-05-31T09:30:10-08:00"))

return cts:period-compare($period1,"aln_meets",$period2)

  =&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var period1 = cts.period(xs.dateTime("2000-05-31T09:30:10-08:00"),
                           xs.dateTime("2003-05-31T09:30:10-08:00"));
var period2 = cts.period(xs.dateTime("2003-05-31T09:30:10-08:00"), 
                           xs.dateTime("2004-05-31T09:30:10-08:00"));
cts.periodCompare(period1, "aln_meets", period2);

  =&gt; true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="document-period" type="builtin" lib="temporal" category="SearchBuiltins" subcategory="Temporal">
    <apidoc:summary>
  This function returns the period (as a dateTime pair) for the named axis in
  the document identified by its root node in the named collection.
  <p xmlns="http://www.w3.org/1999/xhtml">
  An TEMPORAL-NOAXISINFO exception is thrown if no information is found in 
  root for the axis.
  </p>
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The name of the temporal collection.
    </apidoc:param>
      <apidoc:param name="axis" type="xs:string">
    The name of axis from which to get the period.
    </apidoc:param>
      <apidoc:param name="root" type="node()">
    The root node of the document.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dateTime*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml"; 
 
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
      at "/MarkLogic/temporal.xqy";

temporal:document-period("temporal", "valid", 
  fn:doc("clue.xml.7788866244426452375"))

(: Returns the period for the valid axis set for the document, 
   "clue.xml.7788866244426452375". :)

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var temporal = require("/MarkLogic/temporal.xqy");
temporal.documentPeriod("temporal", "valid", 
  cts.doc("clue.xml.7788866244426452375"));

=&gt; Returns the period for the valid axis set for the document, 
   "clue.xml.7788866244426452375". 

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-lsqt" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function returns the Last Stable Query Time (LSQT) for the collection at current moment. 
  Should read lock if it is in update.
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">Name of temporal collection to get LSQt on
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dateTime</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml"; 
 
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
      at "/MarkLogic/temporal.xqy";

temporal:get-lsqt("temporal")

(: Returns the Last Stable Query Time for the "temporal" collection. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var temporal = require("/MarkLogic/temporal.xqy");
temporal.getLsqt("temporal");

// Returns the Last Stable Query Time for the "temporal" collection. 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-use-lsqt" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function specifies whether the named temporal 
  collection has LSQT (Last Stable Query Time)
  enabled (true) or disabled (false).
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The name of the temporal collection.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml"; 
 
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
      at "/MarkLogic/temporal.xqy";
 
temporal:get-use-lsqt("kool")

(: Returns 'true' if LSQT is enabled on the "kool" collection; 
   otherwise returns 'false'. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var temporal = require("/MarkLogic/temporal.xqy");
temporal.getUseLsqt("kool");

// Returns 'true' if LSQT is enabled on the "kool" collection; 
//   otherwise returns 'false'. 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-use-lsqt" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function enables or disables the use of LSQT (Last Stable Query Time) 
  on the named collection.
  When enabled (true), a document is created in the database to hold the LSQT.  
  This document is identified by the collection name with an .lsqt suffix. 
  <p xmlns="http://www.w3.org/1999/xhtml">
   You must have LSQT enabled on the temporal collection in order to use the 
   <a href="#temporal:statement-set-system-time"><code>temporal:statement-set-system-time</code></a> 
  function to manually set the system start time when inserting a document 
  into that collection.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
     The name of the temporal collection.
    </apidoc:param>
      <apidoc:param name="on" type="xs:boolean">
	    Set to <code xmlns="http://www.w3.org/1999/xhtml">fn:true()</code> to enable LSQT on the collection 
	    or <code xmlns="http://www.w3.org/1999/xhtml">fn:false()</code>
     (the default) to disable LSQT.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml"; 
 
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
      at "/MarkLogic/temporal.xqy";
 
temporal:set-use-lsqt("kool", fn:true())

   (: 
   Set the temporal collection, "kool", to use LSQT. A document, named
   "kool.lsqt", that contains the latest LSQT is created in the database. 
   Requires the specified temporal collection to exist. Use 
   temporal.collectionCreate to create the temporal collection.
   :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");
temporal.setUseLsqt("kool", true);

//  Set the temporal collection, "kool", to use LSQT. A document, named
//  "kool.lsqt", that contains the latest LSQT is created in the database.
//  Requires the specified temporal collection to exist. Use 
//  temporal.collectionCreate to create the temporal collection. 
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="advance-lsqt" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function enables Last Stable Query Time (LSQT) on the named collection and
  advances the LSQT for the collection to the maximum system start time.  When
  LSQT is enabled on the temporal collection, you can use the 
  <a href="#temporal:statement-set-system-time" xmlns="http://www.w3.org/1999/xhtml"><code>temporal:statement-set-system-time</code></a> 
  function to manually set the system start time when inserting a document into that collection.
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
    The name of the temporal collection for which to advance the LSQT.
    </apidoc:param>
      <apidoc:param class="xquery" name="lag" type="xs:unsignedInt" optional="true">
    The lag (in milliseconds) to subtract from the maximum system start time in the temporal collection.
    </apidoc:param>
      <apidoc:param class="javascript" name="lag" type="Number" optional="true">
    The lag (in milliseconds) to subtract from the maximum system start time in the temporal collection.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:dateTime</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml"; 
 
import module namespace temporal = "http://marklogic.com/xdmp/temporal" 
      at "/MarkLogic/temporal.xqy";
 
temporal:advance-lsqt("temporalCollection",1000)
=&gt;
the time lsqt is at now
(: Advances the Last Stable Query Time for the "temporalCollection" collection
   to the maximum system start time - 1000ms. :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");
temporal.advanceLsqt("temporalCollection");
=&gt;
the time lsqt is at now
//  Advances the Last Stable Query Time for the "temporalCollection" collection
//  to the maximum system start time.   
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-lsqt-automation" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function returns whether Last Stable Query Time (LSQT) management is automatically managed
  (true) or not automatically managed (false).
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
      The name of temporal collection.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

temporal:get-lsqt-automation("temporalCollection")

=&gt;

true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var temporal = require("/MarkLogic/temporal.xqy");
temporal.getLsqtAutomation("temporalCollection");

=&gt;

true
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-lsqt-automation-period" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function returns how often Last Stable Query Time (LSQT) is
  automatically advanced, in milliseconds.
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
      The name of temporal collection.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:long</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

temporal:get-lsqt-automation-period("temporalCollection")
=&gt;
1000

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var temporal = require("/MarkLogic/temporal.xqy");
temporal.getLsqtAutomationPeriod("temporalCollection");
=&gt;
1000

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="get-lsqt-automation-lag" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
   When the LSQT is advanced automatically, this function returns how far behind 
   (in milliseconds) the Last Stable Query Time (LSQT) is from latest system time.
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>   
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
      The name of temporal collection.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:long</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

temporal:get-lsqt-automation-lag("temporalCollection")
=&gt;
1000

</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var temporal = require("/MarkLogic/temporal.xqy");
temporal.getLsqtAutomationLag("temporalCollection");
=&gt;
1000

</pre></apidoc:example>
  </apidoc:function><apidoc:function name="set-lsqt-automation" type="builtin" lib="temporal" category="Temporal">
    <apidoc:summary>
  This function sets whether Last Stable Query Time (LSQT) management is automatic.  And,
  if enabled, how often LSQT is to be advanced.
  <p xmlns="http://www.w3.org/1999/xhtml">
  For details on how to use LSQT, see  
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2375536'>Last Stable Query Time (LSQT) and Application-controlled System Time</a> in the <em>Temporal Developer's Guide</em>  
  </p>  
  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="temporal-collection" type="xs:string">
     The name of temporal collection
    </apidoc:param>
      <apidoc:param name="on" type="xs:boolean">
     Whether automation is turned on (true).  The default is off (false).
    </apidoc:param>
      <apidoc:param name="period" type="xs:unsignedInt" optional="true">
     How often LSQT is advanced, in milliseconds.
    </apidoc:param>
      <apidoc:param name="lag" type="xs:unsignedInt" optional="true">
     How much LSQT is lagged behind the max system start time, in milliseconds.
    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">

xquery version "1.0-ml";

import module namespace temporal = "http://marklogic.com/xdmp/temporal"
      at "/MarkLogic/temporal.xqy";

temporal:set-lsqt-automation("temporalCollection",fn:true(),5000)
=&gt;
(: Automtacially advance LSQT every 5000 ms :)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
declareUpdate();
var temporal = require("/MarkLogic/temporal.xqy");
temporal.setLsqtAutomation("temporalCollection", true, 5000);
=&gt;
(: Automtacially advance LSQT every 5000 ms :)
</pre></apidoc:example>
  </apidoc:function></apidoc:module>