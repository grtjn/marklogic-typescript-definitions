<apidoc:module name="FunctionBuiltins" category="Extension" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary category="Higher-Order" bucket="W3C-Standard Functions">
  The Higher-Order built-in functions are XQuery functions to support
  higher-order functions, and are part of the XQuery 3.0 working draft.
  They are defined in
  <a href="http://www.w3.org/TR/xpath-functions-30/" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath and
  XQuery Functions and Operators 3.0</a>.
  </apidoc:summary><apidoc:function name="function-name" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns the QName of the function(s) that the xdmp:function refers to.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="xdmp:function">
    The xdmp:function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := xdmp:function(xs:QName("fn:empty"))
return
  xdmp:function-name($fn)
=&gt; "fn:empty"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var fn = xdmp.function(fn.QName("http://www.w3.org/2005/xpath-functions",
                                "empty"));
xdmp.describe(xdmp.functionName(fn));
=&gt; fn.QName("http://www.w3.org/2005/xpath-functions","empty")
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-name" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Returns the QName of the function(s) that the argument refers to.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-function-name" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-module" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns the module location (if any) that the xdmp:function value refers to.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="xdmp:function">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";
declare namespace admin="http://marklogic.com/xdmp/admin";

let $fn := xdmp:function(xs:QName("admin:get-configuration"),
             "/MarkLogic/admin.xqy")
return
xdmp:function-module($fn)

=&gt; "/MarkLogic/admin.xqy"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var admin = "http://marklogic.com/xdmp/admin";
var f = xdmp.function(xs.QName("admin:get-configuration"),
             "/MarkLogic/admin.xqy");
xdmp.functionModule(f);

=&gt; "/MarkLogic/admin.xqy"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-arity" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Returns the arity of the function(s) that the argument refers to.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-function-arity" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:integer</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:empty#1
return
  fn:function-arity($fn)
=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-signature" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns the signature of the function that the argument refers to.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:empty#1
return
  xdmp:function-signature($fn)
=&gt; "function(item()*) as xs:boolean"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var fn = xdmp.function(fn.QName("http://www.w3.org/2005/xpath-functions",
                                "empty"));
xdmp.functionSignature(fn);
=&gt; "function(item()*) as xs:boolean"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-parameter-name" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns the name of the parameter at the designated (1-based) position from the given function's signature.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
      <apidoc:param name="position" type="xs:integer">
    The 1-based position of the parameter.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:QName</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:empty#1
return
  xdmp:function-parameter-name($fn,1)
=&gt; "arg1"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var fn = xdmp.function(fn.QName("http://www.w3.org/2005/xpath-functions",
                                "empty"));
xdmp.functionParameterName(fn,1);
=&gt; "arg1"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-parameter-type" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns the type of the parameter at the designated (1-based) position from the given function's signature.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
      <apidoc:param name="position" type="xs:integer">
    The 1-based position of the parameter.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:empty#1
return
  xdmp:function-parameter-type($fn,1)
=&gt; "item()*"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var fn = xdmp.function(fn.QName("http://www.w3.org/2005/xpath-functions",
                                "empty"));
xdmp.functionParameterType(fn,1);
=&gt; "item()*"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-return-type" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns the return type from the given function's signature.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:empty#1
return
  xdmp:function-return-type($fn)
=&gt; "xs:boolean"
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var fn = xdmp.function(fn.QName("http://www.w3.org/2005/xpath-functions",
                                "empty"));
xdmp.functionReturnType(fn);
=&gt; "xs:boolean"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Returns a function value as an <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:function</code> 
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.function</code> type. 
  You can return an <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:function</code> 
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.function</code> from an expression or
  a function.  You can execute the function referred to by an
  <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:function</code> 
  <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.function</code>
  by passing the <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:function</code> 
   <code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.function</code> value to
  <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:apply</code><code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.apply</code>. If the module-path ends with a file 
  extension matching the ones configured for 
  <code xmlns="http://www.w3.org/1999/xhtml">application/vnd.marklogic-javascript</code> in your
  MarkLogic Mimetypes configuration, and the function's namespace URI is
  empty, the module is considered to be JavaScript.  In this case, the function
  parameter can be empty.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="xs:QName?">
    The function QName, which includes its local name and namespace. If the
    function is not found in the current query context or in the module
    specified in the second parameter, then an exception is thrown when
    the function is used with <code class="xquery" xmlns="http://www.w3.org/1999/xhtml">xdmp:apply</code><code class="javascript" xmlns="http://www.w3.org/1999/xhtml">xdmp.apply</code>.
  </apidoc:param>
      <apidoc:param name="module-path" type="xs:string?" optional="true">
    The optional path to the module where the function specified in the
    first parameter is defined.  If the module-path is not supplied, the
    function QName must be in-scope in the query context.  If the empty
    sequence is supplied, the function behaves as if the parameter is not
    supplied (that is, it uses the in-scope query context).
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>xdmp:function</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

xdmp:function(xs:QName("fn:empty"))
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp.function(xs.QName("fn:empty"))
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

declare namespace admin="http://marklogic.com/xdmp/admin";

xdmp:function(xs:QName("admin:get-configuration"),
      "/MarkLogic/admin.xqy")
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

let $function := xdmp:function(xs:QName("fn:concat"))
return
   xdmp:apply($function, "hello", " world")

=&gt; hello world
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var f = xdmp.function(xs.QName("fn:concat"));
xdmp.apply(f, "hello", " world");

=&gt; hello world
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
// Given square.sjs in the modules database as the following:

module.exports = function(width) {
  return {
    area: function() {
      return width * width;
    },
    set: function(_width) {
      width = _width;
    }
  };
}
// then you can run the following
var mySquare = fn.head(xdmp.apply(xdmp.function(null,"square.sjs"),4));
xdmp.apply(mySquare.set, 3);
xdmp.apply(mySquare.area)

=&gt; 9
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="function-lookup" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Returns a function with the given name and arity, or the empty sequence if
  none exists. You can use the returned function reference with 
  <a class="xquery" href="#xdmp:apply" xmlns="http://www.w3.org/1999/xhtml">xdmp:apply</a>.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-function-lookup" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:QName">
    The QName of the function.
  </apidoc:param>
      <apidoc:param name="arity" type="xs:integer">
    The number of arguments the function takes.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>function(*)?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:function-lookup(fn:QName("http://www.w3.org/2005/xpath-functions","concat"),4)
return
  xdmp:function-signature($fn)
=&gt; "function(xs:anyAtomicType?, xs:anyAtomicType?, xs:anyAtomicType?, xs:anyAtomicType?) as xs:string"
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $fn := fn:function-lookup(
  fn:QName("http://www.w3.org/2005/xpath-functions","concat"),4)
return
xdmp:apply($fn, "here", "is", "an", "example")

==&gt; "hereisanexample"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="apply" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values">
    <apidoc:summary>
  Applies an <code xmlns="http://www.w3.org/1999/xhtml">xdmp:function</code> with the given parameters.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="xdmp:function">
    The xdmp:function value to be applied.
  </apidoc:param>
      <apidoc:param name="params-1-to-N" type="item()*" optional="true">
    The parameters to pass into the specified function value.  Specify one
    parameter for each parameter that the specified function takes, with the
    first parameter corresponding to the first parameter in the specified
    function's signature, the second parameter corresponding to the second,
    and so on.  Omit this parameter if the specified function takes no
    parameters.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $function := xdmp:function(xs:QName("fn:empty"))
  return
    xdmp:apply($function, ())

  =&gt; true
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var f = xdmp.function(xs.QName("fn:empty"));
xdmp.apply(f, []);

  =&gt; true
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $function := xdmp:function(xs:QName("fn:concat"))
  return
    xdmp:apply($function, "hello", " world")

  =&gt; hello world
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var f = xdmp.function(xs.QName("fn:concat"));
xdmp.apply(f, "hello", " world");

=&gt; hello world
</pre></apidoc:example>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
  let $function := xdmp:function(xs:QName("fn:current-date"))
  return
    xdmp:apply($function)

  =&gt; 2009-02-14-08:00  (or whatever is the current date)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
Given square.sjs in the modules database as the following:

module.exports = function(width) {
  return {
    area: function() {
      return width * width;
    },
    set: function(_width) {
      width = _width;
    }
  };
}

var mySquare = fn.head(xdmp.apply(xdmp.function(null,"square.sjs"),4));
xdmp.apply(mySquare.set, 3);
xdmp.apply(mySquare.area)

=&gt; 9
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="head" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions">
    <apidoc:summary>
  Returns the first item in a sequence.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-head" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="seq" type="item()*" class="xquery">
    A sequence of items.
  </apidoc:param>
      <apidoc:param name="seq" type="Sequence" class="javascript">
    A Sequence of items.
    A single item is treated as a Sequence of one. 
    An Array is treated as a single item -- if an Array is passed in, the Array is returned.
    To make a Sequence from an Array see <a href="#xdmp.arrayValues" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp.arrayValues</code></a>.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()?</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:head((1,2,3))
=&gt; 1
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.head(xdmp.arrayValues([1,2,3]))
=&gt; 1
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="tail" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions">
    <apidoc:summary>
  Returns all but the first item in a sequence.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-tail" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="seq" type="item()*">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:tail((1,2,3))
=&gt; (2, 3)
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn.tail(xdmp.arrayValues([1,2,3]))
=&gt; (2, 3)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="map" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Applies the function item $function to every item from the sequence
  $seq in turn,
  returning the concatenation of the resulting sequences in order.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-map" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(item()) as item()*">
    The function value.
  </apidoc:param>
      <apidoc:param name="seq" type="item()*">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:map(function($a) { $a * 2 }, (1 to 10))
=&gt; (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="filter" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Returns those items from the sequence $seq for which the supplied
  function $function returns true.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-filter" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(item()) as xs:boolean">
    The function value.
  </apidoc:param>
      <apidoc:param name="seq" type="item()*">
    The function value.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:filter(function($a) { $a mod 2 = 0 }, (1 to 10))
=&gt; (2, 4, 6, 8, 10)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="fold-left" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Processes the supplied sequence from left to right, applying the
  supplied function repeatedly to each item in turn, together with an
  accumulated result value.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-fold-left" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(item()*, item()) as item()*">
    The fold function value.
  </apidoc:param>
      <apidoc:param name="zero" type="item()*">
    The zero argument.
  </apidoc:param>
      <apidoc:param name="seq" type="item()*">
    The sequence to fold
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:fold-left(function($z, $a) { $z || "," || $a }, "&gt;&gt;", ("a","b","c"))
=&gt; "&gt;&gt;,a,b,c"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="fold-right" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Processes the supplied sequence from right to left, applying the
  supplied function repeatedly to each item in turn, together with an
  accumulated result value.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-fold-right" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(item(), item()*) as item()*">
    The fold function value.
  </apidoc:param>
      <apidoc:param name="zero" type="item()*">
    The zero argument.
  </apidoc:param>
      <apidoc:param name="seq" type="item()*">
    The sequence to fold
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:fold-right(function($z, $a) { $z || "," || $a }, "&gt;&gt;", ("a","b","c"))
=&gt; "a,b,c,&gt;&gt;"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="map-pairs" type="builtin" lib="fn" category="Higher-Order" bucket="W3C-Standard Functions" class="xquery">
    <apidoc:summary>
  Applies the function item $function to successive pairs of items taken
  one from $seq1 and one from $seq2, returning the concatenation of the
  resulting sequences in order.
  For more details, see
  <a href="http://www.w3.org/TR/2011/WD-xpath-functions-30-20111213/#func-map-pairs" target="_blank" xmlns="http://www.w3.org/1999/xhtml">XPath 3.0 Functions and Operators</a>.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(item(), item()) as item()*">
    The map function value.
  </apidoc:param>
      <apidoc:param name="seq1" type="item()*">
    The first sequence argument.
  </apidoc:param>
      <apidoc:param name="seq2" type="item()*">
    The second sequence argument.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
fn:map-pairs(function($a, $b) { $a * $b }, (1 to 10), (2 to 10))
=&gt; (2, 6, 12, 20, 30, 42, 56, 72, 90)
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="functions" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values" class="xquery">
    <apidoc:summary>
  Returns all in-scope functions.
</apidoc:summary>
    <apidoc:params/>
    <apidoc:return>function(*)*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xdmp:describe(fn:function-name(xdmp:functions()[1]))
=&gt; "xs:QName("cts:element-range-query-options")"
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="annotation" type="builtin" lib="xdmp" category="Extension" subcategory="Function Values" class="xquery">
    <apidoc:summary>
  Returns the named annotation from the function.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="function" type="function(*)">
    The function value.
  </apidoc:param>
      <apidoc:param name="name" type="xs:QName">
    The annotation name.
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>item()*</apidoc:return>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
xquery version "1.0-ml";

declare %local:annotation(1,2,"foo")
  function local:function() { () };
  
xdmp:annotation(local:function#0,xs:QName("local:annotation"))
=&gt; (1, 2, "foo")
</pre></apidoc:example>
  </apidoc:function></apidoc:module>