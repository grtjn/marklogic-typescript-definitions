<apidoc:module name="AdminModule" category="Admin Library" lib="admin"
	bucket="XQuery Library Modules"
	xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
	xmlns="http://www.w3.org/1999/xhtml" class="xquery">
	<apidoc:summary>
<p>The Admin module is an XQuery library module that enables
you to script administrative tasks that you otherwise would
need the Admin Interface to perform.  Most functions in this library
perform adminstrative tasks and therefore require a user with the
the Admin role.</p>
<p>Many of these functions provide new configuration information.  In most
cases, you must save the configuration (with
<code><a href="#admin:save-configuration">admin:save-configuration</a></code>,
for example) in the same statement that you use the functions in order for
them to take effect.</p>
<p>To use the Admin module as part of your own XQuery module,
include the following line in your XQuery prolog: </p>
<p><code>import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy" ;
</code></p>
<p>The library namespace prefix <code>admin</code> is <em>not</em>
	predefined in the server.</p>
	</apidoc:summary>

  <apidoc:function name="get-database-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
	   This function returns all the database IDs from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:get-database-ids($config)

  (: returns the IDs of all the databases :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="get-host-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
    <apidoc:summary>
      This function returns all the host IDs from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:get-host-ids($config)
  (: returns the IDs of all the hosts :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="get-group-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns all the group IDs from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:get-group-ids($config)
  (: returns the IDs of all the groups :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="get-forest-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function returns all the forest IDs from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:get-forest-ids($config)
  (: returns the IDs of all the forests :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="get-appserver-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns all the appserver IDs from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:get-appserver-ids($config)
  (: returns the IDs of all the appservers :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="get-configuration" lib="admin"
		category="Admin Library" bucket="XQuery Library Modules" subcategory="actions">
	  <apidoc:summary>Loads the admin configuration into memory for use
		  by other functions in the Admin module.    </apidoc:summary>
	  <apidoc:return>element(configuration)</apidoc:return>
	  <apidoc:usage>
		  The configuration is loaded into memory only as it is
		  needed, so it might not contain the entire configuration at
		  any given moment. It loads only the parts of the configuration
		  that are needed at the time they are needed to perform
		  other Admin module operations that specified in the XQuery
		  request. Therefore, if you execute the function without
		  calling any other Admin module functions, it will return
		  the empty sequence (because it never needed any of the
		  config information to perform any of the Admin module
		  operations).
	  </apidoc:usage>
	  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin-module-read</code></apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

   let $config := admin:get-configuration()
   return
   admin:database-get-range-element-indexes($config,
                           xdmp:database("Documents") )

  => The xml for any element range indexes in the "Documents"
     database, for example:
   <range-element-index xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	                xmlns="http://marklogic.com/xdmp/database">
      <scalar-type>date</scalar-type>
      <collation/>
      <namespace-uri>mynamespace</namespace-uri>
      <localname>myelementname</localname>
      <range-value-positions>false</range-value-positions>
   </range-element-index>

   (: returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.  :)
  ]]></pre>
    </apidoc:example>
  </apidoc:function>
  <apidoc:function name="save-configuration-without-restart" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="actions">
	  <apidoc:summary>
		  This function saves a configuration specification to
		  the cluster configuration files, without restarting MarkLogic
		  Server.  If you use this function to save any changes that
		  require a server restart ("cold" changes such as App Server
		  port assignment changes), then the changes will not take
		  effect until the next time MarkLogic Server restarts
		  (although they will be saved in the configuration).  If you
		  want MarkLogic Server to automatically restart when needed,
		  use <code><a href="#admin:save-configuration">admin:save-configuration</a></code> instead.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:usage>
	    The return value is a list of the host IDs that need to be
	    restarted in order for the changes to take effect.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin-module-write</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/xdmp-write-cluster-config-file</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/xdmp-write-cluster-config-file/{filename}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $spec := admin:forest-set-enabled($config,
    xdmp:forest("myForest"), fn:true() )
  return
  admin:save-configuration-without-restart($spec)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="save-configuration" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="actions">
	  <apidoc:summary>
		  This function saves a configuration specification to
		  the cluster configuration files.  It restarts MarkLogic
		  Server for "cold" administrative tasks only (for example,
		  for App Server port assignment changes). If you do not want
		  those "cold" administrative tasks to automatically restart
		  MarkLogic Server, use
 <code><a href="#admin:save-configuration-without-restart">admin:save-configuration-without-restart</a></code>
		  instead.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin-module-write</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/xdmp-write-cluster-config-file</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/xdmp-write-cluster-config-file/{filename}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $spec := admin:forest-set-enabled($config,
    xdmp:forest("myForest"), fn:true() )
  return
  admin:save-configuration($spec)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="restart-hosts" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="actions">
	  <apidoc:summary>
		  This function restarts MarkLogic Server for the
		  specified hosts.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="hosts" type="xs:unsignedLong*">
		   The host ID(s) for the host(s) you want to restart.
		   For example, <code><a href="#xdmp:host">xdmp:host()</a></code>
		   returns the ID for the current host.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>empty-sequence()</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
(:
  This query restarts all hosts in the cluster.  Note that
  it will restart the host in which the query is run, too.
:)
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
at "/MarkLogic/admin.xqy";
declare namespace host="http://marklogic.com/xdmp/status/host";

let $hostids :=
   for $id in xdmp:host-status(xdmp:host())
                               /host:hosts//host:host/host:host-id
   return fn:data($id)
return
admin:restart-hosts($hostids)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes the configuration from the
		  specified database(s). It does not delete the
		  configuration or data for any forests attached to the
		  deleted database(s).
	  </apidoc:summary>
    <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="database-ids" type="xs:unsignedLong*">
		    The id(s) for the specified database(s) (for example,
		    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
     Any database whose ID you pass into this function must not have any appservers
     targeting it when the transaction begins, otherwise an exception is thrown.
     If you need to delete the database, make sure no appserver targets the database
     in a separate transaction before calling this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
     </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-delete($config, admin:database-get-id($config, "foo"))

  => The new configuration with the specified databases is removed.
     Use admin:save-configuration to save these changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-create" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function creates a new database specification.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="database-name" type="xs:string">
		    The name the database to create. The name must not be used
		    by any other database in the cluster.
	    </apidoc:param>
	    <apidoc:param name="security-db" type="xs:unsignedLong">
		    The ID of the security database (for example,
		    <code><a href="#xdmp:database">xdmp:database</a>("Security")</code> used by
		    this database.
	    </apidoc:param>
	    <apidoc:param name="schema-db" type="xs:unsignedLong?">
		    The ID of the schemas database (for example,
		    <code><a href="#xdmp:database">xdmp:database</a>("Schemas")</code> used by
		    this database.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/database</code></apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-create($config, "myNewDatabase",
            xdmp:database("Security"), xdmp:database("Schemas"))

     (: returns the new configuration element -- use admin:save-configuration
        to save the changes to the configuration or pass the configuration
        to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-copy" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function creates a new database specification with the
		  same settings as the database with the specified ID. The new
		  database configuration will have the specified name.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database to copy (for example,
	      <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="database-name" type="xs:string">
	      The name of the new database to create.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/database</code></apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-copy($config, xdmp:database("myOldDatabase"),
                    "myNewDatabase")

   => Creates a configuration with a new database specification
      having the same settings as the database named "myOldDatabase".
      Use admin:save-configuration to save the changes to the configuration or
      pass the configuration to other Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-detach-forest" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
	               subcategory="database">
	  <apidoc:summary>
		  This function detaches the specified forest from the
		  specified database.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
      </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest. For example,
			<code><a href="#xdmp:forest">xdmp:forest</a>("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
        at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:
  database-detach-forest($config, xdmp:database("myDatabase"),
        xdmp:forest("myForest") )

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-attach-forest" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function attaches the specified forest to the
		  specified database.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any forest whose ID you pass into this function must exist when the
	   transaction begins, otherwise an exception is thrown.  If you
	   need to create the forest, do so in a separate transaction
	   before using them in this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
        at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-attach-forest($config, xdmp:database("myDatabase"),
      xdmp:forest("myForest") )

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-get-backups" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function returns the scheduled backups
      for the specified database from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("mydatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:database-backup)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-backups($config, xdmp:database("mydatabase") )
  (: returns the scheduled backups for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-weekly-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function constructs a weekly scheduled backup specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="backup-dir" type="xs:string">
        The directory where the backup will be saved to.
      </apidoc:param>
      <apidoc:param name="backup-period" type="xs:positiveInteger">
        How many weeks between each backup.
      </apidoc:param>
      <apidoc:param name="days" type="xs:string+">
        The day(s) of the week.  Must be a sequence of zero
        or more of <code>monday</code>, <code>tuesday</code>,
        <code>wednesday</code>, <code>thursday</code>,
        <code>friday</code>, <code>saturday</code>,
        <code>sunday</code>.
      </apidoc:param>
      <apidoc:param name="start-time" type="xs:time">
        A time for the scheduled backup to start.
      </apidoc:param>
      <apidoc:param name="max-backups" type="xs:unsignedLong">
        The maximum number of backups to keep in the backup
        directory.
      </apidoc:param>
      <apidoc:param name="backup-security-db" type="xs:boolean">
        Whether to backup the security database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="backup-schemas-db" type="xs:boolean">
        Whether to backup the schemas database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="backup-triggers-db" type="xs:boolean">
        Whether to backup the triggers database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	      If set to <code>false</code>, do not include the replicas in
	      the backup.  The default is <code>true</code>, which means to
	      include all replicas in the backup.
      </apidoc:param>
	  <apidoc:param name="journal-archiving" type="xs:boolean" optional="true">
		  Whether or not to enable journal archiving. Defaults to <code>false</code>.
	  </apidoc:param>
	  <apidoc:param name="journal-archive-path" type="xs:string" optional="true">
	 	  Path for where archived journals are stored. Defaults to the backup data directory.
	  </apidoc:param>
	  <apidoc:param name="lag-limit" type="xs:unsignedLong" optional="true">
	 	  Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.
	  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:database-backup)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-weekly-backup("/backup-dir", 2, "monday",
        xs:time("09:45:00"),10,true(),true(),true())
  (: returns the weekly backup specification :)
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-weekly-backup("/backup-dir", 2, "monday",
        xs:time("09:45:00"),10,true(),true(),true(),false(),true(),"",500)
  (: returns the weekly backup specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-weekly-incremental-backup" lib="admin"
                   category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
  <apidoc:summary>This function constructs a weekly scheduled incremental backup specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
	The directory where the full backup is located.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
	How many weeks between each backup.</apidoc:param>
    <apidoc:param name="days" type="xs:string+">
	The day(s) of the week. Must be a sequence of zero
        or more of <code>monday</code>, <code>tuesday</code>,
        <code>wednesday</code>, <code>thursday</code>,
        <code>friday</code>, <code>saturday</code>,
        <code>sunday</code>.</apidoc:param>
    <apidoc:param name="start-time" type="xs:time">
	A time for the scheduled incremental backup to start.</apidoc:param>
    <apidoc:param name="backup-security-db" type="xs:boolean">
	Whether to backup the security database alongside the
        current incremental backup.</apidoc:param>
    <apidoc:param name="backup-schemas-db" type="xs:boolean">
	Whether to backup the schemas database alongside the
        current incremental backup.</apidoc:param>
    <apidoc:param name="backup-triggers-db" type="xs:boolean">
	Whether to backup the triggers database alongside the
        current incremental backup.</apidoc:param>
    <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	If set to <code>false</code>, do not include the replicas in
	the incremental backup.  The default is <code>true</code>, which means to
	include all replicas in the incremental backup.</apidoc:param>
    <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
        The directory in which to save the incremental backup. </apidoc:param>
    <apidoc:param name="purge-journal-archive" type="xs:boolean?" optional="true">
        Whether or not to purge journal archive after incremental backup is performed.
        Defaults to <code>false</code></apidoc:param>
    <apidoc:param name="journal-archiving" type="xs:boolean" optional="true">
	Whether or not to enable journal archiving. Defaults to <code>false</code>.</apidoc:param>
    <apidoc:param name="journal-archive-path" type="xs:string" optional="true">
	Path for where archived journals are stored. Defaults to the backup data directory.</apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedLong" optional="true">
	Maximum difference in seconds that the archived journal can lag behind its forest's active journal.
        Defaults to 900.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

 admin:database-weekly-incremental-backup("/backup-dir", 2, "thursday",
        xs:time("09:45:00"),true(),true(),true())

  (: returns the weekly incremental backup specification :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

  <apidoc:function name="database-monthly-backup" lib="admin"
                   category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
    <apidoc:summary>
      This function constructs a monthly scheduled backup specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="backup-dir" type="xs:string">
        The directory where the backup will be saved to.
      </apidoc:param>
      <apidoc:param name="backup-period" type="xs:positiveInteger">
        The number of months to elapse between each backup.
      </apidoc:param>
      <apidoc:param name="backup-month-day" type="xs:unsignedLong">
        The day of the month the backup will happen (between 1 and 31)
      </apidoc:param>
      <apidoc:param name="start-time" type="xs:time">
        A time for the scheduled backup to start.
      </apidoc:param>
      <apidoc:param name="max-backups" type="xs:unsignedLong">
        The maximum number of backups to keep in the backup
        directory.
      </apidoc:param>
      <apidoc:param name="backup-security-db" type="xs:boolean">
        Whether to backup the security database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="backup-schemas-db" type="xs:boolean">
        Whether to backup the schemas database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="backup-triggers-db" type="xs:boolean">
        Whether to backup the triggers database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	If set to <code>false</code>, do not include the replicas in
	the backup.  The default is <code>true</code>, which means to
	include all replicas in the backup.
      </apidoc:param>
      <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
        Whether or not to enable journal archiving. Defaults to <code>false</code>.
      </apidoc:param>
      <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	Path for where archived journals are stored. Defaults to the backup data directory.
      </apidoc:param>
      <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
        Maximum difference in seconds that the archived journal can lag behind its forest's active journal.
        Defaults to 900.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:database-backup)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-monthly-backup("/backup-dir", 2, 1,
        xs:time("09:45:00"),10,true(),true(),true())
  (: returns the monthly backup specification :)
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-monthly-backup("/backup-dir", 2, 1,
        xs:time("09:45:00"),10,true(),true(),true(),false(),true(),(),500)
  (: returns the monthly  backup specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-monthly-incremental-backup" lib="admin"
                   category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
  <apidoc:summary>This function constructs a scheduled monthly incremental backup specification. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
	The directory where the full backup is located.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
	The number of months to elapse between each incremental backup.</apidoc:param>
    <apidoc:param name="backup-month-day" type="xs:unsignedLong">
	The day of the month the incremental backup will happen (between 1 and 31).</apidoc:param>
    <apidoc:param name="start-time" type="xs:time">
	A time for the scheduled incremental backup to start.</apidoc:param>
    <apidoc:param name="backup-security-db" type="xs:boolean">
	Whether to backup the security database alongside the current incremental backup.</apidoc:param>
    <apidoc:param name="backup-schemas-db" type="xs:boolean">
	Whether to backup the schemas database alongside the current incremental backup.</apidoc:param>
    <apidoc:param name="backup-triggers-db" type="xs:boolean">
	Whether to backup the triggers database alongside the current incremental backup.</apidoc:param>
    <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
        If set to <code>false</code>, do not include the replicas in
        the incremental backup.  The default is <code>true</code>, which means to
        include all replicas in the incremental backup.</apidoc:param>
    <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
        The directory in which to save the incremental backup. </apidoc:param>
    <apidoc:param name="purge-journal-archive" type="xs:boolean?" optional="true">
        Whether or not to purge journal archive after incremental backup is performed.
        Defaults to <code>false</code></apidoc:param>
    <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
	Whether or not to enable journal archiving. Defaults to <code>false</code>.</apidoc:param>
    <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	Path for where archived journals are stored. Defaults to the backup data directory.</apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
	Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-monthly-incremental-backup("/backup-dir", 2, 1,
        xs:time("09:45:00"),true(),true(),true())

  (: returns the monthly backup specification :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

  <apidoc:function name="database-one-time-backup" lib="admin"
                   category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
    <apidoc:summary>
      This function constructs a one-time backup specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="backup-dir" type="xs:string">
        The directory where the backup will be saved to.
      </apidoc:param>
      <apidoc:param name="start" type="xs:dateTime">
        The starting dateTime of the scheduled backup.
      </apidoc:param>
      <apidoc:param name="max-backups" type="xs:unsignedLong">
        The maximum number of backups to keep in the backup
        directory.
      </apidoc:param>
      <apidoc:param name="backup-security-db" type="xs:boolean">
        Whether to backup the security database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="backup-schemas-db" type="xs:boolean">
        Whether to backup the schemas database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="backup-triggers-db" type="xs:boolean">
        Whether to backup the triggers database alongside the
        current backup.
      </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	      If set to <code>false</code>, do not include the replicas in
	      the backup.  The default is <code>true</code>, which means to
	      include all replicas in the backup.
      </apidoc:param>
	  <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
		  Whether or not to enable journal archiving. Defaults to <code>false</code>.
	  </apidoc:param>
	  <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	 	  Path for where archived journals are stored. Defaults to the backup data directory.
	  </apidoc:param>
	  <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
	 	  Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.
	  </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:database-backup)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-one-time-backup("/backup-dir",
        xs:dateTime("2008-02-14T09:45:00"),10,true(),true(),true())
  (: returns the one-time backup :)
  ]]></pre></apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-one-time-backup("/backup-dir",
        xs:dateTime("2008-02-14T09:45:00"),true(),true(),true())
  (: returns the one-time backup :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-one-time-incremental-backup" lib="admin"
                   category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
  <apidoc:summary>This function constructs a one-time incremental backup specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
	The directory where the full backup is located.</apidoc:param>
    <apidoc:param name="start" type="xs:dateTime">
	The starting dateTime of the scheduled incremental backup.</apidoc:param>
    <apidoc:param name="backup-security-db" type="xs:boolean">
	Whether to backup the security database alongside the current incremental backup.</apidoc:param>
    <apidoc:param name="backup-schemas-db" type="xs:boolean">
	Whether to backup the schemas database alongside the current incremental backup.</apidoc:param>
    <apidoc:param name="backup-triggers-db" type="xs:boolean">
	Whether to backup the triggers database alongside the current incremental backup.</apidoc:param>
    <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
    If set to <code>false</code>, do not include the replicas in
	      the incremental backup.  The default is <code>true</code>, which means to
	      include all replicas in the incremental backup.</apidoc:param>
    <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
    The directory in which to save the incremental backup.</apidoc:param>
    <apidoc:param name="purge-journal-archive" type="xs:boolean?" optional="true">
     Whether or not to purge journal archive after incremental backup is performed.
     Defaults to <code>false</code> </apidoc:param>
    <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
     Whether or not to enable journal archiving. Defaults to <code>false</code>.</apidoc:param>
    <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
    Path for where archived journals are stored. Defaults to the backup data directory.</apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
    Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-one-time-incremental-backup("/backup-dir",
        xs:dateTime("2014-07-14T09:45:00"),true(),true(),true())

  (: returns the one-time incremental backup :)

    ]]></pre>
  </apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function adds scheduled backup specifications for a
      database to a configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("mydatabase")</code>).
      </apidoc:param>
      <apidoc:param name="backups" type="element(db:database-backup)*">
        The scheduled backup specification(s), typically the result of
        an <code>admin:database-one-time-backup</code> or
        an <code>admin:database-monthly-backup</code> or
        an <code>admin:database-weekly-backup</code> call
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup/{id}</code></p>
    </apidoc:privilege>  	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $database := xdmp:database("mydatabase")
  let $backup := admin:database-one-time-backup("/backup-dir",
        xs:dateTime("2008-02-14T09:45:00"),10,true(),true(),true())
  return
  admin:database-add-backup($config, $database, $backup)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function deletes scheduled backup specifications for a
      database from a configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("mydatabase")</code>).
      </apidoc:param>
      <apidoc:param name="backups" type="element(db:database-backup)*">
        The scheduled backup(s) to delete. Typically, the result of
        an <code>admin:database-get-backups</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup/{id}</code></p>
    </apidoc:privilege>  	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config  := admin:get-configuration()
  let $dbid  := xdmp:database("Documents")
  let $backups := admin:database-get-backups($config, $dbid)[1 to 3]
  return
  admin:database-delete-backup($config, $dbid, $backups)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-get-merge-blackouts" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the merge blackouts specification
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:merge-blackout)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-merge-blackouts($config, xdmp:database("myDatabase") )
  (: returns the merge-blackouts specification for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-recurring-merge-blackout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a merge-blackout specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="limit" type="xs:unsignedInt">
		    The maximum number of megabytes for a merge.
	    </apidoc:param>
	    <apidoc:param name="merge-priority" type="xs:string">
	            The CPU scheduler priority for merges.  Must be one of
	            <code>normal</code> or <code>lower</code>.
	    </apidoc:param>
	    <apidoc:param name="days" type="xs:string+">
		    The day(s) of the week.  Must be a sequence of zero
		    or more of <code>monday</code>, <code>tuesday</code>,
		    <code>wednesday</code>, <code>thusday</code>,
		    <code>friday</code>, <code>saturday</code>,
		    <code>sunday</code>.
	    </apidoc:param>
	    <apidoc:param name="start-time" type="xs:time?">
		    A time for the merge blackout to start.
	    </apidoc:param>
	    <apidoc:param name="end-time" type="xs:time?">
		    A time for the merge blackout to end.
	    </apidoc:param>
	    <apidoc:param name="duration" type="xs:duration?">
		    The amount of time for the blackout to last.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:merge-blackout)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-recurring-merge-blackout(500, "lower", "monday",
  xs:time("09:45:00"), xs:time("11:45:00"), () )

    (: returns the merge-blackout specification.
       Use admin:save-configuration to save these changes. :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-one-time-merge-blackout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a one-time merge-blackout
		  specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="limit" type="xs:unsignedInt">
		    The maximum number of megabytes for a merge.
	    </apidoc:param>
	    <apidoc:param name="merge-priority" type="xs:string">
	            The CPU scheduler priority for merges.  Must be one of
	            <code>normal</code> or <code>lower</code>.
	    </apidoc:param>
	    <apidoc:param name="start" type="xs:dateTime">
		    The starting dateTime of the merge blackout.
	    </apidoc:param>
	    <apidoc:param name="end" type="xs:dateTime?">
		    The ending dateTime of the merge blackout.
	    </apidoc:param>
	    <apidoc:param name="duration" type="xs:duration?">
		    The amount of time for the blackout to last.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:merge-blackout)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-one-time-merge-blackout(500, "lower",
        xs:dateTime("2008-02-14T09:45:00"),
	(), xs:dayTimeDuration("PT3H") )

  (: returns the one-time merge-blackout specification.
     Use admin:save-configuration to save these changes. :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-merge-blackout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a merge blackout specification for a
		  database to a configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="merge-blackouts" type="element(db:merge-blackout)*">
	      The merge blackout specification(s), typically the result of
	      an <code>admin:database-one-time-merge-blackout</code> or
	      an <code>admin:database-recurring-merge-blackout</code> call
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $mergespec := admin:database-one-time-merge-blackout(500, "lower",
        xs:dateTime("2008-02-14T09:45:00"),
        (), xs:dayTimeDuration("PT3H") )
  return
  admin:database-add-merge-blackout($config, $dbid, $mergespec)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-merge-blackout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a merge blackout specification for a
		  database from a configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="blackouts" type="element(db:merge-blackout)*">
	      The merge blackout(s) to delete. Typically, the result of
	      an <code>admin:database-get-merge-blackouts</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $mergespec := admin:database-get-merge-blackouts($config,
        $dbid )
  return
  admin:database-delete-merge-blackout($config, $dbid, $mergespec)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fragment-roots" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the fragment roots specification
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:fragment-root)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fragment-roots($config, xdmp:database("myDatabase") )
  (: returns the fragments root specifications for the database. :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-fragment-root" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a fragment root specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI. Specify an empty string if the
	      element is in no namespace.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:fragment-root)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $namespace := "my/namespace"
  let $localname := "some-element-name"
  return
  admin:database-fragment-root($namespace, $localname )
  (: returns the fragments root specification.
     Use admin:save-configuration to save these changes. :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-fragment-root" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds the specified fragment root to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="fragment-roots" type="element(db:fragment-root)*">
	      A fragment root specification, typically the result of an
	      <code>admin:database-fragment-root</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $fragspec := admin:database-fragment-root("my/namespace", "element-name")
  return
  admin:database-add-fragment-root($config, $dbid, $fragspec)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-fragment-root" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes the specified fragment root in the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
     <apidoc:param name="fragment-roots" type="element(db:fragment-root)*">
	      A fragment root specification, typically the result of an
	      <code>admin:database-fragment-root</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $fragspec := admin:database-fragment-root("my/namespace", "element-name")
  return
  admin:database-delete-fragment-root($config, $dbid, $fragspec)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fragment-parents" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fragment parents specification
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:fragment-parent)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fragment-parents($config, xdmp:database("myDatabase") )
  (: returns the fragments parent specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-fragment-parent" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a fragment parent specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI. Specify an empty string if the
	      element is in no namespace.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:fragment-parent)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $namespace := "my/namespace"
  let $localname := "some-element-name"
  return
  admin:database-fragment-parent($namespace, $localname )

  (: returns the fragments parent specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-fragment-parent" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds the specified fragment parent to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="fragment-parents" type="element(db:fragment-parent)*">
	      A fragment parent specification, typically the result of an
	      <code>admin:database-fragment-parent</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $fragspec := admin:database-fragment-parent("my/namespace", "element-name")
  return
  admin:database-add-fragment-parent($config, $dbid, $fragspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-fragment-parent" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes the specified fragment parent in the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="fragment-parents" type="element(db:fragment-parent)*">
	      A fragment parent specification, typically the result of an
	      <code>admin:database-fragment-parent</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $fragspec := admin:database-fragment-parent("my/namespace", "element-name")
  return
  admin:database-delete-fragment-parent($config, $dbid, $fragspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-range-element-index" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="database">
	  <apidoc:summary>
		  This function constructs a range element index
		  specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>, or
	    <code>point</code>.
	    </apidoc:param>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).  The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:range-element-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-range-element-index("string", "/my/namespace",
                "elementname", "http://marklogic.com/collation/",
		fn:false() )

  (: returns the range element index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-range-field-index" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="database">
	  <apidoc:summary>
		  This function constructs a range field index
		  specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>.
	    </apidoc:param>
      <apidoc:param name="fieldname" type="xs:string">
	      The name for the field.
      </apidoc:param>
      <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).  The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:range-field-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-range-field-index("string", "fieldname",
                "http://marklogic.com/collation/",
		fn:false() )

  (: returns the range field index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-range-element-indexes" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the range element indexes
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
		  <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:range-element-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-range-element-indexes($config, xdmp:database("myDatabase") )

  (: returns the range index specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-range-field-indexes" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the range field indexes
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:range-field-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-range-field-indexes($config, xdmp:database("myDatabase") )

  (: returns the range field index specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-range-element-index" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds a range element index to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="range-indexes" type="element(db:range-element-index)*">
	      An element range index specification, typically the result of an
	      <code>admin:database-range-element-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-element-index("string", "/my/namespace",
                "elementname", "http://marklogic.com/collation/",
		fn:false() )
  return
  admin:database-add-range-element-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-range-field-index" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a range field index to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="range-indexes" type="element(db:range-field-index)*">
	      An field range index specification, typically the result of an
	      <code>admin:database-range-field-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-field-index("string",
                "fieldname", "http://marklogic.com/collation/",
		fn:false() )
  return
  admin:database-add-range-field-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-range-element-index" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
	               subcategory="database">
	  <apidoc:summary>
		  This function deletes a range element index for the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="range-indexes"
	      type="element(db:range-element-index)*">
	      An element range index specification, typically the result of an
	      <code>admin:database-range-element-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	    Note that the index specification to delete must exist in the
	    configuration exactly as specified, even if the specification
	    includes multiple QNames.  If you have a range index configuration
	    that specifies multiple QNames in a single entry, then if you
	    want to delete the index for only one of the QNames, you must first
	    delete the range index specification with multiple QNames and then
	    add the indexes that you do not want to delete.
	    To see the specifications as they are stored in the configuration,
	    use <code>admin:database-get-range-element-index</code>.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-element-index("string", "/my/namespace",
                "elementname", "http://marklogic.com/collation/",
		fn:false() )
  return
  admin:database-delete-range-element-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-range-field-index" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes a range field index for the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="range-indexes" type="element(db:range-field-index)*">
	      A field range index specification, typically the result of an
	      <code>admin:database-range-field-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-field-index("string",
                "fieldname", "http://marklogic.com/collation/",
		fn:false() )
  return
  admin:database-delete-range-field-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
 <apidoc:function name="database-delete-all-range-field-indexes" lib="admin"
          category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
          <apidoc:summary>
                  This function deletes all the range field indexes on given
                  fields for the specified database in the configuration.
          </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
                    A configuration specification, typically as returned
                    from one of the Admin module functions.
            </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
              The ID of the database (for example,
              <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="fieldnames" type="xs:string*">
              A sequence of field names.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
                  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  return
    admin:database-delete-all-range-field-indexes($config, $dbid,
                                                   ("field1","field2"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-range-element-attribute-indexes"
	               lib="admin" category="Admin Library"
				   bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the range element attribute
		  indexes specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:range-element-attribute-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-range-element-attribute-indexes($config,
        xdmp:database("myDatabase") )
  (: returns the range element attribute index specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-range-element-attribute-index" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="database">
	  <apidoc:summary>
		  This function constructs a range element attribute index
		  specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>, or
	    <code>point</code>.
	    </apidoc:param>
	    <apidoc:param name="parent-namespace" type="xs:string?">
		    The namespace of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="parent-localname" type="xs:string">
		    The local name of the parent element for the attribute.
	    </apidoc:param>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>. The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:range-element-attribute-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-range-element-attribute-index("string", "/my/namespace",
        "elementname", "", "myAtribute", "http://marklogic.com/collation/",
	fn:false() )
  (: returns the range element attribute-index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-range-element-attribute-index"
	               lib="admin" category="Admin Library"
				   bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a range element attribute index to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="attribute-indexes"
	      type="element(db:range-element-attribute-index)*">
	An element attribute range index specification, typically the result of an
	<code>admin:database-range-element-attribute-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-element-attribute-index("string",
       "/my/namespace", "elementname", "", "myAttribute",
       "http://marklogic.com/collation/", fn:false() )
  return
  admin:database-add-range-element-attribute-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-range-element-attribute-index"
	               lib="admin" category="Admin Library"
	               bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a range element attribute index for
		  the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="attribute-indexes"
	      type="element(db:range-element-attribute-index)*">
	      An element attribute range index specification, typically the
	      result of an
	      <code>admin:database-range-element-attribute-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	    Note that the index specification to delete must exist in the
	    configuration exactly as specified, even if the specification
	    includes multiple QNames.  If you have a range index configuration
	    that specifies multiple QNames in a single entry, then if you
	    want to delete the index for only one of the QNames, you must first
	    delete the range index specification with multiple QNames and then
	    add the indexes that you do not want to delete.
	    To see the specifications as they are stored in the configuration,
	    use <code>admin:database-get-range-element-attribute-index</code>.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-element-attribute-index("string",
      "/my/namespace", "elementname", "", "myAttribute",
      "http://marklogic.com/collation/", fn:false() )
  return
  admin:database-delete-range-element-attribute-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-element-word-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs an element word lexicon specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="collation" type="xs:string">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:element-word-lexicon)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-element-word-lexicon("my/namepsace", "elementname",
	"http://marklogic.com/collation/" )

  (: returns the element word lexicon specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-element-word-lexicons" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the element word lexicons
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example, <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:element-word-lexicon)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-element-word-lexicons($config, xdmp:database("myDatabase") )

  (: returns the element word lexicon specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-element-word-lexicon" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds an element word lexicon to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="element-word-lexicons"
	      type="element(db:element-word-lexicon)*">
	An element word lexicon specification, typically the result of an
	<code>admin:database-element-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-element-word-lexicon("my/namepsace",
     "elementname", "http://marklogic.com/collation/" )
  return
  admin:database-add-element-word-lexicon($config, $dbid, $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-element-word-lexicon" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes an element word lexicon for the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="element-word-lexicons"
	      type="element(db:element-word-lexicon)*">
	An element word lexicon specification, typically the result of an
	<code>admin:database-element-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-element-word-lexicon("my/namepsace",
     "elementname", "http://marklogic.com/collation/" )
  return
  admin:database-delete-element-word-lexicon($config, $dbid, $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-element-attribute-word-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs an element attribute word
		  lexicon specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="parent-namespace" type="xs:string?">
		    The namespace of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="parent-localname" type="xs:string">
		    The local name of the parent element for the attribute.
	    </apidoc:param>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="collation" type="xs:string">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:element-attribute-word-lexicon)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-element-attribute-word-lexicon("my/namepsace", "elementname",
	"", "myAttribute", "http://marklogic.com/collation/" )
  (: returns the element attribute word lexicon specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-element-attribute-word-lexicons"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the element attribute word lexicons
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:element-attribute-word-lexicon)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-element-attribute-word-lexicons($config,
        xdmp:database("myDatabase") )
  (: returns the element attribute word lexicon specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-element-attribute-word-lexicon"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds an element attribute word lexicon to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="element-attribute-word-lexicons"
	      type="element(db:element-attribute-word-lexicon)*">
	An element word lexicon specification, typically the result of an
	<code>admin:database-element-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-element-attribute-word-lexicon("my/namepsace",
     "elementname", "", "myAttribute", "http://marklogic.com/collation/" )
  return
  admin:database-add-element-attribute-word-lexicon($config, $dbid, $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-element-attribute-word-lexicon"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes an element attribute word lexicon for the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="lexicons"
	      type="element(db:element-attribute-word-lexicon)*">
	An element attribute word lexicon specification, typically the result of an
	<code>admin:database-element-attribute-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-element-attribute-word-lexicon("my/namepsace",
     "elementname", "", "myAttribute", "http://marklogic.com/collation/" )
  return
  admin:database-delete-element-attribute-word-lexicon($config, $dbid, $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-phrase-through" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a phrase through specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:phrase-through)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-phrase-through("my/namepsace", "elementname" )
  (: returns the phrase through specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-phrase-throughs" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the phrase throughs
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:phrase-through)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-phrase-throughs($config,
        xdmp:database("myDatabase") )
  (: returns the phrase through specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-phrase-through" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a phrase through to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="phrase-throughs" type="element(db:phrase-through)*">
	A phrase through specification, typically the result of an
	<code>admin:database-phrase-through</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $ptspec := admin:database-phrase-through("my/namepsace",
     "elementname" )
  return
  admin:database-add-phrase-through($config, $dbid, $ptspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-phrase-through" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes a phrase through for the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="phrase-throughs" type="element(db:phrase-through)*">
	A phrase through specification, typically the result of an
	<code>admin:database-phrase-through</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $ptspec := admin:database-phrase-through("my/namepsace",
     "elementname" )
  return
  admin:database-delete-phrase-through($config, $dbid, $ptspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-phrase-around" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a phrase through specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:phrase-around)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-phrase-around("my/namepsace", "elementname" )
  (: returns the phrase around specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-phrase-arounds" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the phrase arounds
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:phrase-around)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-phrase-arounds($config,
        xdmp:database("myDatabase") )
  (: returns the phrase arounds specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-phrase-around" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds a phrase around to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="phrase-arounds" type="element(db:phrase-around)*">
	A phrase around specification, typically the result of an
	<code>admin:database-phrase-around</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $paspec := admin:database-phrase-around("my/namepsace",
     "elementname" )
  return
  admin:database-add-phrase-around($config, $dbid, $paspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-phrase-around" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a phrase around for the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="phrase-arounds" type="element(db:phrase-around)*">
	A phrase specification, typically the result of an
	<code>admin:database-phrase-through</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $paspec := admin:database-phrase-around("my/namepsace",
     "elementname" )
  return
  admin:database-delete-phrase-around($config, $dbid, $paspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-element-word-query-through" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function constructs an element word query
		  through specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:element-word-query-through)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-element-word-query-through("my/namepsace", "elementname" )
  (: returns the element word query through specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-element-word-query-throughs"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the element word query throughs
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:element-word-query-through)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-element-word-query-throughs($config,
        xdmp:database("myDatabase") )
  (: returns the element word query through specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-element-word-query-through"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds an element word query through to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="element-word-query-throughs"
	      type="element(db:element-word-query-through)*">
	An element word query through specification, typically the result of an
	<code>admin:database-element-word-query-through</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $ewqtspec := admin:database-element-word-query-through("my/namepsace",
     "elementname" )
  return
  admin:database-add-element-word-query-through($config, $dbid, $ewqtspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-element-word-query-through"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="database">
	  <apidoc:summary>
		  This function deletes an element word query through for the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="throughs"
	      type="element(db:element-word-query-through)*">
	An element word query through specification, typically the result of an
	<code>admin:database-element-word-query-through</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $ewqtspec := admin:database-element-word-query-through("my/namepsace",
     "elementname" )
  return
  admin:database-delete-element-word-query-through($config, $dbid, $ewqtspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-word-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a word lexicon specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="collation" type="xs:string">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:word-lexicon)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-word-lexicon("http://marklogic.com/collation/")
  (: returns the word lexicon specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-lexicons" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word lexicons
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:word-lexicon)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-lexicons($config, xdmp:database("myDatabase") )
  (: returns the word lexicon specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-word-lexicon" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds a word lexicon to the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="word-lexicons" type="element(db:word-lexicon)*">
	      A word lexicon specification, typically the result of an
	      <code>admin:database-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-word-lexicon("http://marklogic.com/collation/")
  return
  admin:database-add-word-lexicon($config, $dbid, $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-word-lexicon" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function deletes a word lexicon for the
		  specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="word-lexicons" type="element(db:word-lexicon)*">
	      A word lexicon specification, typically the result of an
	      <code>admin:database-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-word-lexicon("http://marklogic.com/collation/")
  return
  admin:database-delete-word-lexicon($config, $dbid, $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-geospatial-element-index" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a geospatial element index
		  specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="coordinate-system" type="xs:string">
         The coordinate system.  Must be one of <code>wgs84</code>,
         <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>, <code>raw/double</code>.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="point-format" type="xs:string" optional="true">
	      The point format in the data: "point" means latitude precedes longitude (this is the default);
	      "long-lat-point" means longitude precedes latitude.  To use the default value of
	      "point", simply omit this parameter.  Do not specify an empty string.
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
   </apidoc:params>
    <apidoc:return>element(db:geospatial-element-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-geospatial-element-index(
           "/my/namespace",
           "elementname",
	   "wgs84",
	   fn:false(),
	   "long-lat-point" )

  (: returns the geospatial element index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-geospatial-element-indexes"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function returns the geospatial element indexes
		  specification(s) for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-element-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-geospatial-element-indexes($config,
        xdmp:database("myDatabase") )
  (: returns the geospatial index specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-geospatial-element-index" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="database">
	  <apidoc:summary>
		  This function adds a range element index to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-indexes"
	      type="element(db:geospatial-element-index)*">
	      A  geospatial element index specification, typically the result of
	      an <code>admin:database-geospatial-element-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $geospec := admin:database-geospatial-element-index("/my/namespace",
                "elementname", "wgs84", fn:false() )
  return
  admin:database-add-geospatial-element-index($config, $dbid, $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-geospatial-element-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a geospatial element index for the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-indexes"
	      type="element(db:geospatial-element-index)*">
	      A geospatial element index specification, typically the result of an
	      <code>admin:database-geospatial-element-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $geospec := admin:database-geospatial-element-index("/my/namespace",
                "elementname", "wgs84", fn:false() )
  return
  admin:database-delete-geospatial-element-index($config, $dbid, $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-geospatial-element-child-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a geospatial element child index
		  specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="parent-namespace" type="xs:string?">
		    The namespace of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="parent-localname" type="xs:string">
		    The local name of the parent element for the attribute.
	    </apidoc:param>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI. Specify an empty string if the
	      element is in no namespace.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="coordinate-system" type="xs:string">
         The coordinate system.  Must be one of <code>wgs84</code>,
         <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>, <code>raw/double</code>.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="point-format" type="xs:string" optional="true">
	      The point format in the data: "point" means latitude precedes longitude (this is the default);
	      "long-lat-point" means longitude precedes latitude.  To use the default value of
	      "point", simply omit this parameter.  Do not specify an empty string.
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
   </apidoc:params>
    <apidoc:return>element(db:geospatial-element-child-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-geospatial-element-child-index(
        "/my/namespace",
        "elementname",
	"/my/namespace",
	"child-element",
        "wgs84",
	fn:false() )

  (: returns the geospatial element child index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-geospatial-element-child-indexes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the geospatial element child indexes
		  specification(s)
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-element-child-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-geospatial-element-child-indexes($config,
        xdmp:database("myDatabase") )
  (: returns the geospatial element child index specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-geospatial-element-child-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a geospatial element child index to
		  the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-child-indexes"
	      type="element(db:geospatial-element-child-index)*">
	      A  geospatial element child index specification, typically
	      the result of
	      an <code>admin:database-geospatial-element-child-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $geospec := admin:database-geospatial-element-child-index("/my/namespace",
          "elementname", "/my/namespace", "child-element",
          "wgs84", fn:false() )
  return
  admin:database-add-geospatial-element-child-index($config, $dbid, $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-geospatial-element-child-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a geospatial element child index for the
		  specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-child-indexes"
	      type="element(db:geospatial-element-child-index)*">
	      A geospatial element child index specification, typically
	      the result of an
	      <code>admin:database-geospatial-element-child-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $geospec := admin:database-geospatial-element-child-index("/my/namespace",
        "elementname", "/my/namespace", "child-element", "wgs84", fn:false() )
  return
  admin:database-delete-geospatial-element-child-index($config, $dbid, $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-geospatial-element-pair-index" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a geospatial element pair index
		  specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="parent-namespace" type="xs:string?">
		    The namespace of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="parent-localname" type="xs:string">
		    The local name of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="latitude-namespace" type="xs:string?">
		    The namespace for the element containing the latitude.
	    </apidoc:param>
	    <apidoc:param name="latitude-localname" type="xs:string">
		    The local name for the element containing the latitude.
	    </apidoc:param>
	    <apidoc:param name="longitude-namespace" type="xs:string?">
		    The namespace for the element containing the longitude.
	    </apidoc:param>
	    <apidoc:param name="longitude-localname" type="xs:string">
		    The local name for the element containing the longitude.
	    </apidoc:param>
      <apidoc:param name="coordinate-system" type="xs:string">
         The coordinate system.  Must be one of <code>wgs84</code>,
         <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>, <code>raw/double</code>.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-element-pair-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-geospatial-element-pair-index("/my/namespace",
          "elementname", "/my/namespace", "lat",
          "/my/namespace", "long", "wgs84", fn:false() )
  (: returns the geospatial element pair index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-geospatial-element-pair-indexes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the geospatial element pair indexes
		  specification(s)
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-element-pair-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config :=  admin:get-configuration()
  return
  admin:database-get-geospatial-element-pair-indexes($config,
       xdmp:database("myDatabase"))
  (: returns the specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-geospatial-element-pair-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a geospatial element pair index to
		  the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-pair-indexes"
	      type="element(db:geospatial-element-pair-index)*">
	      A  geospatial element pair index specification, typically
	      the result of
	      an <code>admin:database-geospatial-element-pair-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config :=  admin:get-configuration()
  let $geospec :=  admin:database-geospatial-element-pair-index("/my/namespace",
          "elementname", "/my/namespace", "lat",
	  "/my/namespace", "long", "wgs84", fn:false() )
  return
  admin:database-add-geospatial-element-pair-index($config,
     xdmp:database("myDatabase"), $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-geospatial-element-pair-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a geospatial element pair index for
		  the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-pair-indexes"
	      type="element(db:geospatial-element-pair-index)*">
	      A  geospatial element pair index specification, typically
	      the result of
	      an <code>admin:database-geospatial-element-pair-index</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config :=  admin:get-configuration()
  let $geospec :=  admin:database-geospatial-element-pair-index("/my/namespace",
          "elementname", "/my/namespace", "lat",
	  "/my/namespace", "long", "wgs84", fn:false() )
  return
  admin:database-delete-geospatial-element-pair-index($config,
     xdmp:database("myDatabase"), $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-geospatial-element-attribute-pair-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a geospatial element attribute
		  pair index specification.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="parent-namespace" type="xs:string?">
		    The namespace of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="parent-localname" type="xs:string">
		    The local name of the parent element for the attribute.
	    </apidoc:param>
	    <apidoc:param name="latitude-namespace" type="xs:string?">
		    The namespace for the element containing the latitude.
	    </apidoc:param>
	    <apidoc:param name="latitude-localname" type="xs:string">
		    The local name for the element containing the latitude.
	    </apidoc:param>
	    <apidoc:param name="longitude-namespace" type="xs:string?">
		    The namespace for the element containing the longitude.
	    </apidoc:param>
	    <apidoc:param name="longitude-localname" type="xs:string">
		    The local name for the element containing the longitude.
	    </apidoc:param>
      <apidoc:param name="coordinate-system" type="xs:string">
         The coordinate system.  Must be one of <code>wgs84</code>,
         <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>, <code>raw/double</code>.
      </apidoc:param>
      <apidoc:param name="range-value-positions" type="xs:boolean">
	      A boolean specifying whether to maintain value postions
	      in this index (used with co-occurrences).
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string" optional="true">
              An option to handle values that do not meet the range index type.
              Must be one of: <code>reject</code>,<code>ignore</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-element-attribute-pair-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-geospatial-element-attribute-pair-index("/my/namespace",
          "elementname", "/my/namespace", "lat",
          "/my/namespace", "long", "wgs84", fn:false() )
  (: returns the geospatial element attribute pair index specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-get-geospatial-element-attribute-pair-indexes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the geospatial element attribute pair
		  indexes specification(s)
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-element-attribute-pair-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-geospatial-element-attribute-pair-indexes($config,
        xdmp:database("myDatabase") )
  (: returns the geospatial element attribute pair index specifications for the database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-geospatial-element-attribute-pair-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds a geospatial element attribute
		  pair index to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="geospatial-element-attribute-pair-indexes"
	      type="element(db:geospatial-element-attribute-pair-index)*">
	      A  geospatial element attribute pair index specification, typically
	      the result of an
	      <code>admin:database-geospatial-element-attribute-pair-index</code>
	      call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config :=  admin:get-configuration()
  let $geospec := admin:database-geospatial-element-attribute-pair-index(
	  "/my/namespace", "elementname", "/my/namespace", "lat",
	  "/my/namespace", "long", "wgs84", fn:false() )
  return
  admin:database-add-geospatial-element-attribute-pair-index($config,
     xdmp:database("myDatabase"), $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-delete-geospatial-element-attribute-pair-index"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes a geospatial element attribute
		  pair index in the specified
		  database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="indexes"
	      type="element(db:geospatial-element-attribute-pair-index)*">
	   A  geospatial element attribute pair index specification,
	   typically the result of an
	   <code>admin:database-geospatial-element-attribute-pair-index</code>
	   call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config :=  admin:get-configuration()
  let $geospec := admin:database-geospatial-element-attribute-pair-index(
	  "/my/namespace", "elementname", "/my/namespace", "lat",
	  "/my/namespace", "long", "wgs84", fn:false() )
  return
  admin:database-delete-geospatial-element-pair-index($config,
     xdmp:database("myDatabase"), $geospec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-geospatial-region-path-index" lib="admin"
      category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function constructs a geospatial region path index specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="pathexpr" type="xs:string">
        The path expression for the index. The path should
        return true from
        <a href="#cts:valid-index-path">cts:valid-index-path</a>.
      </apidoc:param>
      <apidoc:param name="coordinate-system" type="xs:string">
         The coordinate system.  Must be one of <code>wgs84</code>,
         <code>wgs84/double</code>, <code>etrs89</code>,
         <code>etrs89/double</code>, <code>raw</code>, <code>raw/double</code>.
      </apidoc:param>
      <apidoc:param name="geohash-precision" type="xs:integer">
        Specify the precision of the geohashes to use in the index. Higher
        numbers result in a more precise index and faster queries, at the
        expense of increased index size and slower ingestion speed.
        Value must be between 2 and 6 (inclusive) if using a single precision
        coordinate system; between 3 and 6 if double precision. Ignored for
        <code>raw</code> and <code>raw/double</code> coordinate systems.
      </apidoc:param>
      <apidoc:param name="invalid-values" type="xs:string">
        Specify how to handle values that cannot be parsed as regions.
        Allowed values: "reject" or "ignore".
      </apidoc:param>
      <apidoc:param name="units" type="xs:string?" optional="true">
	 Measure distance and the radii of circles in the specified units.
         Allowed values: <code>miles</code> (default), <code>km</code>,
         <code>feet</code>, <code>meters</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-region-path-index)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
          at "/MarkLogic/admin.xqy";

admin:database-geospatial-region-path-index(
    "//kml:LinearRing/kml:coordinates", "wgs84", 2, "reject", "miles")

(: A geospatial region path index specification :)
    ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-geospatial-region-path-index" lib="admin"
      category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function adds a geospatial region path index to the specified
      database in the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned from one of
        the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example, xdmp:database("myDatabase")).
      </apidoc:param>
      <apidoc:param name="geospatial-region-path-indexes" type="element(db:geospatial-region-path-index)*">
        A geospatial path index specification, typically the result of calling
        <a href="#admin:database-geospatial-region-path-index">admin:database-geospatial-region-path-index</a>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      The index is not created until you pass the modified configuration to
      <code><a href="#admin:save-configuration">admin:save-configuration</a></code>.
      You can also pass the returned configuration to another Admin API
      function to make additional configuration changes.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
          at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return admin:save-configuration(
  admin:database-add-geospatial-region-path-index(
    $config, admin:database-get-id($config, "geo"),
    admin:database-geospatial-region-path-index(
      "//kml:LinearRing/kml:coordinates",
      "wgs84", 2, "reject", "miles")
  )
)

(: Adds a geospatial region path index to the database named "geo". :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-geospatial-region-path-index" lib="admin"
      category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function deletes a geospatial region path index to the specified
      database in the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned from one of
        the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example, xdmp:database("myDatabase")).
      </apidoc:param>
      <apidoc:param name="geospatial-region-path-indexes" type="element(db:geospatial-region-path-index)*">
        A geospatial path index specification, typically the result of calling
        <a href="#admin:database-geospatial-region-path-index">admin:database-geospatial-region-path-index</a>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      The index is not removed until you pass the modified configuration to
      <code><a href="#admin:save-configuration">admin:save-configuration</a></code>.
      You can also pass the modified configuration to another Admin API
      function to make additional configuration changes.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
          at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return admin:save-configuration(
  admin:database-delete-geospatial-region-path-index(
    $config, admin:database-get-id($config, "geo"),
    admin:database-geospatial-region-path-index(
      "//kml:LinearRing/kml:coordinates",
      "wgs84", 2, "reject", "miles")
  )
)

(: Removes a geospatial region path index from the database named "geo". :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-geospatial-region-path-indexes"
      lib="admin" category="Admin Library" bucket="XQuery Library Modules"
      subcategory="database">
    <apidoc:summary>
      This function returns the geospatial region path index specification(s)
      for the specified database in the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned from one of
        the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example, xdmp:database("myDatabase")).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:geospatial-region-path-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
          at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return admin:database-get-geospatial-region-path-indexes(
    $config, admin:database-get-id($config, "geo")
)

==> The geospatial region path indexes configured for the "geo" database:

<geospatial-region-path-index
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://marklogic.com/xdmp/database">
  <path-expression>//kml:LinearRing/kml:coordinates</path-expression>
  <coordinate-system>wgs84</coordinate-system>
  <units>miles</units>
  <geohash-precision>2</geohash-precision>
  <invalid-values>reject</invalid-values>
</geospatial-region-path-index>
    ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function changes the name of the database with the
		  specified ID to the specified name.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new name for the database.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  return
  admin:database-set-name($config, $dbid, "myNewDatabaseName")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the enabled value
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      The new boolean value.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-enabled($config, xdmp:database("myDatabase"), fn:false())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-security-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the security database for a database
		  to the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong">
	      The new database ID for the auxiliary database.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-security-database($config, xdmp:database("myDatabase"),
        xdmp:database("mySecurityDatabase"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-schema-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the schema database for a database
		  to the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong">
	      The new database ID for the auxiliary database.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-schema-database($config, xdmp:database("myDatabase"),
        xdmp:database("mySchemasDatabase"))

 (: returns the new configuration element -- use admin:save-configuration
    to save the changes to the configuration or pass the configuration
    to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-triggers-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the triggers database to the specified
		  database ID for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
     <apidoc:param name="value" type="xs:unsignedLong">
	      The new database ID for the auxiliary database.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-triggers-database($config, xdmp:database("myDatabase"),
        xdmp:database("myTriggersDatabase"))

 (: returns the new configuration element -- use admin:save-configuration
    to save the changes to the configuration or pass the configuration
    to other Admin API functions to make other changes.  :)
     ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-language" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the language
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The locale string representing the new language.  Must be
	      a valid value for <code>xml:lang</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-language($config, xdmp:database("myDatabase"), "fr")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-stemmed-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the stemmed searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new stemmed search value.  Must be one of
	      <code>off</code>, <code>basic</code>, <code>advanced</code>,
	      or <code>decompounding</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-stemmed-searches($config, xdmp:database("myDatabase"),
        "advanced")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-searches($config, xdmp:database("myDatabase"),
        fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-positions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-positions($config, xdmp:database("myDatabase"),
        fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-phrase-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast phrase searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-phrase-searches($config, xdmp:database("myDatabase"),
        fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-case-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast case sensitive searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-case-sensitive-searches($config, xdmp:database("myDatabase"),
        fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-reverse-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast reverse searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-reverse-searches($config, xdmp:database("myDatabase"),
        fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-diacritic-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast diacritic-sensitive searches
		  setting for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-diacritic-sensitive-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-element-word-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the element word searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-element-word-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-element-word-positions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the element word positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-element-word-positions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-element-phrase-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast element phrase searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-element-phrase-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-element-value-positions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the element value positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-element-value-positions($config, xdmp:database("myDatabase"),
        fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-attribute-value-positions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the attribute value positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-attribute-value-positions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-trailing-wildcard-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the trailing wildcard searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-trailing-wildcard-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the trailing wildcard word positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-trailing-wildcard-word-positions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-element-trailing-wildcard-searches" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast element trailing wildcard searches
		  setting for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-trailing-wildcard-word-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-three-character-searches" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the three character searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-three-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-three-character-word-positions" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the three character word positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-three-character-word-positions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-two-character-searches" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the two character searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-two-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-one-character-searches" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the one character searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-one-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-fast-element-character-searches" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the fast element character searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-fast-element-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-uri-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the URI lexicon setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-uri-lexicon($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-collection-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the collection lexicon setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-collection-lexicon($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-reindexer-enable" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the reindexer enable setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-reindexer-enable($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-maintain-last-modified" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the maintain last modified setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-maintain-last-modified($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-maintain-directory-last-modified" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the maintain directory last modified setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-maintain-directory-last-modified($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-inherit-permissions" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the inherit permissions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-inherit-permissions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-inherit-collections" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the inherit collections setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-inherit-collections($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-inherit-quality" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the inherit quality setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-inherit-quality($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-preallocate-journals" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the preallocate journals setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-preallocate-journals($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-preload-mapped-data" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the preload mapped data setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-preload-mapped-data($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-range-index-optimize" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the range index optimize setting
		  for the specified database in the configuration.

		  When set to <code>facet-time</code>, range indexes are
		  optimized to minimize the amount of CPU time
		  used. When set to <code>memory-size</code>, range
		  indexes are optimized to minimize the amount of memory
		  used.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new range index optimize value.  Must be one of
	      <code>facet-time</code> or <code>memory-size</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-range-index-optimize($config, xdmp:database("myDatabase"),
        "memory-size")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-set-directory-creation" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the directory creation setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new directory creation setting.  Must be one of:
	      <code>automatic</code>, <code>manual-enforced</code>,
	      or <code>manual</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-directory-creation($config,
        xdmp:database("myDatabase"), "automatic")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-format-compatibility" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the format compatibility setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new format-compatibility setting.  Must be one of:
	      <code>automatic</code>, <code>5.0</code>, or <code>4.2</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-format-compatibility($config,
        xdmp:database("myDatabase"), "automatic")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-index-detection" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the index detection setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new index detection setting.  Must be one of:
	      <code>automatic</code> or <code>none</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-index-detection($config,
        xdmp:database("myDatabase"), "automatic")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-expunge-locks" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the expunge locks setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new expunge locks setting.  Must be one of:
	      <code>automatic</code> or <code>none</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-expunge-locks($config,
        xdmp:database("myDatabase"), "automatic")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-reindexer-timestamp" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the reindexer timestamp setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong">
	      The system timestamp before which fragments will be reindexed.
	      0 indicates no forced reindex.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-reindexer-timestamp($config,
        xdmp:database("myDatabase"), 0)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-in-memory-limit" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the in-memory limit setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new value, indicating the maximum number of fragments allowed
	      in an in-memory stand before it is saved to disk.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-in-memory-limit($config,
        xdmp:database("myDatabase"), 65536)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-in-memory-list-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the in-memory list size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-in-memory-list-size($config,
        xdmp:database("myDatabase"), 256)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-in-memory-tree-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the in-memory tree size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-in-memory-tree-size($config,
        xdmp:database("myDatabase"), 64)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-in-memory-range-index-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the in-memory range index size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-in-memory-range-index-size($config,
        xdmp:database("myDatabase"), 8)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-in-memory-reverse-index-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the in-memory range reverse index
		  size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-in-memory-reverse-index-size($config,
        xdmp:database("myDatabase"), 8)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-in-memory-geospatial-region-index-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the in-memory geospatial region index
		  size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-in-memory-geospatial-region-index-size($config,
        xdmp:database("myDatabase"), 8)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-large-size-threshold" lib="admin"
      category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function sets the threshold at which binary documents
      in the specified database should be handled as binary
      large objects (BLOBs). Binary documents less than or
      equal to the threshold are treated as small binary objects,
      stored in stands. Binary documents larger than the
      threshold are stored in the Large Data Directory for
      more efficient memory consumption.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The size in kilobytes beyond which binary documents are
        treated as binary large objects (BLOBs) and stored in the
        Large Data Directory. The default is 1 MB.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      Binary documents with size less than or equal to the configured
      threshold are treated as small binary objects and stored in stands.
      The entire contents of a small binary document is cached in memory.
      Binary documents larger than the threshold are stored in the Large
      Data Directory for more efficient memory usage. For details about
      small vs. large binaries, see "Binary Format" in the
      <em>Application Developer's Guide</em>.
      <p>The threshold value is in kilobytes and must be in the range:</p>
      <ul>
        <li>32 KB &lt;= threshold &lt;= 512 MB on 64-bit systems</li>
        <li>32 KB &lt;= threshold &lt;= 128 MB on 32-bit systems</li>
      </ul>
      <p>The location of the Large Data Directory may be configured during
        forest creation by setting the "large data directory" property
        on the Forest configuration page of the Admin Interface, or by
        passing a <code>large-data-directory</code> parameter to
	<code>admin:forest-create</code>.</p>
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-large-size-threshold($config, xdmp:database("myDatabase"),
      2048)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
      ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-locking" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the locking setting for the
		  specified database in the configuration.  When set to
		  <code>strict</code>, locking enforces mutual exclusion
		  on existing documents and on new documents.  When set
		  to <code>fast</code>, locking enforces mutual
		  exclusion on existing documents but not on new
		  documents.  When set to <code>off</code>, locking does
		  not enforce mutual exclusion on existing documents or
		  on new documents.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new locking value.  Must be one of
	      <code>strict</code>, <code>fast</code>,
	      or <code>off</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-locking($config, xdmp:database("myDatabase"),
        "fast")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-journaling" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the journaling setting for the
		  specified database in the configuration.  When set
		  to <code>strict</code>, the journal protects against
		  MarkLogic Server process failures, host operating
		  system kernel failures, and host hardware failures.
		  When set to <code>fast</code>, the journal protects
		  against MarkLogic Server process failures but not
		  against host operating system kernel failures or host
		  hardware failures.  When set to <code>off</code>, the
		  journal does not protect against MarkLogic Server
		  process failures, host operating system kernel
		  failures, or host hardware failures.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new journaling value.  Must be one of
	      <code>strict</code>, <code>fast</code>,
	      or <code>off</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-journaling($config, xdmp:database("myDatabase"),
        "strict")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-journal-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the journal size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-journal-size($config,
        xdmp:database("myDatabase"), 320)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-positions-list-max-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the positions list max size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-positions-list-max-size($config,
        xdmp:database("myDatabase"), 64)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-merge-max-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the merge max size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in megabytes.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-merge-max-size($config,
        xdmp:database("myDatabase"), 500)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-merge-min-size" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the merge minimum size setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new size, in number of fragments.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-merge-min-size($config,
        xdmp:database("myDatabase"), 5000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-merge-min-ratio" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the merge min ratio setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new ratio.  Larger ratios trigger more merges.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-merge-min-ratio($config,
        xdmp:database("myDatabase"), 2)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-merge-priority" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the CPU scheduler priority for merges.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new CPU scheduler priority value.  Must be one of
	      <code>normal</code> or <code>lower</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-merge-priority($config,
        xdmp:database("myDatabase"), "lower")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-merge-timestamp" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the merge timestamp setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:long">
	      The new system timestamp after which to preserve fragments in
	      a merge.  A value of 0 indicates to keep only the latest version
	      of fragments.
	      A negative value indicates a timestamp relative to
	      the time of the merge, at ten million ticks per second.
	      For example, -6000000000 means preserve fragments deleted
	      ten minutes before the merge.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-merge-timestamp($config,
        xdmp:database("myDatabase"), 0)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-reindexer-throttle" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the reindexer throttle setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new setting, which must be a number between
	      1 and 5 (inclusive).  Larger numbers mean to work harder at
	      reindexing.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-reindexer-throttle($config,
        xdmp:database("myDatabase"), 5)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-attached-forests" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the attached forest IDs
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-attached-forests($config, xdmp:database("myDatabase"))
  (: returns the IDs of the attached forests :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-id" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the ID for the specified database from the configuration.
		  The difference between this function and <code>xdmp:database()</code>
		  is that the ID from
		  this function can come from a database that has not yet been saved (that is,
		  from a database that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID
		  enables you to completely configure a newly created database without the
		  need to first save the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="database-name" type="xs:string">
		    The name of the database.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $config := admin:database-create($config, "myNewDatabase",
                  xdmp:database("Security"), xdmp:database("Schemas"))
  let $databaseID := admin:database-get-id($config, "myNewDatabase")
  let $fieldspec := admin:database-field("myField", fn:true() )
  let $config := admin:database-add-field($config, $databaseID, $fieldspec)

  return
      admin:database-attach-forest($config, $databaseID,
          xdmp:forest("newForest") )

  (: Attaches "newForest" and adds the field, "myField" to the newly created
     database, "myNewDatabase" :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the enabled value
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-enabled($config, xdmp:database("myDatabase"))
  (: returns the enabled setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the name
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-name($config, xdmp:database("myDatabase"))
  (: returns the name setting :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-security-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the ID of the security database
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-security-database($config, xdmp:database("myDatabase"))
  (: returns the ID of the security database :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-schema-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the ID of the schema database
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-schema-database($config, xdmp:database("myDatabase"))
  (: returns the ID of the schema database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-triggers-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the ID of the triggers database
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-triggers-database($config, xdmp:database("myDatabase"))
  (: returns the ID of the triggers database :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-language" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the language
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-language($config, xdmp:database("myDatabase"))
  (: returns the language setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-stemmed-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the stemmed searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-stemmed-searches($config, xdmp:database("myDatabase"))
  (: returns the stemmed searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-searches($config, xdmp:database("myDatabase"))
  (: returns the word searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-positions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word positions setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-positions($config, xdmp:database("myDatabase"))
  (: returns the word positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-phrase-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast phrase searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-phrase-searches($config, xdmp:database("myDatabase"))
  (: returns the fast phrase searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-case-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast case sensitive searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-case-sensitive-searches($config, xdmp:database("myDatabase"))
  (: returns the fast case sensitive searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-reverse-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast reverse searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-reverse-searches($config, xdmp:database("myDatabase"))
  (: returns the stemmed searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-diacritic-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast diacritic sensitive
		  searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-diacritic-sensitive-searches($config,
      xdmp:database("myDatabase"))
  (: returns the fast diacritic sensitive searches setting :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-element-word-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast element word searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-element-word-searches($config,
       xdmp:database("myDatabase"))
  (: returns the element word searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-element-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the element word positions setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-element-word-postions($config, xdmp:database("myDatabase"))
  (: returns the element word positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-element-phrase-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast element phrase searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-element-phrase-searches($config,
       xdmp:database("myDatabase"))
  (: returns the fast element phrase searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-element-value-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the element value positions setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-element-value-positions($config,
        xdmp:database("myDatabase"))
  (: returns the element value positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-attribute-value-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the attribute value positions setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-attribute-value-positions($config,
        xdmp:database("myDatabase"))
  (: returns the attribute value positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-trailing-wildcard-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the trailing wildcard searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"))
  (: returns the trailing wildcard searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-trailing-wildcard-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the trailing wildcard word
		  positions setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-trailing-wildcard-word-positions($config,
        xdmp:database("myDatabase"))
  (: returns the trailing wildcard word positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-element-trailing-wildcard-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the trailing wildcard searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-element-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"))
  (: returns the fast element trailing wildcard searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-three-character-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the three character searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-three-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the three character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-three-character-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the three character word positions
		  setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-three-character-word-positions($config,
        xdmp:database("myDatabase"))
  (: returns the three character word positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-two-character-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the two character searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-two-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the two character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-one-character-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the one character searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-one-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the one character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fast-element-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fast element character
		  searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fast-element-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the fast element character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-uri-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the URI lexicon setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-uri-lexicon($config, xdmp:database("myDatabase"))
  (: returns the uri lexicon setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-collection-lexicon" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the collection lexicon setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-collection-lexicon($config, xdmp:database("myDatabase"))
  (: returns the collection lexicon setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-reindexer-enable" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the reindexer enable setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-reindexer-enable($config, xdmp:database("myDatabase"))
  (: returns the reindexer enable setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-maintain-last-modified" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the maintain last modified setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-maintain-last-modified($config, xdmp:database("myDatabase"))
  (: returns the maintain last modified setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-maintain-directory-last-modified"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the maintain directory last
		  modified setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-maintain-directory-last-modified($config, xdmp:database("myDatabase"))
  (: returns the maintain directory last modified setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-inherit-permissions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the inherit positions setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-inherit-permissions($config, xdmp:database("myDatabase"))
  (: returns the inherit permissions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-inherit-collections" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the inherit collections setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-inherit-collections($config, xdmp:database("myDatabase"))
  (: returns the inherit collections setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-inherit-quality" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the inherit quality setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-inherit-quality($config, xdmp:database("myDatabase"))
  (: returns the inherit quality setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-preallocate-journals" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the preallocate journals setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-preallocate-journals($config, xdmp:database("myDatabase"))
  (: returns the preallocate journals setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-preload-mapped-data" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the preload mapped data setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-preload-mapped-data($config, xdmp:database("myDatabase"))
  (: returns the preload mapped data setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-range-index-optimize" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the range index optimize setting
		  for the specified database from the configuration.
		  When set to <code>facet-time</code>, range indexes are
		  optimized to minimize the amount of CPU time
		  used. When set to <code>memory-size</code>, range
		  indexes are optimized to minimize the amount of memory
		  used.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-range-index-optimize($config, xdmp:database("myDatabase"))
  (: returns the range index optimize setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-get-directory-creation" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the directory creation setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-directory-creation($config, xdmp:database("myDatabase"))
  (: returns the directory creation setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-format-compatibility" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the format compatibility setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-format-compatibility($config, xdmp:database("myDatabase"))
  (: returns the format compatibility setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-index-detection" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the index detection setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-index-detection($config, xdmp:database("myDatabase"))
  (: returns the index detection setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-expunge-locks" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the expunge locks setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-expunge-locks($config, xdmp:database("myDatabase"))
  (: returns the expunge-locks setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-reindexer-timestamp" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the reindexer timestamp setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-reindexer-timestamp($config, xdmp:database("myDatabase"))
  (: returns the reindexer timestamp setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-in-memory-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the in memory limit setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-in-memory-limit($config, xdmp:database("myDatabase"))
  (: returns the in memory limit setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-in-memory-list-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the in memory list size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-in-memory-list-size($config, xdmp:database("myDatabase"))
  (: returns the in memory list size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-in-memory-tree-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the in memory tree size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-in-memory-tree-size($config, xdmp:database("myDatabase"))
  (: returns the in memory tree size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-in-memory-range-index-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the in memory range index size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-in-memory-range-index-size($config,
        xdmp:database("myDatabase"))
  (: returns the in memory range index size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-in-memory-reverse-index-size"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the in memory reverse index size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-in-memory-reverse-index-size($config,
        xdmp:database("myDatabase"))
  (: returns the in memory reverse index size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-in-memory-geospatial-region-index-size"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the in memory geospatial region index size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-in-memory-geospatial-region-index-size($config,
        xdmp:database("myDatabase"))
  (: returns the in memory geospatial region index size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-locking" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the locking setting for the
		  specified database in the configuration.  When set to
		  <code>strict</code>, locking enforces mutual exclusion
		  on existing documents and on new documents.  When set
		  to <code>fast</code>, locking enforces mutual
		  exclusion on existing documents but not on new
		  documents.  When set to <code>off</code>, locking does
		  not enforce mutual exclusion on existing documents or
		  on new documents.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-locking($config, xdmp:database("myDatabase"))
  (: returns the locking setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-journaling" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the journaling setting for the
		  specified database in the configuration.  When set
		  to <code>strict</code>, the journal protects against
		  MarkLogic Server process failures, host operating
		  system kernel failures, and host hardware failures.
		  When set to <code>fast</code>, the journal protects
		  against MarkLogic Server process failures but not
		  against host operating system kernel failures or host
		  hardware failures.  When set to <code>off</code>, the
		  journal does not protect against MarkLogic Server
		  process failures, host operating system kernel
		  failures, or host hardware failures.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-journaling($config, xdmp:database("myDatabase"))
  (: returns the journaling setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-journal-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the journal size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-journal-size($config, xdmp:database("myDatabase"))
  (: returns the journal size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-positions-list-max-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the positions list max size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-positions-list-max-size($config,
        xdmp:database("myDatabase"))
  (: returns the in positions list max size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-merge-max-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the merge max size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-merge-max-size($config, xdmp:database("myDatabase"))
  (: returns the merge max size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-merge-min-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the merge min size setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-merge-min-size($config, xdmp:database("myDatabase"))
  (: returns the merge min size setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-merge-min-ratio" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the merge min ratio setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-merge-min-ratio($config, xdmp:database("myDatabase"))
  (: returns the merge min ratio setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-merge-priority" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the CPU scheduler priority for merges
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-merge-priority($config, xdmp:database("myDatabase"))
  (: returns the merge priority setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-merge-timestamp" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the merge timestamp setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:long</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-merge-timestamp($config, xdmp:database("myDatabase"))
  (: returns the merge timestamp setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-reindexer-throttle" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the reindexer throttle setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-reindexer-throttle($config, xdmp:database("myDatabase"))
  (: returns the reindexer throttle setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-included-element" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs an included element specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI.  Specify an empty string if the
	      element is in no namespace.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="weight" type="xs:double">
	      The query weight to use in relavance calculations.
      </apidoc:param>
      <apidoc:param name="attribute-namespace" type="xs:string?">
	      The namespace for the attribute to constrain on.  Specify an
	      empty string if there is no attribute to constrain on or if the
	      attribute is in no namespace.
      </apidoc:param>
      <apidoc:param name="attribute-localname" type="xs:string">
	      The local name of the attribute to constrain on. Specify an
	      empty string if there is no attribute to constrain on.
      </apidoc:param>
      <apidoc:param name="attribute-value" type="xs:string">
	      The value for the attribute to constrain on (only attributes with
	      this value). Specify an empty string if there is no attribute
	      to constrain on.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:included-element)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-included-element("http://myuri/namespace",
	"element-name", 1.0, "", "myAttribute", "some value")
  (: the constructed element :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-excluded-element" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="database">
	  <apidoc:summary>
		  This function constructs an excluded element specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI. Specify an empty string if the
	      element is in no namespace.
      </apidoc:param>
      <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
      </apidoc:param>
      <apidoc:param name="attribute-namespace" type="xs:string?"
	      optional="true">
	      The namespace URI for the constraining attribute.
      </apidoc:param>
      <apidoc:param name="attribute-localname" type="xs:string"
	      optional="true">
	      The localname for the constraining attribute.
      </apidoc:param>
      <apidoc:param name="attribute-value" type="xs:string"
	      optional="true">
	      The value for the constraing attribute.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:excluded-element)</apidoc:return>
    <apidoc:usage>If the third parameter is included, the fourth
	    and fifth must also be included.  These parameters are for
	    constraining the excluded element based on a particular
	    attribute value.
    </apidoc:usage>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-excluded-element("http://myuri/namespace",
	"element-name")
  (: the constructed element :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-field" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function constructs a field specification.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="include-root" type="xs:boolean">
	      A boolean value, true to start including at the root, false
	      to not include until an included element is reached.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:field)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:database-field("myField", fn:true() )
  (: the constructed element :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-included-elements"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word query included elements setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:included-element)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-included-elements($config,
        xdmp:database("myDatabase"))
  (: returns the included elements specifications from the configuration :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-excluded-elements"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word query excluded elements setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:excluded-element)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-excluded-elements($config,
        xdmp:database("myDatabase"))
  (: returns the excluded elements specifications from the configuration :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-fields" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fields specification(s)
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:field)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-fields($config, xdmp:database("myDatabase"))
  (: returns the field settings :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-included-elements" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the fields included elements
		  specification for the specified database from the
		  configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:included-element)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-included-elements($config,
      xdmp:database("myDatabase"), "myField")
  (: returns the field settings :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-excluded-elements" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the field excluded elements
		  specification
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:excluded-element)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-excluded-elements($config,
      xdmp:database("myDatabase"), "myField")
  (: returns the field settings :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the field specification
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:field)</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field($config,
      xdmp:database("myDatabase"), "myField")
  (: returns the field settings :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-field" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds the field specification to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="fields" type="element(db:field)*">
	      The field specification, typically the result of
	      an <code>admin:database-field</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $fieldspec := admin:database-field("myField", fn:true() )
  return
  admin:database-add-field($config, $dbid, $fieldspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-field" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes the field specification in the specified
		  database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-names" type="xs:string*">
	      The name(s) of the field(s) to delete.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  return
  admin:database-delete-field($config, $dbid, "myField")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-word-query-included-element"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds the word query included
		  element specification to the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="included-elements"
	      type="element(db:included-element)*">
	      The included elements specification, typically the result of
	      an <code>admin:database-included-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $wqspec :=   admin:database-included-element("http://myuri/namespace",
  "element-name", 1.0, "", "myAttribute", "some value")
  return
  admin:database-add-word-query-included-element($config, $dbid, $wqspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-word-query-included-element"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes the word query included
		  element specification in the specified
		  database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="included-elements"
	      type="element(db:included-element)*">
	      The included elements specification, typically the result of
	      an <code>admin:database-included-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $wqspec :=   admin:database-included-element("http://myuri/namespace",
  "element-name", 1.0, "", "myAttribute", "some value")
  return
  admin:database-delete-word-query-included-element($config, $dbid, $wqspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-field-included-element" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds the field included
		  element specification tn the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="included-elements"
	      type="element(db:included-element)*">
	      The included elements specification, typically the result of
	      an <code>admin:database-included-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $fieldspec :=   admin:database-included-element("http://myuri/namespace",
  "element-name", 1.0, "", "myAttribute", "some value")
  return
  admin:database-add-field-included-element($config, $dbid,
       "myField", $fieldspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-field-included-element"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes the field included
		  element specification in the specified
		  database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="included-elements"
	      type="element(db:included-element)*">
	      The included elements specification, typically the result of
	      an <code>admin:database-included-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $fieldspec :=   admin:database-included-element("http://myuri/namespace",
  "element-name", 1.0, "", "myAttribute", "some value")
  return
  admin:database-delete-field-included-element($config, $dbid,
       "myField", $fieldspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-word-query-excluded-element"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds the word query excluded
		  element specification for the specified
		  database to the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="excluded-elements"
	      type="element(db:excluded-element)*">
	      The excluded elements specification, typically the result of
	      an <code>admin:database-excluded-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $wqspec := admin:database-excluded-element("http://myuri/namespace",
	"element-name")
  return
  admin:database-add-word-query-excluded-element($config, $dbid, $wqspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-word-query-excluded-element"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes the word query excluded
		  element specification in the specified
		  database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="excluded-elements"
	      type="element(db:excluded-element)*">
	      The excluded elements specification, typically the result of
	      an <code>admin:database-excluded-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $wqspec := admin:database-excluded-element("http://myuri/namespace",
	"element-name")
  return
  admin:database-delete-word-query-excluded-element($config, $dbid, $wqspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-add-field-excluded-element" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function adds the field excluded
		  element specification in the specified
		  database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="excluded-elements"
	      type="element(db:excluded-element)*">
	      The excluded elements specification, typically the result of
	      an <code>admin:database-excluded-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $fieldspec := admin:database-excluded-element("http://myuri/namespace",
	"element-name")
  return
  admin:database-add-field-excluded-element($config, $dbid,
       "myField", $fieldspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-field-excluded-element" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function deletes the field excluded
		  element specification in the specified
		  database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="excluded-elements"
	      type="element(db:excluded-element)*">
	      The excluded elements specification, typically the result of
	      an <code>admin:database-excluded-element</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("myDatabase")
  let $fieldspec := admin:database-excluded-element("http://myuri/namespace",
	"element-name")
  return
  admin:database-delete-field-excluded-element($config, $dbid,
       "myField", $fieldspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-get-field-word-lexicons" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function returns the word lexicons
      specification(s)
      for the specified database from the configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
       The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(db:word-lexicon)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-word-lexicons($config, xdmp:database("myDatabase"),
    "myField")
  (: returns the word lexicon specifications for the database's field :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-add-field-word-lexicon" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function adds a word lexicon to the
      specified database in the configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
       The name of the field.
      </apidoc:param>
      <apidoc:param name="word-lexicons" type="element(db:word-lexicon)*">
  A word lexicon specification, typically the result of an
  <code>admin:database-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-word-lexicon("http://marklogic.com/collation/")
  return
  admin:database-add-field-word-lexicon($config, $dbid, "myField", $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-delete-field-word-lexicon" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
    <apidoc:summary>
      This function deletes a word lexicon for the
      specified database from the configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
        The ID of the database (for example,
        <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
       The name of the field.
      </apidoc:param>
      <apidoc:param name="word-lexicons" type="element(db:word-lexicon)*">
  A word lexicon specification, typically the result of an
  <code>admin:database-word-lexicon</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $lexspec := admin:database-word-lexicon("http://marklogic.com/collation/")
  return
  admin:database-delete-field-word-lexicon($config, $dbid, "myField", $lexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-get-word-query-include-document-root"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word query include
		  document root setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-include-document-root($config,
        xdmp:database("myDatabase"))
  (: returns the word query include document root setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-stemmed-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the reindexer word query stemmed
		  searches setting for the specified database from the
		  configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-stemmed-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query stemmed searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-word-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query searches setting
		  for the specified database is enabled in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-word searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query word searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-fast-phrase-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query fast phrase
		  searches setting
		  for the specified database is set in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-fast-phrase-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query fast phrase searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-fast-case-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query fast case
		  sensitive searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
		    An empty return value means the option is not set (false).
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-fast-case-sensitive-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query fast case sensitive searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-get-word-query-fast-diacritic-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query fast diacritic
		  sensitive searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-fast-diacritic-sensitive-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query fast iacritic sensitive searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-trailing-wildcard-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query trailing
		  wildcard searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query trailing wildcard searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-get-word-query-trailing-wildcard-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query trailing
		  wildcard word positions setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-trailing-wildcard-word-positions($config,
        xdmp:database("myDatabase"))
  (: returns the word query trailing wildcard word positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-three-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query three character
		  searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-three-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query three character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-three-character-word-positions"
    lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query three character
		  word positions setting is enabled
		  for the specified database from the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-three-character-word-positions($config,
        xdmp:database("myDatabase"))
  (: returns the word query three character word positions setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-two-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query two character
		  searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-two-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query two character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-word-query-one-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word query one character
		  searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-word-query-one-character-searches($config,
        xdmp:database("myDatabase"))
  (: returns the word query one character searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-stemmed-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query stemmed searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string?">
        The new stemmed search value.  Must be one of
        <code>basic</code>, <code>advanced</code>,
        or <code>decompounding</code>. It must be equal to or greater
        than the database setting. The empty sequence turns this
        setting off for word query.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-stemmed-searches($config,
        xdmp:database("myDatabase"), "advanced")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-word-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query word searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-word-searches($config,
               xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-fast-phrase-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query fast phrase
		  searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-fast-phrase-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-fast-case-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the word query fast case
		  sensitive searches setting
		  for the specified database from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-fast-case-sensitive-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-set-word-query-fast-diacritic-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query fast diacritic
		  sensitive searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-fast-diacritic-sensitive-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-trailing-wildcard-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query trailing
		  wildcard searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-set-word-query-trailing-wildcard-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query trailing wildcard
		  word positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-trailing-wildcard-word-positions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-three-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query three character
		  searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-three-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function
	  name="database-set-word-query-three-character-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query three character
		  word positions setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-three-character-word-positions($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-two-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query two character
		  searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-two-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-one-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query one character
		  searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-one-character-searches($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-word-query-include-document-root"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the word query include
		  document root setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-word-query-include-document-root($config,
        xdmp:database("myDatabase"), fn:false())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-include-document-root" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns the field include document root setting
		  for the specified field from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-include-document-root($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-stemmed-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns stemmed searches setting
      for the specified field if configured. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-stemmed-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the word query stemmed searches setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-word-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the word searches setting
		  for the specified field is enabled. Otherwise, it returns the
		  empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-word-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-fast-phrase-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the fast phrase searches setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-fast-phrase-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-fast-case-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the fast case sensitive searches setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-fast-case-sensitive-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-fast-diacritic-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function returns true if the fast diacritic sensitive
		  searches setting for the specified field is enabled.
		  Otherwise, it returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-fast-diacritic-sensitive-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-trailing-wildcard-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the trailing wildcard searches setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-trailing-wildcard-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the trailing wildcard word positions setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-wildcard-word-positions($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-three-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the three character searches setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-three-character-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-three-character-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the three character word positions setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-three-character-word-positions($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-two-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the two character searches setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-two-character-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-field-one-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
      This function returns true if the one character searches setting
      for the specified field is enabled. Otherwise, it returns the
      empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-one-character-searches($config,
        xdmp:database("myDatabase"), "myField")
  (: returns the setting :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-stemmed-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field stemmed searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:string?">
	      The new stemmed search value.  Must be one of
	      <code>basic</code>, <code>advanced</code>,
	      <code>decompounding</code>, or <code>off</code>.
	      It must be equal to or greater than the database setting.
	      The empty sequence turns this setting off for the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-stemmed-searches($config,
        xdmp:database("myDatabase"), "myField", "decompounding")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-word-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field word searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-word-searches($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-fast-phrase-searches" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field fast phrase searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-fast-phrase-searches($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-fast-case-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field fast case sensitive
		  searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-fast-case-sensitive-searches($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-fast-diacritic-sensitive-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field fast diacritic sensitive
		  searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-fast-diacritic-sensitive-searches($config,
        xdmp:database("myDatabase"), "myField", fn:false())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-trailing-wildcard-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field trailing wildcard
		  searches setting
		  for the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-trailing-wildcard-searches($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-trailing-wildcard-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field trailing wildcard word
		  positions setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-wildcard-word-positions($config,
        xdmp:database("myDatabase"), "myField", fn:false())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-three-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field three character searches
		  setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-three-character-searches($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-three-character-word-positions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field three character
		  word positions setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-three-character-word-positions($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-two-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field two character searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-two-character-searches($config,
        xdmp:database("myDatabase"), "myField", fn:false())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-one-character-searches"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field one character searches setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean?">
        A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
        or the empty sequence to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-one-character-searches($config,
        xdmp:database("myDatabase"), "myField", fn:false())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-include-document-root"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field include document root setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	      The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
	      A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-include-document-root($config,
        xdmp:database("myDatabase"), "myField", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-set-field-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
	  <apidoc:summary>
		  This function sets the field name setting
		  for the specified field in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new name for the field.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-name($config,
        xdmp:database("myDatabase"), "myField", "myNewFieldName")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the name of the specified forest,
		  given the forest ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest. If the ID does not correspond to
		    a valid forest ID, then an exception is thrown.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:forest-get-name(admin:get-configuration(), 18220031759147104956)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-host" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the ID of the host in which the
		  specified forest resides.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:forest-get-host(admin:get-configuration(), xdmp:forest("myForest"))

  => the ID of the host that services the forest named "myForest"
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-id" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the ID of the forest with the specified
		  name, from the specified configuration.  The difference
		  between this function and <code>xdmp:forest()</code> is that
		  the ID from this function can come from a forest that has not
		  yet been saved (that is, from a forest that has been created
		  in the same query with the Admin library but has not yet
		  been saved to the cluster configuration files).
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-name" type="xs:string">
		    The name of the forest.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:forest-get-id(admin:get-configuration(), "myForest")
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the enabled state of the specified
		  forest.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-enabled($config, admin:forest-get-id($config, "test"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-data-directory" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the name of the data directory of the
		  specified forest.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-data-directory($config,
         admin:forest-get-id($config, "test"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-large-data-directory" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the name of the large data directory of the
		  specified forest.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-large-data-directory($config,
         admin:forest-get-id($config, "test"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-failover-enable" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function returns the state of whether failover is
      enabled for the specified forest.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest.  For example,
        <code>xdmp:forest("myForest")</code> specifies the ID
        for a  forest named "myForest".
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-failover-enable($config,
         admin:forest-get-id($config, "test"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-updates-allowed" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function returns the state of what kinds of updates are allowed
      for the specified forest.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest.  For example,
        <code>xdmp:forest("myForest")</code> specifies the ID
        for a  forest named "myForest".
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-updates-allowed($config,
         admin:forest-get-id($config, "test"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-get-failover-hosts" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function returns the IDs of the hosts defined
		  as failover hosts for this forest.  The order in which the
		  hosts IDs are returned is significant, with the first ID
		  being the primary host, the second (if there is one) being
		  the secondary, and so on.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-failover-hosts($config,
         admin:forest-get-id($config, "test"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-set-host" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function sets a forest configuration to a new
		  host.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedLong">
		    The host ID of the new host.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-set-host($config, admin:forest-get-id($config, "Documents"),
              xdmp:host("myNewHost"))

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-set-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function sets the enabled state for a forest
		  configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The new state of the forest, for example
		    <code>fn:true()</code> for enabled,
		    <code>fn:false()</code> for disabled.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-set-enabled($config, admin:forest-get-id($config, "Documents"),
      fn:false())

  => sets the forest named "Documents" to the disabled state.
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-set-failover-enable" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function sets the forest failover enabled state for a
      forest configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest.  For example,
        <code>xdmp:forest("myForest")</code> specifies the ID
        for a  forest named "myForest".
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
        The new failover-enable state of the forest, for example
        <code>fn:true()</code> for enabled,
        <code>fn:false()</code> for disabled.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-set-failover-enable($config,
      admin:forest-get-id($config, "Documents"),
      fn:true())

      => sets the failover state of the forest named "Documents" to
         the enabled state. Use admin:save-configuration to save the
         changes to the configuration or pass the configuration to other
         Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="forest-set-fast-data-max-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function sets the allowable size (in megabytes) for data to
      be kept by a forest in its fast data directory, or 0 for no limit.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest.  For example,
        <code>xdmp:forest("myForest")</code> specifies the ID
        for a  forest named "myForest".
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsginedInt">
        The allowable size (in megabytes) of the data to be kept
	by the forest in its fast-data-directory, or 0 for no limit.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      The server limits the size allocated to a forest to a portion of
      its configured fast-data directory.  This limit is normally
      automatically calculated from the size of the fast data directory
      and the number of forests using it.  When this parameter is not
      zero, it overrides the calculated limit.  Recommended values are
      in the range of 16384 to 32768.
    </apidoc:usage>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-set-fast-data-max-size($config,
      admin:forest-get-id($config, "Documents"),
      16384)

      => sets the fast-data-max-size of the forest named "Documents" to
      16384 megabytes (16 gigabytes). Use admin:save-configuration to
      save the changes to the configuration or pass the configuration to
      other Admin API functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-set-updates-allowed" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function sets the updates-allowed state for a
      forest configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest.  For example,
        <code>xdmp:forest("myForest")</code> specifies the ID
        for a  forest named "myForest".
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
        The new updates-allowed state of the forest. Must be one of
        <code>all</code> for all updates allowed,
        <code>delete-only</code> for only deletes allowed,
        <code>read-only</code> for no updates allowed and to cause
        updating transactions to abort immediately,
        <code>flash-backup</code> for no updates allowed and to make
        updating transactions retry for a time period specified in
        the group's retry timeout.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-set-updates-allowed($config,
      admin:forest-get-id($config, "Documents"),
      "delete-only")

      => sets the updates-allowed state of the forest named "Documents" to
         the true state. Use admin:save-configuration to save the changes
         to the configuration or pass the configuration to other Admin API
         functions to make other changes.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-add-failover-host" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function adds a failover host to the list of failover
		  hosts for the specified forest in the specified
		  configuration.  If there are already any hosts specified,
		  this host is added to the end of the list of failover hosts.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
	    <apidoc:param name="hosts" type="xs:unsignedLong*">
		   The host ID(s) for the host(s) you want to restart.
		   For example, <code>xdmp:host()</code> returns the ID for
		   the current host.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-add-failover-host($config,
      admin:forest-get-id($config, "Documents"),
      xdmp:host("myFailoverHost"))

      => add the failover host "myFailoverHost" to the end of the
         list of failover hosts. Use admin:save-configuration to save the changes
         to the configuration or pass the configuration to other Admin API
         functions to make other changes.
  ]]></pre></apidoc:example>

  </apidoc:function>
  <apidoc:function name="forest-delete-failover-host" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function deletes the specified failover host(s) from the
		  failover-host list in the specified configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
	    <apidoc:param name="hosts" type="xs:unsignedLong*">
		   The host ID(s) for the host(s) you want to delete.
		   For example, <code>xdmp:host()</code> returns the ID for
		   the current host.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-delete-failover-host($config,
      admin:forest-get-id($config, "Documents"),
      xdmp:host("myFailoverHost"))

      => deletes the failover host "myFailoverHost" from the
         list of failover hosts. Use admin:save-configuration to save the changes
         to the configuration or pass the configuration to other Admin API
         functions to make other changes.
  ]]></pre></apidoc:example>

  </apidoc:function>
  <apidoc:function name="forest-delete" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
    subcategory="forest">
	  <apidoc:summary>
		  This function deletes the configuration for the specified
		  forest from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-ids" type="xs:unsignedLong*">
		    One or more forest ids.  For example,
		    <code>xdmp:forest("myForest")</code> specified the ID
		    for a  forest named "myForest".
	    </apidoc:param>
	    <apidoc:param name="delete-data" type="xs:boolean">
		    If set to true, deletes the data directory as well as the
		    configuration (Note: all documents in the forest will be
		    permanently deleted).  For public forests (forests that
		    do not use the default data directory), if set to false,
		    deletes only the configuration information, leaving the
		    forest data in the data directory on disk.
		    Configuration-only deletes are available
        only for public forests
        (forests that have a data directory specified); private forests
        (forests that have no data directory specified and therefore are
        stored in the default MarkLogic data directory) will ignore this
        parameter and the forest data will always be deleted.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
     Any forest whose ID you pass into this function must not be attached
     to a database when the transaction begins, otherwise an exception is
     thrown. If you need to detach the forest, do so in a separate transaction
     before using them in this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-delete($config, admin:forest-get-id($config, "Documents"),
      fn:false())

      => deletes the forest configuration for the forest
         named "Documents." Use admin:save-configuration to save the changes
         to the configuration or pass the configuration to other Admin API
         functions to make other changes.
  ]]></pre></apidoc:example>

  </apidoc:function>
  <apidoc:function name="forest-create" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
    subcategory="forest">
	  <apidoc:summary>
		  This function creates a new forest configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-name" type="xs:string">
		    The name of the forest.  The must be unique for all
		    forests in the cluster.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The ID of the host (for example, <code>xdmp:host()</code>
		    for the current host.
	    </apidoc:param>
      <apidoc:param name="data-directory" type="xs:string?">
        The optional data directory of the forest. If no directory
        is specified, then it will be a private forest.
      </apidoc:param>
      <apidoc:param name="large-data-directory" type="xs:string?"
        optional="true">
        The optional directory where large objects are stored. If no directory
        is specified, then large objects will be stored in
        DATA_DIR/Forests/FOREST_NAME/Large.
      </apidoc:param>
      <apidoc:param name="fast-data-directory" type="xs:string?"
        optional="true">
        The optional directory for the fast data directory for this forest.
        The fast data directory is typically located on a fast storage device,
        such as an SSD.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/forest</code></apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:forest-create(admin:get-configuration(), "newForest", xdmp:host(), ())

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-copy" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
	  <apidoc:summary>
		  This function creates a new forest specification with the
		  same settings as the forest with the specified ID.  The new
		  forest configuration will have the specified name.  It
		  copies the forest configuration, but does not copy
		  the forest data.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="forest-id" type="xs:unsignedLong">
		    The ID of the forest.  For example,
		    <code>xdmp:forest("myForest")</code> specifies the ID
		    for a  forest named "myForest".
	    </apidoc:param>
      <apidoc:param name="forest-name" type="xs:string">
        The name for the new forest.
      </apidoc:param>
      <apidoc:param name="data-directory" type="xs:string?">
        The optional data directory of the forest. If no directory
        is specified, then it will be a private forest.
      </apidoc:param>
       <apidoc:param name="large-data-directory" type="xs:string?" optional="true">
         The optional directory where large objects are stored. If no directory
         is specified, then large objects will be stored in
         DATA_DIR/Forests/FOREST_NAME/Large.
       </apidoc:param>
       <apidoc:param name="fast-data-directory" type="xs:string?" optional="true">
         An optional directory located on a fast storage device, such as an SSD.       </apidoc:param>

    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/forest</code></apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:forest-copy(admin:get-configuration(), xdmp:forest("myForest"),
         "myNewForest",())

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="forest-get-backups" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function returns the scheduled backups
      for the specified forest from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest (for example,
        <code>xdmp:forest("myforest")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(as:forest-backup)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:forest-get-backups($config, xdmp:forest("myforest") )
  (: returns the scheduled backups for the forest :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="forest-weekly-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function constructs a weekly scheduled backup.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="backup-dir" type="xs:string">
        The directory where the backup will be saved to.
      </apidoc:param>
      <apidoc:param name="backup-period" type="xs:positiveInteger">
        The how many weeks between each backup.
      </apidoc:param>
      <apidoc:param name="days" type="xs:string+">
        The day(s) of the week.  Must be a sequence of zero
        or more of <code>monday</code>, <code>tuesday</code>,
        <code>wednesday</code>, <code>thusday</code>,
        <code>friday</code>, <code>saturday</code>,
        <code>sunday</code>.
      </apidoc:param>
      <apidoc:param name="start-time" type="xs:time">
        A time for the scheduled backup to start.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(as:forest-backup)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:forest-weekly-backup("/backup-dir", 2, "monday", xs:time("09:45:00"))
  (: returns the weekly backup specification :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="forest-monthly-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function constructs a monthly scheduled backup.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="backup-dir" type="xs:string">
        The directory where the backup will be saved to.
      </apidoc:param>
      <apidoc:param name="backup-period" type="xs:positiveInteger">
        The number of months to elapse between each backup.
      </apidoc:param>
      <apidoc:param name="backup-month-day" type="xs:unsignedInt">
        The day of the month the backup will happen (between 1 and 31)
      </apidoc:param>
      <apidoc:param name="start-time" type="xs:time">
        A time for the scheduled backup to start.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(as:forest-backup)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:forest-monthly-backup("/backup-dir", 1, 1, xs:time("09:45:00"))
  (: returns the monthly backup specification :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="forest-one-time-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function constructs a one-time backup.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="backup-dir" type="xs:string">
        The directory where the backup will be saved to.
      </apidoc:param>
      <apidoc:param name="start" type="xs:dateTime">
        The starting dateTime of the scheduled backup.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(as:forest-backup)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:forest-one-time-backup("/backup-dir",
        xs:dateTime("2008-02-14T09:45:00"))
  (: returns the one-time backup :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-add-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function adds scheduled backup specifications for a
      forest to a configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest (for example,
        <code>xdmp:forest("myforest")</code>).
      </apidoc:param>
      <apidoc:param name="backups" type="element(as:forest-backup)*">
        The scheduled backup specification(s), typically the result of
        an <code>admin:forest-one-time-backup</code> or
        an <code>admin:forest-monthly-backup</code> or
        an <code>admin:forest-weekly-backup</code> call
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/forest-backup/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/backup/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forest := xdmp:forest("myforest")
  let $backup := admin:forest-one-time-backup("/backup-dir",
        xs:dateTime("2008-02-14T09:45:00"))
  return
  admin:forest-add-backup($config, $forest, $backup)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-delete-backup" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
    <apidoc:summary>
      This function deletes scheduled backup specifications for a
      forest from a configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="forest-id" type="xs:unsignedLong">
        The ID of the forest (for example,
        <code>xdmp:forest("myforest")</code>).
      </apidoc:param>
      <apidoc:param name="backups" type="element(as:forest-backup)*">
        The scheduled backup(s) to delete. Typically, the result of
        an <code>admin:forest-get-backups</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/forest-backup/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/backup/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config  := admin:get-configuration()
  let $forest  := xdmp:forest("Documents")
  let $backups := admin:forest-get-backups($config, $forest)[1 to 3]
  return
  admin:forest-delete-backup($config, $forest, $backups)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="host-get-id" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function return the ID for the specified host from
		  the configuration.
		  The difference between this function and <code>xdmp:host()</code>
		  is that the ID from
		  this function can come from a host that has not yet been saved (that is,
		  from a host that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID
		  enables you to completely configure a newly created host without the
		  need to first save the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-name" type="xs:string">
		    The name of the host.  If the host is the current host,
		    <code>xdmp:host-name()</code> returns the name.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:host-get-id($config, xdmp:host-name())
  (: returns the host ID :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="host-get-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function returns the name for the host with the
		  specified ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:host-get-name($config, admin:host-get-id($config, xdmp:host-name()))
  (: returns the host name :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="host-get-group" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function returns the group ID for the host with the
		  specified ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:host-get-group($config, admin:host-get-id($config, xdmp:host-name()))
  (: returns the group ID :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="host-get-port" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function returns the bind port for the host with the
		  specified ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:host-get-port($config, admin:host-get-id($config, xdmp:host-name()))
  (: returns the bind port for the host :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="host-set-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function changes the name of an existing host
		  to the newly specified value.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new name of the host.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $hostid := admin:host-get-id($config, "myOldHostname")
  return
  admin:host-set-name($config, $hostid, "myNewHostName")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="host-set-group" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function changes the group to which an existing host
		  belongs to the newly specified value.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedLong">
		    The new group ID value (typically from a
		    <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any group whose ID you pass into this function must exist when the
	   transaction begins, otherwise an exception is thrown.  If you
	   need to create the group, do so in a separate transaction before
	   using them in in this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $hostid := admin:host-get-id($config, xdmp:host-name())
  return
  admin:host-set-group($config, $hostid,
      admin:group-get-id($config, "Default"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="host-set-port" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function changes the bind port value for the host
		  to the newly specified value.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new bind port value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $hostid := admin:host-get-id($config, xdmp:host-name())
  return
  admin:host-set-port($config, $hostid, 7999)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-type" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>
      This function returns the type of appserver with the
      specified ID. It will be one of "http", "xdbc", "odbc", or "webDAV".
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server.   Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-type($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  (: returns "http", "xdbc", "odbc", or "webDAV" :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-group-id" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the ID of the specified
      App Server's group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server.   Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:appserver-get-group-id($config, admin:appserver-get-id($config, (),
    "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-host-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the ID(s) of the hosts the specified
      App Server's is currently running on.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server.   Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:appserver-get-host-ids($config, admin:appserver-get-id($config, (),
    "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-id" lib="admin" category="Admin Library"
	 bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
	This function returns the ID of the specified App Server (HTTP,
	XDBC, or ODBC).  The difference between this function and
	<code>xdmp:server</code> is that the ID from this function can come
	from an appserver that has not yet been saved (that is, from an
	appserver that has been created in the same query with the Admin
	library but has not yet been saved to the cluster configuration
	files).  This ID enables you to completely configure a newly created
	App Server without the need to first save the configuration.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
	   A configuration specification, typically as returned from one of the
	   Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-ids" type="xs:unsignedLong*">
         The optional group-ids in which to restrict the appserver ids
         returned. If no group-id is specified, this function will
         return all matching appservers across all groups.
      </apidoc:param>
      <apidoc:param name="appserver-name" type="xs:string">
         The name of the App Server.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:appserver-get-id($config, admin:group-get-id($config, "Default"),
         "myAppServer")

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the name of the appserver with the
		  specified ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-name($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-root" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the root for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		  The ID of the App Server. Typically, this is the result
      of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-root($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-port" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the port for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-port($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-modules-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the ID of the database set as the
		  modules database for the specified database.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:usage>
	    <p>This function throws an exception if the specified App Server
		    is a WebDAV server (because WebDAV servers do not use a
		    modules database).</p>
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-modules-database($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-database" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the ID of the database to which the
      App Server is set to execute queries against for the
      specified database.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-database($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-last-login" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the ID of the database to which the
      App Server stores users' last login information.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-last-login($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-display-last-login" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the value of the whether or not the
      appserver should display users' last login information.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-display-last-login($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-address" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the IP address of the App Server
		  configuration. The default is <code>0.0.0.0</code>.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-address($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-backlog" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the socket listen backlog setting
		  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-backlog($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-threads" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the maximum number of threads
		  configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-threads($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-request-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the request timeout value configured
		  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-request-timeout($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-keep-alive-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the keep alive timeout value
		  configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-keep-alive-timeout($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-session-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the session timeout value
		  configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-session-timeout($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-connection-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the connection timeout value
		  configured for the specified App Server; the value applies
		  only to an ODBC server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-connection-timeout($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-default-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the default time limit value configured
      for the specified App Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-default-time-limit($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-default-query-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the default SQL query time limit value
      configured for the specified App Server; the value applies only
      to an ODBC server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-default-query-time-limit($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-max-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the max time limit value configured
      for the specified App Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-max-time-limit($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-max-query-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the max SQL query time limit value configured
      for the specified App Server; the value applies only to an ODBC
      server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-max-query-time-limit($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-pre-commit-trigger-depth" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the pre commit trigger depth value
		  configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-pre-commit-trigger-depth($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-pre-commit-trigger-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the pre commit trigger limit value
		  configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-pre-commit-trigger-limit($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-collation" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the collation URI set in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-collation($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-authentication" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the authentication scheme
		  (basic, digest, digestbasic, or application-level)
		  configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-authentication($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-default-user" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the default user value configured
		  for the specified App Server.  The default user only is
		  used with application-level authentication.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-default-user($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-privilege" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the privilege ID for the
		  specified App Server.  If no privilege is configured,
		  It returns 0.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-privilege($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-concurrent-request-limit" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the concurrent request limit for
      any user for the specified App Server. 0 indicates no bound
      on the number of concurrent requests.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-concurrent-request-limit($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-file-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value for the file log level
		  configured for a specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-file-log-level($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  (: returns the file log level value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-log-errors" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of the log errors setting
		  configured for this App Server, where true indicates that
		  the App Server will send uncaught exceptions to the
		  <code>ErrorLog.txt</code> file, and false indicates that
		  it will not.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-log-errors($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-debug-allow" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of debug allow  setting
		  configured for this App Server, where true indicates that
		  the App Server will allow queries to be debugged, and false
		  indicates that it will not.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-debug-allow($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-profile-allow" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of the profile allow setting
		  configured for this App Server, where true indicates that
		  the App Server will allow queries to be profiled, and false
		  indicates that it will not.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-profile-allow($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-default-xquery-version" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of the default xquery
		  version configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-default-xquery-version($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-multi-version-concurrency-control" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of the multi version concurrency
                  control option configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-multi-version-concurrency-control($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-distribute-timestamps" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of the distribute timestamps
                  control option configured for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-distribute-timestamps($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-sgml-character-entities"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value for the
		  output sgml character entities setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-sgml-character-entities($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-encoding" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value for the output encoding
		  setting for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-encoding($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-error-handler" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the path to the error handler
		  configured for this App Server.  If no error handler
		  is configured, returns the empty string.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-error-handler($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-url-rewriter" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the path to the URL rewriter
		  configured for this App Server.  If no URL rewriter
		  is configured, returns the empty string.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-url-rewriter($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the enabled state for the specified
		  App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-enabled($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-schemas" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of any schemas definitions
		  predefined for the specified App Server.  If none are defined,
		  returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:schema)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-schemas($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-namespaces" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function returns the value of any namespace definitions
		  predefined for the specified App Server.  If none are defined,
		  returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:namespace)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-namespaces($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))


  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-static-expires" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the value of the "expires" HTTP header for static content
      to expire after this many seconds port for the specified App Server.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-static-expires($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-compute-content-length" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the value of whether the WebDAV server
      computes content length.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-compute-content-length($config,
             admin:appserver-get-id($config, $groupid, "myWebDAVServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-set-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function changes the name of an existing App Server
		  to the newly specified value.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new name for the specified App Server.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-name($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "myNewAppServerName")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-root" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function changes the root for a specified App Server
		  to the newly specified value.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new value for the root.  The root must be either a
		    fully qualified path (for example,
		    <code>/space/myRoot</code> or <code>c:/space/myRoot</code>)
		    or a relative path (for example, <code>myRoot</code>);
		    relative paths are resolved relative to the directory in
		    which MarkLogic Server is installed.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-root($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "myNewRoot")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-port" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function changes the port in the configuration for
		  the specified App Server to the specified number.  Changing
		  the port is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new port number.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-port($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         1234)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-modules-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value in the configuration of
		  modules database for the specified App Server to the
		  specified database ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="item()">
		    The database ID for the database to set as the modules
		    database. To specify the filesystem, use 0 or "file-system"
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any database whose ID you pass into this function must exist when
	   the transaction begins, otherwise an exception is thrown.  If you
	   need to create the database, do so in a separate transaction
	   before using them in in this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-modules-database($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         xdmp:database("Modules"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-database" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the value in the configuration of
      the database for the specified App Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong">
        The database ID for the database to set as the
        database for the specified App Server.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any database whose ID you pass into this function must exist when
	   the transaction begins, otherwise an exception is thrown.  If you
	   need to create the database, do so in a separate transaction
	   before using them in in this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-database($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         xdmp:database("myDatabase"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-last-login" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the value in the configuration of
      the last login database for the specified App Server. If the value
      is equal to 0, then the last-login feature is disabled for this
      appserver.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong?">
        The database ID for the database to set as the
        database for the specified App Server. To disable the
        last-login feature, use the empty sequence or 0 for this
        value
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
     Any database whose ID you pass into this function must exist when
     the transaction begins, otherwise an exception is thrown.  If you
     need to create the database, do so in a separate transaction
     before using them in in this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-last-login($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         xdmp:database("Last-Login"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-set-display-last-login" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the display last login setting in the
      configuration for the specified App Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
        A boolean value specifying whether to indicate if the
        appserver should display last login information.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-display-last-login($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-set-address" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function changes the IP Address in the configuration for
		  the specified App Server to the specified address.  Changing
		  the address is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new value for the IP address for the specified App
		    Server.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-address(
         $config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "127.0.0.1")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-backlog" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value in the configuration of
		  the backlog (the maximum number of pending connections
		  allowed on the HTTP socket) for the specified App Server.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server.   Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new integer value for the backlog.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-backlog($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         64)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-threads" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value in the configuration of
		  the maximum number of threads for the specified App Server.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
	<apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new integer value for the number of threads.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-threads($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-request-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value of the socket request
		  timeout (the number of seconds before the socket times
		  out) in the configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    An integer specifying the number of seconds before a
		    socket request times out.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-request-timeout($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-keep-alive-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the keep-alive timeout (the maximum
		  number of second for subsequent socket requests to time
		  out) in the configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new integer timeout value (specifies the number
		    of seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-keep-alive-timeout($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-session-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the session timeout value (in seconds)
		  in the configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new integer timeout value (specifies the number
		    of seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-session-timeout($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-connection-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the connection timeout value (in seconds)
		  in the configuration for the specified App Server; the
                  value applies only to an ODBC server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new integer timeout value (specifies the number
		    of seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-connection-timeout($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-default-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the default time limit (the maximum total amount
      of time to service a request before the App Server throws a
      timeout exception) in the configuration for the specified
      App Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new integer timeout value (specifies the number
        of seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-default-time-limit($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-default-query-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the default SQL query time limit (the maximum
      total amount of time to service a SQL query before the App Server
      throws a timeout exception) in the configuration for the specified
      App Server; the value applies only to an ODBC server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new integer timeout value (specifies the number
        of seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-default-query-time-limit($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-max-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the max time limit (the maximum total amount
      of time to service a request before the App Server throws a
      timeout exception) in the configuration for the specified
      App Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new integer timeout value (specifies the number
        of seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-max-time-limit($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-max-query-time-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the max SQL query time limit (the maximum
      total amount of time to service a SQL query before the App Server
      throws a timeout exception) in the configuration for the specified
      App Server; the value applies only to an ODBC server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new integer timeout value (specifies the number
        of seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-max-query-time-limit($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-pre-commit-trigger-depth" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the maximum depth (how many triggers can
		  cause other triggers to fire, which in turn cause others
		  to fire, and so on) in the configuration for the specifed
		  App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The maximum depth (how many triggers can cause other
		    triggers to fire, which in turn cause others to fire,
		    and so on) for pre-commit triggers.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-pre-commit-trigger-depth($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-pre-commit-trigger-limit" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value in the configuration
		  for the maximum number of
		  pre-commit triggers a single statement can invoke
		  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The limit for the number of pre-commit triggers
		    a single statement can invoke.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-pre-commit-trigger-limit($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         1000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-collation" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the default collation in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    A valid collation URI (for example,
		    <code>http://marklogic.com/collation/</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-collation($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
	 "http://marklogic.com/collation/")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-authentication" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the authentication scheme in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The authentication scheme (<code>basic</code>,
		    <code>digest</code>, <code>digestbasic</code>,
		    <code>application-level</code>,
            <code>kerberos-ticket</code>, or <code>certificate</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-authentication($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "digest")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-default-user" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the default user (for use with
		  application-level authentication) in the configuration
		  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedLong">
		    The user ID of the user to set as the default user.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-default-user($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
	 xdmp:eval('
                  xquery version "1.0-ml";
                  import module "http://marklogic.com/xdmp/security"
		    at "/MarkLogic/security.xqy";
	          sec:uid-for-name("annabelle")', (),
	   <options xmlns="xdmp:eval">
		 <database>{xdmp:security-database()}</database>
	   </options>))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-privilege" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets an execute privilege in the configuration
		  for the specified App Server.  When a privilege is set,
		  the user who makes a request to the App Server must have
		  been granted (via a role, either directly or indirectly)
		  the specified privilege.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong">
        The privilege ID of an execute privilege needed to
        access this App Server.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-privilege($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
	 xdmp:eval('
                xquery version "1.0-ml";
                import module "http://marklogic.com/xdmp/security"
      at "/MarkLogic/security.xqy";
      sec:get-privilege("http://marklogic.com/my.uri",
         "execute")/sec:privilege-id',
      (),
     <options xmlns="xdmp:eval">
     <database>{xdmp:security-database()}</database>
     </options>))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-concurrent-request-limit" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function sets the limit on concurrent requests that
      any user may have on a particular appserver. Setting the
      limit to 0 indicates there is no bound on the number of
      concurrent requests.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The limit of concurrent requests.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-concurrent-request-limit($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         15)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-file-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
 	  <apidoc:summary>
		  This function changes the host file log level setting
		  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new log level (must be one of <code>finest</code>,
		    <code>finer</code>, <code>fine</code>,
		    <code>debug</code>, <code>config</code>,
		    <code>info</code>, <code>notice</code>,
		    <code>warning</code>, <code>error</code>,
		    <code>critical</code>,
		    <code>alert</code>, <code>emergency</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-file-log-level($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "debug")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-log-errors" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the log errors setting in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    A boolean value specifying whether to allow send
		    uncaught exceptions on this App Server  to the
		    <code>ErrorLog.txt</code> file (true) or not (false).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-log-errors($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-debug-allow" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the debug allow setting in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    A boolean value specifying whether to allow debugging
		    on this App Server (true) or not (false).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-debug-allow($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-profile-allow" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the profile allow setting in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    A boolean value specifying whether to allow profiling
		    on this App Server (true) or not (false).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-profile-allow($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-default-xquery-version" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the default XQuery version setting
		  in the configuration for this App Server.  This setting
		  determines the XQuery dialect used in queries against
		  this App Server when one is not explicitly specified
		  in the XQuery version declaration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default XQuery version value, one of
		    <code>1.0-ml</code>, <code>1.0</code>, or
		    <code>0.9-ml</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-default-xquery-version($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "1.0-ml")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-multi-version-concurrency-control" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the multi version concurrency
		  control value in the configuration for this App
		  Server.  This option specifies how the latest
		  timestamp is chosen for lock-free queries.
		  <br/>
		  When set to <code>contemporaneous</code>, the server
		  chooses the latest timestamp for which <em>any</em>
		  transaction is known to have committed, even though
		  there still may be other transactions for that
		  timestamp that have not yet fully committed.  Queries
		  will see more timely results, but may block waiting
		  for contemporaneous transactions to fully commit.
		  <br/>
		  When set to <code>nonblocking</code>, the server
		  chooses the latest timestamp for which <em>all</em>
		  transactions are known to have committed, even though
		  there may be a later timestamp for which another
		  transaction has committed.  Queries won't block
		  waiting for transactions, but they may see less timely
		  results.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The multi version concurrency control value, one of
		    <code>contemporaneous</code> or
                    <code>nonblocking</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-multi-version-concurrency-control($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "nonblocking")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-distribute-timestamps" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the distribute timestamps control
		  value in the configuration for this App Server.  This
		  option specifies how the latest timestamp is
		  distributed after updates.  This affects performance
		  of updates and the timeliness of read-after-write
		  query results from other hosts in the group.
		  <br/>
		  When set to <code>fast</code>, updates return as
		  quicky as possible.  No special timestamp notification
		  messages are broadcasted to other hosts. Instead,
		  timestamps are distributed to other hosts when any
		  other message is sent.  The maximum amount of time
		  that could pass before other hosts see the update
		  timestamp is one second, because a heartbeat message
		  is sent to other hosts every second.
		  <br/>
		  When set to <code>strict</code>, updates immediately
		  broadcast timestamp notification messages to every
		  other host in the group.  Updates do not return until
		  their timestamp has been distributed.  This ensures
		  timeliness of read-after-write query results from
		  other hosts in the group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The distribute timestamps value, one of
		    <code>fast</code> or
                    <code>strict</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-distribute-timestamps($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "strict")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-sgml-character-entities"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the SGML character entity output
		  setting in the configuration for the specified App Server.
		  The SGML setting determines how characters that can be
		  represented as SGML entites are serialized upon output
		  by default in a query against the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for outputting SGML entities, one of
		    <code>none</code>, <code>default</code>,
		    <code>math</code>, or <code>pub</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-sgml-character-entities($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "default")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-encoding" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value for the default output encoding
		  in the configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for outputting characters.  The value
		    must be the name of a valid character set (for example,
		    <code>UTF-8</code>, <code>ASCII</code>, and so on.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-encoding($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "ascii")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-error-handler" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value of the path to the error
		  handler in the configuration for the specified App Server.
		  The path should specify a relative or absolute path to
		  an XQuery module that is executed in the event of any
		  400 or 500 series HTTP errors (sometime known as a
		  "sorry" server to give the user a clean error page).
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The path to the XQuery main module to execute when
		    400 or 500 series errors occur on the App Server.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-error-handler($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "sorry.xqy")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-url-rewriter" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the value of the path to the URL
		  rewriter in the configuration for the specified App Server.
		  This function supports both the interpretive and declarative
		  rewriters.
		  The path should specify a relative or absolute path to either
		  an XQuery module used as the interpretive rewriter or the XML
		  file used by the declarative rewriter.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The path to the XQuery main module (.xqy) or XML (.xml) to be used
                    to rewrite URLs.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-url-rewriter($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "rewriter.xqy")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function sets the enabled state in the configuration
		  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The enabled state of the App Server to set, true for
		    enabled and false for disabled.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-enabled($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-set-static-expires" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function changes the value of the "expires" HTTP header for a specified App Server
      to the newly specified value.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new value for the "expires" header.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-static-expires($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         3600)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-set-compute-content-length" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function changes the value whether a WebDAV server computes
      content length.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
        The new value for compute content length.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-compute-content-length($config,
         admin:appserver-get-id($config, $groupid, "myWebDAVServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="appserver-get-request-blackouts" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function returns the request blackouts specification
      for the specified appserver from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the appserver (for example,
        <code>xdmp:server("myAppserver")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:request-blackout)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:appserver-get-request-blackouts($config, xdmp:server("myAppserver") )
  (: returns the request-blackouts specification for the appserver :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-recurring-request-blackout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function constructs a request-blackout specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="users" type="xs:unsignedLong*">
        A sequence of user ID(s) that the request blackout applies too.
      </apidoc:param>
      <apidoc:param name="roles" type="xs:unsignedLong*">
        A sequence of role ID(s) that the request blackout applies too.
      </apidoc:param>
      <apidoc:param name="days" type="xs:string*">
        The day(s) of the week.  Must be a sequence of zero
        or more of <code>monday</code>, <code>tuesday</code>,
        <code>wednesday</code>, <code>thusday</code>,
        <code>friday</code>, <code>saturday</code>,
        <code>sunday</code>.
      </apidoc:param>
      <apidoc:param name="start-time" type="xs:time?">
        A time for the request blackout to start.
      </apidoc:param>
      <apidoc:param name="end-time" type="xs:time?">
        A time for the request blackout to end.
      </apidoc:param>
      <apidoc:param name="duration" type="xs:duration?">
        The amount of time for the blackout to last.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:request-blackout)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:appserver-recurring-request-blackout((),(), "monday",
        xs:time("09:45:00"), xs:time("11:45:00"), () )
  (: returns the request-blackout specification :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-one-time-request-blackout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function constructs a one-time request-blackout
      specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="users" type="xs:unsignedLong*">
        A sequence of user ID(s) that the request blackout applies too.
      </apidoc:param>
      <apidoc:param name="roles" type="xs:unsignedLong*">
        A sequence of role ID(s) that the request blackout applies too.
      </apidoc:param>
      <apidoc:param name="start" type="xs:dateTime">
        The starting dateTime of the request blackout.
      </apidoc:param>
      <apidoc:param name="end" type="xs:dateTime?">
        The ending dateTime of the request blackout.
      </apidoc:param>
      <apidoc:param name="duration" type="xs:duration?">
        The amount of time for the blackout to last.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:request-blackout)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:appserver-one-time-request-blackout((),(),
        xs:dateTime("2008-02-14T09:45:00"),
        (), xs:dayTimeDuration("PT3H") )
  (: returns the one-time request-blackout specification :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-add-request-blackout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function adds a request blackout specification for a
      appserver to a configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the appserver (for example,
        <code>xdmp:server("myAppserver")</code>).
      </apidoc:param>
      <apidoc:param name="request-blackouts" type="element(gr:request-blackout)*">
        The request blackout specification(s), typically the result of
        an <code>admin:appserver-one-time-request-blackout</code> or
        an <code>admin:appserver-recurring-request-blackout</code> call
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $app-id := xdmp:server("myAppserver")
  let $requestspec := admin:appserver-one-time-request-blackout((),(),
        xs:dateTime("2008-02-14T09:45:00"),
        (), xs:dayTimeDuration("PT3H") )
  return
  admin:appserver-add-request-blackout($config, $app-id, $requestspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-delete-request-blackout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
    <apidoc:summary>
      This function deletes a request blackout specification for a
      appserver from a configuration.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the appserver (for example,
        <code>xdmp:server("myAppserver")</code>).
      </apidoc:param>
      <apidoc:param name="blackouts" type="element(gr:request-blackout)*">
        The request blackout(s) to delete. Typically, the result of
        an <code>admin:appserver-get-request-blackouts</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $app-id := xdmp:server("myAppserver")
  let $requestspec := admin:appserver-get-request-blackouts($config,
        $app-id )
  return
  admin:appserver-delete-request-blackout($config, $app-id, $requestspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-schema" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function constructs a schema element with the
		  specified prefix and URI.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="namespace-uri" type="xs:string">
		    The namespace URI for the schema.
	    </apidoc:param>
	    <apidoc:param name="schema-location" type="xs:string">
		    The schema location.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:schema)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:group-schema("http://myuri/namespace", "/some/schema.xsd")
  (: the schema element :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-add-schema" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function adds a schema binding definition to the
		  existing schema binding definitions in the configuration
		  for the specified App Server.  Schemas with a schema binding
		  definition are automatically imported into queries run
		  against the App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="schemas" type="element(gr:schema)*">
		    A list of schema specification elements of the form:
		    <pre xml:space="preserve"><![CDATA[
<schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
  <namespace-uri>foo</namespace-uri>
  <schema-location>/foo.xsd</schema-location>
</schema>
]]></pre>
              Typically the result of an <code>admin:group-schema</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-add-schema($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
  <schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
     <namespace-uri>foo</namespace-uri>
     <schema-location>/foo.xsd</schema-location>
  </schema>)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-delete-schema" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function deletes a schema definition in the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="schemas" type="element(gr:schema)*">
		    A list of schema specification elements of the form:
		    <pre xml:space="preserve"><![CDATA[
<schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
  <namespace-uri>foo</namespace-uri>
  <schema-location>/foo.xsd</schema-location>
</schema>
]]></pre>
             Typically the result of an <code>admin:group-schema</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-delete-schema($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
  <schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
     <namespace-uri>foo</namespace-uri>
     <schema-location>/foo.xsd</schema-location>
  </schema>)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-namespace" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function constructs a namespace element with the
		  specified prefix and URI.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="prefix" type="xs:string">
		    The namespace prefix.
	    </apidoc:param>
	    <apidoc:param name="namespace-uri" type="xs:string">
		    The namespace URI.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:namespace)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:group-namespace("myprefix", "http://myuri/namespace")
  (: the namespace element :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-add-namespace" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  Add one or more namespaces to an App Server configuration,
		  which will predefine the namespace(s) for all requests
		  evaluated against the App Server.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="config" type="element(configuration)">
		    The configuration for the cluster, typically the result
		    of <code>admin:get-configuration()</code> call.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="namespaces" type="element(gr:namespace)*">
		    <p>
			    A list of namespaces to add.  Each namespace
			    specification has the following form:
		    </p>
		    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/xdmp/group">
    <prefix>myprefix</prefix>
    <namespace-uri>http://myuri/forthisprefix</namespace-uri>
  </namespace>
	 ]]></pre>
         Typically the result of an <code>admin:group-namespace</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:appserver-add-namespace($config,
    admin:appserver-get-id($config,(), "Docs"),
    <namespace xmlns="http://marklogic.com/xdmp/group">
      <prefix>myprefix</prefix>
      <namespace-uri>http://myuri/forthisprefix</namespace-uri>
    </namespace>)

  => The XML for new configuration with this namespace added.  Use
     this as the argument to admin:save-configuration to change
     the configuration.
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-delete-namespace" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function deletes a namespace configuration from the
		  configuration for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="namespaces" type="element(gr:namespace)*">
		    <p>
			    A list of namespaces to add.  Each namespace
			    specification has the following form:
		    </p>
		    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/xdmp/group">
    <prefix>myprefix</prefix>
    <namespace-uri>http://myuri/forthisprefix</namespace-uri>
  </namespace>
	 ]]></pre>
         Typically the result of an <code>admin:group-namespace</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-delete-namespace($config,
       admin:appserver-get-id($config, $groupid, "myAppServer"),
   <namespace xmlns="http://marklogic.com/xdmp/group">
     <prefix>myprefix</prefix>
     <namespace-uri>http://myuri/forthisprefix</namespace-uri>
   </namespace>)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-delete" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function deletes one or more App Servers in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-ids" type="xs:unsignedLong*">
		    The ID(s) of the App Server.   Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "myGroup")
  return
  admin:appserver-delete($config,
        admin:appserver-get-id($config, $groupid, "myAppServer") )

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="http-server-create" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function creates a  new HTTP App Server with the
		  specified name, root, and port in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result of an <code>admin:group-get-id</code>
			call.</apidoc:param>
	    <apidoc:param name="appserver-name" type="xs:string">
		    The name of the App Server.  The name must be unique
                    among the App Server names for the group.
	    </apidoc:param>
	    <apidoc:param name="root" type="xs:string">
		    The root of the App Server.
	    </apidoc:param>
	    <apidoc:param name="port" type="xs:unsignedLong">
		    The port on which the App Server listens. The port must
		    be available on the host.
	    </apidoc:param>
      <apidoc:param name="modules-id" type="item()">
       The ID of the modules database (for example,
       <code>xdmp:database("Modules")</code>).
       To specify the filesystem, use 0 or "file-system"
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
       The ID of the database (for example,
       <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any group or database whose ID you pass into this function must
	   exist when the transaction begins, otherwise an exception is thrown.
	   If you need to create the group and/or database,
	   do so in a separate transaction before using them in in this
	   function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "myGroup")
  return
  admin:http-server-create($config, $groupid, "myNewAppServer",
        "/space/mycode", 8005, 0, xdmp:database("myDatabase") )

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="xdbc-server-create" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function creates a new XDBC App Server with the
		  specified name, root, and port in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result of an <code>admin:group-get-id</code>
			call.
	    </apidoc:param>
	    <apidoc:param name="appserver-name" type="xs:string">
		    The name of the App Server.  The name must be unique
            among the App Server names for the group.
	    </apidoc:param>
	    <apidoc:param name="root" type="xs:string">
		    The path to the module directory root of this XDBC server.
	    </apidoc:param>
	    <apidoc:param name="port" type="xs:unsignedLong">
		    The port on which the App Server listens. The port must
		    be available on the host.
	    </apidoc:param>
      <apidoc:param name="modules-id" type="item()">
       The ID of the modules database (for example,
       <code>xdmp:database("Modules")</code>).
       To specify the filesystem, use 0 or "file-system"
      </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
       The ID of the database (for example,
       <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any group or database whose ID you pass into this function must
	   exist when the transaction begins, otherwise an exception is thrown.
	   If you need to create the group and/or database,
	   do so in a separate transaction before using them in in this
	   function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "myGroup")
  return
  admin:xdbc-server-create($config, $groupid, "myNewAppServer",
        "/space/mycode", 8005, 0, xdmp:database("myDatabase") )

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="webdav-server-create" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function creates a new WebDAV App Server with the
		  specified name, library, and port in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result of an <code>admin:group-get-id</code>
			call.
	    </apidoc:param>
	    <apidoc:param name="appserver-name" type="xs:string">
		    The name of the App Server.  The name must be unique
            among the App Server names for the group.
	    </apidoc:param>
	    <apidoc:param name="root" type="xs:string">
		    The root of the App Server.
	    </apidoc:param>
	    <apidoc:param name="port" type="xs:unsignedLong">
		    The port on which the App Server listens. The port must
		    be available on the host.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
	   Any group or database whose ID you pass into this function must
	   exist when the transaction begins, otherwise an exception is thrown.
	   If you need to create the group and/or database,
	   do so in a separate transaction before using them in in this
	   function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "myGroup")
  return
  admin:webdav-server-create($config, $groupid, "myNewAppServer",
        "/space/mycode", 8005, xdmp:database("myDatabase") )

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-copy" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
	  <apidoc:summary>
		  This function creates a new App Server specification with the
		  same settings as the App Server with the specified ID.
		  The new App Server configuration will have the specified name.
		  You can copy the App Server to a new one either in the same
		  group (by specifying $old-group-id and $new-group-id with
		  the same group ID) or in a different group.
	  </apidoc:summary>
          <apidoc:params>
          <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="target-group-id" type="xs:unsignedLong?">
		    The optional group ID of the new group to which the App Server is
			copied. If no ID is provided, the App Server will be copied to the
			same group it exists in. Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="appserver-name" type="xs:string">
		    The new name for the App Server.
	    </apidoc:param>
	    <apidoc:param name="port" type="xs:unsignedLong">
		    The port number for the new App Server.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  let $appserver-id := admin:appserver-get-id($config, $group-id,
                       "myAppServer")
  return
  admin:appserver-copy($config, $appserver-id, $group-id,
                       "myNewAppServer", 8012)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="taskserver-get-name" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the name of the task server for the
		  specified group from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result of an <code>admin:group-get-id</code>
			call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-name($config, $group-id)
  (: returns the name of the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-threads" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
	               subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the number of threads configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result of an <code>admin:group-get-id</code>
			call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-threads($config, $group-id)
  (: returns the number of threads configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-debug-threads" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the number of debug threads configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs. Typically, this
			is the result of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-debug-threads($config, $group-id)
  (: returns the number of debug threads configured on the task server :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-default-time-limit" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the default time limit configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group to which the App Server belongs. Typically,
		this is the result of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-default-time-limit($config, $group-id)
  (: returns the default time limit configured on the task server :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-max-time-limit" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the maximum time limit configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group to which the App Server belongs. Typically,
		this is the result of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-max-time-limit($config, $group-id)
  (: returns the maximum time limit configured on the task server :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-queue-size" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the number queue size configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs. Typically,
			this is the result of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-queue-size($config, $group-id)
  (: returns the queue size configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-pre-commit-trigger-depth" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the maximum pre-commit trigger
		  depth configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs. Typically,
			this is the result of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-pre-commit-trigger-depth($config, $group-id)
  (: returns the pre-commit trigger depth configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-post-commit-trigger-depth"
	               lib="admin" category="Admin Library"
				   bucket="XQuery Library Modules" subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the maximum post-commit trigger
		  depth configured on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-post-commit-trigger-depth($config, $group-id)
  (: returns the post-commit trigger depth configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-pre-commit-trigger-limit"
	               lib="admin" category="Admin Library"
				   bucket="XQuery Library Modules" subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the pre-commit trigger
		  limit configured
		  on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-pre-commit-trigger-limit($config, $group-id)
  (: returns the pre-commit trigger limit configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-file-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the value for the file log level
		  configured on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the Task Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:taskserver-get-file-log-level($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the file log level value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-log-errors" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the value for the log-errors setting
		  configured on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-log-errors($config, $group-id)
  (: returns the log-errors setting configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-debug-allow" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the value for the debug-allow setting
		  configured on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-debug-allow($config, $group-id)
  (: returns the debug-allow setting configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-get-profile-allow" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function returns the value for the profile-allow setting
		  configured on the task server for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-profile-allow($config, $group-id)
  (: returns the profile-allow setting configured on the task server :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-threads" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value in the configuration of
		  the maximum number of threads for the specified task server.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new threads value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-threads($config, $groupid, 10)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-debug-threads" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value in the configuration of
		  the maximum number of debug threads for the specified
		  task server.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new threads value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-debug-threads($config, $groupid, 10)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-default-time-limit" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the task server default time limit in the
		  configuration.
	  </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group to which the App Server belongs.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new value for the time limit (specified the number of
	      seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-default-time-limit($config, $groupid, 10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-max-time-limit" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the task server max time limit in the
		  configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group to which the App Server belongs.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new value for the max time limit (specified the number of
	      seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-max-time-limit($config, $groupid, 10000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-queue-size" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value in the configuration of
		  the maximum queue size for the specified
		  task server.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new value for the queue size.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-queue-size($config, $groupid, 100000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-pre-commit-trigger-depth"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value for the task server pre-commit
		  trigger depth in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new value.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-pre-commit-trigger-depth($config, $groupid, 1000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-post-commit-trigger-depth"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value for the task server post-commit
		  trigger depth in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new post-commit trigger depth.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-post-commit-trigger-depth($config, $groupid, 1000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-pre-commit-trigger-limit"
	               lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value for the task server pre-commit
		  trigger depth in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
	      The new value.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-pre-commit-trigger-depth($config, $groupid, 1000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-file-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="taskserver">
 	  <apidoc:summary>
		  This function changes the host file log level setting
		  for the task server in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="taskserver-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new log level (must be one of <code>finest</code>,
		    <code>finer</code>, <code>fine</code>,
		    <code>debug</code>, <code>config</code>,
		    <code>info</code>, <code>notice</code>,
		    <code>warning</code>, <code>error</code>,
		    <code>critical</code>,
		    <code>alert</code>, <code>emergency</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-file-log-level($config, $groupid, "debug")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-log-errors" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value for the log errors setting
		  for the task server in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The new boolean value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-log-errors($config, $groupid, 1000)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-debug-allow" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value for the debug allow setting
		  for the task server in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The new boolean value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-debug-allow($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="taskserver-set-profile-allow" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="taskserver">
	  <apidoc:summary>
		  This function sets the value for the profile allow setting
		  for the task server in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The new boolean value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-profile-allow($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-host-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the IDs of all hosts belonging to the group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The name of the group.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-host-ids($config, admin:group-get-id($config,"myGroup"))
  (: returns the group's host IDs :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-appserver-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the IDs of all appservers belonging to the group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The name of the group.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-appserver-ids($config, admin:group-get-id($config,"myGroup"))
  (: returns the group's appserver IDs :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-httpserver-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the IDs of all httpservers belonging to the group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The name of the group.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-httpserver-ids($config, admin:group-get-id($config,"myGroup"))
  (: returns the group's httpserver IDs :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-xdbcserver-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the IDs of all xdbcservers belonging to the group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The name of the group.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-xdbcserver-ids($config, admin:group-get-id($config,"myGroup"))
  (: returns the group's xdbcserver IDs :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-webdavserver-ids" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the IDs of all webdavservers belonging to the group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The name of the group.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-webdavserver-ids($config, admin:group-get-id($config,"myGroup"))
  (: returns the group's webdavserver IDs :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-taskserver-id" lib="admin"
                   category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="group">
    <apidoc:summary>
      This function returns the ID of of the taskserver belonging to the group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The name of the group.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-taskserver-id($config, admin:group-get-id($config,"myGroup"))
  (: returns the group's taskserver ID :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-id" lib="admin"
	               category="Admin Library" bucket="XQuery Library Modules"
				   subcategory="group">
	  <apidoc:summary>
		  This function returns the ID of the group.
		  The difference between this function and <code>xdmp:group()</code>
		  is that the ID from
		  this function can come from a group that has not yet been saved (that is,
		  from a group that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID
		  enables you to completely configure a newly created group without the
		  need to first save the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-name" type="xs:string">
		    The name of the group.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-id($config, "myGroup"))
  (: returns the group ID :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the name of the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-name($config, admin:group-get-id($config, "myGroup"))
  (: returns the group name :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-list-cache-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the list cache size
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-list-cache-size($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the list cache size value :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-list-cache-partitions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the list cache partitions
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-list-cache-partitions($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the list cache partitions value :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-compressed-tree-cache-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the compressed tree
		  cache size setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-compressed-tree-cache-size($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the compressed tree cache size value :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-compressed-tree-cache-partitions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
 	  <apidoc:summary>
		  This function returns the value for the compressed tree
		  cache partitions setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-compressed-tree-cache-partitions($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the compressed tree cache partitions value :)


  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-compressed-tree-read-size" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the value for the compressed tree
      read size (in kilobytes) setting from the specified group.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-compressed-tree-read-size($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the compressed tree read size value :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-expanded-tree-cache-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the expanded tree
		  cache size setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-expanded-tree-cache-size($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the expanded tree cache size value :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-expanded-tree-cache-partitions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the expanded tree
		  cache partitions setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-expanded-tree-cache-partitions($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the expanded tree cache partitions value :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-smtp-relay" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the smtp relay
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-smtp-relay($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the smtp relay value :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-smtp-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the smtp timeout
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-smtp-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the smtp timeout value :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-http-user-agent" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the http user agent
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-http-user-agent($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the http user agent value :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-http-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the http timeout
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-http-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the http timeout value :)


  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-xdqp-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the xdqp timeout
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-xdqp-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the xdqp timeout value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-host-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the host timeout
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-host-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the host timeout value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-host-initial-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the host initial timeout
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-host-initial-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the host initial timeout value :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-retry-timeout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the value for the number of seconds a request
      will retry before timing out.
    </apidoc:summary>
    <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-retry-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the retry timeout value :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-module-cache-timeout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the number of seconds a
      module can be unused before being flushed from caches.
      Larger values can potentially cause more memory to be used
      for cached modules.
      Smaller values can potentially cause more time to be used
      reloading uncached modules.
    </apidoc:summary>
    <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-module-cache-timeout($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the module cache timeout value :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-system-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the system log level
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-system-log-level($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the system log level value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-file-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the file log level
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-file-log-level($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the file log level value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-rotate-log-files" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the rotate log files
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-rotate-log-files($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the rotate log files value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-keep-log-files" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the keep log files
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-keep-log-files($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the keep log files value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-failover-enable" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the failover enable
		  setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-failover-enable($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the failover enable value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-trace-events-activated" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value for the trace events
		  activated setting from the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-trace-events-activated($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the trace events activated value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-schemas" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value of any schemas definitions
		  predefined for the specified group.  If none are defined,
		  returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:schema)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")

  return
     admin:group-get-schemas($config, $groupid)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-namespaces" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value of any namespace definitions
		  predefined for the specified group.  If none are defined,
		  returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:namespace)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-get-namespaces($config, $groupid)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-trace-events" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function returns the value of any trace events
		  activated for the specified group.  If none are defined,
		  returns the empty sequence.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:event)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-get-trace-events($config, $groupid)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-name" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="group">
	  <apidoc:summary>
		  This function changes the name of the group with the
		  specified ID to the specified name.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new name for the group.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-name($config, $groupid, "myNewGroupName")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-list-cache-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the list cache size setting
		  of the group with the specified ID to the specified value.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new list cache value (in megabytes).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-list-cache-size($config, $groupid, 256)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-list-cache-partitions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the list cache partitions
		  setting of the group with the specified ID to the
		  specified value.  More partitions allow more
		  concurrency, but make each individual cache partition
		  smaller, which could make it more likely for the cache
		  to fill up.  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart MarkLogic
		  Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    A new value for the number of cache partitions.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      The server may use fewer or more partitions than the configured
      value to keep partition sizes between 2048 and 12288 megabytes.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-list-cache-partitions($config, $groupid, 2)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-compressed-tree-cache-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the compressed tree cache size setting
		  of the group with the specified ID to the specified value. This is
		  a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new cache value (in megabytes).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-compressed-tree-cache-size($config, $groupid, 256)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-compressed-tree-cache-partitions"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the compressed tree cache
		  partitions setting of the group with the specified ID
		  to the specified value. More partitions allow more
		  concurrency, but make each individual cache partition
		  smaller, which could make it more likely for the cache
		  to fill up. This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart MarkLogic
		  Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    A new value for the number of cache partitions.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      The server may use fewer or more partitions than the configured
      value to keep partition sizes between 512 and 12288 megabytes.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-compressed-tree-cache-partitions($config, $groupid, 2)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-compressed-tree-read-size" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the compressed tree read size setting
      of the group with the specified ID to the specified value.
	  This is a "cold" operation; when you use <code>admin:save-configuration</code>
	  to save the configuration, it will automatically restart MarkLogic Server.
    </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new read size value (in kilobytes).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-compressed-tree-read-size($config, $groupid, 256)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-expanded-tree-cache-size" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the expanded tree cache size setting
		  of the group with the specified ID to the specified value.
		  This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart
		  MarkLogic Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new cache value (in megabytes).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-expanded-tree-cache-size($config, $groupid, 256)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-expanded-tree-cache-partitions" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the expanded tree cache
		  partitions setting of the group with the specified ID
		  to the specified value.  More partitions allow more
		  concurrency, but make each individual cache partition
		  smaller, which could make it more likely for the cache
		  to fill up. This is a "cold" operation; when you use
		  <code>admin:save-configuration</code> to save the
		  configuration, it will automatically restart MarkLogic
		  Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    A new value for the number of cache partitions.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
      The server may use fewer or more partitions than the configured
      value to keep partition sizes between 1024 and 12288 megabytes.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-expanded-tree-cache-partitions($config, $groupid, 2)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-smtp-relay" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the SMTP relay setting for the group
		  in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new value for the SMTP relay host.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-smtp-relay($config, $groupid, "mail")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-smtp-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the SMTP timeout setting for the group
		  in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new SMTP response timeout (in seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-smtp-timeout($config, $groupid, 30)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-http-user-agent" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the HTTP User-Agent setting for
		  the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new value for the HTTP User-Agent.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-http-user-agent($config, $groupid, "MarkLogic")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-http-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the HTTP timeout setting for the group
		  in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new timeout setting (in seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-http-timeout($config, $groupid, 60)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-xdqp-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the XDQP timeout setting (the timeout
		  for communication between data nodes and evaluator nodes)
		  for the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new timeout setting (in seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-xdqp-timeout($config, $groupid, 20)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-host-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the host timeout setting (the timeout
		  for communication between hosts) for the group
		  in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new timeout setting (in seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-host-timeout($config, $groupid, 60)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-host-initial-timeout" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the host initial timeout setting
		  (the time the cluster will wait for a host to come online
		  during cluster startup) for the group
		  in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    The new timeout setting (in seconds).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-host-initial-timeout($config, $groupid, 300)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-retry-timeout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the number of seconds a request
      will retry before timing out.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new timeout setting (in seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-retry-timeout($config, $groupid, 180)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-module-cache-timeout" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function sets the number of seconds a
      module can be unused before being flushed from caches.
      Larger values can potentially cause more memory to be used
      for cached modules.
      Smaller values can potentially cause more time to be used
      reloading uncached modules.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        The new timeout setting (in seconds).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-module-cache-timeout($config, $groupid, 600)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-system-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
 	  <apidoc:summary>
		  This function changes the host system log level setting
		  for the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new log level (must be one of <code>finest</code>,
		    <code>finer</code>, <code>fine</code>,
		    <code>debug</code>, <code>config</code>,
		    <code>info</code>, <code>notice</code>,
		    <code>warning</code>, <code>error</code>,
		    <code>critical</code>,
		    <code>alert</code>, <code>emergency</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-system-log-level($config, $groupid, "debug")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-file-log-level" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
 	  <apidoc:summary>
		  This function changes the host file log level setting
		  for the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new log level (must be one of <code>finest</code>,
		    <code>finer</code>, <code>fine</code>,
		    <code>debug</code>, <code>config</code>,
		    <code>info</code>, <code>notice</code>,
		    <code>warning</code>, <code>error</code>,
		    <code>critical</code>,
		    <code>alert</code>, <code>emergency</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-file-log-level($config, $groupid, "debug")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-rotate-log-files" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
 	  <apidoc:summary>
		  This function changes the rotate log files setting
		  for the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new log level (must be one of <code>never</code>,
		    <code>daily</code>, <code>monday</code>,
		    <code>tuesday</code>, <code>wednesday</code>,
		    <code>thursday</code>, <code>friday</code>,
		    <code>saturday</code>, <code>sunday</code>,
		    <code>monthly</code>).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-rotate-log-files($config, $groupid, "wednesday")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-keep-log-files" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
 	  <apidoc:summary>
		  This function changes the keep log files setting
		  for the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:unsignedInt">
		    A number indicating the number of log
		    files to keep before deleting them.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-keep-log-files($config, $groupid, 20)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-failover-enable" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
 	  <apidoc:summary>
		  This function changes the failover enable setting
		  for the group in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The new setting (true to enable failover for the group,
		    false to disable it).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-failover-enable($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-trace-events-activated" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function changes the value for trace events in the
		  group configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:boolean">
		    The new trace event value (true for enabled, false for
		    disabled).
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-trace-events-activated($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-add-schema" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function adds a schema binding definition to the
		  existing schema binding definitions in the configuration
		  for the specified Group.  Schemas with a schema binding
		  definition are automatically imported into queries run
		  against any App Server in the group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="schemas" type="element(gr:schema)*">
		    A list of schema specification elements of the form:
		    <pre xml:space="preserve"><![CDATA[
<schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
  <namespace-uri>foo</namespace-uri>
  <schema-location>/foo.xsd</schema-location>
</schema>
]]></pre>
             Typically the result of an <code>admin:group-schema</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-add-schema($config, $groupid,
  <schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
     <namespace-uri>foo</namespace-uri>
     <schema-location>/foo.xsd</schema-location>
  </schema>)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-delete-schema" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function deletes a schema binding definition to the
		  existing schema binding definitions in the configuration
		  for the specified Group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="schemas" type="element(gr:schema)*">
		    A list of schema specification elements of the form:
		    <pre xml:space="preserve"><![CDATA[
<schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
  <namespace-uri>foo</namespace-uri>
  <schema-location>/foo.xsd</schema-location>
</schema>
]]></pre>
             Typically the result of an <code>admin:group-schema</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-delete-schema($config, $groupid,
  <schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://marklogic.com/xdmp/group">
     <namespace-uri>foo</namespace-uri>
     <schema-location>/foo.xsd</schema-location>
  </schema>)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-add-namespace" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  Add one or more namespaces to a Group configuration,
		  which will predefine the namespace(s) for all requests
		  evaluated against any App Server in the Group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="namespaces" type="element(gr:namespace)*">
		    A list of namespaces to add.  Typically the result
		    of an <code>admin:group-namespace</code> call. <p></p>
		    Each namespace specification has the following form:
		    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/xdmp/group">
    <prefix>myprefix</prefix>
    <namespace-uri>http://myuri/forthisprefix</namespace-uri>
  </namespace>
	 ]]></pre>
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-add-namespace($config, $groupid,
       <namespace xmlns="http://marklogic.com/xdmp/group">
         <prefix>myprefix</prefix>
         <namespace-uri>http://myuri/forthisprefix</namespace-uri>
        </namespace>)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-delete-namespace" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function deletes the specified namespaces from the
		  configuration for the specified group.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="namespaces" type="element(gr:namespace)*">
		    <p>
			    A list of namespaces to delete.  Each namespace
			    specification has the following form:
		    </p>
		    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/xdmp/group">
    <prefix>myprefix</prefix>
    <namespace-uri>http://myuri/forthisprefix</namespace-uri>
  </namespace>
	 ]]></pre>
         Typically the result of an <code>admin:group-namespace</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
     admin:group-delete-namespace($config, $groupid,
        admin:group-get-namespaces($config, $groupid))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-trace-event" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function constructs an event element for the
		  specified event name.
	  </apidoc:summary>
    <apidoc:params>
	    <apidoc:param name="event-id" type="xs:string">
		    The exact name of the trace event.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(gr:event)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  admin:group-trace-event("CPF on-state-enter")
  (: returns the event element for the CPF on state enter trace event :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-add-trace-event" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function adds trace events to the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="events" type="element(gr:event)*">
		    Zero or more event specifications, which you can
		    construct with the <code>admin:group-trace-event</code>
		    function.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-add-trace-event($config,
      admin:group-get-id($config, "Default"),
      admin:group-trace-event("CPF on-state-enter"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-delete-trace-event" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function deletes the specified trace events from
		  the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="events" type="element(gr:event)*">
		    Zero or more event specifications, which you can
		    construct with the <code>admin:group-trace-event</code>
		    function.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-delete-trace-event($config,
      admin:group-get-id($config, "Default"),
      admin:group-trace-event("CPF on-state-enter"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-delete" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function deletes one or more groups in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-ids" type="xs:unsignedLong*">
		    The IDs of the groups to be deleted.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:usage>
     Any group whose ID you pass into this function must not have any hosts
     belonging to it when the transaction begins, otherwise an exception is thrown.
     If you need to delete the group, remove its hosts in a separate transaction before
     calling this function.
    </apidoc:usage>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-delete($config, admin:group-get-id($config, "myOldGroup"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-create" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function creates a new group with the specified
		  name in the configuration.  The new group has the default
		  values.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-name" type="xs:string">
		    The name for the new group.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-create($config, "myNewGroup")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-copy" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function creates a new group specification with the
		  same settings as the group with the specified ID.  The new
		  group configuration will have the specified name.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="group-name" type="xs:string">
		    The name of the new group to create.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-copy($config, admin:group-get-id($config, "myOldGroup"),
                    "myNewGroup")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-enabled" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the value for the audit enabled
      setting from the specified group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-audit-enabled($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the failover enable value :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-audit-enabled" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the audit enabled setting
      for the group in the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:boolean">
        The new setting (true to enable auditing for the group,
        false to disable it).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-audit-enabled($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-rotate-audit-files" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the value for the rotate audit files
      setting from the specified group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-rotate-audit-files($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the rotate audit files value :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-keep-audit-files" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the value for the keep audit files
      setting from the specified group.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:group-get-keep-audit-files($config,
        admin:group-get-id($config, "myGroup"))
  (: returns the keep audit files value :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-rotate-audit-files" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the rotate audit files setting
      for the group in the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
        The new audit level (must be one of <code>never</code>,
        <code>daily</code>, <code>monday</code>,
        <code>tuesday</code>, <code>wednesday</code>,
        <code>thursday</code>, <code>friday</code>,
        <code>saturday</code>, <code>sunday</code>,
        <code>monthly</code>).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-rotate-audit-files($config, $groupid, "wednesday")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-set-keep-audit-files" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the keep audit files setting
      for the group in the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedInt">
        A number indicating the number of audit log
        files to keep before deleting them.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-keep-audit-files($config, $groupid, 20)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-enable-audit-event-type" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the audit event type(s) enabled setting
      for the audit configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="event-type" type="xs:string*">
        The event types to enable
        (must be one of:
          "amp-usage"
          "audit-configuration-change"
          "audit-shutdown"
          "audit-startup"
          "authentication-failure"
          "concurrent-request-denial"
          "configuration-change"
          "document-execute"
          "document-insert"
          "document-read"
          "document-update"
          "estimate"
          "eval"
          "exists"
          "lexicon-read"
          "no-permission"
          "no-privilege"
          "permission-change"
          "request-blackout-denial"
          "role-change-failure"
          "search"
          "security-access"
          "server-restart"
          "server-shutdown"
          "server-startup"
          "user-configuration-change"
          "user-role-addition"
          "user-role-removal"
        ).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-enable-audit-event-type($config, $groupid,
        ("no-permission","no-privilege"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-disable-audit-event-type" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function changes the audit event type(s) enabled setting
      for the audit configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="event-type" type="xs:string*">
        The event types to disable
        (must be one of:
          "amp-usage"
          "audit-configuration-change"
          "audit-shutdown"
          "audit-startup"
          "authentication-failure"
          "concurrent-request-denial"
          "configuration-change"
          "document-execute"
          "document-insert"
          "document-read"
          "document-update"
          "estimate"
          "eval"
          "exists"
          "lexicon-read"
          "no-permission"
          "no-privilege"
          "permission-change"
          "request-blackout-denial"
          "role-change-failure"
          "search"
          "security-access"
          "server-restart"
          "server-shutdown"
          "server-startup"
          "user-configuration-change"
          "user-role-addition"
          "user-role-removal"
        ).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-disable-audit-event-type($config, $groupid,
        ("no-permission","no-privilege"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-event-type-enabled" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the audit event type's enabled setting
      for the audit configuration.  A value of <code>true</code> is returned is the
      specified event type is set.  Otherwise <code>false</code> is returned.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="event-type" type="xs:string">
        The event type to check
        (must be one of:
          "amp-usage"
          "audit-configuration-change"
          "audit-shutdown"
          "audit-startup"
          "authentication-failure"
          "concurrent-request-denial"
          "configuration-change"
          "document-execute"
          "document-insert"
          "document-read"
          "document-update"
          "estimate"
          "eval"
          "exists"
          "lexicon-read"
          "no-permission"
          "no-privilege"
          "permission-change"
          "request-blackout-denial"
          "role-change-failure"
          "search"
          "security-access"
          "server-restart"
          "server-shutdown"
          "server-startup"
          "user-configuration-change"
          "user-role-addition"
          "user-role-removal"
        ).
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-get-audit-event-type-enabled($config, $groupid,
        "no-permission")
  (: returns the new enabled status for the No-Permission event-type :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-audit-user-restriction" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function restricts the audit configuration by excluding or
      including by user.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="restriction-type" type="xs:string">
        The restriction type
        (must be one of: "inclusion" or "exclusion").
      </apidoc:param>
      <apidoc:param name="users" type="xs:string*">
        The sequence of users affected by the restriction type.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-audit-user-restriction($config, $groupid,
        "exclusion",("admin1","admin2"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-excluded-users" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the users excluded from auditing. If auditing
      has a "inclusion" restriction, this function returns the empty sequence.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-excluded-users($config, $groupid)
  (: returns a sequence of users in the excluded user restriction:)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-included-users" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the users included from auditing. If auditing
      has a "exclusion" restriction, this function returns the empty sequence.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-included-users($config, $groupid)
  (: returns a sequence of users in the included user restriction:)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-audit-role-restriction" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function restricts the audit configuration by excluding or
      including by role.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="restriction-type" type="xs:string">
        The restriction type
        (must be one of: "inclusion" or "exclusion").
      </apidoc:param>
      <apidoc:param name="roles" type="xs:string*">
        The sequence of roles affected by the restriction type.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-audit-role-restriction($config, $groupid,
        "exclusion",("admin-role","developer-role"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-excluded-roles" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the roles excluded from auditing. If auditing
      has a "inclusion" restriction, this function returns the empty sequence.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-excluded-roles($config, $groupid)
  (: returns a sequence of roles in the excluded role restriction:)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-included-roles" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the roles included from auditing. If auditing
      has a "exclusion" restriction, this function returns the empty sequence.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-included-roles($config, $groupid)
  (: returns a sequence of roles in the included role restriction:)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-audit-uri-restriction" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function restricts the audit configuration by excluding or
      including by document uri(s).
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="restriction-type" type="xs:string">
        The restriction type
        (must be one of: "inclusion" or "exclusion").
      </apidoc:param>
      <apidoc:param name="uris" type="xs:string*">
        The sequence of document-uris affected by the restriction type.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-audit-uri-restriction($config, $groupid,
        "inclusion",("/important/foo.xml","/important/foo1.xml"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-excluded-uris" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the uris excluded from auditing. If auditing
      has a "inclusion" restriction, this function returns the empty sequence.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-excluded-uris($config, $groupid)
  (: returns a sequence of uris in the excluded uri restriction:)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-included-uris" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns the uris included from auditing. If auditing
      has a "exclusion" restriction, this function returns the empty sequence.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-included-uris($config, $groupid)
  (: returns a sequence of uris in the included uri restriction:)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-audit-outcome-restriction" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function restricts the audit configuration by auditing
      events only if they are "success" or "failure" events.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="outcome" type="xs:string*">
        The outcomes to audit
        (must be one of: "success" or "failure" or "both").
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-audit-outcome-restriction($config, $groupid,
        "failure")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-get-audit-outcome-restriction" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
    <apidoc:summary>
      This function returns whether auditing events are restricted by a
      success or failure outcome. Returns "success","failure", or "both"
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group.
        Typically, this is the result
        of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
    admin:group-get-audit-outcome-restriction($config, $groupid)
  (: returns either "success","failure", or "both":)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="mimetypes-add" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="mimetypes">
    <apidoc:summary>
      This function adds mimetypes to the configuration. This function always requires
      a server restart to take effect.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="mimetypes" type="element(mt:mimetype)*">
        A mimetype specification, typically the result of an
        <code>admin:mimetype</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/mimetypes</code></apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $mimetype := admin:mimetype("application/foo","foo bar","binary")
  return
  admin:mimetypes-add($config, $mimetype)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="mimetypes-delete" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="mimetypes">
    <apidoc:summary>
      This function deletes mimetypes from the configuration. This function always requires
      a server restart to take effect.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
      <apidoc:param name="mimetypes" type="element(mt:mimetype)*">
        A mimetype specification, typically the result of an
        <code>admin:mimetype</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/mimetypes</code></apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $mimetype := admin:mimetype("application/foo","foo bar","binary")
  return
  admin:mimetypes-delete($config, $mimetype)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="mimetypes-get" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="mimetypes">
    <apidoc:summary>
      This function returns all the mimetypes from the configuration.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(mt:mimetype)*</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:mimetypes-get($config)
  (: returns the mimetypes specifications for the cluster :)
  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="mimetype" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules" subcategory="mimetypes">
    <apidoc:summary>
      This function constructs a mimetype specification.
    </apidoc:summary>
    <apidoc:params>
      <apidoc:param name="name" type="xs:string">
        The name of the mimetype.
      </apidoc:param>
      <apidoc:param name="extensions" type="xs:string">
        The extension(s) for the mimetype.
      </apidoc:param>
      <apidoc:param name="format" type="xs:string">
        A valid format for the mimetype. Must be on of:
        <code>binary</code>,<code>xml</code>, or <code>text</code>.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(mt:mimetype)</apidoc:return>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
  return
  admin:mimetype("application/foo","foo bar","binary")
  (: returns the mimetype specification :)
  ]]></pre></apidoc:example>
  </apidoc:function>


  <apidoc:function name="database-daily-backup" lib="admin"
     category="Admin Library" bucket="XQuery Library Modules"
     subcategory="database">
  <apidoc:summary>This function constructs a daily scheduled database backup specification.</apidoc:summary>
  <apidoc:params>
     <apidoc:param name="backup-dir" type="xs:string">
        The directory to save the backup. </apidoc:param>
     <apidoc:param name="backup-period" type="xs:positiveInteger">
       The number of days to elapse between each backup.</apidoc:param>
     <apidoc:param name="start-time" type="xs:time">
	The time of day of the backup, in 24:00:00 notation.</apidoc:param>
     <apidoc:param name="max-backups" type="xs:unsignedLong">
        The maximum number of backups to keep. When you reach the specified
	maximum number of backups, the next backup will delete the oldest
       	backup.
	Specify 0 to keep an unlimited number of backups.
     </apidoc:param>
     <apidoc:param name="backup-security-db" type="xs:boolean">
	     Whether to backup the security database alongside the current
	     backup.
     </apidoc:param>
     <apidoc:param name="backup-schemas-db" type="xs:boolean">
	     Whether to backup the schemas database alongside the current
	     backup.
     </apidoc:param>
     <apidoc:param name="backup-triggers-db" type="xs:boolean">
	     Whether to backup the triggers database alongside the current
	     backup.
     </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	      If set to <code>false</code>, do not include the replicas in
	      the backup.  The default is <code>true</code>, which means to
	      include all replicas in the backup.
      </apidoc:param>
	  <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
		  Whether or not to enable journal archiving. Defaults to <code>false</code>.
	  </apidoc:param>
	  <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	 	  Path for where archived journals are stored. Defaults to the backup data directory.
	  </apidoc:param>
	  <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
	 	  Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
   admin:database-daily-backup("/backup-dir", 2,
      xs:time("19:45:00"),10,true(),true(),true())

  (: returns the daily database backup specification :)
   ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
   admin:database-daily-backup("/backup-dir", 2,
      xs:time("19:45:00"),10,true(),true(),true(),false(),true(),(),500)

  (: returns the daily database backup specification :)
   ]]></pre>
  </apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-daily-incremental-backup" lib="admin" category="Admin Library"
                   bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>This function constructs a daily scheduled incremental database backup specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
	The directory where the full backup is located.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
	The number of days to elapse between each incremental backup.</apidoc:param>
    <apidoc:param name="start-time" type="xs:time">
	The time of day to start the incremental backup, in 24:00:00 notation.</apidoc:param>
    <apidoc:param name="backup-security-db" type="xs:boolean">
	Whether to backup the security database alongside the current
	     incremental backup. </apidoc:param>
    <apidoc:param name="backup-schemas-db" type="xs:boolean">
	Whether to backup the schemas database alongside the current
	     incremental backup. </apidoc:param>
    <apidoc:param name="backup-triggers-db" type="xs:boolean">
	Whether to backup the triggers database alongside the current
	     incremental backup.</apidoc:param>
    <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	If set to <code>false</code>, do not include the replicas in
        the incremental backup.  The default is <code>true</code>, which means to
        include all replicas in the incremental backup.</apidoc:param>
    <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
       The directory in which to save the incremental backup.</apidoc:param>
    <apidoc:param name="purge-journal-archive" type="xs:boolean?" optional="true">
        Whether or not to purge journal archive after incremental backup is performed.
        Defaults to <code>false</code></apidoc:param>
    <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
	Whether or not to enable journal archiving. Defaults to <code>false</code>.</apidoc:param>
    <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	Path for where archived journals are stored. Defaults to the backup data directory.</apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
	Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

 admin:database-daily-incremental-backup("/backup-dir", 2,
        xs:time("09:45:00"),true(),true(),true())

    ]]></pre>
  </apidoc:example>
</apidoc:function>

  <apidoc:function name="database-hourly-backup" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="database">
  <apidoc:summary>This function constructs an hourly scheduled database backup specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
       The directory to save the backup.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
       The number of hours to elapse between each backup. </apidoc:param>
    <apidoc:param name="start-minute" type="xs:nonNegativeInteger">
       The number of minutes after the hour to start the backup. Note that this
       setting does not add to the backup period value.</apidoc:param>
    <apidoc:param name="max-backups" type="xs:unsignedLong">
       The maximum number of backups to keep. When you reach the specified
       maximum number of backups, the next backup will delete the oldest
       backup.
       Specify 0 to keep an unlimited number of backups.
     </apidoc:param>
     <apidoc:param name="backup-security-db" type="xs:boolean">
	     Whether to backup the security database alongside the current
	     backup.
     </apidoc:param>
     <apidoc:param name="backup-schemas-db" type="xs:boolean">
	     Whether to backup the schemas database alongside the current
	     backup.
     </apidoc:param>
     <apidoc:param name="backup-triggers-db" type="xs:boolean">
	     Whether to backup the triggers database alongside the current
	     backup.
      </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	      If set to <code>false</code>, do not include the replicas in
	      the backup.  The default is <code>true</code>, which means to
	      include all replicas in the backup.
      </apidoc:param>
	  <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
		  Whether or not to enable journal archiving. Defaults to <code>false</code>.
	  </apidoc:param>
	  <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	 	  Path for where archived journals are stored. Defaults to the backup data directory.
	  </apidoc:param>
	  <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
	 	  Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
    admin:database-hourly-backup("/backup-dir", 2,
      30, 10, true(), true(), true())

  (: Returns the hourly database backup specification. For example, if the current
     time is 2:15pm, the backup will run at 4:30pm, 6:30pm, 8:30pm, and so on. :)
   ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
    admin:database-hourly-backup("/backup-dir", 2,
      30, 10, true(), true(), true(),false(),true(),(),500)

  (: Returns the hourly database backup specification. For example, if the current
     time is 2:15pm, the backup will run at 4:30pm, 6:30pm, 8:30pm, and so on. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-hourly-incremental-backup" lib="admin" category="Admin Library"
                 bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>This function constructs an hourly scheduled incremental database backup specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
	The directory where the full backup is located.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
	The number of hours to elapse between each incremental backup. </apidoc:param>
    <apidoc:param name="start-minute" type="xs:nonNegativeInteger">
	The number of minutes after the hour to start the incremental backup. Note that this
       setting does not add to the incremental backup period value.</apidoc:param>
    <apidoc:param name="backup-security-db" type="xs:boolean">
	Whether to backup the security database alongside the current
	    incremental backup.</apidoc:param>
    <apidoc:param name="backup-schemas-db" type="xs:boolean">
	Whether to backup the schemas database alongside the current
	    incremental backup.</apidoc:param>
    <apidoc:param name="backup-triggers-db" type="xs:boolean">
	Whether to backup the triggers database alongside the current
	    incremental backup.  </apidoc:param>
    <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
        If set to <code>false</code>, do not include the replicas in
        the incremental backup. The default is <code>true</code>, which means to
        include all replicas in the backup.  </apidoc:param>
    <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
        The directory in which to save the incremental backup.</apidoc:param>
    <apidoc:param name="purge-journal-archive" type="xs:boolean?" optional="true">
        Whether or not to purge journal archive after incremental backup is performed.
        Defaults to <code>false</code> </apidoc:param>
    <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
        Whether or not to enable journal archiving. Defaults to <code>false</code>. </apidoc:param>
    <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
        Path for where archived journals are stored. Defaults to the backup data directory. </apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
        Maximum difference in seconds that the archived journal can lag behind its forest's active journal.
        Defaults to 900.  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-hourly-incremental-backup("/backup-dir", 2, 5,
        true(),true(),true())

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-minutely-backup" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function constructs a scheduled database backup specification on a number-of-minutes basis.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
       The directory to save the backup.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
       The number of minutes to elapse between each backup.</apidoc:param>
    <apidoc:param name="max-backups" type="xs:unsignedLong">
       The maximum number of backups to keep. When you reach the specified
       maximum number of backups, the next backup will delete the oldest
       backup.
       Specify 0 to keep an unlimited number of backups.
     </apidoc:param>
     <apidoc:param name="backup-security-db" type="xs:boolean">
	     Whether to backup the security database alongside the current
	     backup.
     </apidoc:param>
     <apidoc:param name="backup-schemas-db" type="xs:boolean">
	     Whether to backup the schemas database alongside the current
	     backup.
     </apidoc:param>
     <apidoc:param name="backup-triggers-db" type="xs:boolean">
	     Whether to backup the triggers database alongside the current
	     backup.
      </apidoc:param>
      <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	      If set to <code>false</code>, do not include the replicas in
	      the backup.  The default is <code>true</code>, which means to
	      include all replicas in the backup.
      </apidoc:param>
	  <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
		  Whether or not to enable journal archiving. Defaults to <code>false</code>.
	  </apidoc:param>
	  <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	 	  Path for where archived journals are stored. Defaults to the backup data directory.
	  </apidoc:param>
	  <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
	 	  Maximum difference in seconds that the archived journal can lag behind its forest's active journal. Defaults to 900.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
    admin:database-minutely-backup("/backup-dir", 45,
      10, true(), true(), true())

  (: Returns the minutely database backup specification. :)
   ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
    admin:database-minutely-backup("/backup-dir", 45,
      10, true(), true(), true(),false(),true(),(),500)

  (: Returns the minutely database backup specification. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-minutely-incremental-backup" lib="admin" category="Admin Library"
                 bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>This function constructs a scheduled incremental database backup specification based on a number of minutes.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
	The directory where the full backup is located.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
	The number of minutes to elapse between each incremental backup.</apidoc:param>
    <apidoc:param name="backup-security-db" type="xs:boolean">
	Whether to backup the security database alongside the current
	  incremental backup. </apidoc:param>
    <apidoc:param name="backup-schemas-db" type="xs:boolean">
	Whether to backup the schemas database alongside the current
	   incremental backup.</apidoc:param>
    <apidoc:param name="backup-triggers-db" type="xs:boolean">
	Whether to backup the triggers database alongside the current
	  incremental backup.</apidoc:param>
    <apidoc:param name="include-replicas" type="xs:boolean" optional="true">
	If set to <code>false</code>, do not include the replicas in
	      the incremental backup. The default is <code>true</code>, which means to
	      include all replicas in the incremental backup.</apidoc:param>
    <apidoc:param name="incremental-dir" type="xs:string?" optional="true">
        The directory in which to save the incremental backup. </apidoc:param>
    <apidoc:param name="purge-journal-archive" type="xs:boolean?" optional="true">
        Whether or not to purge journal archive after incremental backup is performed.
        Defaults to <code>false</code></apidoc:param>
    <apidoc:param name="journal-archiving" type="xs:boolean?" optional="true">
	Whether or not to enable journal archiving. Defaults to <code>false</code>. </apidoc:param>
    <apidoc:param name="journal-archive-path" type="xs:string?" optional="true">
	Path for where archived journals are stored. Defaults to the backup data directory. </apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedLong?" optional="true">
        Maximum difference in seconds that the archived journal can lag behind its forest's active journal.
        Defaults to 900.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

 admin:database-minutely-incremental-backup("/backup-dir",10,true(),true(),true())


    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-hourly-backup" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
  <apidoc:summary>This function constructs a hourly scheduled forest backup specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
       The directory to save the backup.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
       The number of hours to elapse between each backup</apidoc:param>
    <apidoc:param name="start-minute" type="xs:nonNegativeInteger">
       The number of minutes after the hour to start the backup. Note that this
       setting does not add to the backup period value.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:forest-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
    admin:forest-hourly-backup("/backup-dir", 2, 30)

  (: returns the hourly forest backup specification. For example, if the
     current time is 2:15pm, the backup will run at 4:30pm, 6:30pm, 8:30pm,
     and so on. :)
   ]]></pre>
  </apidoc:example>
  </apidoc:function>
  <apidoc:function name="forest-minutely-backup" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="forest">
  <apidoc:summary>This function constructs a scheduled forest backup on a number-of-minutes basis.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">The directory to save the backup.</apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
       The number of minutes to elapse between each backup</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:forest-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
      admin:forest-minutely-backup("/backup-dir", 45)

  (: returns the minutely forest backup specification. :)
   ]]></pre>
  </apidoc:example>
  </apidoc:function>
  <apidoc:function name="group-get-scheduled-tasks" lib="admin"
     category="Admin Library" bucket="XQuery Library Modules"
     subcategory="Scheduler">
  <apidoc:summary>This function returns all of the tasks scheduled for the specified
  group. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group on which the scheduled tasks are configured.
        Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
    admin:group-get-scheduled-tasks($config,
      admin:group-get-id($config, "Default"))

   =>

  <scheduled-task xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns="http://marklogic.com/xdmp/group">
    <task-path>/Scheduler_test.xqy</task-path>
    <task-root>/Docs</task-root>
    <task-type>minutely</task-type>
    <task-period>15</task-period>
	<task-days>
    </task-days>
    <task-timestamp>2009-02-27T12:16:06.152-08:00</task-timestamp>
    <task-database>3439178527237237454</task-database>
    <task-modules>0</task-modules>
    <task-user>10677693687367813363</task-user>
  </scheduled-task>
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-add-scheduled-task" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="Scheduler">
  <apidoc:summary>This function adds one or more scheduled tasks to the specified group.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group on which the scheduled tasks are configured.
        Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
    <apidoc:param name="scheduled-tasks" type="element(gr:scheduled-task)*">
        One or more scheduled tasks, such as those created by the task-create
	functions. </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  let $task := admin:group-hourly-scheduled-task(
      "/Scheduler_test.xqy",
      "/Docs",
      2,
      30,
      xdmp:database("Documents"),
      0,
      xdmp:user("Jim"),
      0)

  let $addTask := admin:group-add-scheduled-task($config,
      admin:group-get-id($config, "Default"), $task)

  return
      admin:save-configuration($addTask)

  (: Creates an hourly scheduled task and adds it to the "Default" group.
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes.:)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-delete-scheduled-task" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="Scheduler">
  <apidoc:summary>This function deletes one or more scheduled tasks from the specified group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
        The ID of the group on which the scheduled tasks are configured.
        Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
    <apidoc:param name="scheduled-tasks" type="element(gr:scheduled-task)*">
        One or more scheduled tasks.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config, "Default")
  let $tasks := admin:group-get-scheduled-tasks($config, $group)

  return
   admin:group-delete-scheduled-task($config, $group, $tasks)

  (: Returns a configuration element with the scheduled tasks in the
      "Default" group deleted -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-one-time-scheduled-task" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="Scheduler">
  <apidoc:summary>This function constructs a task to be invoked once, at a specific calendar day and time.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="task-path" type="xs:string">
	The name of the module to be invoked.  The task path must begin with a forward
	slash (/) and cannot contain a question mark '?', colon ':' or pound '#' character.
    </apidoc:param>
    <apidoc:param name="task-root" type="xs:string">
	 The root directory (files system) or URI root (database) that contains the module. For
	 example, if the module is located in the filesystem under MarkLogic/Docs, specify Docs.
    </apidoc:param>
    <apidoc:param name="task-start" type="xs:dateTime">The date and time on which the task is to start.
    </apidoc:param>
    <apidoc:param name="task-database" type="xs:unsignedLong">The ID of the database on which the module
	 is to be invoked.</apidoc:param>
    <apidoc:param name="task-modules" type="xs:unsignedLong">The ID of the modules database.
	For example, xdmp:database("Modules"). To specify the filesystem, use 0.
    </apidoc:param>
    <apidoc:param name="task-user" type="xs:unsignedLong">The ID of the user with permission to
        invoke the module.  For example, xdmp:user("Jim"). </apidoc:param>
    <apidoc:param name="task-host" type="xs:unsignedLong?">The ID of the host on which to
	invoke the module. Leave empty, (), to specify all hosts.</apidoc:param>
    <apidoc:param name="task-priority" type="xs:string?" optional="true">The priority of the task.
        Either "normal" or "higher".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
     admin:group-one-time-scheduled-task(
        "/Scheduler_test.xqy",
        "/Docs",
        xs:dateTime("2009-03-29T14:42:52"),
        xdmp:database("Documents"),
        xdmp:database("Documents"),
        xdmp:user("Jim"),
	admin:host-get-id($config, xdmp:host-name()),
        "normal")

    (: returns a one-time scheduled task. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-monthly-scheduled-task" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="Scheduler">
  <apidoc:summary>This function constructs a task to be invoked at monthly intervals. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="task-path" type="xs:string">
	The name of the module to be invoked.  The task path must begin with a forward
	slash (/) and cannot contain a question mark '?', colon ':' or pound '#' character.
    </apidoc:param>
    <apidoc:param name="task-root" type="xs:string">
	 The root directory (files system) or URI root (database) that contains the module. For
	 example, if the module is located in the filesystem under MarkLogic/Docs, specify Docs.
    </apidoc:param>
    <apidoc:param name="task-period" type="xs:positiveInteger">The number of months to elapse
	 between each invocation of the module. </apidoc:param>
    <apidoc:param name="task-month-day" type="xs:unsignedLong">The day of the month to invoke the module.
    </apidoc:param>
    <apidoc:param name="task-start-time" type="xs:time">The time of day (in 24:00 notation) to
	 invoke the module.</apidoc:param>
    <apidoc:param name="task-database" type="xs:unsignedLong">The ID of the database on which the module
	 is to be invoked.</apidoc:param>
    <apidoc:param name="task-modules" type="xs:unsignedLong">The ID of the modules database.
	For example, xdmp:database("Modules"). To specify the filesystem, use 0.
    </apidoc:param>
    <apidoc:param name="task-user" type="xs:unsignedLong">The ID of the user with permission to
        invoke the module.  For example, xdmp:user("Jim"). </apidoc:param>
    <apidoc:param name="task-host" type="xs:unsignedLong?">The ID of the host on which to
	invoke the module. Leave empty, (), to specify all hosts.</apidoc:param>
    <apidoc:param name="task-priority" type="xs:string?" optional="true">The priority of the task.
        Either "normal" or "higher".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
     admin:group-monthly-scheduled-task(
        "/Scheduler_test.xqy",
        "/Docs",
	2,
	3,
	xs:time("14:42:52"),
        xdmp:database("Documents"),
        0,
        xdmp:user("Jim"),
	0,
        "normal")

     (: returns a monthly scheduled task. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-weekly-scheduled-task" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="Scheduler">
  <apidoc:summary>This function constructs a task to be invoked at weekly intervals.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="task-path" type="xs:string">
	The name of the module to be invoked.  The task path must begin with a forward
	slash (/) and cannot contain a question mark '?', colon ':' or pound '#' character.
    </apidoc:param>
    <apidoc:param name="task-root" type="xs:string">
	 The root directory (files system) or URI root (database) that contains the module. For
	 example, if the module is located in the filesystem under MarkLogic/Docs, specify Docs.
    </apidoc:param>
    <apidoc:param name="task-period" type="xs:positiveInteger">The number of weeks to elapse
	 between each invocation of the module. </apidoc:param>
    <apidoc:param name="task-days" type="xs:string+">One or more days on the specified week to
	 invoke the module</apidoc:param>
    <apidoc:param name="task-start-time" type="xs:time">The time of day (in 24:00 notation) to
	 invoke the module.</apidoc:param>
    <apidoc:param name="task-database" type="xs:unsignedLong">The ID of the database on which the module
	 is to be invoked.</apidoc:param>
    <apidoc:param name="task-modules" type="xs:unsignedLong">The ID of the modules database.
	For example, xdmp:database("Modules"). To specify the filesystem, use 0.
    </apidoc:param>
    <apidoc:param name="task-user" type="xs:unsignedLong">The ID of the user with permission to
        invoke the module.  For example, xdmp:user("Jim"). </apidoc:param>
    <apidoc:param name="task-host" type="xs:unsignedLong?">The ID of the host on which to
	invoke the module. Leave empty, (), to specify all hosts.</apidoc:param>
    <apidoc:param name="task-priority" type="xs:string?" optional="true">The priority of the task.
        Either "normal" or "higher".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
     admin:group-weekly-scheduled-task(
        "/Scheduler_test.xqy",
        "/Docs",
        2,
        ("Monday", "Wednesday"),
        xs:time("14:42:52"),
        xdmp:database("Documents"),
        xdmp:database("Documents"),
        xdmp:user("Jim"),
        admin:host-get-id($config, xdmp:host-name()),
        "normal")

     (: returns a weekly scheduled task. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-daily-scheduled-task" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="Scheduler">
  <apidoc:summary>This function constructs a task to be invoked at daily intervals.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="task-path" type="xs:string">
	The name of the module to be invoked.  The task path must begin with a forward
	slash (/) and cannot contain a question mark '?', colon ':' or pound '#' character.
    </apidoc:param>
    <apidoc:param name="task-root" type="xs:string">
	 The root directory (files system) or URI root (database) that contains the module. For
	 example, if the module is located in the filesystem under MarkLogic/Docs, specify Docs.
    </apidoc:param>
    <apidoc:param name="task-period" type="xs:positiveInteger">The number of days to elapse
	 between each invocation of the module. </apidoc:param>
    <apidoc:param name="task-start-time" type="xs:time">The time of day (in 24:00 notation) to
	 invoke the module.</apidoc:param>
    <apidoc:param name="task-database" type="xs:unsignedLong">The ID of the database on which the module
	 is to be invoked.</apidoc:param>
    <apidoc:param name="task-modules" type="xs:unsignedLong">The ID of the modules database.
	For example, xdmp:database("Modules"). To specify the filesystem, use 0.
    </apidoc:param>
    <apidoc:param name="task-user" type="xs:unsignedLong">The ID of the user with permission to
        invoke the module.  For example, xdmp:user("Jim"). </apidoc:param>
    <apidoc:param name="task-host" type="xs:unsignedLong?">The ID of the host on which to
	invoke the module.  Leave empty, (), to specify all hosts.</apidoc:param>
    <apidoc:param name="task-priority" type="xs:string?" optional="true">The priority of the task.
        Either "normal" or "higher".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
     admin:group-daily-scheduled-task(
        "/Scheduler_test.xqy",
        "/Docs",
        2,
        xs:time("09:30:00"),
        xdmp:database("Documents"),
        xdmp:database("Modules"),
        xdmp:user("Jim"),
        0,
        "normal")

  (: returns a daily scheduled task. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-hourly-scheduled-task" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="Scheduler">
  <apidoc:summary>This function constructs a task to be invoked at hourly intervals.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="task-path" type="xs:string">
	The name of the module to be invoked.  The task path must begin with a forward
	slash (/) and cannot contain a question mark '?', colon ':' or pound '#' character.
    </apidoc:param>
    <apidoc:param name="task-root" type="xs:string">
	 The root directory (filesystem) or URI root (database) that contains the module. For
	 example, if the module is located in the filesystem under MarkLogic/Docs, specify Docs.
    </apidoc:param>
    <apidoc:param name="task-period" type="xs:positiveInteger">The number of hours to elapse
	 between each invocation of the module. </apidoc:param>
    <apidoc:param name="task-minute" type="xs:nonNegativeInteger">
       The number of minutes after the hour to invoke the module.  This value must be 59 or less.
       Note that this setting does not add to the task-period value.</apidoc:param>
    <apidoc:param name="task-database" type="xs:unsignedLong">The ID of the database on which the module
	 is to be invoked.</apidoc:param>
    <apidoc:param name="task-modules" type="xs:unsignedLong">The ID of the modules database.
	For example, xdmp:database("Modules"). To specify the filesystem, use 0.
    </apidoc:param>
    <apidoc:param name="task-user" type="xs:unsignedLong">The ID of the user with permission to
        invoke the module.  For example, xdmp:user("Jim"). </apidoc:param>
    <apidoc:param name="task-host" type="xs:unsignedLong?">The ID of the host on which to
	invoke the module. Leave empty, (), to specify all hosts.</apidoc:param>
    <apidoc:param name="task-priority" type="xs:string?" optional="true">The priority of the task.
        Either "normal" or "higher".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
     admin:group-hourly-scheduled-task(
         "/Scheduler_test.xqy",
         "/Docs",
         2,
         30,
         xdmp:database("Documents"),
         0,
         xdmp:user("Jim"),
         0,
        "normal")

    (: returns an hourly scheduled task. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-minutely-scheduled-task" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="Scheduler">
  <apidoc:summary>This function constructs a task to be invoked at intervals defined in terms of minutes.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="task-path" type="xs:string">
	The name of the module to be invoked.  The task path must begin with a forward
	slash (/) and cannot contain a question mark '?', colon ':' or pound '#' character.
    </apidoc:param>
    <apidoc:param name="task-root" type="xs:string">
	 The root directory (filesystem) or URI root (database) that contains the module. For
	 example, if the module is located in the filesystem under MarkLogic/Docs, specify Docs.
    </apidoc:param>
    <apidoc:param name="task-period" type="xs:positiveInteger">The number of minutes to elapse
	 between each invocation of the module. </apidoc:param>
    <apidoc:param name="task-database" type="xs:unsignedLong">The ID of the database on which the module
	 is to be invoked.</apidoc:param>
    <apidoc:param name="task-modules" type="xs:unsignedLong">The ID of the modules database.
	For example, xdmp:database("Modules"). To specify the filesystem, use 0.
    </apidoc:param>
    <apidoc:param name="task-user" type="xs:unsignedLong">The ID of the user with permission to
        invoke the module.  For example, xdmp:user("Jim"). </apidoc:param>
    <apidoc:param name="task-host" type="xs:unsignedLong?">The ID of the host on which to
	invoke the module. Leave empty, (), to specify all hosts.</apidoc:param>
    <apidoc:param name="task-priority" type="xs:string?" optional="true">The priority of the task.
        Either "normal" or "higher".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
     admin:group-minutely-scheduled-task(
        "/Scheduler_test.xqy",
        "/Docs",
        45,
        xdmp:database("Documents"),
        0,
        xdmp:user("Jim"),
        0,
        "normal")

    (: returns a minutely scheduled task. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-certificate-template" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
	This function returns the id of the SSL certificate template used
	by the specified App Server.  If no template is set for the App Server,
	0 is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
	 The ID of the App Server. Typically, this is the result
         of an <code>admin:appserver-get-id</code> call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
     admin:appserver-get-ssl-certificate-template($config, $appServer)

    (: returns the id of the SSL certificate template. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-ciphers" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
	This function returns the SSL ciphers set for the App Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
	The ID of the App Server. Typically, this is the result
    of an <code>admin:appserver-get-id</code> call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
     admin:appserver-get-ssl-ciphers($config, $appServer)

  (: returns the SSL ciphers set for the App Server. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-hostname" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
     This function returns the SSL hostname for the specified App
     Server. If no hostname is set, nothing is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
     admin:appserver-get-ssl-hostname($config, $appServer)

  (: returns the SSL hostname for the App Server, if set. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-certificate-template" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
	<apidoc:summary>
	This function sets an SSL certificate template for the
	specified App Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedLong">
        The ID of the certificate template.  This would typically be the result of a
        <code>pki:insert-template(pki:create-template())</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace pki = "http://marklogic.com/xdmp/pki"
      at "/MarkLogic/pki.xqy";
  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "myAppServer")
  let $tid := pki:template-get-id(pki:get-template-by-name("mycert"))

  return
     admin:appserver-set-ssl-certificate-template(
                          $config,
                          $appServer,
                          $tid)

  (: Sets the certificate template, "mycert," for the "myAppServer" App Server.
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-ciphers" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
     This function sets SSL ciphers for the specified App Server.  This is the standard
     cipher specification string for OpenSSL.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
        The SSL ciphers to set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
     admin:appserver-set-ssl-ciphers($config, $appServer, "All")

  (: Sets the ciphers for the "Docs" App Server to "All".
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes.:)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-hostname" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
     This function sets an SSL hostname for the specified App Server.
     <p>
     The SSL hostname should only be set when a proxy or load
     balancer is used to represent multiple servers. In this case, you can
     specify an SSL hostname with this function and all instances of the
     application server will identify themselves as that host.</p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
        The SSL hostname.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
     admin:appserver-set-ssl-hostname($config, $appServer, "AllHost")

  (: Sets the SSL hostname for the "Docs" App Server to "AllHost".
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes.  :)
   ]]></pre>
  </apidoc:example>
 </apidoc:function>
 <apidoc:function name="appserver-get-ssl-allow-sslv3" lib="admin"
	 category="Admin Library" bucket="XQuery Library Modules"
	 subcategory="appserver">
  <apidoc:summary>This function returns true if the SSL v3 protocol is enabled for the specified App
  Server, or false if SSL v3 is disabled. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
      admin:appserver-get-ssl-allow-sslv3($config, $appServer)

   (: Returns true if SSL v3 is enabled for the "Docs" App Server.  Otherwise false. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-allow-tls" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="appserver" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns true if the TLS protocol is enabled for the specified App
  Server, or false if TLS is disabled.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
      admin:appserver-get-ssl-allow-tls($config, $appServer)

   (: Returns true if TLS is enabled for the "Docs" App Server.  Otherwise false. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-disabled-protocols" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="appserver" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the disabled protocols for the specified App Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
      admin:appserver-get-ssl-disabled-protocols($config, $appServer)

   (: Returns the disabled protocols for the "Docs" App Server. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-client-certificate-authorities" lib="admin"
category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver"
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the id(s) of the client certificate authority for the
  specified App Server.  If no client certificate authority is set, this function returns
  an empty sequence. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
     admin:appserver-get-ssl-client-certificate-authorities($config, $appServer)

  (: Returns the id(s) of the client certificate authority for the "Docs" App Server, if set.
  Otherwise returns an empty sequence. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-allow-sslv3" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="appserver" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function enables or disables the SSL v3 protocol for the specified App
  Server. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
      admin:appserver-set-ssl-allow-sslv3($config, $appServer, fn:false())

   (: Disables SSL v3 for the "Docs" App Server. Use admin:save-configuration
      to save the changes to the configuration or pass the configuration to other
      Admin API functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-allow-tls" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="appserver" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function enables or disables the TLS protocol for the specified App
  Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
       admin:appserver-set-ssl-allow-tls($config, $appServer, fn:true())

   (: Enables TLS for the "Docs" App Server. Use admin:save-configuration to
      save the changes to the configuration or pass the configuration to other
      Admin API functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-disabled-protocols" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="appserver" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function set the disabled protocols for the specified App
  Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string*">
        The disabled protocols to set: "SSLv3", "TLSv1", "TLSv1_1" or "TLSv1_2".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
       admin:appserver-set-ssl-disabled-protocols($config, $appServer, ("SSLv3","TLSv1"))

   (: Enables TLS for the "Docs" App Server. Use admin:save-configuration to
      save the changes to the configuration or pass the configuration to other
      Admin API functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-client-certificate-authorities" lib="admin"
category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver"
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
<apidoc:summary>This function sets one or more client certificate authorities that sign
      client certificates for the specified App Server.  This function is typically used along with
      the <code>pki:insert-trusted-certificates</code> and <code>pki:get-trusted-certificate-ids</code>
      functions to import trusted Certificate Authorities for client certificates.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedLong*">
        One or more ids for trusted certificates generated by the certificate authority to be set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace pki = "http://marklogic.com/xdmp/pki"
        at "/MarkLogic/pki.xqy";
  import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

  declare namespace x509 = "http://marklogic.com/xdmp/x509";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  let $appservid := admin:appserver-get-id($config, $groupid, "myAppServer")

  let $cert-id :=
    for $cert in pki:get-certificates(pki:get-trusted-certificate-ids())
      where $cert/x509:cert/x509:subject/x509:commonName eq "Acme Certificate Authority" and
            $cert/x509:cert/x509:subject/x509:organizationName eq "Acme Corporation"
    return
      fn:data($cert/pki:certificate-id)

  return
    admin:appserver-set-ssl-client-certificate-authorities(
	$config,
        $appservid,
	$cert-id)

  (: Locates the trusted certificates from the Certificate Authority, "Acme
     Corporation," with the common name of "Acme Certificate Authority" and
     adds the Certificate Authority to the list of Client Certificate Authorities
     for the App Server, "myAppServer." Use admin:save-configuration to save the
     changes to the configuration or pass the configuration to other Admin API
     functions to make other changes.:)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-daily-backup" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
  <apidoc:summary>This function constructs a daily scheduled forest backup. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="backup-dir" type="xs:string">
    The directory to save the backup.
    </apidoc:param>
    <apidoc:param name="backup-period" type="xs:positiveInteger">
    The number of days to elapse between each backup.
    </apidoc:param>
    <apidoc:param name="start-time" type="xs:time">
    The time of day of the backup, in 24:00:00 notation.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:forest-backup)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:forest-daily-backup("/backup-dir", 2, xs:time("19:45:00"))

  (: returns a daily forest backup specification. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-set-tf-normalization" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function specifies whether to use the default term-frequency
  normalization (<code>scaled-log</code>), which scales the term frequency based on the size of
  the document, or to use the <code>unscaled-log</code>, which uses term frequency as a function
  of the actual term frequency in a document, regardless of the document size.
  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="value" type="xs:string">
	      The new term-frequency normalization setting.  Must be one of:
	      <code>scaled-log</code> or <code>unscaled-log</code>.
      </apidoc:param>
    </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  let $db := admin:database-get-id($config, "myDatabase")

  return   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
      admin:database-set-tf-normalization($config, $db, "unscaled-log")

  (: Sets the term-frequency normalization setting to "unscaled-log" for the
     database, "myDatabase."  Use admin:save-configuration to save the changes
     to the configuration or pass the configuration to other Admin API functions
     to make other changes. :)
        ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-get-tf-normalization" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function returns the current term-frequency
  normalization setting for the database.  The returned value is either
  (<code>scaled-log</code>), which means to scale the term frequency based on the size of
  the document, or <code>unscaled-log</code>, which means to use term frequency as a function
  of the actual term frequency in a document, regardless of the document size.

</apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
    </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  let $db := admin:database-get-id($config, "myDatabase")

  return
      admin:database-get-tf-normalization($config, $db)

  (: Returns the term-frequency normalization setting for the database, "myDatabase." :)
        ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-xdqp-ssl-enabled" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function returns <code>true</code> if SSL is enabled for the
  group.  Otherwise, <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
     admin:group-get-xdqp-ssl-enabled($config, $group)

  (: Returns 'true' if SSL is enabled for the Default group.  Otherwise, 'false'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-xdqp-ssl-allow-sslv3" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function returns <code>true</code> if the SSL v3 protocol
  is enabled for the group.  Otherwise, <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
     admin:group-get-xdqp-ssl-allow-sslv3($config, $group)

  (: Returns 'true' if the SSL v3 protocol is enabled for the Default group.
     Otherwise, 'false'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-xdqp-ssl-allow-tls" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function returns <code>true</code> if the TLS protocol
  is enabled for the group.  Otherwise, <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
     admin:group-get-xdqp-ssl-allow-tls($config, $group)

  (: Returns 'true' if the TLS protocol is enabled for the Default group.
     Otherwise, 'false'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-xdqp-ssl-disabled-protocols" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function returns the disabled protocols for the group.</apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
     admin:group-get-xdqp-ssl-disabled-protocols($config, $group)

  (: Returns the disabled protocols for the Default group. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-xdqp-ssl-ciphers" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function returns the SSL ciphers set for the group.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
     admin:group-get-xdqp-ssl-ciphers($config, $group)

  (: Returns the SSL cipher settings for the Default group. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-xdqp-ssl-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function enables or disables SSL for the group.</apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
      Specify <code>true</code> to enable SSL for the group or <code>false</code>
      to disable SSL.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
        admin:group-set-xdqp-ssl-enabled($config, $group, fn:false())

  (: Disables SSL on the Default group. Use admin:save-configuration to save
     the changes to the configuration or pass the configuration to other Admin
     API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-xdqp-ssl-allow-sslv3" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function enables or disables the SSL v3 protocol for the
  specified group. </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
     Specify <code>true</code> to enable the SSL v3 protocol for the group or
     <code>false</code> to disable the SSL v3 protocol.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
        admin:group-set-xdqp-ssl-allow-sslv3($config, $group, fn:false())

  (: Disables the SSL v3 protocol on the Default group. Use admin:save-configuration to save
     the changes to the configuration or pass the configuration to other Admin
     API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-xdqp-ssl-allow-tls" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function enables or disables the TLS protocol for the specified
  group. </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    Specify <code>true</code> to enable the TLS protocol for the group or
     <code>false</code> to disable the TLS protocol.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
        admin:group-set-xdqp-ssl-allow-tls($config, $group, fn:true())

  (: Enables the TLS protocol on the Default group. Use admin:save-configuration to save
     the changes to the configuration or pass the configuration to other Admin
     API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-xdqp-ssl-disabled-protocols" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function sets the disabled protocols for the specified group. </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
    <apidoc:param name="value" type="xs:string*">
     The disabled protocols to set: "SSLv3", "TLSv1", "TLSv1_1" or "TLSv1_2".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
        admin:group-set-xdqp-ssl-disabled-protocols($config, $group, ("SSLv3","TLSv1"))

  (: Enables the TLS protocol on the Default group. Use admin:save-configuration to save
     the changes to the configuration or pass the configuration to other Admin
     API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-xdqp-ssl-ciphers" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>This function sets SSL ciphers for the specified group. This is the
  standard cipher specification string for OpenSSL. </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
   <apidoc:param name="group-id" type="xs:unsignedLong">
     The name of the group.
   </apidoc:param>
    <apidoc:param name="value" type="xs:string">
    The SSL ciphers to set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group := admin:group-get-id($config,"Default")

  return
        admin:group-set-xdqp-ssl-ciphers($config, $group, "All")

  (: Sets the ciphers for the Default group to "All".  Use admin:save-configuration to save
     the changes to the configuration or pass the configuration to other Admin
     API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-ssl-require-client-certificate" lib="admin" category="Admin Library"
	bucket="XQuery Library Modules" subcategory="appserver">
  <apidoc:summary>This function returns true if a client certificate is required for the specified
   App Server.  Otherwise, it returns false.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as
    returned from one of the Admin module functions. </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">The ID of the App
	Server. Typically, this is the result of an <code>admin:appserver-get-id</code>
	call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return
     admin:appserver-get-ssl-require-client-certificate($config,
         admin:appserver-get-id($config,(), "Docs"))

  (: Returns true if a client certificate is required for the "Docs" App Server.  Otherwise, false.  :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-ssl-require-client-certificate" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
  <apidoc:summary>This function determines whether or not a client certificate is required for the
  specified App Server. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    	A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $appServer := admin:appserver-get-id($config,
          admin:group-get-id($config, "Default"),
          "Docs")

  return
      admin:appserver-set-ssl-require-client-certificate($config, $appServer, fn:false())

  (: Specifies that the "Docs" App Server does not require a client certificate.
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-exists" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function determines whether or not the specified database
  exists.  Returns <code>true</code> if the database exists, otherwise
  <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="database-name" type="xs:string">
    The name of the database to check.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return admin:database-exists($config, "Documents")

  (: Returns true if the Documents database exists. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-exists" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
  <apidoc:summary>
  This function determines whether or not the specified forest
  exists.  Returns <code>true</code> if the forest exists, otherwise
  <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="forest-name" type="xs:string">
    The name of the forest to check.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return admin:forest-exists($config, "Documents")

  (: Returns true, if the Documents forest exists. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-get-database" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
  <apidoc:summary>This function returns the ID of the database that uses the specified
  forest.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
     The ID of the forest used by the database to be returned (for example,
     <code>xdmp:forest("myForest")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forest := xdmp:forest("Documents")

  return admin:forest-get-database($config, $forest)

  (: Returns the ID of the database that uses the Documents forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-get-replicas" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
  <apidoc:summary>
	  This function returns the IDs of the forest replicas for the
	  specified forest.  If it returns the empty sequence, then
	  no replacas are assigned to the specified forest.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
	    The ID of the forest having the replica forests to
	    be returned (for example, <code>xdmp:forest("myForest")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forest := xdmp:forest("Documents")

  return admin:forest-get-replicas($config, $forest)

  (: Returns the forest replicas associated with the Documents forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-add-replica" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
  <apidoc:summary>This function adds a forest replica to a master forest.
  Note that adding a replica forest will take the master forest offline
  for a period ranging between a few seconds to a few minutes.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="master-id" type="xs:unsignedLong">
	    The ID of the master forest to which to add the replica forest
	    (for example, <code>xdmp:forest("MasterForest")</code>).
    </apidoc:param>
    <apidoc:param name="replica-id" type="xs:unsignedLong">
	    The ID of the replica forest to add to the master forest
	    (for example, <code>xdmp:forest("ReplicaForest")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forest := xdmp:forest("Documents")
  let $replica-forest := xdmp:forest("my-replica")

  return admin:forest-add-replica($config, $forest, $replica-forest)

  (: returns the new configuration element --
     use admin:save-configuration to save the changes to the
     configuration or pass the configuration to other
     Admin API functions to make other changes.  :)


    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-remove-replica" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
	<apidoc:summary>
		This function removes a forest replica from a master
		forest.  Note that removing a replica forest will take the
        master forest offline for a period ranging between a few seconds
        to a few minutes.
	</apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="master-id" type="xs:unsignedLong">
	    The ID of the master forest from which to remove the replica forest
	    (for example, <code>xdmp:forest("MasterForest")</code>).
    </apidoc:param>
    <apidoc:param name="replica-id" type="xs:unsignedLong">
	    The ID of the replica forest to remove from the master forest
	    (for example, <code>xdmp:forest("ReplicaForest")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forest := xdmp:forest("failover1")
  let $replica-forest := xdmp:forest("replica1")

  return admin:forest-remove-replica($config, $forest, $replica-forest)

  (: returns the new configuration element --
     use admin:save-configuration to save the changes to the
     configuration or pass the configuration to other
     Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="host-exists" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
  <apidoc:summary>
  This function determines whether or not the specified Host
  exists.  Returns <code>true</code> if the Host exists, otherwise
  <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="host-name" type="xs:string">
    The name of the host to check.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return admin:host-exists($config, "hp6910-624v64b.marklogic.com")

  (: Returns true, if the specified host exists. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-exists" lib="admin" category="Admin Library"
	bucket="XQuery Library Modules" subcategory="appserver">
	<apidoc:summary>This function determines whether or not the specified
	App Server (HTTP, XDBC, or ODBC)
  exists.  Returns <code>true</code> if the App Server exists, otherwise
  <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="group-ids" type="xs:unsignedLong*">
    The list of group IDs returned from the <code>admin:get-group-ids</code>
    function.
    </apidoc:param>
    <apidoc:param name="appserver-name" type="xs:string">
    The name of the App Server to check.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groups := admin:get-group-ids($config)

  return admin:appserver-exists($config, $groups, "Admin")

  (: Returns true, if the Admin App Server exists. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-exists" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function determines whether or not the specified Group
  exists.  Returns <code>true</code> if the Group exists, otherwise
  <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
   <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
   </apidoc:param>
    <apidoc:param name="group-name" type="xs:string">
    The name of the group to check.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return admin:group-exists($config, "Default")

  (: Returns true, if the Default group exists. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="database-set-field-value-positions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
        subcategory="database">
	<apidoc:summary>
		This function sets the field value positions setting
		for the specified database in the configuration.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned
		  from one of the Admin module functions.
	  </apidoc:param>
          <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database to copy (for example,
	      <code>xdmp:database("myDatabase")</code>).
           </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
   <apidoc:param name="value" type="xs:boolean?">
	   A boolean value, <code>fn:true()</code> to enable,
	   <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-value-positions($config,
        xdmp:database("myDatabase"), "my-field", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]> </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-field-value-searches" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function sets the field value searches setting
	  for the specified database in the
	  configuration.</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned
		  from one of the Admin module functions.
	  </apidoc:param>
	  <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database to copy (for example,
	      <code>xdmp:database("myDatabase")</code>).
          </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
    <apidoc:param name="value" type="xs:boolean?">
	   A boolean value, <code>fn:true()</code> to enable,
	   <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-field-value-searches($config,
        xdmp:database("myDatabase"), "my-field", fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]> </pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="database-get-field-value-positions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function gets the field value positions setting
		for the specified database in the configuration.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned
		  from one of the Admin module functions.
	  </apidoc:param>
          <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database to copy (for example,
	      <code>xdmp:database("myDatabase")</code>).
          </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-value-positions($config,
        xdmp:database("myDatabase"), "my-field")
  (: returns the field value positions setting :)
  ]]> </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-field-value-searches" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
    This function returns the field value search setting for the specified
    field.
  </apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned
		  from one of the Admin module functions.
	  </apidoc:param>
	  <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database to copy (for example,
	      <code>xdmp:database("myDatabase")</code>).
          </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-field-value-searches($config,
       xdmp:database("myDatabase"), "my-field")
  (: returns the field value searches setting :)
  ]]> </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-preload-replica-mapped-data" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
    This function sets the preload-replica-mapped-data setting for the
    specified database.
  </apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned
		  from one of the Admin module functions.
	  </apidoc:param>
	  <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
          </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
	   A boolean value, <code>fn:true()</code> to enable,
	   <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-set-preload-replica-mapped-data($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]> </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-preload-replica-mapped-data" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function returns the preload replica mapped data setting
		  for the specified database from the configuration.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned
		  from one of the Admin module functions.
	  </apidoc:param>
	  <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:database-get-preload-replica-mapped-data($config,
       xdmp:database("myDatabase"))

  (: returns the preload mapped data setting :)
  ]]> </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-foreign-replica" lib="admin"
	             category="Admin Library" bucket="XQuery Library Modules"
	             subcategory="database">
  <apidoc:summary>
  This function returns a replica database configuration.  Use the output of
  this function in the <code>admin:database-set-foreign-replicas</code>
  function to place the replica database configuration into the cluster
  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster containing the replica database.
    </apidoc:param>
    <apidoc:param name="foreign-database-id" type="xs:unsignedLong">
    The ID of the replica database.
    </apidoc:param>
    <apidoc:param name="connect-forests-by-name" type="xs:boolean">
    Boolean that indicates whether to connect to forests by name.  If
    <code>fn:true</code>, forests will automatically connect to/from foreign
    forests of the same name. If <code>false</code>, forests must be
    individually
    configured to replicate to/from foreign forests. Individual forest settings
    override the database level setting.
    </apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedInt">
    This parameter controls how far (in seconds) the replica may fall
    behind before the master stops accepting updates.
    If contact with the foreign cluster is lost, a warning will be logged and
    master forests will permit updates to proceed with no enforcement of the
    lag limit.
    </apidoc:param>
    <apidoc:param name="replication-enabled" type="xs:boolean" optional="true">
    This parameter controls if replication is enabled. Set to true
    to enable, false to disable.
    </apidoc:param>
	<apidoc:param name="queue-size" type="xs:unsignedInt" optional="true">
	This parameter specifies the number of frames in the queue for foreign
	replication, or the number of fragments if you are doing bulk replication.
	The default is 10.
	</apidoc:param>
    </apidoc:params>
  <apidoc:return>element(db:foreign-replica)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $fdb := 7746794057802787479
  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:database-foreign-replica($fcl, $fdb, fn:true(), 300)

  (: Returns the replica database configuration. Use the
  admin:database-set-foreign-replicas function to set the confirguration. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-get-cluster-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the replica cluster from the
  replica database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The foreign replica configuration element.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  return admin:database-foreign-replica-get-cluster-id($freplica)

  (: Returns the id of the replica cluster from the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-get-database-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the replica database from the
  replica database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The foreign replica configuration element.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  return admin:database-foreign-replica-get-database-id($freplica)

  (: Returns the id of the replica database from the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-get-connect-forests-by-name" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the connect-forests-by-name setting from the
  replica database configuration. This function must be executed on the master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The configuration element for the foreign replicas.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  return admin:database-foreign-replica-get-connect-forests-by-name($freplica)

  (: Returns the connect-forests-by-name setting from the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-get-lag-limit" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the lag limit value from the replica database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The configuration element for the foreign replica database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  return admin:database-foreign-replica-get-lag-limit($freplica)

  (: Returns the lag limit setting from the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-set-lag-limit" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function sets the lag limit value on a replica database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The configuration element for the foreign replica database.
    </apidoc:param>
    <apidoc:param name="lag-limit" type="xs:unsignedInt">
    The lag limit.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-replica)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $old := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))
  let $new := admin:database-foreign-replica-set-lag-limit($freplica,30)
  let $newcfg := admin:database-set-foreign-replicas($cfg, xdmp:database("Documents"), $new)
  return admin:save-configuration($newcfg)
  (: Sets the lag limit setting for the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-get-replication-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the enabled flag from the replica database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The configuration element for the foreign replica database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  return admin:database-foreign-replica-get-replication-enabled($freplica)

  (: Returns the enabled setting from the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-set-replication-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function sets the enabled flag on a replica database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">
    The configuration element for the foreign replica database.
    </apidoc:param>
    <apidoc:param name="enabled" type="xs:boolean">
    The enabled flag.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-replica)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $old := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))
  let $new := admin:database-foreign-replica-set-replication-enabled($freplica,fn:false())
  let $newcfg := admin:database-set-foreign-replicas($cfg, xdmp:database("Documents"), $new)
  return admin:save-configuration($newcfg)

  (: Sets the enabled flag for the foreign replica database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
    This function returns a master database configuration.  Use the output of this function
    in the <code>admin:database-set-foreign-master</code> function to set the
    master database configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster containing the master host.
    </apidoc:param>
    <apidoc:param name="foreign-database-id" type="xs:unsignedLong">
    The ID of the master database.
    </apidoc:param>
    <apidoc:param name="connect-forests-by-name" type="xs:boolean">
     Boolean that indicates whether to connect to forests by name.  If
    <code>fn:true</code>, forests will automatically connect to/from foreign
    forests of the same name. If <code>false</code>, forests must be individually
    configured to replicate to/from foreign forests. Individual forest settings
    override the database level setting.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-master)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $fdb := 476761383313557950
  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:database-foreign-master($fcl, $fdb, fn:true())

  (: Returns a master database configuration element.  Use the
     admin:database-set-foreign-master function to set the
     configuration. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-master-get-cluster-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the cluster from the specified foreign master
  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-master" type="element(db:foreign-master)">
    The foreign master configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmaster := admin:database-get-foreign-master($cfg, xdmp:database("Documents"))

  return admin:database-foreign-master-get-cluster-id($fmaster)

  (: Returns the id of the master cluster from the foreign master configuration
     element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-master-get-database-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the foreign master database.
    This function must be executed on the replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-master" type="element(db:foreign-master)">
    The foreign master configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmaster := admin:database-get-foreign-master($cfg, xdmp:database("Documents"))

  return admin:database-foreign-master-get-database-id($fmaster)

  (: Returns the id of the master database from the foreign master configuration
     element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-master-get-connect-forests-by-name"
                 lib="admin" category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the connect-forests-by-name setting from the master
  database configuration. This function must be executed on the replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-master" type="element(db:foreign-master)">
    The configuration element for the foreign master.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmaster := admin:database-get-foreign-master($cfg, xdmp:database("Documents"))

  return admin:database-foreign-master-get-connect-forests-by-name($fmaster)

  (: Returns the connect-forests-by-name setting from the foreign master database
     configuration element. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-set-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function configures the specified replica database to receive replicated
  data from the specified foreign master.  This function must be executed on
  the replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="foreign-master" type="element(db:foreign-master)">
    The foreign master configuration returned by the
    <code>admin:database-foreign-master</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $fdb := 476761383313557950
  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fmaster := admin:database-foreign-master($fcl, $fdb, fn:true())

  return admin:database-set-foreign-master(
                $cfg,
                xdmp:database("Documents"),
                $fmaster)

  (: Returns a configuration element that includes the foreign master configuration
     for the 'Documents' database. Use admin:save-configuration to save the changes
     to the configuration or pass the configuration to other Admin API functions
     to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-delete-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function removes the specified master database from the database
  replication configuration on the replica host. This function must be
  executed on the replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
      The ID of the domestic database whose foreign master is to be removed
      from the database replication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:database-delete-foreign-master($cfg, xdmp:database("Documents"))

  (: Returns a configuration element with the foreign master database, 'Documents',
     removed.  Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-get-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the configuration for the foreign master
  database. This function must be executed on the replica host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-master)?</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:database-get-foreign-master($cfg, xdmp:database("Documents"))

  (: Returns the configuration element for the foreign master database. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-add-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function adds one or more replica databases to the database
  replication configuration. This function must be executed on the master
  cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the replica database to be added.
    </apidoc:param>
    <apidoc:param name="replicas" type="element(db:foreign-replica)*">
    One or more replica database configuration elements. More than one replica
	database elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $fdb := 7746794057802787479
  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $freplica := admin:database-foreign-replica($fcl, $fdb, fn:true(), 300)

  return admin:database-add-foreign-replicas($cfg, xdmp:database("NewDB"), $freplica)

  (: Adds the 'NewDB' database to the replica databases configuration. Use
     admin:save-configuration to save the changes to the configuration or
     pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-set-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function sets the foreign replica database configuration.
  This function must be executed on the master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="replicas" type="element(db:foreign-replica)*">
     One or more replica configuration elements.  More than one replica
	 database elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $fdb := 7746794057802787479
  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $freplica := admin:database-foreign-replica($fcl, $fdb, fn:true(), 300)

  return admin:database-set-foreign-replicas($cfg, xdmp:database("Documents"), $freplica)

  (: Returns the full database configuration element that includes the replication configuration
     for the 'Documents' database. Use admin:save-configuration to save the changes to the
     configuration or pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-delete-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function deletes the foreign replica database configurations for the
  specified master database.  This function must be executed on the master
  cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="foreign-replicas" type="element(db:foreign-replica)*">
    The configuration elements for the replica databases. These configuration
    elements can be returned using the
	<code>admin:database-get-foreign-replicas</code> function. More than one
	replica database elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  return admin:database-delete-foreign-replicas($cfg, xdmp:database("Documents"), $freplica)

  (: Removes the foreign replca databases for the master database, 'Documents', from
     the database replication configuration.  Use admin:save-configuration to save the
     changes to the configuration or pass the configuration to other Admin API functions
     to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-get-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the configuration elements of the replica databases
  associated with the master database specified by <code>database-id</code>.
  This function must be executed on the master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-replica)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))

  (: Returns the configuration element for the replica databases associated with
     the master database, 'Documents'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-replica" lib="admin" category="Admin Library"
	             bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns a replica forest configuration. Use the output of this
  function in the <code>admin:forest-set-foreign-replicas</code> function to
  place the replica forest configuration into the cluster configuration. This
  function must be executed on the master host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster containing the replica host.
    </apidoc:param>
    <apidoc:param name="foreign-database-id" type="xs:unsignedLong">
    The ID of the replica database.
    </apidoc:param>
    <apidoc:param name="foreign-forest-id" type="xs:unsignedLong">
    The ID of the foreign forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:foreign-replica)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fdb := admin:database-foreign-replica-get-database-id(
                      admin:database-get-foreign-replicas($cfg, xdmp:database("Documents")))

  return admin:forest-foreign-replica($fcl, $fdb , 2331251018938912591)

  (: Returns a replica forest configuration for the master 'Documents' forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-replica-get-cluster-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the replica cluster from the specified
  replica forest configuration element.  This function must be executed on the
  master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(as:foreign-replica)">
    The element returned by the <code>admin:forest-foreign-replica</code> or
    <code>admin:forest-get-foreign-replicas</code> function that specifies the
    configuration for the replica forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmforest := admin:forest-get-foreign-replicas($cfg, xdmp:forest("Documents"))

  return admin:forest-foreign-replica-get-cluster-id($fmforest)

  (: Returns the id for the foreign replica cluster configured for the
     master 'Documents' forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-replica-get-database-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the replica database from the specified
  replica forest configuration element.  This function must be executed on
  the master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(as:foreign-replica)">
    The element returned by the <code>admin:forest-foreign-replica</code> or
    <code>admin:forest-get-foreign-replicas</code> function that specifies the
    configuration for the replica forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmforest := admin:forest-get-foreign-replicas($cfg, xdmp:forest("Documents"))

  return admin:forest-foreign-replica-get-database-id($fmforest)

  (: Returns the id for the foreign replica database configured for the
     master 'Documents' forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-replica-get-forest-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the id of the replica forest from the specified
  replica forest configuration element.  This function must be executed on the
  master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(as:foreign-replica)">
    The element returned by the <code>admin:forest-foreign-replica</code> or
    <code>admin:forest-get-foreign-replicas</code> function that specifies the
    configuration for the replica forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmforest := admin:forest-get-foreign-replicas($cfg, xdmp:forest("Documents"))

  return admin:forest-foreign-replica-get-forest-id($fmforest)

  (: Returns the id for the foreign replica forest configured for the
     master 'Documents' forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function creates a replicaton configuration element for the specified
  master forest. This function must be executed on the replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
    The ID of the master cluster.
    </apidoc:param>
    <apidoc:param name="foreign-database-id" type="xs:unsignedLong">
    The ID of the master database.
    </apidoc:param>
    <apidoc:param name="foreign-forest-id" type="xs:unsignedLong">
    The ID of the master forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:foreign-master)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fdb := admin:database-foreign-master-get-database-id(
                  admin:database-get-foreign-master($cfg, xdmp:database("Documents")))

  return admin:forest-foreign-master($fcl, $fdb , 3017132713745743620)

  (: Returns a configuration element for the foreign master forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-master-get-cluster-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the ID for the cluster from the foreign master forest
  configuration element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-master" type="element(as:foreign-master)">
    The element returned by the <code>admin:forest-foreign-master</code> or
    <code>admin:forest-get-foreign-master</code> function that specifies the
    configuration for the master forest. More than one forest master
	configuration elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmforest := admin:forest-get-foreign-master($cfg, xdmp:forest("Documents"))

  return admin:forest-foreign-master-get-cluster-id($fmforest)

  (: Returns the id for the foreign master cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-master-get-database-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function returns the id for the database from the foreign master
  forest configuration element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-master" type="element(as:foreign-master)">
    The element returned by the <code>admin:forest-foreign-master</code> or
    <code>admin:forest-get-foreign-master</code> function that specifies the
    configuration for the master forest. More than one forest master
	configuration elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmforest := admin:forest-get-foreign-master($cfg, xdmp:forest("Documents"))

  return admin:forest-foreign-master-get-database-id($fmforest)

  (: Returns the id for the foreign master database. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-foreign-master-get-forest-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function returns the id for the forest from the foreign master forest
  configuration element.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-master" type="element(as:foreign-master)">
    The element returned by the <code>admin:forest-foreign-master</code> or
    <code>admin:forest-get-foreign-master</code> function that specifies the
    configuration for the master forest. More than one forest master
	configuration elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fmforest := admin:forest-get-foreign-master($cfg, xdmp:forest("Documents"))

  return admin:forest-foreign-master-get-forest-id($fmforest)

  (: Returns the id for the foreign master forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-set-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function writes the specified foreign master forest configuration into
  the database replication configuration. Any forest-level configuration will
  override the database level-configuration. This function must be executed
  on the replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
	The ID of the replica forest associated with the master forest to be set.
    </apidoc:param>
    <apidoc:param name="foreign-master" type="element(as:foreign-master)">
    The element returned by the <code>admin:forest-foreign-master</code> or
    <code>admin:forest-get-foreign-master</code> function that specifies the
    configuration for the master forest. More than one forest master
	configuration elements may be specified in a one-to-many replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fdb := admin:database-foreign-master-get-database-id(
                   admin:database-get-foreign-master($cfg, xdmp:database("Documents")))
  let $fforest := admin:forest-foreign-master($fcl, $fdb , 3017132713745743620)

  return admin:forest-set-foreign-master($cfg, xdmp:forest("Documents"), $fforest)

  (: Sets the configuration for the specified foreign master forest.  Use
     admin:save-configuration to save the changes to the configuration or
     pass the configuration to other Admin API functions to make other changes. :):)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-delete-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function deletes the master forest associated with the specified replica
  forest from the database replication configuration. This function must be
  executed on the replica host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the replica forest associated with the master forest to be
	deleted from the database replication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:forest-delete-foreign-master($cfg, xdmp:forest("Documents"))

  (: Deletes the foreign master forest from the configuration.  Use
     admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :):)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-get-foreign-master" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function returns the replication configuration for the master forest associated
  with the specified replica forest. This function must be executed
  on the replica host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the replica forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:foreign-master)?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:forest-get-foreign-master($cfg, xdmp:forest("Documents"))

 (: Returns the replication configuration for the master forest. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-add-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function adds the replica forest that is associated with the specified master
  forest to the database replication configuration.  This function must be executed
  on the master host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest on the master host to be replicated.
    </apidoc:param>
    <apidoc:param name="foreign-replicas" type="element(as:foreign-replica)*">
    The element returned by the <code>admin:forest-foreign-replica</code>
    function that specifies the configuration for the replica forest. More
    than one forest replica configuration elements may be specified in a one-to-many
    replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fdb := admin:database-foreign-replica-get-database-id(
                      admin:database-get-foreign-replicas($cfg, xdmp:database("Documents")))
  let $mforest := xdmp:forest("Documents2")
  let $fforest := admin:forest-foreign-replica($fcl, $fdb , 2863600501631949400)

  return admin:forest-add-foreign-replicas($cfg, $mforest, $fforest)

  (: Adds the foreign forest, 'Document2', to the forests used by the replica database,
    'Documents'.  Use admin:save-configuration to save the changes to the configuration
    or pass the configuration to other Admin API functions to make other changes. :):)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-set-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function writes the specified replica forest configuration into the database
  replication configuration. Any forest-level configuration will override the
  database level-configuration.  This function must be executed on the master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest on the master host to be replicated.
    </apidoc:param>
    <apidoc:param name="foreign-replicas" type="element(as:foreign-replica)*">
    The element returned by the <code>admin:forest-foreign-replica</code>
    function that specifies the configuration for the replica forest. More
    than one forest replica configuration elements may be specified in a one-to-many
    replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fdb := admin:database-foreign-replica-get-database-id(
                      admin:database-get-foreign-replicas($cfg, xdmp:database("Documents")))

  let $fforest :=
    admin:forest-foreign-replica($fcl, $fdb , 2331251018938912591)

  return
     admin:forest-set-foreign-replicas($cfg, xdmp:forest("Documents2"), $fforest)

  (: Returns a configuration element that includes the specified foreign replica
     forests.  Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-delete-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function deletes the foreign replica of the specified forest on the master host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the replicated forest on the master host.
    </apidoc:param>
    <apidoc:param name="foreign-replicas" type="element(as:foreign-replica)*">
    The element returned by the <code>admin:forest-get-foreign-replicas</code>
    function that specifies the configuration for the replica forest. More
    than one forest replica configuration elements may be specified in a one-to-many
    replication scheme.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $freplica := admin:forest-get-foreign-replicas($cfg, xdmp:forest("Documents"))

  return admin:forest-delete-foreign-replicas($cfg, xdmp:forest("Documents"), $freplica)

  (: Returns a configuration element with the foreign replica forest, 'Documents',
     removed. Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-get-foreign-replicas" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function returns the foreign replicas configuration element.
  This function must be executed on the master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the master forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(as:foreign-replica)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:forest-get-foreign-replicas($cfg, xdmp:forest("Documents"))

  (: Returns the configuration element for the foreign replicas. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="host-get-foreign-port" lib="admin"
	             category="Admin Library" bucket="XQuery Library Modules"
	             subcategory="cluster">
  <apidoc:summary>
  This function returns the port used by the specified host to listen for
  communications from foreign hosts.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="host-id" type="xs:unsignedLong">
    The ID of the domestic host.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $hid := xdmp:host("master.marklogic.com")

  return admin:host-get-foreign-port($cfg, $hid)

  (: Returns the port used by the specified host to listen for foreign
     communications. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="host-set-foreign-port" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function configures the specified domestic host to listen for communications from
  foreign hosts over the specified port.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="host-id" type="xs:unsignedLong">
    The ID of the domestic host.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
    The port number on which to listen for communications.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $hid := xdmp:host("master.marklogic.com")

  return admin:host-set-foreign-port($cfg, $hid, 7998)

  (: Configures the specified host to listen for foreign communications over
     port 7998.  Use admin:save-configuration to save the changes to the
     configuration or pass the configuration to other Admin API functions
     to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-id" lib="admin" category="Admin Library"
    bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function returns the id of this cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-get-id($cfg)

  (: Returns the id of this cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-name" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function returns the name of this cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-get-name($cfg)

  (: Returns the name of this cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-name" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function sets the name for this cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="name" type="xs:string">
    The name to be assigned to this cluster.
    </apidoc:param>
  </apidoc:params>
 <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-set-name($cfg, "replica")

  (: Assigns 'replica' as the name of this cluster. Use admin:save-configuration
     to save the changes to the configuration or pass the configuration to other
     Admin API functions to make other changes. :):)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-xdqp-ssl-certificate" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function sets the SSL certificate used to establish secure
  communication between this cluster and foreign clusters.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
    The SSL certificate for this cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $cert := "----BEGIN CERTIFICATE-----
               MIICzjCCAbagAwIBAgIJAMieG0IJQAWQMA0GCSqGSIb3DQEBBQUAMB8xHTAbBgNV
               BAMTFDE3MDY0ODkwODY2NTc0NzgxNTcxMB4XDTExMDYwMjIwMjA1M1oXDTIxMDUz
               MDIwMjA1M1owHzEdMBsGA1UEAxMUMTcwNjQ4OTA4NjY1NzQ3ODE1NzEwggEiMA0G
               CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPM9XLSbmVN1Fykz523I7H9Cq4zgO9
               cUSHI/FArYnWNXUbJIesvDifu2DggfsE7HD6Glwa1ZvkVTBDyZhYv1MZMpBy18Au
               9McoBbl9NYHOIhtM6bHTJAWNDoHi+TL/rFJzxo5h+bC/JnOjbE40MZKkzSzV944t
               LbpYT3JfGtMJgcCEWqVLp7vkSRUsKCPuJdPpFfMixDaLA75+W9PVdm01jDvihrgr
               CZkVjlMzZersHYQDsuNNWwt/9fM1skKabVWUVB0vHV307j2JHwVUJS3+hVxSiT61
               GaIO3GSL6dVI5ZlYZCCyyFNc0cqPutu0Q3MfZq6MpFlt5Iffm0cWwSkvAgMBAAGj
               DTALMAkGA1UdEwQCMAAwDQYJKoZIhvcNAQEFBQADggEBAIKRSFrk3a7JBl9bBsBb
               sWxob3eVM4wh8f6EPjdiIZL0V7HH4dH2hdcvtXB0NdMntiTeJfjm/tdzzMMS0al/
               LZV3BxxMa7vYk6JtRFUaMdMwwsSa319n2WXKHlqZksWk4H5gC8AH5Vpdex44SKP4
               GYVh0MO5kIS07yHfuv66PWsTRQiIHQSHYe33Dot/Mfs9BT/sVm1qRJ1ZO5GAf136
               3iQhwf8fa0PdYGfmN9I1yQMneet3W3k9T4J86mp4RuYl44Z0sv1p3oDCcuiVRgbF
               ro0dL8n7gE6fW8Hj5tnZQxYzFCwUqy8nhab+MwpOsoACOM8WvULnaMgPdflEklQT
               VL0=
               -----END CERTIFICATE-----"

  return admin:cluster-set-xdqp-ssl-certificate($cfg, $cert)

  (: Sets the SSL certificate for the cluster.  Use admin:save-configuration to save the
     changes to the configuration or pass the configuration to other Admin API functions
     to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-xdqp-ssl-certificate" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function returns the SSL certificate used to establish secure
  communication between this cluster and foreign clusters.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return admin:cluster-get-xdqp-ssl-certificate($config)

  (: Returns the SSL certificate for the cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-xdqp-ssl-private-key" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
       This function returns the private key for secure communication
       between this cluster and foreign clusters.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  return admin:cluster-get-xdqp-ssl-private-key($config)

  (: Returns the private key used by this cluster.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-xdqp-ssl-private-key" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
       This function sets the SSL private key for secure communication
       between this cluster and foreign clusters.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	   A configuration specification, typically as returned from one
	   of the Admin module functions.</apidoc:param>
    <apidoc:param name="value" type="xs:string">
	   The private SSL key for this cluster. </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $key := "-----BEGIN PRIVATE KEY-----
       MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDqFhZh2hYkxhWz
	   8PjeI4fUJqaRLp98BJ0WugkUM1gDc0lU0fwoOpb3mpP91CtYc53/RICWrPZb1tYR
	   wrU3UShSWKWUExZuh+rSpMQPtjt9DxDdV1iVY4oZTuGEz/A6Jp8M0+/qHtEFuvAa
	   DMB1Mca9j5PgwcAbtvskogFWINRgcSCsf5iy476WNSXXkcwh+8fXcii/c9wppxhZ
	   zRffHiJQx9q2W8zGF4P7OkaSuMNNgumVc8IXu7Itdp6+Ity+r06lcwTGMNUWQGN2
	   JmsFIhPmUZYhT2+sa8OWZMXO1SC1onsnxQOxFhvdQk10+mtQZw6VrxRUDs02DuGz
       2DmaS8GXAgMBAAECggEACu7vKrDZ+eu6lcX6ib2VGYaYnw1Ta6J3h9k2lVf0k2yu
	   DyUjpuldpcD1ipR/VclIpuSXMPJxK0b0hq3Wcvf6byYuzaS6ln0Irb/+XFGBo8yx
	   V/U9cPTOPXJevCpOKRkmsp2vhfrcfm0Fy+Gul4q0oqPzHztNcr3wKvzaHSC5aqun
       Hrxw+OUDh+9JN2k4/3JgWSzk3+GXd6tnsRjyxBquyREgLsnRWekveY/QoiSQlFlf
	   F8WsQkdxV9crhWfMJW27oqyrxZnCAheBxWKyG2EX+niUK0UhWRbVg1BWgUmqRsGw
	   XChu+l5Nq41UbokRQ3FtHPEEuW+pxAeEH707+d8EWQKBgQD8/zliqjVlHqsNtJjl
	   sm1nWPRlKPGulD1dpncMvo3w4yvjTgXxaN2KLahWjSEu0IrqTxUNnzSxnHFXTX16
	   NztpeucJtvqPmDQ/3Nfsns/fxW+iz0zlUP/6Ecshb7gDcm5ojEUg5IymuJv4XwTx
	   ubtxsgugHVKoAs/Ns2/rtAD34wKBgQDs3WZZt47zm0QUu6YnMfibk4vkzxbDrsOw
	   HusBQQ8SwYAYiIixp3KQHL7/1PwhP9ZW/mG2kM5J+O7rOoJL7em6ermbXFxbaq9m
	   2T8l04ddOoLj3GWtYYLRyQY2bPuHxoKCsCyTiBoONAnF6u4MZ7HWu3vXB54FRzYI
       cFyemK51vQKBgAyC7qqTckqK5ripyrnpRgHLY2KxUKpqiFJeThriPZDBG0WFcUPM
       BNC1i1KkbhSrmYMW4BqpWejCrNQ9b8wgeR6xRkWzt9ZsF4FlAYShIfSWBfxONiZN
       CCusv5fqt3XsLcubzDthMhd4n7X7tPnjToLD5FFJwfGvGem5SvqkDzwzAoGBAIbD
       ZKMw24VgVnjRVrRAKykg5lv1Mwd8nFvNC3n4MQJD04Sh0dv54CV8JXNbE2Q7dNCk
       BKYhdy0BE7YD4PQgVXXCs21gPC/K4CbM/a+gzQhO7P+FetgNfaesDvvSP729RK3k
       XEhIDEL+enz/sBagvL7mhowOCmsIXAarHxcg2UmlAoGBAJBppoW+ANoxKCwlfCJM
	   ft6rhLJIpomv86TcqFwcbAPs0ziP17iWhRP6CFwKG2h/Abq153y9nPLFwtX/Eltv
	   +fGbtmb3CoiMvc9eK5u7UFovFF3okE6GeQa2sOBrJjMzUBIJNQUip2GzoBthnQGP
	   1q6AId8Tj7SiVCLM5CIluImS
       -----END PRIVATE KEY-----"
  return admin:cluster-set-xdqp-ssl-private-key($cfg, $key)

  (: Sets the private SSL key for the cluster. Use admin:save-configuration to
  save the changes to the configuration or pass the configuration to other
  Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-xdqp-bootstrap-hosts" lib="admin"
category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function sets the bootstrap hosts for the domestic cluster.  Bootstrap hosts
  are accessed by hosts on foreign clusters to establish communication with the
  domestic cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="host-ids" type="xs:unsignedLong*">
    One or more ids for hosts to be used as bootstrap hosts for this cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-set-xdqp-bootstrap-hosts($cfg, 11043766148104991860)

  (: Sets the specified host as the bootstrap host for this cluster.  Use
     admin:save-configuration to save the changes to the configuration or
     pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-xdqp-bootstrap-hosts" lib="admin"
category="Admin Library" bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function returns the ids of the bootstrap hosts configured for this cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-get-xdqp-bootstrap-hosts($cfg)

  (: Returns the ids for this cluster's bootstrap hosts. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-language-baseline" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function returns the language baseline of this cluster, either "legacy" or "ml9". The language baseline defines the default language configuration to use. Clusters upgraded from MarkLogic server version 8 will have a language baseline of "legacy".
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-get-language-baseline($cfg)

  (: Returns the language baseline of this cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-language-baseline" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function sets the language baseline for this cluster. A change to the language baseline requires a restart of the cluster and a reindex to avoid stemming and tokenization anomalies.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="baseline" type="xs:string">
    The language baseline to be used in this cluster, either "legacy" or "ml9".
    </apidoc:param>
  </apidoc:params>
 <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-set-language-baseline($cfg, "ml9")

  (: Assigns 'ml9' as the language baseline of this cluster.
     Use admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other
     changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-host" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function configures a foreign host to be set by the
  <code>admin:foreign-cluster-set-bootstrap-hosts</code> function as the
  bootstrap host for the foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="host-id" type="xs:unsignedLong">
    The ID of the foreign host.
    </apidoc:param>
    <apidoc:param name="host-name" type="xs:string">
    The name of the foreign host.
    </apidoc:param>
    <apidoc:param name="connect-port" type="xs:unsignedInt">
    The port on which the foreign bootstrap host will listen for connections.
    This should be port 7998 in most situations.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(cl:foreign-host)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-host(13134636216063499728,
                            "master.marklogic.com",
                            7998)

 (: Configures a host to be used as a foreign cluster bootstrap host. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-host-get-id" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the id of the foreign bootstrap host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="fh" type="element(cl:foreign-host)">
    The foreign host configuration element returned by the <code>admin:foreign-host</code>
    or <code>admin:foreign-cluster-get-bootstrap-hosts</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fh := admin:foreign-cluster-get-bootstrap-hosts($cfg, $fcl)

  return admin:foreign-host-get-id($fh)

  (: Returns the id of the foreign bootstrap host. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-host-get-name" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the name of the foreign bootstrap host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="fh" type="element(cl:foreign-host)">
    The foreign host configuration element returned by the
	<code>admin:foreign-host</code> or
	<code>admin:foreign-cluster-get-bootstrap-hosts</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fh := admin:foreign-cluster-get-bootstrap-hosts($cfg, $fcl)

  return admin:foreign-host-get-name($fh)

  (: Returns the name of the foreign bootstrap host. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-host-get-connect-port" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the number of the port configured for the foreign bootstrap host.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="fh" type="element(cl:foreign-host)">
    The foreign host configuration element returned by the <code>admin:foreign-host</code>
    or <code>admin:foreign-cluster-get-bootstrap-hosts</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $fh := admin:foreign-cluster-get-bootstrap-hosts($cfg, $fcl)

  return admin:foreign-host-get-connect-port($fh)

 (: Returns the number of the port configured for the foreign bootstrap host. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-delete" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function deletes the configuration for the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return  admin:foreign-cluster-delete($cfg, $fcl)

  (: Deletes the configuration for the specified foreign cluster.  Use
     admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make
     other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-replace" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function replaces a configuration for a foreign cluster with a new configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="cluster-name" type="xs:string">
    The name of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="xdqp-timeout" type="xs:unsignedInt?">
    The XDQP timeout setting (in seconds) for the foreign cluster.
    </apidoc:param>
    <apidoc:param name="host-timeout" type="xs:unsignedInt?">
    the host timeout setting (in seconds) for the foreign cluster.
    </apidoc:param>
    <apidoc:param name="ssl-certificate" type="xs:string?">
    The SSL certificate returned by the <code>admin:cluster-get-xdqp-ssl-certificate</code>
    function on the foreign cluster.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-enabled" type="xs:boolean?">
    Specify <code>fn:true()</code> to enable SSL for the foreign cluster or
    <code>fn:false()</code> to disable SSL.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-allow-sslv3" type="xs:boolean?">
    Specify <code>fn:true()</code> to enable the SSL v3 protocol for
    the foreign cluster or <code>fn:false()</code> to disable the SSL
    v3 protocol.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-allow-tls" type="xs:boolean?">
    Specify <code>fn:true()</code> to enable the TLS protocol for the
    foreign cluster or <code>fn:false()</code> to disable the TLS protocol.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-ciphers" type="xs:string?">
    The SSL ciphers to set. This can be any standard cipher specification
    string for OpenSSL.
    </apidoc:param>
    <apidoc:param name="foreign-bootstrap-hosts" type="element(cl:foreign-host)*">
    The boot strap host configuration returned from the <code>admin:foreign-host</code>
    function.  You can specify multiple bootstrap hosts on a cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  let $cert := "----BEGIN CERTIFICATE-----
               MIICzjCCAbagAwIBAgIJAMieG0IJQAWQMA0GCSqGSIb3DQEBBQUAMB8xHTAbBgNV
               BAMTFDE3MDY0ODkwODY2NTc0NzgxNTcxMB4XDTExMDYwMjIwMjA1M1oXDTIxMDUz
               MDIwMjA1M1owHzEdMBsGA1UEAxMUMTcwNjQ4OTA4NjY1NzQ3ODE1NzEwggEiMA0G
               CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPM9XLSbmVN1Fykz523I7H9Cq4zgO9
               cUSHI/FArYnWNXUbJIesvDifu2DggfsE7HD6Glwa1ZvkVTBDyZhYv1MZMpBy18Au
               9McoBbl9NYHOIhtM6bHTJAWNDoHi+TL/rFJzxo5h+bC/JnOjbE40MZKkzSzV944t
               LbpYT3JfGtMJgcCEWqVLp7vkSRUsKCPuJdPpFfMixDaLA75+W9PVdm01jDvihrgr
               CZkVjlMzZersHYQDsuNNWwt/9fM1skKabVWUVB0vHV307j2JHwVUJS3+hVxSiT61
               GaIO3GSL6dVI5ZlYZCCyyFNc0cqPutu0Q3MfZq6MpFlt5Iffm0cWwSkvAgMBAAGj
               DTALMAkGA1UdEwQCMAAwDQYJKoZIhvcNAQEFBQADggEBAIKRSFrk3a7JBl9bBsBb
               sWxob3eVM4wh8f6EPjdiIZL0V7HH4dH2hdcvtXB0NdMntiTeJfjm/tdzzMMS0al/
               LZV3BxxMa7vYk6JtRFUaMdMwwsSa319n2WXKHlqZksWk4H5gC8AH5Vpdex44SKP4
               GYVh0MO5kIS07yHfuv66PWsTRQiIHQSHYe33Dot/Mfs9BT/sVm1qRJ1ZO5GAf136
               3iQhwf8fa0PdYGfmN9I1yQMneet3W3k9T4J86mp4RuYl44Z0sv1p3oDCcuiVRgbF
               ro0dL8n7gE6fW8Hj5tnZQxYzFCwUqy8nhab+MwpOsoACOM8WvULnaMgPdflEklQT
               VL0=
               -----END CERTIFICATE-----"

 let $host := admin:foreign-host(13134636216063499728, "master.marklogic.com", 7998)

 return admin:foreign-cluster-replace($cfg, $fcl, "master", 15, 35, $cert, fn:true(),
                                      fn:false(), fn:false(), "All", $host)

  (: Replaces an existing configuration for the foreign cluster. Use
     admin:save-configuration to save the changes to the configuration
     or pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-create" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function creates a complete configuration for a foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster, obtained by running the <code>admin:cluster-get-id</code>
    function on the foreign cluster.
    </apidoc:param>
    <apidoc:param name="cluster-name" type="xs:string">
    The name of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="xdqp-timeout" type="xs:unsignedInt?">
    The XDQP timeout setting (in seconds) for the foreign cluster.
    </apidoc:param>
    <apidoc:param name="host-timeout" type="xs:unsignedInt?">
    the host timeout setting (in seconds) for the foreign cluster.
    </apidoc:param>
    <apidoc:param name="ssl-certificate" type="xs:string?">
    The SSL certificate returned by the <code>admin:cluster-get-xdqp-ssl-certificate</code>
    function on the foreign cluster.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-enabled" type="xs:boolean?">
    Specify <code>fn:true()</code> to enable SSL for the foreign cluster or
    <code>fn:false()</code> to disable SSL.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-allow-sslv3" type="xs:boolean?">
    Specify <code>fn:true()</code> to enable the SSL v3 protocol for
    the foreign cluster or <code>fn:false()</code> to disable the SSL
    v3 protocol.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-allow-tls" type="xs:boolean?">
    Specify <code>fn:true()</code> to enable the TLS protocol for the
    foreign cluster or <code>fn:false()</code> to disable the TLS protocol.
    </apidoc:param>
    <apidoc:param name="xdqp-ssl-ciphers" type="xs:string?">
    The SSL ciphers to set. This can be any standard cipher specification
    string for OpenSSL.
    </apidoc:param>
    <apidoc:param name="foreign-bootstrap-hosts" type="element(cl:foreign-host)*">
    The boot strap host configuration returned from the <code>admin:foreign-host</code>
    function.  You can specify multiple bootstrap hosts on a cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  (: Obtain foreign cluster id by running admin:cluster-get-id on the foreign cluster. :)
  let $fcl := 15499567556358534770

  let $cert := "----BEGIN CERTIFICATE-----
               MIICzjCCAbagAwIBAgIJAMieG0IJQAWQMA0GCSqGSIb3DQEBBQUAMB8xHTAbBgNV
               BAMTFDE3MDY0ODkwODY2NTc0NzgxNTcxMB4XDTExMDYwMjIwMjA1M1oXDTIxMDUz
               MDIwMjA1M1owHzEdMBsGA1UEAxMUMTcwNjQ4OTA4NjY1NzQ3ODE1NzEwggEiMA0G
               CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPM9XLSbmVN1Fykz523I7H9Cq4zgO9
               cUSHI/FArYnWNXUbJIesvDifu2DggfsE7HD6Glwa1ZvkVTBDyZhYv1MZMpBy18Au
               9McoBbl9NYHOIhtM6bHTJAWNDoHi+TL/rFJzxo5h+bC/JnOjbE40MZKkzSzV944t
               LbpYT3JfGtMJgcCEWqVLp7vkSRUsKCPuJdPpFfMixDaLA75+W9PVdm01jDvihrgr
               CZkVjlMzZersHYQDsuNNWwt/9fM1skKabVWUVB0vHV307j2JHwVUJS3+hVxSiT61
               GaIO3GSL6dVI5ZlYZCCyyFNc0cqPutu0Q3MfZq6MpFlt5Iffm0cWwSkvAgMBAAGj
               DTALMAkGA1UdEwQCMAAwDQYJKoZIhvcNAQEFBQADggEBAIKRSFrk3a7JBl9bBsBb
               sWxob3eVM4wh8f6EPjdiIZL0V7HH4dH2hdcvtXB0NdMntiTeJfjm/tdzzMMS0al/
               LZV3BxxMa7vYk6JtRFUaMdMwwsSa319n2WXKHlqZksWk4H5gC8AH5Vpdex44SKP4
               GYVh0MO5kIS07yHfuv66PWsTRQiIHQSHYe33Dot/Mfs9BT/sVm1qRJ1ZO5GAf136
               3iQhwf8fa0PdYGfmN9I1yQMneet3W3k9T4J86mp4RuYl44Z0sv1p3oDCcuiVRgbF
               ro0dL8n7gE6fW8Hj5tnZQxYzFCwUqy8nhab+MwpOsoACOM8WvULnaMgPdflEklQT
               VL0=
               -----END CERTIFICATE-----"

 let $host := admin:foreign-host(13134636216063499728, "master.marklogic.com", 7998)

 return admin:foreign-cluster-create($cfg, $fcl, "master", 15, 35, $cert, fn:true(),
                                     fn:false(), fn:false(), "All", $host)

  (: Creates a complete configuration for the foreign cluster. Use
     admin:save-configuration to save the changes to the configuration or
     pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-foreign-cluster-ids" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the ids of the foreign clusters.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-get-foreign-cluster-ids($cfg)

  (: Returns the ids of the foreign clusters. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-foreign-cluster-id" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the id of the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="name" type="xs:string">
    The name of the cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  (: Returns the id of the foreign cluster named 'ClusterA'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-name" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the name of the foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return  admin:foreign-cluster-get-name($cfg, $fcl)

  (: Returns the name of the foreign cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-name" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function sets the name of a foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="cluster-name" type="xs:string">
    The name to be set for the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return  admin:foreign-cluster-set-name($cfg, $fcl, "replca")

  (: Sets the name of the 'ClusterA' foreign cluster to 'replica'.  Use
     admin:save-configuration to save the changes to the configuration or
     pass the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-xdqp-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function sets the timeout (in seconds) for XDQP communication between data
  nodes and evaluator nodes in the domestic cluster and their counterparts in the
  foreign cluster.  By default, the XDQP timeout setting is 10 seconds.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="xdqp-timeout" type="xs:unsignedInt">
    The timeout setting (in seconds).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return  admin:foreign-cluster-set-xdqp-timeout($cfg, $fcl, 20)

  (: Sets the XDQP timeout setting for the foreign cluster to 20 seconds. Use
     admin:save-configuration to save the changes to the configuration or pass
     the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-xdqp-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the timeout setting (in seconds) for XDQP communication
  between data
  nodes and evaluator nodes in the domestic cluster and their counterparts in the
  foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
   The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return  admin:foreign-cluster-get-xdqp-timeout($cfg, $fcl)

  (: Returns the XDQP timeout setting for the foreign cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-host-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function sets the timeout period (in seconds) for communication between domestic hosts
  and hosts in the specified foreign cluster.  By default, the host timeout setting is
  30 seconds.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="host-timeout" type="xs:unsignedInt">
    The timeout setting (in seconds).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return  admin:foreign-cluster-set-host-timeout($cfg, $fcl, 50)

  (: Sets the host timeout period for the foreign cluster to 50 seconds. Use
     admin:save-configuration to save the changes to the configuration or pass
     the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-host-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the timeout period (in seconds) for communication between
  domestic hosts and hosts in the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-host-timeout($cfg, $fcl)

  (: Returns the host timeout period set in the foreign cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-ssl-certificate" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the SSL certificate used to communicate with hosts in
  the foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-ssl-certificate($cfg, $fcl)

  (: Returns the SSL certificate used to communicate with the foreign cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-ssl-certificate" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function sets the specified SSL certificate for secure communication with hosts in a
  foreign cluster.  This certificate is shared by all hosts in the cluster when
  communicating with foreign hosts.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="ssl-certificate" type="xs:string?">
    The SSL certificate returned by the <code>admin:cluster-get-xdqp-ssl-certificate</code>
    function on the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $cert := "----BEGIN CERTIFICATE-----
               MIICzjCCAbagAwIBAgIJAMieG0IJQAWQMA0GCSqGSIb3DQEBBQUAMB8xHTAbBgNV
               BAMTFDE3MDY0ODkwODY2NTc0NzgxNTcxMB4XDTExMDYwMjIwMjA1M1oXDTIxMDUz
               MDIwMjA1M1owHzEdMBsGA1UEAxMUMTcwNjQ4OTA4NjY1NzQ3ODE1NzEwggEiMA0G
               CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPM9XLSbmVN1Fykz523I7H9Cq4zgO9
               cUSHI/FArYnWNXUbJIesvDifu2DggfsE7HD6Glwa1ZvkVTBDyZhYv1MZMpBy18Au
               9McoBbl9NYHOIhtM6bHTJAWNDoHi+TL/rFJzxo5h+bC/JnOjbE40MZKkzSzV944t
               LbpYT3JfGtMJgcCEWqVLp7vkSRUsKCPuJdPpFfMixDaLA75+W9PVdm01jDvihrgr
               CZkVjlMzZersHYQDsuNNWwt/9fM1skKabVWUVB0vHV307j2JHwVUJS3+hVxSiT61
               GaIO3GSL6dVI5ZlYZCCyyFNc0cqPutu0Q3MfZq6MpFlt5Iffm0cWwSkvAgMBAAGj
               DTALMAkGA1UdEwQCMAAwDQYJKoZIhvcNAQEFBQADggEBAIKRSFrk3a7JBl9bBsBb
               sWxob3eVM4wh8f6EPjdiIZL0V7HH4dH2hdcvtXB0NdMntiTeJfjm/tdzzMMS0al/
               LZV3BxxMa7vYk6JtRFUaMdMwwsSa319n2WXKHlqZksWk4H5gC8AH5Vpdex44SKP4
               GYVh0MO5kIS07yHfuv66PWsTRQiIHQSHYe33Dot/Mfs9BT/sVm1qRJ1ZO5GAf136
               3iQhwf8fa0PdYGfmN9I1yQMneet3W3k9T4J86mp4RuYl44Z0sv1p3oDCcuiVRgbF
               ro0dL8n7gE6fW8Hj5tnZQxYzFCwUqy8nhab+MwpOsoACOM8WvULnaMgPdflEklQT
               VL0=
               -----END CERTIFICATE-----"

  return admin:foreign-cluster-set-ssl-certificate($cfg, $fcl, $cert)

  (: Sets the SSL certificate for communication with the foreign cluster. Use
     admin:save-configuration to save the changes to the configuration or pass
     the configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-xdqp-ssl-enabled" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns <code>true</code> if SSL is enabled for the foreign cluster.
  Otherwise, <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-xdqp-ssl-enabled($cfg, $fcl)

  (: Returns 'true' if SSL is enabled for the foreign cluster. Otherwise, 'false'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-xdqp-ssl-enabled" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function enables or disables SSL for the foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
   The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    Specify <code>fn:true()</code> to enable SSL for the foreign cluster or
    <code>fn:false()</code> to disable SSL.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-set-xdqp-ssl-enabled($cfg, $fcl, fn:false())

  (: Disables SSL on the foreign cluster. Use admin:save-configuration to save the
     changes to the configuration or pass the configuration to other Admin API functions
     to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-xdqp-ssl-allow-sslv3" lib="admin"
category="Admin Library" bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function returns <code>true</code> if the SSL v3 protocol is enabled for the foreign
  cluster. Otherwise, <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-xdqp-ssl-allow-sslv3($cfg, $fcl)

  (: Returns 'true' if the SSL v3 protocol is enabled for the foreign cluster.
     Otherwise, 'false'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-xdqp-ssl-allow-sslv3" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function enables or disables the SSL v3 protocol for the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
     Specify <code>fn:true()</code> to enable the SSL v3 protocol for the foreign cluster or
    <code>fn:false()</code> to disable the SSL v3 protocol.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-set-xdqp-ssl-allow-sslv3($cfg, $fcl, fn:false())

  (: Disables the SSL v3 protocol on the foreign cluster.  Use admin:save-configuration
     to save the changes to the configuration or pass the configuration to other Admin
     API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-xdqp-ssl-allow-tls" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns <code>true</code> if the TLS protocol is enabled for the foreign cluster.
  Otherwise, <code>false</code> is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
   The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-xdqp-ssl-allow-tls($cfg, $fcl)

  (: Returns 'true' if the TLS protocol is enabled for the foreign cluster.
     Otherwise, 'false'. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-xdqp-ssl-allow-tls" lib="admin"
	category="Admin Library"
bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function enables or disables the TLS protocol for the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    Specify <code>fn:true()</code> to enable the TLS protocol for the foreign cluster or
    <code>fn:false()</code> to disable the TLS protocol.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-set-xdqp-ssl-allow-tls($cfg, $fcl, fn:true())

 (: Enables the TLS protocol on the foreign cluster. Use admin:save-configuration to save the
    changes to the configuration or pass the configuration to other Admin API functions
    to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-xdqp-ssl-ciphers" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns the SSL ciphers set for the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-xdqp-ssl-ciphers($cfg, $fcl)

  (: Returns the ciphers set for the specified foreign cluster.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-xdqp-ssl-ciphers" lib="admin"
category="Admin Library" bucket="XQuery Library Modules" subcategory="cluster">
  <apidoc:summary>
  This function sets SSL ciphers for the specified foreign cluster. The <code>value</code>
  parameter can be any standard cipher specification string for OpenSSL.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
    The SSL ciphers to set.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-set-xdqp-ssl-ciphers($cfg, $fcl, "All")

  (: Sets the ciphers for the foreign cluster to "All". Use admin:save-configuration to
     save the changes to the configuration or pass the configuration to other Admin API
     functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-get-bootstrap-hosts" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function returns one or more configuration elements that identify the bootstrap
  hosts on the specified foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
        The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(cl:foreign-host)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")

  return admin:foreign-cluster-get-bootstrap-hosts($cfg, $fcl)

  (: Returns configuration information on the bootstrap hosts on the
     foreign cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="foreign-cluster-set-bootstrap-hosts" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
   This function identifies the foreign host to be used to bootstrap communication with the
   foreign cluster.
   When a bootstrap host on a foreign cluster initially starts, it will bootstrap communications
   by establishing a connection to one or more of the hosts on this cluster.  Once a
   connection has been established between cluster hosts, the bootstrap host retrieves
   configuration information to identify which foreign
   hosts are responsible for specific foreign forests.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="cluster-id" type="xs:unsignedLong">
    The ID of the foreign cluster.
    </apidoc:param>
    <apidoc:param name="bootstrap-hosts" type="element(cl:foreign-host)*">
    The boot strap host configuration returned from the <code>admin:foreign-host</code>
    function.  You can specify multiple bootstrap hosts on a cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fcl := admin:cluster-get-foreign-cluster-id($cfg, "ClusterA")
  let $host := admin:foreign-host(13134636216063499728,
                                  "master.marklogic.com",
                                  7998)

  return admin:foreign-cluster-set-bootstrap-hosts($cfg, $fcl, $host)

  (: Sets 'master.marklogic.com' as the bootstrap host for the foreign cluster.  Use
     admin:save-configuration to save the changes to the configuration or pass the
     configuration to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-large-size-threshold" lib="admin"
category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns the threshold at which binary documents in the specified
  database should be handled as binary large objects (BLOBs). Binary documents
  less than or equal to the threshold are treated as small binary objects, stored
  in stands. Binary documents larger than the threshold are stored in the Large
  Data Directory for more efficient memory consumption.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve">><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()

  return admin:database-get-large-size-threshold($cfg, xdmp:database("Documents"))

  (: Returns the threshold for binary large objects (BLOBs). :)
    ]]> </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-get-fast-data-directory" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="forest">
  <apidoc:summary>
  This function returns the directory path set in the fast data directory field for the
  specified forest.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
     The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fid := admin:forest-get-id($cfg, "myForest")

  return admin:forest-get-fast-data-directory($cfg, $fid)

  (: Returns the directory path set in the fast data directory field
     for the myForest forest. :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-get-fast-data-max-size" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="forest">
  <apidoc:summary>
  This function returns maximum allowable size (in megabytes) of the data to be kept
  by the specified forest in its fast-data-directory, or 0 for no limit.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
     The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $fid := admin:forest-get-id($cfg, "myForest")

  return admin:forest-get-fast-data-max-size($cfg, $fid)

  (: Returns the configured limit, or zero,
     for the myForest forest. :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-foreign-replica-databases" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function is executed on the master cluster to return the replication configuration
  for the specified local database to the specified foreign replica cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
    The ID of the foreign replica cluster.
    </apidoc:param>
    <apidoc:param name="database-ids" type="xs:unsignedLong*">
    The ID of the master database on the local cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-replicas)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: This function must be executed on the master cluster. :)

  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $dbid := admin:database-get-id($cfg, "Documents")

  for $cid in admin:cluster-get-foreign-cluster-ids($cfg)
      return admin:cluster-get-foreign-replica-databases($cfg, $cid, $dbid)

  (: Returns the database replication configuration for the Documents
     database to all of the replica clusters. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-foreign-master-database" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>
  This function is executed on a replica cluster to return the replication configuration
  for the specified local database from the specified foreign master cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
    The ID of the foreign master cluster.
    </apidoc:param>
    <apidoc:param name="database-ids" type="xs:unsignedLong*">
    The ID of the replica database on the local cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-master)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $dbid := admin:database-get-id($cfg, "Documents")
  let $cid := admin:cluster-get-foreign-cluster-ids($cfg)

  return admin:cluster-get-foreign-master-database($cfg, $cid, $dbid)

  (: Returns the database replication configuration for the Documents
     database on the master cluster. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function
	name="database-get-config-for-foreign-replicas-on-foreign-cluster"
	lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function returns the replica configuration on a
  foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
	    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
	            The ID of the foreign cluster containing the replica host.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $cid := admin:cluster-get-foreign-cluster-ids($cfg)
  return
  admin:database-get-config-for-foreign-replicas-on-foreign-cluster(
     $cfg, $cid)

  (: Returns the database replica configuration for the foreign
     cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function
	name="database-get-config-for-foreign-master-on-foreign-cluster"
	lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function returns the master configuration on a
  foreign cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned
     from one of the Admin module functions.
    </apidoc:param>
	    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
	            The ID of the foreign cluster containing the replica host.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $cfg := admin:get-configuration()
  let $cid := admin:cluster-get-foreign-cluster-ids($cfg)
  return
  admin:database-get-config-for-foreign-master-on-foreign-cluster(
     $cfg, $cid)

  (: Returns the database master configuration for the foreign
     cluster. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-output-method" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  default output serialization method setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-method($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-byte-order-mark" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output byte order mark setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-byte-order-mark($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-cdata-section-namespace-uri"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output CDATA section namespace URI setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-cdata-section-namespace-uri($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-cdata-section-localname"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output CDATA section localname setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-cdata-section-localname($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-doctype-public" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  public doctype output setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-doctype-public($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-doctype-system" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  system doctype output setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-doctype-system($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-escape-uri-attributes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output escape URI attributes setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-escape-uri-attributes($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-include-content-type"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output include content type setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-include-content-type($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-indent" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output indent setting for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-indent($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-indent-tabs" lib="admin"
      category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
  <apidoc:summary>This function returns the value for the
		  output indent tab settings for the specified App Server.
  </apidoc:summary>
  <apidoc:params>
     <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-indent-tabs($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-indent-untyped" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output indent untyped setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-indent-untyped($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-media-type" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output media type setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-media-type($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-normalization-form" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output normalization form setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-normalization-form($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-omit-xml-declaration"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output omit XML declaration setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-omit-xml-declaration($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-standalone" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output standalone setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-standalone($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-undeclare-prefixes" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output undeclare prefixes setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-undeclare-prefixes($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-version" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output version setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-version($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-get-output-include-default-attributes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
    <apidoc:summary>This function returns the value for the
		  output include default attributes setting for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-output-include-default-attributes($config,
             admin:appserver-get-id($config, $groupid, "myAppServer"))

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-method" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures the default output serialization
                  method for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for the serialization method, one of
		    <code>xml</code>, <code>html</code>, <code>xhtml</code>,
			<code>text</code>, <code>sparql-results-json</code>,
			<code>sparql-results-csv</code>, <code>n-triples</code>,
			<code>n-quads</code>, or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-method($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "html")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-byte-order-mark"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether for the specified App Server
		  the output sequence of octets is or is not to be preceded
                  by a byte order mark by default.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for outputting a byte order mark, one of
		    <code>yes</code>, <code>no</code>,
		    or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-byte-order-mark($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "yes")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-cdata-section-namespace-uri"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the namespace URI for any
                  CDATA section localnames configured for the specified
                  App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    A namespace URI for CDATA section elements.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-cdata-section-namespace-uri($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "http://myNamespace.com")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-cdata-section-localname"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the default element localname or list
                  of element localnames to be output as CDATA sections
                  for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    A CDATA section element localname or space-separated
                    list of CDATA section element localnames.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-cdata-section-localname($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "myElement")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-doctype-public"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures a default public identifier
                  to use on the emitted DOCTYPE for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    A public identifier URI.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-doctype-public($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "http://myPublicIdentifier")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-doctype-system"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures a default system identifier
                  to use on the emitted DOCTYPE for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    A system identifier URI.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-doctype-system($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "http://mySystemIdentifier")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-escape-uri-attributes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether or not to apply Unicode
                  normalization, percent-encoding, and HTML escaping when
                  serializing URI attributes by default for the specified
                  App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for escaping serialized URI attributes,
                    one of <code>yes</code>, <code>no</code>,
		    or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-escape-uri-attributes($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "no")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-include-content-type"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether or not to include the
                  content-type declaration when serializing nodes for
                  the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for including a content-type declaration,
                    one of <code>yes</code>, <code>no</code>,
		    or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-include-content-type($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "no")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-indent"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether or not to pretty-print (indent) typed XML
		  (that is, XML for which there is an in-scope schema) output for the
		  specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for indenting output for typed XML,
            one of <code>yes</code>, <code>no</code>, or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-indent($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "no")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-indent-tabs" lib="admin"
      category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
  <apidoc:summary>This function configures whether or not to set tabs (indent)
          in typed XML output(that is, XML for which there is an in-scope schema)
		  for the specified App Server. Tabs are used to replace 8 spaces,
		  so tabs only used when the element depth reaches 4 spaces. This function
		  enables you to turn off tabs (for example, "indent-tabs=no").
  </apidoc:summary>
    <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for indenting output for typed XML,
            one of <code>yes</code>, <code>no</code>, or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-indent-tabs($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "no")
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-indent-untyped"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether or not to pretty-print
                  (indent) untyped XML (that is, XML for which there is no
                  in-scope schema) output for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for indenting output for typed XML,
                    one of <code>yes</code>, <code>no</code>,
		    or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-indent-untyped($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "yes")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-media-type"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets the default serialization media
                  type for the specified App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for output media type,
            a MIME type string such as <code>text/xml.</code>
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-media-type($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "text/plain")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-normalization-form"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function sets a Unicode normalization form to be
                  applied by default to serialized output for the specified
                  App Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for the output normalization form, one of
		    <code>none</code>, <code>NFC</code>, <code>NFD</code>,
		    or <code>NFKD</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-normalization-form($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "NFKD")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-omit-xml-declaration"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether serialized output for the
                  specified App Server should omit the inclusion of an XML
                  declaration by default.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for omitting the XML declaration,
                    one of <code>yes</code>, <code>no</code>,
		    or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-omit-xml-declaration($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "yes")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-standalone"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether for the specified App Server
		  an XML delcaration in serialized output should include
                  a <code>standalone</code> attribute by default.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
                    For a value of <code>yes</code> or <code>no</code>,
                    include <code>standalone=</code><i>value</i> in
                    the XML declaration; for a value of <code>omit</code>,
                    omit <code>standalone=</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-standalone($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "yes")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-undeclare-prefixes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether by default, serialization
                  for the specified App Server should undeclare the namespace
                  prefix of any child element that does not bind the prefix
                  of its parent element.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for undeclaring prefixes, one of
                    <code>yes</code>, <code>no</code>, or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-undeclare-prefixes($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "yes")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-version"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function stipulates a version of the default
                  serialization method associated with the specified App
                  Server.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    A release version string, one of <code>1.0</code>
                    or <code>4.0</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-version($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "1.0")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>
  <apidoc:function name="appserver-set-output-include-default-attributes"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="appserver">
	  <apidoc:summary>
		  This function configures whether for the specified App
                  Server, attributes defaulted with a schema should be
                  included in the serialization.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The default value for including default attributes in
                    serialization, one of <code>yes</code>, <code>no</code>,
		    or <code>default</code>.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-output-include-default-attributes($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         "yes")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-add-foreign-database"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="cluster" hidden="true">
	  <apidoc:summary>
		  This function adds a foreign database to a database
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="database-id" type="xs:unsignedLong">
	            The ID of the replica database to be added.
	    </apidoc:param>
	    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
	            The ID of the foreign cluster containing the replica host.
	    </apidoc:param>
	    <apidoc:param name="foreign-database-id" type="xs:unsignedLong">
	            The ID of the replica database.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("db1")
  return
  admin:database-add-foreign-database($config, $dbid,
        17017686053246134246, 6853205931373075521)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="database-remove-foreign-database"
	  lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="cluster" hidden="true">
	  <apidoc:summary>
		  This function removes a foreign database from a database
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="database-id" type="xs:unsignedLong">
	            The ID of the replica database to be added.
	    </apidoc:param>
	    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong">
	            The ID of the foreign cluster containing the replica host.
	    </apidoc:param>
	    <apidoc:param name="foreign-database-id" type="xs:unsignedLong">
	            The ID of the replica database.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("db1")
  return
  admin:database-delete-foreign-database($config, $dbid,
        17017686053246134246, 6853205931373075521)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

<apidoc:function name="database-path-namespace" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function constructs a namespace element with the specified prefix and URI.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="prefix" type="xs:string">The namespace prefix.</apidoc:param>
    <apidoc:param name="namespace-uri" type="xs:string">The namespace URI.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:path-namespace)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-path-namespace("aaa", "http://aaa.com")
  =>
    <path-namespace xmlns="http://marklogic.com/xdmp/database">
      <prefix>aaa</prefix>
      <namespace-uri>http://aaa.com</namespace-uri>
    </path-namespace>
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-path-namespaces" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the value of any namespace definitions predefined for the specified database. If none are defined, returns the empty sequence.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:path-namespace)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
  admin:database-get-path-namespaces(admin:get-configuration(), xdmp:database("Documents"))
  =>
   <path-namespace xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://marklogic.com/xdmp/database">
     <prefix>aaa</prefix>
     <namespace-uri>http://aaa.com</namespace-uri>
   </path-namespace>
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-in-use-path-namespace-prefixes" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the prefixes of all the namespaces that are in use by some path or geospatial path index. If none is used by any path, returns the empty sequence.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
  admin:database-in-use-path-namespace-prefixes(admin:get-configuration(), xdmp:database("Documents"))

  (: Returns the prefixes of namespaces used in path range indexes defined for the
     'Documents' database. :)
   ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-add-path-namespace" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>Add one or more namespaces to a database configuration, which will predefine the namespace(s) for all XPath expressions used in range index definitions.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example, xdmp:database("myDatabase")).
    </apidoc:param>
    <apidoc:param name="path-namespaces" type="element(db:path-namespace)*">The namespace specification to be added.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $nsspec := admin:database-path-namespace("aaa", "http://aaa.com")
  return
    admin:database-add-path-namespace($config, $dbid, $nsspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-delete-path-namespace" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules"
  subcategory="database">
  <apidoc:summary>This function deletes the specified namespaces from the configuration for the specified database. If the namespace is already in use in an index path expression, then ADMIN-PATHNAMESPACEINUSE error is returned.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
    <apidoc:param name="path-namespaces" type="element(db:path-namespace)*">The namespace specification that needs to be deleted.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $pns := admin:database-get-path-namespaces($config,$dbid)
  return
    admin:database-delete-path-namespace($config,$dbid,$pns[1])

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-range-path-index" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function constructs a path range index specification.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="database-id" type="xs:unsignedLong">
		  The ID of the database (for example,
		  <code>xdmp:database("myDatabase")</code>).
	  </apidoc:param>
	  <apidoc:param name="scalar-type" type="xs:string">
		  A valid type for the range index. Must be one of:
		  int, unsignedInt, long, unsignedLong, float, double, decimal,
		  dateTime, time, date, gYearMonth, gYear, gMonth, gDay,
		  yearMonthDuration, dayTimeDuration, string, anyURI, or point.
	 </apidoc:param>
	 <apidoc:param name="pathexpr" type="xs:string">
		 A valid XPath expression.
	 </apidoc:param>
    <apidoc:param name="collation" type="xs:string?">
	    The collation URI (for example,
	    <code>http://marklogic.com/collation/</code>).
	    The collation is only needed for string and anyURI indexes; for
	    other indexes, specify the empty string ("") for this parameter.
    </apidoc:param>
    <apidoc:param name="range-value-positions" type="xs:boolean">
	    A boolean specifying whether to maintain value postions in this
	    index (used with co-occurrences).
    </apidoc:param>
    <apidoc:param name="invalid-values" type="xs:string">
	    An option to handle values that do not meet the range index type.
	    Must be one of: reject,ignore.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:range-path-index)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-range-path-index(
  xdmp:database('Documents'),
  "string",
  "/a/b/c",
  "http://marklogic.com/collation/",
  fn:false(),
  "ignore")
  =>
  <range-path-index xmlns="http://marklogic.com/xdmp/database">
    <scalar-type>string</scalar-type>
    <path-expression>/a/b/c</path-expression>
    <collation>http://marklogic.com/collation/</collation>
    <range-value-positions>false</range-value-positions>
    <invalid-values>ignore</invalid-values>
  </range-path-index>
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-range-path-indexes" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>This function returns the range path indexes specification(s) for the specified database from the configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:range-path-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-get-range-path-indexes(admin:get-configuration(), xdmp:database("Documents"))
  =>
    <range-path-index xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://marklogic.com/xdmp/database">
      <scalar-type>string</scalar-type>
      <path-expression>/a/b/c</path-expression>
      <collation>http://marklogic.com/collation/</collation>
      <range-value-positions>false</range-value-positions>
      <invalid-values>ignore</invalid-values>
    </range-path-index>
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-add-range-path-index" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function adds a range path index to the specified database in the configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
    <apidoc:param name="range-indexes" type="element(db:range-path-index)*">An path range index specification, typically the result of an admin:database-range-path-index call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $pathspec := admin:database-range-path-index(
  $dbid,
  "string",
  "/a/b/c",
  "http://marklogic.com/collation/",
  fn:false(),
  "ignore")
  return
    admin:database-add-range-path-index($config, $dbid, $pathspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  (: This is like the previous example, but adds a path-namespace which
     is used in the path specification. :)

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $ns := admin:database-path-namespace("foo", "foo")
  let $config := admin:database-add-path-namespace($config, $dbid, $ns)
  let $pathspec := admin:database-range-path-index(
  $dbid,
  "string",
  "/a/foo:b/c",
  "http://marklogic.com/collation/",
  fn:false(),
  "ignore")
  return
    admin:database-add-range-path-index($config, $dbid, $pathspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-delete-range-path-index" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function deletes a range path index for the specified database in the configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
    <apidoc:param name="range-indexes" type="element(db:range-path-index)*">An path range index specification, typically the result of an admin:database-range-path-index call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-range-path-index(
  $dbid,
  "string",
  "/a/b/c",
  "http://marklogic.com/collation/",
  fn:false(),
  "ignore")
  return
    admin:database-delete-range-path-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-geospatial-path-index" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    This function constructs a geospatial path index specification. For usage
    details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/geospatial.xml%2387144'>Geospatial Path Point Queries and Indexes</a> in the <em>Search Developer's Guide</em>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pathexpr" type="xs:string">
      A valid XPath expression.
    </apidoc:param>
    <apidoc:param name="coordinate-system" type="xs:string">
      The coordinate system.  Must be one of <code>wgs84</code>,
      <code>wgs84/double</code>, <code>etrs89</code>,
      <code>etrs89/double</code>, <code>raw</code>, <code>raw/double</code>.
    </apidoc:param>
    <apidoc:param name="range-value-positions" type="xs:boolean">
      A boolean specifying whether to maintain value postions in this
      index (used with co-occurrences).
    </apidoc:param>
    <apidoc:param name="point-format" type="xs:string">
      The point format in the data: "point" means latitude precedes
      longitude (this is the default); "long-lat-point" means longitude
      precedes latitude. To use the default value of "point", simply omit
      this parameter. Do not specify an empty string.
    </apidoc:param>
    <apidoc:param name="invalid-values" type="xs:string">
      An option to handle values that do not meet the range index type.
      Must be one of: reject,ignore.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:geospatial-path-index)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
admin:database-geospatial-path-index(
  "/aaa:a/aaa:b",
  "wgs84",
  fn:false(),
  "long-lat-point",
  "reject" )
=>
<geospatial-path-index xmlns="http://marklogic.com/xdmp/database">
  <path-expression>/aaa:a/aaa:b</path-expression>
  <coordinate-system>wgs84</coordinate-system>
  <point-format>long-lat-point</point-format>
  <range-value-positions>false</range-value-positions>
  <invalid-values>reject</invalid-values>
</geospatial-path-index>
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-geospatial-path-indexes" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules"
    subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    This function returns the geospatial path indexes specification(s) for
    the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of the
      Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
      The ID of the database (for example, xdmp:database("myDatabase")).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:geospatial-path-index)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-get-geospatial-path-indexes(
    admin:get-configuration(),xdmp:database("Documents"))
=>
  <geospatial-path-index xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://marklogic.com/xdmp/database">
    <path-expression>/aaa:a/aaa:b</path-expression>
    <coordinate-system>wgs84</coordinate-system>
    <point-format>long-lat-point</point-format>
    <range-value-positions>false</range-value-positions>
    <invalid-values>reject</invalid-values>
  </geospatial-path-index>
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-add-geospatial-path-index" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function adds a range path index to the specified database in the configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
    <apidoc:param name="geospatial-path-indexes" type="element(db:geospatial-path-index)*">A geospatial path index specification, typically the result of an admin:database-geospatial-path-index call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $indexspec :=   admin:database-geospatial-path-index(
    "/aaa:a/aaa:b",
    "wgs84",
    fn:false(),
    "long-lat-point",
    "reject" )
  return
    admin:database-add-geospatial-path-index($config, $dbid, $indexspec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-delete-geospatial-path-index" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function deletes a geospatial path index for the specified database in the configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database (for example, xdmp:database("myDatabase")).</apidoc:param>
    <apidoc:param name="geospatial-path-indexes" type="element(db:geospatial-path-index)*">A geospatial path index specification, typically the result of an admin:database-geospatial-path-index call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $rangespec := admin:database-geospatial-path-index(
    "/aaa:a/aaa:b",
    "wgs84",
    fn:false(),
    "long-lat-point",
    "reject")
  return
    admin:database-delete-geospatial-path-index($config, $dbid, $rangespec)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-odbcserver-ids" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>This function returns the ids of all of the ODBC App Servers in the specified
		group.
	</apidoc:summary>
  <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-get-odbcserver-ids($config, $groupid)

  (: Returns the ids of the ODBC servers in the Default group. :)

     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="odbc-server-create" lib="admin" category="Admin Library"
	bucket="XQuery Library Modules"
	subcategory="appserver" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
	<apidoc:summary>
		  This function creates a  new ODBC App Server with the
		  specified name, root, and port in the configuration.
	</apidoc:summary>
      <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="appserver-name" type="xs:string">
		    The name of the App Server.  The name must be unique
                    among the App Server names for the group.
	    </apidoc:param>
	    <apidoc:param name="root" type="xs:string">
		    The root of the App Server.
	    </apidoc:param>
	    <apidoc:param name="port" type="xs:unsignedLong">
		    The port on which the App Server listens. The port must
		    be available on the host.
	    </apidoc:param>
            <apidoc:param name="modules-id" type="item()">
                    The ID of the modules database (for example,
                    <code>xdmp:database("Modules")</code>).
                    To specify the filesystem, use 0 or "file-system"
            </apidoc:param>
            <apidoc:param name="database-id" type="xs:unsignedLong">
                    The ID of the database (for example,
                   <code>xdmp:database("myDatabase")</code>).
            </apidoc:param>
      </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "myGroup")
  return
  admin:odbc-server-create($config, $groupid, "odbcServer",
       "/space/mycode", 5432, 0, xdmp:database("myDatabase") )

  (: Creates and new ODBC App Server and returns the new configuration element --
     use admin:save-configuration to save the changes to the configuration or pass
     the configuration to other Admin API functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-ssl-fips-enabled" lib="admin"
category="Admin Library" bucket="XQuery Library Modules"
subcategory="cluster">
  <apidoc:summary>This function returns true when OpenSSL FIPS 140-2 mode is
	enabled in the cluster configuration. If OpenSSL FIPS 140-2 mode is not
	enabled, false is returned.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module
	functions
	</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[ xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
let $config := admin:get-configuration()
return admin:cluster-get-ssl-fips-enabled($config)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-ssl-fips-enabled" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="cluster">
  <apidoc:summary>This function enables or disables OpenSSL FIPS 140-2
	mode for the cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
    <apidoc:param name="flag" type="xs:boolean">Specify true to enable FIPS
	140-2 mode for the cluster. Specify false to disable FIPS 140-2 mode for
	the cluster.
	</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[ xquery version "1.0-ml";

   import module namespace admin = "http://marklogic.com/xdmp/admin"
          at "/MarkLogic/admin.xqy";
   let $config := admin:get-configuration()
   return admin:cluster-set-ssl-fips-enabled($config, fn:false())

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="database-validate-path-expression" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database" hidden="true">
  <apidoc:summary>
   This function validates the specified path expression, along with
   any namespaces used in the path expression.
   </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
      The id for the specified database (for example,
      <code>
      <a href="#xdmp:database">xdmp:database</a>("myDatabase")
      </code>).
    </apidoc:param>
    <apidoc:param name="pathexpr" type="xs:string">
      The path expression to validate.
    </apidoc:param>
    <apidoc:param name="ignore-ns" type="xs:boolean">
      Specify <code>fn:true()</code> to ignore any namespaces used in the path expression.
      Otherwise, specify <code>fn:false()</code> to validate namespaces.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-validate-path-expression(
      admin:get-configuration(),
      xdmp:database("SQLdata"),
      "/name/fname[@foo]",
      fn:false())

  (: Returns true if the specified path expression and namespaces used in the
     path expression are valid. :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-validate-path-namespaces" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database" hidden="true">
  <apidoc:summary>This function returns any undefined namespace prefixes used in a path expression.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
      The id for the specified database (for example,
      <code>
      <a href="#xdmp:database">xdmp:database</a>("myDatabase")
      </code>).
    </apidoc:param>
    <apidoc:param name="pathexpr" type="xs:string">
      The path expression to validate.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  admin:database-validate-path-namespaces(
      admin:get-configuration(),
      xdmp:database("Documents"),
      "/foo:bar")

  ==> "foo"

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-background-io-limit" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function gets the value for the I/O background limit that controls the
  I/O resoources that I/O tasks
  (for example, merges) will consume.  If the limit is reached, then
  merges are throttled back to limit their maximum I/O.  This can help
  in situations when the I/O system on the computer is maxed out.  In normal
  operations, you should not need to set this parameter.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-get-background-io-limit($config, $groupid)

  (: Returns the background I/O setting for the Default group. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-background-io-limit" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function sets a limit on the amount of I/O that background tasks
  (for example, merges) will consume.  If the limit is reached, then
  merges are throttled back to limit their maximum I/O.  This can help
  in situations when the I/O system on the computer is maxed out.  In normal
  operations, you should not need to set this parameter.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    <apidoc:param name="max-megabytes-per-second" type="xs:unsignedInt">
    A number representing the maximum amount of I/O, in
    megabytes-per-second, to allow for each host in the group.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return
  admin:group-set-background-io-limit($config, $groupid, 100)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-s3-domain" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function gets the simple storage service internet domain name
  for hosts in the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-get-s3-domain($config, $groupid)
  ==> "s3.amazonaws.com"
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-set-s3-domain" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function sets the simple storage service internet domain name
  for hosts in the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    <apidoc:param name="domain" type="xs:string">
      A string specifying the internet domain name
      of the simple storage service.
      To access a different simple storage services that is API
      compatible with Amazon S3, specify it here.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-set-s3-domain($config, $groupid, "my.domain.name")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-s3-protocol" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function gets the simple storage service protocol
  for hosts in the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-get-s3-protocol($config, $groupid)
  ==> "http"
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-set-s3-protocol" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function sets the simple storage service protocol
  for hosts in the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    <apidoc:param name="protocol" type="xs:string">
      A string specifying the protocol to use when accessing
      the simple storage service.
      The choices are "http" and "https".
      The default is "http".
      To use a more secure protocol when accessing the simple
      storage service, choose "https".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-set-s3-protocol($config, $groupid, "https")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-s3-server-side-encryption" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function gets the method of server side encryption for data at rest
  on the simple storage service.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-get-s3-server-side-encryption($config, $groupid)
  ==> "none"
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-set-s3-server-side-encryption" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
  This function gets the method of server side encryption for data at rest
  on the simple storage service.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
	    </apidoc:param>
    <apidoc:param name="protocol" type="xs:string">
      A string specifying the method of server side encryption
      for data at rest on the simple storage service.
      The choices are "none" and "aes256".
      The default is "none".
      To specify server side encryption for data at rest on the
      simple storage service, choose "aes256".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-set-s3-server-side-encryption($config, $groupid, "aes256")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-security-database" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	  <apidoc:summary>
		  This function returns the ID of the security database
		  for the specified group from the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  return admin:group-get-security-database($config, $groupid)
  (: returns the ID of the security database :)

  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="group-set-security-database" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
	  <apidoc:summary>
		  This function sets the security database for a group
		  to the specified database in the configuration.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
      <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="value" type="xs:unsignedLong">
	      The new database ID for the auxiliary database.
      </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:group-get-id($config, "Default")
  let $dbid := xdmp:database("myDatabase"))
  return admin:group-set-security-database($config, $groupid, $dbid)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="appserver-get-rewrite-resolves-globally" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
  <apidoc:summary>This function gets the value for the
  rewrite-resolves-globally property, which allows rewritten URLs to be
  resolved from the <em>marklogic-dir/Modules</em> directory as well as
  from the App Server root.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:appserver-get-rewrite-resolves-globally($config,
           admin:appserver-get-id($config, $groupid, "myAppServer"))
  (: returns the value of the parameter :)


    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-rewrite-resolves-globally"
	lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>This function sets the value for the
  rewrite-resolves-globally property, which allows rewritten URLs to be
  resolved from the <em>marklogic-dir/Modules</em> directory as well as
  from the App Server root.  This function requires a restart of
  MarkLogic Server for a change to this setting to take effect.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	A configuration specification, typically as returned from one of the Admin
	module functions.
	</apidoc:param>
	    <apidoc:param name="appserver-id" type="xs:unsignedLong">
		    The ID of the App Server. Typically, this is the result
		    of an <code>admin:appserver-get-id</code> call.
	    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">Set to fn:true to enable,
    fn:false to disable.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $groupid := admin:appserver-get-id($config, "Default")
  return
  admin:appserver-set-rewrite-resolves-globally($config,
         admin:appserver-get-id($config, $groupid, "myAppServer"),
         fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)


    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-field-path" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function is a constructor for field-path element. The field path element
  is used to construct a field.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="field-path" type="xs:string">
    A valid XPath expression.
    </apidoc:param>
    <apidoc:param name="weight" type="xs:double">
    The path weight used in relavance calculations.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:field-path)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-field-path("/a/b", xs:double(2.0))
=>
  returns element(db:field-path)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-path-field" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function constructs a field specification that has field paths.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="field-name" type="xs:string">
    The name of the field.
    </apidoc:param>
    <apidoc:param name="field-paths" type="element(db:field-path)+">
    The field paths specification, typically the result of one or more calls
    for admin:database-field-path.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:field)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $field-name := "myField"
let $field-paths := admin:database-field-path("/a/b", xs:double(2.0))

return
   admin:database-path-field($field-name,$field-paths)

 ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-validate-field-paths" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
  This function checks if the paths conform to the permissible XPath syntax. If
  any of the paths doesn't, it will return an error. Conformance to the
  permissible syntax for an individual path can also be checked using function
  <a href="#cts:valid-index-path"><code>cts:valid-index-path</code></a>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-paths" type="element(db:field-path)*">
    The sequence of field-path elements, typically created using
    admin:database-field-path call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

declare namespace db="http://marklogic.com/xdmp/database";

let $field-path := admin:database-field-path("/a/b/@c", 3.0)
let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
return
admin:database-validate-field-paths(
  $config,
  $dbid,
  $field-path/path)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-validate-path-fields" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
  For a given sequence of fields, this function validates all the paths on
  each field using admin:database-validate-field-paths call.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="fields" type="element(db:field)*">
    A sequence of fields that will be validated for paths.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

declare namespace db="http://marklogic.com/xdmp/database";

let $field-path := admin:database-field-path("/a/b/@c", 3.0)
let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
let $field-name := "myField"
let $field := admin:database-path-field($field-name,$field-path)
return
admin:database-validate-path-fields(
  $config,
  $dbid,
  $field)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-delete-field-paths" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function deletes paths from a specified field.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
    The name of the field.
    </apidoc:param>
    <apidoc:param name="field-paths" type="element(db:field-path)*">
    The sequence of field-path elements, typically created using
    admin:database-field-path call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
declare namespace db="http://marklogic.com/xdmp/database";

let $p := admin:database-field-path("/a/b/@c", 3.0)
let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
let $field-name := "pathAttr1"
return
  admin:database-delete-field-paths($config, $dbid, $field-name, $p)

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-add-field-paths" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function adds given paths to the field specified by field-name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
    The name of the field.
    </apidoc:param>
    <apidoc:param name="field-paths" type="element(db:field-path)*">
    The sequence of field-path elements, typically created using
    admin:database-field-path call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

declare namespace db="http://marklogic.com/xdmp/database";

let $p := admin:database-field-path("/a/b/@c", 3.0)
let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
let $field-name := "pathAttr1"
return
  admin:database-add-field-paths($config, $dbid, $field-name, $p)

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-field-paths" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="database">
  <apidoc:summary>
  This function returns all the paths on a given field.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
    The name of the field.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:field-path)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
declare namespace db = "http://marklogic.com/xdmp/database";
  let $config := admin:get-configuration()
  let $dbid := xdmp:database("Documents")
  let $field-name2 := "myField2"
return
  admin:database-get-field-paths($config,$dbid,$field-name2)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-rename" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="forest">
  <apidoc:summary>
  This function renames a forest.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
    <apidoc:param name="new-name" type="xs:string">
    New name to give the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:forest-rename(admin:get-configuration(), 15096846875773626521, "blah")
return admin:save-configuration($config)

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-triple-index" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules"
  subcategory="database">
  <apidoc:summary>
  This function sets the triple index on or off for a database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
	    Set to <code>fn:true</code> to enable the triple index,
	    <code>fn:false</code> to disable it.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
return
admin:database-set-triple-index($config, $dbid, fn:true() )

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-triple-positions" lib="admin"
  category="Admin Library" bucket="XQuery Library Modules"
  subcategory="database">
  <apidoc:summary>
  This function sets the triple positions of a database to true or false.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    A boolean value of triple positions to set on database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
return
admin:database-set-triple-positions($config, $dbid, fn:true())

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-in-memory-triple-index-size" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
	  This function sets the size, in megabytes, of the in-memory triple
	  index. This is used for memory to manage triple index data in
	  in-memory stands.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The value representing the number of megabytes of memory for the
	    in-memory triple index.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
return
admin:database-set-in-memory-triple-index-size($config, $dbid, 256)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-triple-index" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
	  This function returns <code>true</code> if the triple index
	  is enabled for the specified database, <code>false</code>
	  if it is not enabled.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
return
admin:database-get-triple-index($config, $dbid)
(: Returns true or false, depending on if the triple index is enabled :)
]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-triple-positions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
  This function returns triple positions setting of a database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code>xdmp:database("myDatabase")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()

return
   admin:database-get-triple-positions($config, xdmp:database("Kennedy"))

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-in-memory-triple-index-size" lib="admin" category="Admin Library"
bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns the in memory triple index size setting (in megabytes)
  for the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database (for example,
    <code>xdmp:database("myDatabase")</code>).
   </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()

return
   admin:database-get-in-memory-triple-index-size($config, xdmp:database("Kennedy"))

(: Returns the number of megabytes configured for the triple index. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-triple-cache-size" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
  This function returns the value of the triple cache size for the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-get-triple-cache-size($config, $groupid)
(: returns the group cache size for the triple index :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-triple-cache-partitions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
	  This function returns the number of triple cache partitions
	  configured for the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-get-triple-cache-partitions($config, $groupid)
(: returns the number of triple cache partitioned configured :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-triple-value-cache-size" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
	  This function returns the size of triple value cache
	  configured for the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-get-triple-value-cache-size($config, $groupid)
(: returns the size configured for the triple value cache :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-triple-value-cache-partitions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
	  This function returns the number of triple value cache partitions
	  configured for the group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-get-triple-value-cache-partitions($config, $groupid)
(: returns the number of triple value cache partitioned configured :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-set-triple-cache-size" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
	  This function sets the number of triple cache partitions to
	  allocate. This is a "cold" operation; when you use
	  <code>admin:save-configuration</code> to save the configuration,
	  it will automatically restart MarkLogic Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The size (in megabytes) to set the triple cache.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-set-triple-cache-size($config, $group-id, 128)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-triple-cache-partitions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
	  This function sets the number of partitions to allocate for
	  the triple index cache. More partitions allow more
	  concurrency, but make each individual cache partition smaller,
	  which could make it more likely for the cache to fill up. This
	  is a "cold" operation; when you use
	  <code>admin:save-configuration</code> to save the
	  configuration, it will automatically restart MarkLogic Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    A new value for the number of cache partitions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:usage>
    The server may use fewer or more partitions than the configured
    value to keep partition sizes between 1024 and 12288 megabytes.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-set-triple-cache-partitions($config, $group-id, 1)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-triple-value-cache-size" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
  This function sets the size of the value cache for the triple index.
  This is a "cold" operation; when you use <code>admin:save-configuration</code>
  to save the configuration, it will automatically restart MarkLogic Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The size (in megabytes) to set the triple value cache.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-set-triple-value-cache-size($config, $group-id, 64)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-triple-value-cache-partitions" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
	  This function sets the number of partitons to allocate for the
	  triple value index cache. More partitions allow more
	  concurrency, but make each individual cache partition smaller,
	  which could make it more likely for the cache to fill up. This
	  is a "cold" operation; when you use
	  <code>admin:save-configuration</code> to save the
	  configuration, it will automatically restart MarkLogic Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    A new value for the number of cache partitions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:usage>
    The server may use fewer or more partitions than the configured
    value to keep partition sizes between 512 and 12288 megabytes.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-set-triple-value-cache-partitions($config, $group-id, 1)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-get-triple-cache-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function gets the timeout value for the triple cache.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
	  </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-get-triple-cache-timeout($config, $groupid)
(: returns the triple cache timeout value configured :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-triple-value-cache-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function gets the timeout value for the triple value cache.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
	  </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-get-triple-value-cache-timeout($config, $groupid)
(: returns the triple value cache timeout value configured :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-triple-cache-timeout" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function sets the timeout value for the triple cache.
		This is a "cold" operation; when you use
		<code>admin:save-configuration</code> to save the configuration,
		it will automatically restart MarkLogic Server.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
	  </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The time, in seconds, before a cached page can be flushed to disk.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-set-triple-cache-timeout($config, $group-id, 300)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-triple-value-cache-timeout"
	lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function sets the timeout value for the triple value cache.
		This is a "cold" operation; when you use
		<code>admin:save-configuration</code> to save the configuration,
		it will automatically restart MarkLogic Server.
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
	  </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The time, in seconds, before a cached page can be flushed to disk.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-set-triple-value-cache-timeout($config, $group-id, 300)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="appserver-get-using-namespaces" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
    This function returns the value of any "using" namespaces
    predefined for the specified App Server.  If none are defined,
    returns the empty sequence.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
    The ID of the App Server. Typically, this is the result
	of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:using-namespace)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver-id :=
  admin:appserver-get-id($config,
    admin:group-get-id($config, "Default"), "my-app-server")
return
admin:appserver-get-using-namespaces($config, $appserver-id)
(: returns the namespace(s), if any, for the specified App Server :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-module-locations" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
    This function returns the value of any module locations
    predefined for the specified App Server.  If none are defined,
    returns the empty sequence.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
    The ID of the App Server. Typically, this is the result
	of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:module-location)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver-id :=
  admin:appserver-get-id($config,
    admin:group-get-id($config, "Default"), "my-appserver-name")
return
admin:appserver-get-module-locations($config, $appserver-id)
(: returns the location(s), if any, for the specified App Server :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="appserver-add-using-namespace" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
    Add one or more "using" namespaces to an App Server configuration,
    which add the namespaces to the namespace path for all requests
    evaluated against that App Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
    The ID of the App Server. Typically, this is the result
	of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="namespaces" type="element(gr:using-namespace)*">
	    A sequence of using namespace elements. Typically these are the
	    result of calls to admin:group-using-namespace().
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver := admin:appserver-get-id($config,
    admin:group-get-id($config, "Default"), "MyAppServer")
let $ns := admin:group-using-namespace("my.namespace")
return admin:appserver-add-using-namespace($config, $appserver, $ns)

 (: returns the new configuration element -- use admin:save-configuration
    to save the changes to the configuration or pass the configuration
    to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-delete-using-namespace" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
    Delete one or more "using" namespaces from an App Server configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
    The ID of the App Server. Typically, this is the result
	of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="namespaces" type="element(gr:using-namespace)*">
	    A sequence of using namespace elements. Typically these are the
	    result of calls to admin:group-using-namespace().
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver := admin:appserver-get-id($config,
    admin:group-get-id($config, "Default"), "MyAppServer")
let $ns := admin:group-using-namespace("my.namespace")
return admin:appserver-delete-using-namespace($config, $appserver, $ns)

 (: returns the new configuration element -- use admin:save-configuration
    to save the changes to the configuration or pass the configuration
    to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-add-module-location" lib="admin"
   category="Admin Library" bucket="XQuery Library Modules"
   subcategory="appserver">
  <apidoc:summary>
    Add one or more module namespace to location mappings to an App Server
    configuration.  The mappings are used to look up a location for an XQuery
    library module for any request on that App Server when the library module
    is requested using only the module namespace URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
    The ID of the App Server. Typically, this is the result
    of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="module-locations" type="element(gr:module-location)*">
      A sequence of module location mapping element. Typically these are the result of calls to admin:group-module-location().
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver-id :=
  admin:appserver-get-id($config,
    admin:group-get-id($config, "Default"), "my-appserver-name")
return
admin:appserver-add-module-location($config, $appserver-id,
     admin:group-module-location("my-namespace", "/my/location/module.xqy"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="group-get-using-namespaces" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="group">
  <apidoc:summary>
    This function returns the value of any "using" namespaces
    predefined for the specified Group.  If none are defined,
    returns the empty sequence.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:using-namespace)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-module-locations" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
    This function returns the value of any module locations
    predefined for the specified Group.  If none are defined,
    returns the empty sequence.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:module-location)*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "Default")
return
admin:group-get-module-locations($config, $group-id)
(: returns the location(s), if any, for the specified group :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="appserver-delete-module-location" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="appserver">
  <apidoc:summary>
	  Delete one or more module location bindings from an App Server
	  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
    The ID of the App Server. Typically, this is the result
	of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="module-locations" type="element(gr:module-location)*">
	    A sequence of module location mapping element. Typically these are
	    the result of calls to admin:group-module-location().
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver-id :=
  admin:appserver-get-id($config,
    admin:group-get-id($config, "Default"), "my-appserver-name")
return
admin:appserver-delete-module-location($config, $appserver-id,
     admin:group-module-location("my-namespace", "/my/location/module.xqy"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-using-namespace" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
    This function constructs a using namespace element with the
    specified URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace-uri" type="xs:string">
      The namespace URI.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:using-namespace)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
   at "/MarkLogic/admin.xqy";

admin:group-using-namespace("my.namespace")
(: Returns the namespace specification :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-module-location" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
    This function constructs a module namespace element with the
    specified namespace URI and location.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="namespace-uri" type="xs:string">
      The namespace URI.
    </apidoc:param>
    <apidoc:param name="location" type="xs:string">
      The module location.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:module-location)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
 admin:group-module-location("my-namespace", "/my/location/module.xqy")
  (: returns the module-location specification :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-add-using-namespace" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
    Add one or more "using" namespaces to a Group configuration,
    which add the namespaces to the namespace path for all requests
    evaluated against any App Server in the Group.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="namespaces" type="element(gr:using-namespace)*">
	    A sequence of using namespace elements. Typically these are the
	    result of calls to admin:group-using-namespace().
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";


let $config := admin:get-configuration()
let $group := admin:group-get-id($config, "Default")
let $ns := admin:group-using-namespace("my.namespace")
return admin:group-add-using-namespace($config, $group, $ns)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-delete-using-namespace" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
    Delete one or more "using" namespaces from a Group configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="namespaces" type="element(gr:using-namespace)*">
	    A sequence of using namespace elements. Typically these are the
	    result of calls to admin:group-using-namespace().
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege> 
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group := admin:group-get-id($config, "Default")
let $ns := admin:group-using-namespace("my.namespace")
return admin:group-delete-using-namespace($config, $group, $ns)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="group-add-module-location" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
   Add one or more module namespace to location mappings to a Group
   configuration.  The mappings are used to look up a location for an XQuery
   library module for any request on any App Server in that group when the
   library module is requested using only the module namespace URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="module-locations" type="element(gr:module-location)*">
      A sequence of module location mapping element. Typically these are the
      result of calls to <code>admin:group-module-location</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "my-group")
return
admin:group-add-module-location($config, $group-id,
     admin:group-module-location("my-namespace", "/my/location/module.xqy"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-delete-module-location" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
  <apidoc:summary>
    Delete one or more module location bindings from a Group configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="module-locations" type="element(gr:module-location)*">
     A sequence of module location mapping element. Typically these are the
     result of calls to <code>admin:group-module-location</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:group-get-id($config, "my-group")
return
admin:group-delete-module-location($config, $group-id,
     admin:group-module-location("my-namespace", "/my/location/module.xqy"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-tokenizer-override" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
   This function constructs a custom tokenizer override. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/custom-tokenization.xml%2369832'>Custom Tokenization</a> in the <em>Search Developer's Guide</em>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="character" type="xs:string">
      The character whose tokenization behavior should be overridden.
    </apidoc:param>
    <apidoc:param name="class" type="xs:string">
      The new tokenization class for the character. Allowed values are "word", "space", "punctuation", or "symbol".
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:tokenizer-override)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-tokenizer-override("-","word")
(: returns the new override for the character '-' :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-field-tokenizer-overrides" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function fetches any custom tokenizer override specifications for the
  specified field and database. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/custom-tokenization.xml%2369832'>Custom Tokenization</a> in the <em>Search Developer's Guide</em>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically returned from one of the Admin
     module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
     The ID of the database (for example
     <code>xdmp:database("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
      The name of the field.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:tokenizer-override)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:database-get-field-tokenizer-overrides(
    $config, xdmp:database("myDatabase"), "myField")

(: Return the tokenizer override settings :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-add-field-tokenizer-override" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function adds tokenizer overrides for the specified field of the
  specified database. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/custom-tokenization.xml%2369832'>Custom Tokenization</a> in the <em>Search Developer's Guide</em>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
     A configuration specification, typically as returned from one of the
     Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
    </apidoc:param>
    <apidoc:param name="tokenizer-overrides" type="element(db:tokenizer-override)*">
         The new tokenizer override settings to add to the field.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("myDatabase")
let $override :=  admin:database-tokenizer-override("-","word")
return
  admin:database-add-field-tokenizer-override(
    $config, $dbid, "myField", $override)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-delete-field-tokenizer-override" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function deletes the field's tokenizer override in the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="field-name" type="xs:string">
	     The name of the field.
    </apidoc:param>
    <apidoc:param name="tokenizer-overrides" type="element(db:tokenizer-override)*">
       The tokenizer override specifications, typically the result of an <code>admin:database-tokenizer-override</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("myDatabase")
let $override := admin:database-tokenizer-override("-","word")
return
  admin:database-delete-field-tokenizer-override($config, $dbid,
     "myField", $override)

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-rebalancer-enable" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function sets the reblanacer enable setting for
  the specified database in the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code> to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";
  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  return
  admin:database-set-rebalancer-enable($config, $dbid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-rebalancer-throttle" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function sets the rebalancer throttle setting
  for the specified database in the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
    The new setting, which must be a number between
    1 and 5 (inclusive).  Larger numbers mean to work harder at
    rebalancing.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";
  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  return
  admin:database-set-rebalancer-throttle($config, $dbid, 5)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-rebalancer-enable" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns the rebalancer enable setting
  for the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  return
  admin:database-get-rebalancer-enable($config, $dbid)
  (: returns the rebalancer enable setting :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-rebalancer-throttle" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
  This function returns the rebalancer throttle setting
  for the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  return
  admin:database-get-rebalancer-throttle($config, $dbid)
  (: returns the rebalancer throttle setting :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-set-assignment-policy" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function sets the assignment policy for the specified database
  in the configuration. An assignment policy can be created by either
  <code>admin:bucket-assignment-policy()</code> or
  <code>admin:statistical-assignment-policy()</code> or
  <code>admin:range-assignment-policy($partition-key, $lower-bound-included)</code> or
  <code>admin:legacy-assignment-policy()</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="policy" type="element(db:assignment-policy)">
    The assignment policy.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $policy := admin:bucket-assignment-policy()
  return
  admin:database-set-assignment-policy($config, $dbid, $policy)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-assignment-policy" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns the assignment policy for
  the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:assignment-policy)</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config,"myDatabase")
  return
  admin:database-get-assignment-policy($config, $dbid)
  (: returns the assignment policy for the database :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="legacy-assignment-policy" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>This function returns an element that represents the legacy
  assignment policy. Use the <code>admin:database-set-assignment-policy</code>
  function to set the assignment policy.</apidoc:summary>
  <apidoc:return>element(db:assignment-policy)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
    at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := admin:database-get-id($config, "db1")
let $policy := admin:legacy-assignment-policy()

return 
  admin:database-set-assignment-policy($config, $dbid, $policy)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="bucket-assignment-policy" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>This function returns an element that represents the bucket
  assignment policy. Use the <code>admin:database-set-assignment-policy</code>
  function to set the assignment policy.</apidoc:summary>
  <apidoc:return>element(db:assignment-policy)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
    at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := admin:database-get-id($config, "db1")
let $policy := admin:bucket-assignment-policy()

return 
  admin:database-set-assignment-policy($config, $dbid, $policy)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="statistical-assignment-policy" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>This function returns an element that represents the statistical
  assignment policy. Use the <code>admin:database-set-assignment-policy</code>
  function to set the assignment policy.</apidoc:summary>
  <apidoc:return>element(db:assignment-policy)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
    at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := admin:database-get-id($config, "db1")
let $policy := admin:statistical-assignment-policy()

return 
  admin:database-set-assignment-policy($config, $dbid, $policy)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>

</apidoc:function>

<apidoc:function name="database-is-forest-retired" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns <code>fn:true()</code> if the specificed forest is
  retired and  <code>fn:false()</code> the specificed forest is not retired.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  admin:database-is-forest-retired($config, $dbid, $forestid)
  (: returns true if the specificed forest is retired and
     false if it is not retired. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-is-forest-employed" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns <code>fn:true()</code> if the specificed forest is
  employed and  <code>fn:false()</code> the specificed forest is not employed.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  admin:database-is-forest-employed($config, $dbid, $forestid)
  (: returns true if the specificed forest is employed and
     false if it is not employed. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-retire-forest" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function "retires" the specified forest in the configuration.  To "unretire,"
  or "redeploy" a retired forest, use the
  <a href="#admin:database-employ-forest">admin:database-employ-forest</a>
  function.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  admin:database-retire-forest($config, $dbid, $forestid)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-employ-forest" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function "employs" the specified forest in the configuration.
  This function can be used to "unretire" a forest that was previously retired
  by the <a href="#admin:database-retire-forest">admin:database-retire-forest</a>
  function.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  admin:database-employ-forest($config, $dbid, $forestid)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-reorder-forests" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function reorders the forests in the specified database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
    <apidoc:param name="forest-ids" type="xs:unsignedLong*">
    The list of forest IDs in the desired order.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forests/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $forest-1 := admin:forest-get-id($config, "myForest1")
  let $forest-2 := admin:forest-get-id($config, "myForest2")
  let $forest-3 := admin:forest-get-id($config, "myForest3")
  return
  admin:database-reorder-forests($config, $dbid, ($forest-3,$forest-2,$forest-1))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-get-rebalancer-enable" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="forest">
  <apidoc:summary>
  This function returns the rebalancer enable setting
  for the specified forest from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  admin:forest-get-rebalancer-enable($config, $forestid)
  (: returns the rebalancer enable setting for the forest:)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-set-rebalancer-enable" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>
  This function sets the reblanacer enable setting for
  the specified forest in the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
    A boolean value, <code>fn:true()</code> to enable, <code>fn:false()</code>
    to disable.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
         at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $forestid := admin:forest-get-id($config, "myForest")
  return
  admin:forest-set-rebalancer-enable($config, $forest-id, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-retired-forests" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>
  This function returns the list of all retired forests
  for the specified database from the configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
    The ID of the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
        at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  return
  admin:database-get-retired-forests($config, $dbid)
  (: returns the IDs of all retired forests for the database :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="range-assignment-policy" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="database">
  <apidoc:summary>
  This function returns an element that represents the range assignment policy.
  Use the <a href="#admin:database-set-assignment-policy"><code>admin:database-set-assignment-policy</code></a>
	  function to set the assignment policy.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="partition-key" type="cts:reference">
    This parameter specifies the cts reference that will be used as the partition key.
    It can be an element range index, an attribute range index, a field range index or
    a path range index. The range index can have any data type except for geospatial
    types.
    </apidoc:param>
    <apidoc:param name="lower-bound-included" type="xs:boolean">
    If this paramenter is <code>fn:true()</code>, ranges on all forests in the database have closed lower
    bounds and open upper bound; if it is <code>fn:false()</code>, ranges
    on all forests in the database have open lower bounds and closed upper bounds.
    <p/>
    For example, if the partition range is 2011-01-02 (lower) to 2011-01-02 (upper) and
    <code>lower-bound-include</code> is set to <code>fn:false()</code>, documents with
    partition key value of 2011-01-02 will not be included in the partition, but documents with
    a partition key value of 2011-01-03 and 2011-01-02 will be included.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:assignment-policy)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

(: An element range index is already configured for element "foo" on database "myDatabase" :)
let $config := admin:get-configuration()
let $dbid := admin:database-get-id($config, "myDatabase")
(: range assignment policy doesn't work with fast locking; use "strict" or no locking instead :)
let $config := admin:database-set-locking($config, $dbid, "strict")
let $ref := cts:element-reference(xs:QName("foo"))
let $range-policy := admin:range-assignment-policy($ref, fn:true())
let $config := admin:database-set-assignment-policy($config, $dbid, $range-policy)
return admin:save-configuration($config)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-get-range-policy-partition-key" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="database">
  <apidoc:summary>
  This function returns the range policy partition key set for the database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="range-policy" type="element(db:assignment-policy)">
    The range assignment policy returned from the <code>admin:database-get-assignment-policy</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:reference</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := admin:database-get-id($config, "myDatabase")
let $policy := admin:database-get-assignment-policy($config, $dbid)
return admin:database-get-range-policy-partition-key($policy)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-get-range-policy-lower-bound" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="forest">
  <apidoc:summary>
  This function returns the lower bound of the range configured on the forest.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>item()?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $forestid := admin:forest-get-id($config, "myForest")
return admin:forest-get-range-policy-lower-bound($config, $forestid)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-get-range-policy-upper-bound" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="forest">
  <apidoc:summary>
  This function returns the upper bound of the range configured on the forest.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>item()?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $forestid := admin:forest-get-id($config, "myForest")
return admin:forest-get-range-policy-upper-bound($config, $forestid)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-is-range-policy-range-set" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
  <apidoc:summary>
  This function returns <code>fn:false()</code> if the specificed forest has
  neither the lower boundary nor the upper boundary set. Otherwise, it returns
  <code>fn:true()</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>item()?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $forestid := admin:forest-get-id($config, "myForest")
return admin:forest-is-range-policy-range-set($config, $forestid)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="forest-set-range-policy-range" lib="admin" category="Admin Library" bucket="XQuery Library Modules"  subcategory="forest">
  <apidoc:summary>
  This function sets the boundaries of the range on a forest.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
    The ID of the forest.
    </apidoc:param>
    <apidoc:param name="lower-bound" type="item()?">
    The lower boundary. If it is the empty sequence, the lower boundary
    is set to be negative infinity.
    </apidoc:param>
    <apidoc:param name="upper-bound" type="item()?">
    The upper boundary. If it is the empty sequence, the upper boundary
    is set to be positive infinity.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $forestid := admin:forest-get-id($config, "myForest")
let $config := admin:forest-set-range-policy-range($config, $forestid, 1, 11)
return admin:save-configuration($config)

(: Note that if both $lower-bound and $upper-bound are the empty sequence, the forest
   essentially no longer has a range configured. Use admin:save-configuration to save
   the changes to the configuration or pass the configuration to other Admin API
   functions to make other changes. :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="appserver-get-internal-security" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
  <apidoc:summary>This function returns the internal security setting for the specified App Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
let $appid := admin:appserver-get-id($config, $groupid, "myAppServer")

return admin:appserver-get-internal-security($config,$appid)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-external-security" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function returns the external security setting for
  the specified App Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
let $appid := admin:appserver-get-id($config, $groupid, "myAppServer")

return admin:appserver-get-external-security($config,$appid)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-internal-security" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function sets the internal security setting in the
  configuration for the specified App Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
        A boolean value specifying whether the security database is used for
        authentication and authorization.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return admin:appserver-set-internal-security($config,
           admin:appserver-get-id($config, $groupid, "myAppServer"),
           fn:false())

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-external-security" lib="admin" category="Admin Library" bucket="XQuery Library Modules" subcategory="appserver">
  <apidoc:summary>This function sets the external security setting in the
  configuration for the specified App Server.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
        A configuration specification, typically as returned
        from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
        The ID of the App Server. Typically, this is the result
        of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="external-security-names" type="xs:string*">
        The name of the External Security Config.
    </apidoc:param>
    <apidoc:param name="internal-security" type="xs:boolean">
        A boolean value specifying whether the security database is used for
        authentication and authorization.
    </apidoc:param>
    <apidoc:param name="authentication" type="xs:string">
        The authentication scheme (<code>basic</code>,
        <code>digest</code>, <code>digestbasic</code>,
        <code>application-level</code>, <code>kerberos-ticket</code>,
        or <code>certificate</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server-security/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group-security/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return admin:appserver-set-external-security($config,
           admin:appserver-get-id($config, $groupid, "myAppServer"),
           "my-ldap-config",fn:true(),"basic")

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return admin:appserver-set-external-security($config,
           admin:appserver-get-id($config, $groupid, "myAppServer"),
           "my-kerberos-config",fn:false(),"kerberos-ticket")

   => returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.
    ]]></pre>
  </apidoc:example>
</apidoc:function>

  <apidoc:function name="host-get-zone" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules" subcategory="host">
	  <apidoc:summary>
		  This function returns the zone for the host with the
		  specified ID.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  return
  admin:host-get-zone($config, admin:host-get-id($config, xdmp:host-zone()))
  (: returns the host zone :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="host-set-zone" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="host">
	  <apidoc:summary>
		  This function changes the zone value for the host
		  to the newly specified value.
	  </apidoc:summary>
    <apidoc:params>
            <apidoc:param name="config" type="element(configuration)">
		    A configuration specification, typically as returned
		    from one of the Admin module functions.
	    </apidoc:param>
	    <apidoc:param name="host-id" type="xs:unsignedLong">
		    The host ID. Typically, the result of an
		    <code>admin:host-get-id</code> call.
	    </apidoc:param>
	    <apidoc:param name="value" type="xs:string">
		    The new name for the zone value.
	    </apidoc:param>
    </apidoc:params>
    <apidoc:return>element(configuration)</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>	
    <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $hostid := admin:host-get-id($config, xdmp:host-name())
  return
  admin:host-set-zone($config, $hostid, "Europe-Berlin-1")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

  ]]></pre></apidoc:example>
  </apidoc:function>

  <apidoc:function name="group-set-metering-enabled" lib="admin"
	  category="Admin Library" bucket="XQuery Library Modules"
	  subcategory="group">
	  <apidoc:summary>
		  This function enables or disables usage metering for all
		  hosts in the specified group.
	  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
        A boolean value specifying whether metering is enabled
        for all hosts in this group.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-metering-enabled($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-meters-database" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function specifies the database to be used to store
		metering data.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedLong">
	    The database ID for the database to set as the meters database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-meters-database($config, $groupid, xdmp:database("Meters"))

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-performance-metering-enabled" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function enables or disables performance metering for all
		hosts in the specified group.  Performance metering will
		save data into the meters database which can be used to
		analyze your system performance over time.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:boolean">
        A boolean value specifying whether performance metering is enabled
        for all hosts in this group.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-performance-metering-enabled($config, $groupid, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-performance-metering-period" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
 	      This function sets the period (in number of seconds) between
	      when performance data is gathered. setting it to a higher number
	      stores less data but also gives less grainular data; setting it
	      to a lower number stores more data but provides higher
	      grainularity.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
	 The ID of the group to which the App Server belongs.
	 Typically, this is the result
	 of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The number of seconds between data samples.  This value must be 60 or
	    greater, in multiples of 60 (one minute increments).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-performance-metering-period($config, $groupid, 60)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-performance-metering-retain-raw" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function sets the number of days of raw performance data to
		retain.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The number of days worth of raw data to retain.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-performance-metering-retain-raw($config, $groupid, 5)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-performance-metering-retain-hourly"
	lib="admin" category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function sets the number of days to retain hourly performance
		data.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The number of hours of data to retain.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-performance-metering-retain-hourly($config, $groupid, 8)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-performance-metering-retain-daily" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function sets the number of days of performance metering
		data to retain.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">
	    The number of days of data to retain.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
admin:group-set-performance-metering-retain-daily($config, $groupid, 31)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)


    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-detach-sub-database" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function removes a sub-database from a super-database.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the super-database.
    </apidoc:param>
    <apidoc:param name="subdatabase-id" type="xs:unsignedLong">
	    The ID of the sub-database.
    </apidoc:param>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong"
	    optional="true">
	    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $databaseid := xdmp:database("Documents")
let $subdatabaseid := xdmp:database("MySubDatabase")
return
admin:database-detach-sub-database($config, $databaseid, $subdatabaseid)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-attach-sub-database" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function adds a sub-database to a super-database.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the super-database.
    </apidoc:param>
    <apidoc:param name="subdatabase-id" type="xs:unsignedLong">
	    The ID of the sub-database.
    </apidoc:param>
    <apidoc:param name="foreign-cluster-id" type="xs:unsignedLong"
	    optional="true">
	    The ID of the foreign cluster.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $databaseid := xdmp:database("Documents")
let $subdatabaseid := xdmp:database("MySubDatabase")
return
admin:database-attach-sub-database($config, $databaseid, $subdatabaseid)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-sub-databases" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
	  This function returns a database-reference element representing
	  the sub-databases of the specified super-database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the super-database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-reference)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $databaseid := xdmp:database("Documents")
return
admin:database-sub-databases($config, $databaseid)
(: returns the db:database-references element, if there are any configured :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-super-databases" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
	  This function returns a database-reference element representing
	  where the specified database serves as a sub-database.  It only
	  includes information about where the database serves as a
	  sub-database on the current cluster; if
	  you want to find where it serves as a sub-database on another
	  cluster, you will have to make the call from the other cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the sub-database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:database-reference)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $databaseid := xdmp:database("Documents")
return
admin:database-super-databases($config, $databaseid)
(: returns the db:database-references element, if there are any configured :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<!-- check-range-policy-config is used by mlcp and is not public  -->
<apidoc:function name="check-range-policy-config" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database" hidden="true">
	<apidoc:summary>
		This function is used by mlcp and is not documented
	</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="database" type="node()">
		  Parameter description.
	  </apidoc:param>
	  <apidoc:param name="assignments" type="node()*">
		  Parameter description.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="database-validate-field-path" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function validates the specified field path. If the
		specified path is not valid, it throws an exception, otherwise
		it returns the empty sequence.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	      The ID of the database (for example,
	      <code>xdmp:database("myDatabase")</code>).
      </apidoc:param>
      <apidoc:param name="field-path" type="element(db:field-path)">
	      The field path specification, typically the result of a call to
	      <a href="#admin:database-get-field-paths"
		      ><code>admin:database-get-field-paths</code></a>.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $databaseid := xdmp:database("Documents")
let $field := "myField"
let $field-path :=
   admin:database-get-field-paths($config, $databaseid, $field)
return
admin:database-validate-field-path($config, $databaseid, $field-path)
(: returns empty if the patha is OK, throws an exception if the path
   is not valid :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-get-availability" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
	<apidoc:summary>
		This function gets the availability state of the forest,
		for use in Tiered Storage.  A forest can have an availability
		state of <code>online</code> or <code>offline</code>.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
	    The ID of the forest.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:forest-get-availability(admin:get-configuration(),
      xdmp:forest("Documents"))
=> online
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-set-availability" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="forest">
	<apidoc:summary>
		This function sets the availability state for a forest, for
		use in Tiered Storage.   A forest can have an availability
		state of <code>online</code> or <code>offline</code>.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    A configuration specification, typically as returned
    from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">
	    The ID of the forest.</apidoc:param>
    <apidoc:param name="value" type="xs:string">
	    The state of the forest, either <code>online</code> or
	    <code>offline</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:forest-set-availability($config,
   admin:forest-get-id($config, "Documents"),
   "offline")

(: returns the new configuration element -- use admin:save-configuration
   to save the changes to the configuration or pass the configuration
   to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-metering-enabled" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the value of the metering-enabled
		group setting.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-metering-enabled($config,
        admin:group-get-id($config, "Default"))
  (: returns the metering-enabled value :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-meters-database" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the ID of the meters-database
		configured for the specified group.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-meters-database($config,
        admin:group-get-id($config, "Default"))
  (: returns the database ID for the meters database :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-performance-metering-enabled" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the value of the
		performance-metering-enabled group setting.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-performance-metering-enabled($config,
        admin:group-get-id($config, "Default"))
  (: returns the performance-metering-enabled value :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-performance-metering-period" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the value of the
		performance-metering-period group setting.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-performance-metering-period($config,
        admin:group-get-id($config, "Default"))
  (: returns the performance-metering-period value :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-performance-metering-retain-raw" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the value of the
		performance-metering-retain-raw group setting.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-performance-metering-retain-raw($config,
        admin:group-get-id($config, "Default"))
  (: returns the performance-metering-retain-raw setting :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-performance-metering-retain-hourly"
	lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the value of the
		performance-metering-retain-hourly group setting.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-performance-metering-retain-hourly($config,
        admin:group-get-id($config, "Default"))

  (: returns the performance-metering-retain-hourly setting :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-performance-metering-retain-daily" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="group">
	<apidoc:summary>
		This function returns the value of the
		performance-metering-retain-daily group setting.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
	 A configuration specification, typically as returned
	 from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">
		    The ID of the group to which the App Server belongs.
		    Typically, this is the result
		    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-performance-metering-retain-daily($config,
        admin:group-get-id($config, "Default"))
  (: returns the performance-metering-retain-daily setting :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-set-retain-until-backup" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function sets "the retain until backup" setting in the
  configuration for the specified database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the
	database (for example, xdmp:database("myDatabase")).</apidoc:param>
    <apidoc:param name="value" type="xs:boolean">Whether or not to keep the
	deleted fragments until a full backup or an incremental backup.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
  return
  admin:database-set-retain-until-backup($config,
        xdmp:database("myDatabase"), fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-get-retain-until-backup" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function returns the "retain until backup" setting from
  the configuration for the specified database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the
	database (for example, xdmp:database("myDatabase")).</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:database-get-retain-until-backup($config, xdmp:database("myDatabase"))

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-path-reference" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
	   This function creates a db:path-reference specification.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>, or
	    <code>point</code>.
    </apidoc:param>
    <apidoc:param name="pathexpr" type="xs:string">
	    The path expression for the index.  The should path should
	    return true from
	    <a href="#cts:valid-index-path">cts:valid-index-path</a>.
    </apidoc:param>
    <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).  The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:path-reference)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-path-reference("int", "/my/path[a=1]", "")
=>
<path-reference xmlns="http://marklogic.com/xdmp/database">
	<scalar-type>int</scalar-type>
	<path-expression>/my/path[a=1]</path-expression>
	<collation/>
</path-reference>
]]></pre></apidoc:example>
</apidoc:function>
<apidoc:function name="database-field-reference" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
	<apidoc:summary>
		This function creates a db:field-reference specification.
	</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>, or
	    <code>point</code>.
	    </apidoc:param>
	    <apidoc:param name="fieldname" type="xs:string">
		    The name of the field.
	    </apidoc:param>
    <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).  The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:field-reference)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-field-reference("int", "my-integer-field", "")
=>
<field-reference xmlns="http://marklogic.com/xdmp/database">
	<scalar-type>int</scalar-type>
	<field-name>my-integer-field</field-name>
	<collation/>
</field-reference>
]]></pre></apidoc:example>
</apidoc:function>
<apidoc:function name="database-element-attribute-reference" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>
	  This function greated a db:element-attribute-reference
	  specification.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>, or
	    <code>point</code>.
    </apidoc:param>
    <apidoc:param name="parent-namespace" type="xs:string?">
	    The namespace URI for the attribute's parent element. Specify an
	    empty string if the element is in no namespace.
    </apidoc:param>
    <apidoc:param name="parent-localname" type="xs:string">
	    The local name for attribute's parent element.
    </apidoc:param>
    <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI. Specify an empty string if the
	      element is in no namespace.
    </apidoc:param>
    <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
    </apidoc:param>
    <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).  The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:element-attribute-reference)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-element-attribute-reference("int", "", "element-name", "",
      "attribute-name", "")
=>
<element-attribute-reference xmlns="http://marklogic.com/xdmp/database">
	<scalar-type>int</scalar-type>
	<parent-namespace-uri/>
	<parent-localname>element-name</parent-localname>
	<namespace-uri/>
	<localname>attribute-name</localname>
	<collation/>
</element-attribute-reference>
]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-element-reference" lib="admin"
	category="Admin Library" bucket="XQuery Library Modules"
	subcategory="database">
  <apidoc:summary>
	  This function greated a db:element-reference
	  specification.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="scalar-type" type="xs:string">
		    A valid type for the range index.  Must be one of:
		    <code>int</code>, <code>unsignedInt</code>,
		    <code>long</code>, <code>unsignedLong</code>,
		    <code>float</code>, <code>double</code>,
		    <code>decimal</code>, <code>dateTime</code>,
		    <code>time</code>, <code>date</code>,
		    <code>gYearMonth</code>, <code>gYear</code>,
		    <code>gMonth</code>, <code>gDay</code>,
	    <code>yearMonthDuration</code>, <code>dayTimeDuration</code>,
	    <code>string</code>, <code>anyURI</code>, or
	    <code>point</code>.
	    </apidoc:param>
    <apidoc:param name="namespace" type="xs:string?">
	      The namespace URI. Specify an empty string if the
	      element is in no namespace.
    </apidoc:param>
    <apidoc:param name="localname" type="xs:string">
	      The local name for the node.
    </apidoc:param>
    <apidoc:param name="collation" type="xs:string?">
	      The collation URI (for example,
	      <code>http://marklogic.com/collation/</code>).  The collation
	      is only needed for string and anyURI indexes; for other indexes,
	      specify the empty string ("") for this parameter.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:element-reference)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

admin:database-element-reference("int", "", "element-name", "")
=>
<element-reference xmlns="http://marklogic.com/xdmp/database">
	<scalar-type>int</scalar-type>
	<namespace-uri/>
	<localname>element-name</localname>
	<collation/>
</element-reference>
]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-default-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>
	  This function returns the default amount of memory (in megabytes)
	  that can be used by sem:store for inference.
  </apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="config" type="element(configuration)">
		  A configuration specification, typically as returned from
		  one of the Admin module functions.
	</apidoc:param>
	<apidoc:param name="appserver-id" type="xs:unsignedLong">
		The ID of the App Server. Typically, this is the result of
		an <code>admin:appserver-get-id</code> call.
	</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-default-inference-size($config,
             admin:appserver-get-id($config, $group-id, "myAppServer"))

  (: Returns default memory size for inference, in megabytes :)

  =>
  100
  ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-default-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function specifies the default value for any request's
  inference size. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">The ID of the App
	Server. Typically, this is the result of an <code>admin:appserver-get-id</code>
	call.</apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">Amount of memory, in
	megabytes, allowed for inference.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id  := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-default-inference-size($config,
         admin:appserver-get-id($config, $group-id, "myAppServer"),
         5000)

  (: Returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="taskserver-get-default-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="taskserver">
  <apidoc:summary>This function returns the default amount of memory (in megabytes)
  that can be used by sem:store for inference. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group to
	which the App Server belongs. Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-default-inference-size($config, $group-id)

  (: Returns the default memory size for inference on the task server, in megabytes :)

  =>
  100

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="taskserver-set-default-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="taskserver">
  <apidoc:summary>This function specifies the default value for any request's inference size. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration specification, typically as returned from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group to
	which the App Server belongs. Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">Amount of memory, in megabytes, allowed for inference.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-default-inference-size($config, $group-id, 5000)

  (: Returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-max-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function returns the maximum amount of memory in megabytes
  that can be used by sem:store for inference. The App Server will return an
  error for queries that exceed this memory limit.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">The ID of the App
	Server. Typically, this is the result of an <code>admin:appserver-get-id</code>
	call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:appserver-get-max-inference-size($config,
             admin:appserver-get-id($config, $group-id, "myAppServer"))

  (: Returns the max memory size for inference configured on the App Server, in megabytes :)

  =>
  5000

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-max-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function specifies the upper bound for any request's
  inference size. No request may set its inference size higher than this number.
  The inference size, in turn, is the maximum amount of memory in megabytes
  allowed for sem:store performing inference. The App Server gives up on queries
  that exceed the memory limit, and returns an error.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">The ID of the App
	Server. Typically, this is the result of an <code>admin:appserver-get-id</code>
	call.</apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">The memory size allowed
	for inference, in megabytes.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id  := admin:group-get-id($config, "Default")
  return
  admin:appserver-set-max-inference-size($config,
         admin:appserver-get-id($config, $group-id, "myAppServer"),
         10000)

  (: Returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="taskserver-get-max-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="taskserver">
  <apidoc:summary>This function returns the maximum amount of memory in megabytes
  that can be used by sem:store for inference. The task server will return an
  error for queries that exceed this memory limit.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group to
	which the App Server belongs. Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-get-max-inference-size($config, $group-id)

  (: Returns the max memory size for inference configured on the task server, in megabytes :)

  =>
  5000
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="taskserver-set-max-inference-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="taskserver">
  <apidoc:summary>This function specifies the upper bound for any request's
  inference size. No request may set its inference size higher than this number.
  The inference size, in turn, is the maximum amount of memory in megabytes
  allowed for sem:store performing inference. The task server gives up on
  queries that exceed the memory limit, and returns an error.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group to
	which the App Server belongs. Typically, this is the result of an
	<code>admin:group-get-id</code> call.</apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">Amount of memory, in
	megabytes, allowed for inference.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $group-id := admin:group-get-id($config, "Default")
  return
  admin:taskserver-set-max-inference-size($config, $group-id, 10000)

  (: Returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-ruleset" lib="admin" category="Admin Library"
                 bucket="XQuery Library Modules" subcategory="database">
  <apidoc:summary>The ruleset element (db:default-ruleset) created to be used
  for inference on a database. One or more rulesets can be used for inference.
  Rulesets are stored in the Schemas database. By default, no ruleset is
  configured.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="location" type="xs:string">The URI (location) of the
	ruleset.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:default-ruleset)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $rules := admin:database-ruleset(("subClassOf.rules", "sameAs.rules"))
  let $c := admin:database-add-default-ruleset($config, $dbid, $rules)
   return admin:database-get-default-rulesets($c,$dbid)

  (: Specifies the ruleset or rulesets to be used. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-add-default-ruleset" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function adds a ruleset (db:ruleset) to be used for
  inference on a database. One or more rulesets can be used for inference. By
  default, no ruleset is configured.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the database
	(for example, xdmp:database("myDatabase"))</apidoc:param>
    <apidoc:param name="rulesets" type="element(db:default-ruleset)*">The name
	of one or more rulesets to be used with this database for inference.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
   xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $rules := admin:database-ruleset("subClassOf.rules")
  let $c := admin:database-add-default-ruleset($config, $dbid, $rules)
  return admin:save-configuration($c)

  (: Adds the subClassOf.rules ruleset to "myDatabase" :)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
  </apidoc:function>
  <apidoc:function name="database-get-default-rulesets" lib="admin"
          category="Admin Library" bucket="XQuery Library Modules"
		  subcategory="database">
  <apidoc:summary>This function returns the default rulesets for a database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the
	database (for example, xdmp:database("myDatabase"))</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:default-ruleset)*</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  return admin:database-get-default-rulesets($config, $dbid)

  (: Returns the location and name of default rulesets for database :)

  =>

  <default-ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://marklogic.com/xdmp/database">
  <location>
   subClassOf.rules
  </location>
  </default-ruleset>

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-delete-default-ruleset" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function deletes the default ruleset used for inference
  on a database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID of the
	database (for example, xdmp:database("myDatabase"))</apidoc:param>
    <apidoc:param name="rulesets" type="element(db:default-ruleset)*">The name
	of one or more rulesets to be used with this database for inference.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/index/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()
  let $dbid := admin:database-get-id($config, "myDatabase")
  let $rules := admin:database-ruleset("subClassOf.rules")
  let $c := admin:database-delete-default-ruleset($config, $dbid, $rules)
  return admin:save-configuration($c)

  (: Deletes the "subClassOf.rules" ruleset from "myDatabase" :)
  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-foreign-replica-get-queue-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function returns the queue size for the number of fragments or
  frames in-flight during database replication.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">The element
	returned by the <code>admin:forest-foreign-replica</code> or
	<code>admin:forest-get-foreign-replicas</code> function that specifies the
    configuration for the replica forest.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:usage>
  During bulk replication, this number would be the number of fragments whose
  replication is in-flight. For instance, the server will send 10 fragments
  and wait for the first one to be acknowledged before sending the 11th fragment.

  <p>During normal operation, this number applies to journal frames rather than
  fragments. The server will stop sending new frames once it has 10 unacknowledged
  frames. It will stop sending frames until it gets an acknowledgement for the
  oldest one.</p>
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

 let $cfg := admin:get-configuration()
 let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("Documents"))
 return
 admin:database-foreign-replica-get-queue-size($freplica)

  (: returns the queue size of the foreign replica named "Documents":)
  ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-foreign-replica-set-queue-size" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function sets the queue size for the number of fragments or
  frames in-flight during database replication.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="foreign-replica" type="element(db:foreign-replica)">The element
	returned by the <code>admin:forest-foreign-replica</code> or
    <code>admin:forest-get-foreign-replicas</code> function that specifies the
    configuration for the replica forest.</apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt">The number of fragments or frames
	in the queue. During bulk replication, this number would be the number of fragments
	whose replication is in-flight. For instance, the server will send 10 fragments
    and wait for the first one to be acknowledged before sending the 11th fragment.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:foreign-replica)</apidoc:return>
  <apidoc:usage>
  During normal operation, this queue size applies to journal frames rather than
  fragments. The server will stop sending new frames once it has 10 unacknowledged
  frames. It will stop sending frames until it gets an acknowledgement for the oldest one.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/replication/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

    let $cfg := admin:get-configuration()
    let $freplica := admin:database-get-foreign-replicas($cfg, xdmp:database("MyReplica"))
    return
    admin:database-foreign-replica-set-queue-size($freplica, 20)

  (: Sets the foreign replica queue size to 20 and returns the new configuration
  element -- use admin:save-configuration to save the changes to the configuration
  or pass the configuration to other Admin API functions to make other changes.  :)


    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-backup-get-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function returns true or false to indicate whether
  a specific backup is enabled for a database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID for the
	database (for example, <code><a href="#xdmp:database">xdmp:database</a>
	("myDatabase")</code>).</apidoc:param>
    <apidoc:param name="backup-id" type="xs:unsignedLong">The ID of the backup,
	found by XPath to the backup location (for example, <code>//db:backup-id/</code>).
	</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
declare namespace db =  "http://marklogic.com/xdmp/database";

let $backup-ids := admin:database-get-backups(
admin:get-configuration(), xdmp:database("Documents"))//db:backup-id/fn:data()
return
admin:database-backup-get-enabled(admin:get-configuration(),
xdmp:database("Documents"), $backup-ids)

 =>
 true
 true
 true

    (: returns the backup enabled settings for the database - true or false :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-backup-set-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function enables database backup for the specified
  database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID for the
	database (for example, <code><a href="#xdmp:database">xdmp:database</a>
	("myDatabase")</code>).</apidoc:param>
    <apidoc:param name="backup-id" type="xs:unsignedLong">The ID of the backup,
	found by XPath to the backup location(for example, <code>//db:backup-id/</code>). </apidoc:param>
    <apidoc:param name="enabled" type="xs:boolean">Sets the database backup to
	enabled. The default is <code>true</code>, which means the database backup
	will take place. </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup/{id}</code></p>
  </apidoc:privilege>    
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy"
declare namespace db =  "http://marklogic.com/xdmp/database";

 let $backup-ids := admin:database-get-backups(
  admin:get-configuration(), xdmp:database("Documents"))//db:backup-id/fn:data()
 return admin:database-backup-set-enabled(admin:get-configuration(), xdmp:database("Documents"),
 $backup-ids, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-delete-backup-by-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function deletes a specific database backup, identified
  by the backup ID.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">The ID for the
	database (for example, <code><a href="#xdmp:database">xdmp:database</a>
	("myDatabase")</code>).</apidoc:param>
    <apidoc:param name="backup-id" type="xs:unsignedLong*">The ID of the backup
	to delete, found by XPath to the backup location(for example,
	<code>//db:backup-id/</code>).
	</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/backup/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
 xquery version "1.0-ml";
 import module namespace admin = "http://marklogic.com/xdmp/admin"
     at "/MarkLogic/admin.xqy";
 declare namespace db = "http://marklogic.com/xdmp/database";

 let $backup-ids := admin:database-get-backups(
 admin:get-configuration(), xdmp:database("Documents"))//db:backup-id/fn:data()
 return
 admin:database-delete-backup-by-id(admin:get-configuration(),
 xdmp:database("Documents"), $backup-ids)

  (: deletes the database backups by ID -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-backup-get-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>This function returns true or false to indicate whether
  backup is enabled for the specified forest.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">The ID of the forest.
	For example, <code><a href="#xdmp:forest">xdmp:forest</a>("myForest")</code>
	specifies the ID for a forest named "myForest". </apidoc:param>
    <apidoc:param name="backup-id" type="xs:unsignedLong">The ID of the backup.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

lmport module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
declare namespace fa =  "http://marklogic.com/xdmp/assignments";

  let $config := admin:get-configuration()
  let $forest := xdmp:forest("Documents")
  let $backup-ids := admin:forest-get-backups(
  admin:get-configuration(), xdmp:forest("Documents"))//fa:backup-id/fn:data()
  return
  admin:forest-backup-get-enabled($config, $forest, $backup-ids)

  =>
  true

  (: returns the backup enabled setting for the forest - true or false :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-backup-set-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>This function enables forest backup for the specified forest.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">The ID of the forest.
	For example, <code><a href="#xdmp:forest">xdmp:forest</a>("myForest")</code>
	specifies the ID for a forest named "myForest". </apidoc:param>
    <apidoc:param name="backup-id" type="xs:unsignedLong">The ID of the backup,
	found by XPath to the backup location (for example, <code>//fa:backup-id/</code>).
	</apidoc:param>
    <apidoc:param name="enabled" type="xs:boolean">Enables forest backup.
	The default is <code>true</code>, which means the forest backup will
	occur. </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forest-backup/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/backup/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";
declare namespace fa =  "http://marklogic.com/xdmp/assignments";

  let $config := admin:get-configuration()
  let $forest-id xdmp:forest("Documents")
  let $backup-ids := admin:forest-get-backups(
  admin:get-configuration(), xdmp:forest("Documents"))//fa:backup-id/fn:data()
  return
  admin:forest-backup-set-enabled($config, $forest-id, backup-ids, fn:true())

 (: returns the new configuration element -- use admin:save-configuration
    to save the changes to the configuration or pass the configuration
    to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-delete-backup-by-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="forest">
  <apidoc:summary>This function deletes the forest backup specified by the forest
  ID.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">The ID of the forest.
	For example, <code><a href="#xdmp:forest">xdmp:forest</a>("myForest")</code>
	specifies the ID for a forest named "myForest". </apidoc:param>
    <apidoc:param name="backup-id" type="xs:unsignedLong*">The ID of the backup
	to delete, found by XPath to the backup location (for example,
	<code>//fa:backup-id/</code>).</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/database/forest-backup/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/forest/backup/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

declare namespace fa =  "http://marklogic.com/xdmp/assignments";

let $config := admin:get-configuration()
let $forest-id xdmp:forest("Documents")
let $backup-ids := admin:forest-get-backups(
  admin:get-configuration(), xdmp:forest("Documents"))//fa:backup-id/fn:data()
return
admin:forest-delete-backup-by-id($config, $forest-id, $backup-ids)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-scheduled-task" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="Scheduler">
  <apidoc:summary>This function returns information about a scheduled task for
  a group based on the task ID and the group ID.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group
	to which the App Server belongs. Typically, this is the result of
	an <code>admin:group-get-id</code> call.</apidoc:param>
    <apidoc:param name="task-id" type="xs:unsignedLong">The ID of the task. </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(gr:scheduled-task)?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-get-scheduled-task($config,
      (admin:group-get-id($config,"Default")),17507568446985964051)

 =>
 element
<scheduled-task xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://marklogic.com/xdmp/group">
 <task-id>17507568446985964051</task-id>
 <task-enabled>true</task-enabled>
 <task-path>/MarkLogic/flexrep/tasks/push-local-forests.xqy</task-path>
 <task-root>Modules</task-root>
 <task-type>minutely</task-type>
 <task-period>1</task-period>
<task-days></task-days>
 <task-timestamp>2014-11-10T11:00:44.109-08:00</task-timestamp>
 <task-database>8250162625324183727</task-database>
 <task-modules>0</task-modules>
 <task-user>12367085613665751917</task-user>
 <task-host>0</task-host>
 <task-priority>normal</task-priority>
</scheduled-task>

 (: returns information about this task :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-scheduled-task-set-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function enables one or more scheduled tasks for a
  group based on the group ID and task ID.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group
	to which the App Server belongs. Typically, this is the result of
	an <code>admin:group-get-id</code>	call.</apidoc:param>
    <apidoc:param name="task-id" type="xs:unsignedLong">The ID of the task, the
	result of an <code>admin:group-get-scheduled-task</code> call.</apidoc:param>
    <apidoc:param name="enabled" type="xs:boolean">Enables group scheduled task
	to occur. The default is <code>true</code>, which means the scheduled group
	task will occur. </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:get-group-id($config, "myGrouop")
let $task-id := admin:group-get-scheduled-task($config,
      admin:group-get-id($config,"Default"), ())
return
admin:group-scheduled-task-set-enabled($config, $grup-id, $task-id, fn:true())

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-scheduled-task-get-enabled" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function returns true or false to indicate whether a scheduled
  task for a group is enabled.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group
	to which the App Server belongs. Typically, this is the result of an
	<code>admin:group-get-id</code>	call.</apidoc:param>
    <apidoc:param name="task-id" type="xs:unsignedLong">The ID of the task, the
	result of an <code>admin:group-get-scheduled-task</code> call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $group-id := admin:get-group-id($config, "myGrouop")
let $task-id := admin:group-get-scheduled-task($config,
      admin:group-get-id($config,"Default"), ())
return
admin:group-scheduled-task-get-enabled($config, $grup-id, $task-id)

    (: returns the backup enabled setting for the group's scheduled task - true or false :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-delete-scheduled-task-by-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function deletes the scheduled tasks for a group using
  the group ID. </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="group-id" type="xs:unsignedLong">The ID of the group
	to which the App Server belongs. Typically, this is the result of an
	<code>admin:group-get-id</code>	call.</apidoc:param>
    <apidoc:param name="delete-ids" type="xs:unsignedLong*">The ID or IDs of the
	tasks to be deleted.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/scheduled-task/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:group-delete-scheduled-task-by-id($config,
  admin:group-get-id($config,"Default")),17507568446985964051)

   (: returns the new configuration element -- use admin:save-configuration
      to save the changes to the configuration or pass the configuration
      to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-default-error-format" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function returns the default format for protocol errors
    for an App Server. The 'default' error format can be <code>compatible</code>,
	<code>json</code>, <code>html</code>, or <code>xml</code>. At runtime the
	actual error format is resolved to a concrete formatba sed on many factors,
	and will end up as JSON, HTML, or XML.
 </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">The ID of the App
	Server. Typically, this is the result of an <code>admin:appserver-get-id</code>
	call.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver-id := admin:appserver-get-id($config, (), "MyAppServer")
return
admin:appserver-get-default-error-format($config,$appserver-id)

  =>
  compatible

  (: returns the default format for protocol errors on the App Server :)

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-set-default-error-format" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>This function sets the default format protocol errors for an
    App Server. The 'default' error format can be <code>compatible</code>,
	<code>json</code>, <code>html</code>, or <code>xml</code>. At runtime
	the actual error format is resolved to a concrete format based on many
	factors, and will end up as JSON, HTML, or XML.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)"> A configuration
	specification, typically as returned from one of the Admin module functions.
	</apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">The ID of the App
	Server. Typically, this is the result of an <code>admin:appserver-get-id</code>
	call.</apidoc:param>
    <apidoc:param name="value" type="xs:string">The format for the protocol error.
	The format can be <code>compatible</code>, <code>json</code>, <code>html</code>,
	or <code>xml</code>.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $appserver-id := admin:appserver-get-id($config, (), "MyAppServer")
return
admin:appserver-set-default-error-format($config,$appserver-id, "json")

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-effective-version" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the effective software version of this cluster.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
     </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
       at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-effective-version($config)

 (: returns the effective software version of this cluster :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="can-commit-upgrade" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="actions">
  <apidoc:summary>
     This function returns <code>true</code> if the cluster is ready to commit
	 the upgrade, returns <code>false</code> otherwise.
  </apidoc:summary>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
       at "/MarkLogic/admin.xqy";

return
  admin:can-commit-upgrade()

(: returns true if the cluster is ready to commit the upgrade :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="host-get-mode" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="host">
  <apidoc:summary>
     This function return the  mode for the host with the specified ID
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
     </apidoc:param>
      <apidoc:param name="host-id" type="xs:unsignedLong">
        The host ID. Typically, the result of an <code>admin:host-get-id</code> call.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
       at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:host-get-mode($config, admin:host-get-id($config, xdmp:host-name()))

  (: returns the mode for the host, either normal or maintenance :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="host-get-mode-description" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="host">
  <apidoc:summary>
     This function return the  mode description for the host with the specified ID
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
     </apidoc:param>
      <apidoc:param name="host-id" type="xs:unsignedLong">
        The host ID. Typically, the result of an <code>admin:host-get-id</code> call.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/host</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/host/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
       at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:host-get-mode-description($config, admin:host-get-id($config, xdmp:host-name()))

  (: returns the mode description for the host :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="host-set-mode" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="host">
  <apidoc:summary>
     This function sets the mode and description for the host with the specified ID
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
     </apidoc:param>
      <apidoc:param name="host-id" type="xs:unsignedLong">
        The host ID. Typically, the result of an <code>admin:host-get-id</code> call.
      </apidoc:param>
      <apidoc:param name="mode" type="xs:string">
        New mode for the host. Valid values are <code>normal</code> or <code>maintenance</code>.
      </apidoc:param>
      <apidoc:param name="description" type="xs:string?">
        A description of the reason for the new mode.
      </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
       at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:host-set-mode($config, admin:host-get-id($config, xdmp:host-name()),
    “maintenance”, “Adding disk space to forest A”)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="query-assignment-policy" lib="admin" 
   category="Admin Library" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" subcategory="database">
  <apidoc:summary>This function returns an element that represents the query 
  assignment policy. Use the <code>admin:database-set-assignment-policy</code> 
  function to set the assignment policy.</apidoc:summary>
  <apidoc:params>
	  <apidoc:param name="default-partition" type="xs:unsignedInt" optional="true">Partition number 
	  of the default partition.
	  </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(db:assignment-policy)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
    at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := admin:database-get-id($config, "db1")
let $policy := admin:query-assignment-policy(1)

return 
  admin:database-set-assignment-policy($config, $dbid, $policy)

  (: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-get-partition-number" lib="admin" category="Admin Library" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" subcategory="database">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedInt?</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/forest/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="forest-set-partition-number" lib="admin" category="Admin Library" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" subcategory="database">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="forest-id" type="xs:unsignedLong">Parameter description...</apidoc:param>
    <apidoc:param name="value" type="xs:unsignedInt?">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="appserver-get-coordinate-system" lib="admin"
    category="Admin Library" bucket="XQuery Library Modules"
    xmlns:apidoc="http://marklogic.com/xdmp/apidoc" subcategory="appserver">
  <apidoc:summary>
    Get the default coordinate system for an App Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of
      the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
      The ID of the App Server. Typically, this is the result
      of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
		  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
  admin:appserver-get-coordinate-system(
    $config, admin:appserver-get-id($config, $groupid, "MyAppServer"))
  ]]></pre></apidoc:example>
<!-- Hide for now, to be consistent.
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
var admin = require('/MarkLogic/admin');
var config = admin.getConfiguration();
var groupId = admin.groupGetId(config, 'Default');
admin.appserverGetCoordinateSystem(
  config, admin.appserverGetId(config, groupId, 'MyAppServer'))
  ]]></pre></apidoc:example>
-->
</apidoc:function>

<apidoc:function name="appserver-set-coordinate-system" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="appserver">
  <apidoc:summary>
    Set the default geospatial coordinate system for an App Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of
      the Admin module functions.
    </apidoc:param>
    <apidoc:param name="appserver-id" type="xs:unsignedLong">
      The ID of the App Server. Typically, this is the result
      of an <code>admin:appserver-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
      The canonical name of a supported geospatial coordinate system, such
      as <code>wgs84/double</code>, <code>etrs89</code>,
      <code>etrs89/double</code>, <code>raw</code>, or <code>raw/double</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:usage>
    The name of the coordinate system also specifies the default point
    coordinate value precision. For example, "wgs84" implicitly specifies
    single precision, while "wgs84/double" specifies double precision.
    You can generate the canonical name for a coordinate system/precision
    combination using
    <a href="#geo:coordinate-system-canonical" class="xquery">geo:coordinate-system-canonical</a><a href="#cts.coordinateSystemCanonical" class="javascript">geo.coordinateSystemCanonical</a>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires at least one of the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/app-server/{id}</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
  </apidoc:privilege>  
  <apidoc:example class="xquery"><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
return
  admin:appserver-set-coordinate-system(
    $config,
    admin:appserver-get-id($config, $groupid, "MyAppServer"),
    "raw")

(: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes.  :)
  ]]></pre></apidoc:example>
<!-- Hide for now, to be consistent.
  <apidoc:example class="javascript"><pre xml:space="preserve"><![CDATA[
var admin = require('/MarkLogic/admin');
var config = admin.getConfiguration();
var groupId = admin.groupGetId(config, 'Default');

// Record desired setting in config obj
config = admin.appserverSetCoordinateSystem(
  config,
  admin.appserverGetId(config, groupId, 'MyAppServer'),
  'wgs84');

// ...Make additional changes to config obj, if desired...

// Save config changes so they take effect
admin.saveConfiguration(config);
  ]]></pre></apidoc:example>
-->
</apidoc:function>

<apidoc:function name="cluster-set-keystore-host-name" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function sets the host name for the Keystore Management System.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
     </apidoc:param>
     <apidoc:param name="host-name" type="xs:string">
       The name of the host to check.
     </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-host-name($config, "kms.marklogic.com")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-keystore-host-name" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the host name for the Keystore Management
	 System.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
     </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-keystore-host-name($config)
  ==> kms.marklogic.com

  (: returns the host name for the Keystore Management System :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-port" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function sets the port number to connect to the Keystore Management
	 System.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
     </apidoc:param>
     <apidoc:param name="port" type="xs:unsignedLong">
	   The new port number.
     </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-port($config, 5690)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-port" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the port number to connect to the Keystore Management
	 System.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
     </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-keystore-port($config)
  => 5690

  (: returns the port number to connect to the Keystore Management System :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-data-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function sets the encryption key ID to use for encryption of data.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="data-encryption-key-id" type="xs:string">
      An string identifying the encryption key at the KMS that should be used
	  to encrypt user data. The string must be a URN representation of a UUID
	  as defined by RFC4122: http://www.ietf.org/rfc/rfc4122.txt
      <span>Example URN: 06ea22c9-b972-4652-8d0f-9e58c62e0f7f</span>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-data-encryption-key-id($config, "c5c37ee2-31f4-4bba-ab8e-98352f900a17")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-data-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the encryption key ID used for encryption of data.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-data-encryption-key-id($config)
  ==> c5c37ee2-31f4-4bba-ab8e-98352f900a17

  (: returns the encryption key id used for encryption of data :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-config-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function sets the encryption key ID to use for encryption of
	 configuration files
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="config-encryption-key-id" type="xs:string">
      An string identifying the encryption key at the KMS that should be used
	  to encrypt configuration files. The string must be a URN representation
	  of a UUID as defined by RFC4122: http://www.ietf.org/rfc/rfc4122.txt
      <span>Example URN: 06ea22c9-b972-4652-8d0f-9e58c62e0f7f</span>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-config-encryption-key-id($config, "c5c37ee2-31f4-4bba-ab8e-98352f900a17")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-config-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the encryption key ID used for encryption of
	 configuration files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-config-encryption-key-id($config)
  ==> c5c37ee2-31f4-4bba-ab8e-98352f900a17

  (: returns the encryption key id used for encryption of configuration files :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-logs-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function sets the encryption key ID to use for encryption of log files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="logs" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="logs-encryption-key-id" type="xs:string">
      An string identifying the encryption key at the KMS that should be used
	  to encrypt log files. The string must be a URN representation of a UUID
	  as defined by RFC4122: http://www.ietf.org/rfc/rfc4122.txt
      <span>Example URN: 06ea22c9-b972-4652-8d0f-9e58c62e0f7f</span>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-logs-encryption-key-id($config, "c5c37ee2-31f4-4bba-ab8e-98352f900a17")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-logs-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the encryption key ID used for encryption of log files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-logs-encryption-key-id($config)
  ==> c5c37ee2-31f4-4bba-ab8e-98352f900a17

  (: returns the encryption key id used for encryption of log files :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-data-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function sets the encryption setting at cluster level
  for user data.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="data-encryption" type="xs:string">
      Specifies the encryption setting for user data.
      Valid values are: <code>force</code>, <code>default-on</code>, and
	   <code>default-off</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-data-encryption($config, "default-on")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-data-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function returns the encryption setting at cluster level
  for user data.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-data-encryption($config)
  ==>  default-on

  (: returns the encryption setting for user data:)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-config-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function sets the encryption setting at cluster level for
  configuration files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="config-encryption" type="xs:string">
      Specifies the encryption setting for configuration files.
      Valid values are: <code>on</code>, and <code>off</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-config-encryption($config, "on")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-config-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function returns the encryption setting at cluster level
  for configuration files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-config-encryption($config)
  ==>  on

  (: returns the encryption setting for configuration files:)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-logs-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function sets the encryption setting at cluster level
  for log files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="logs-encryption" type="xs:string">
      Specifies the encryption setting for log files.
      Valid values are: <code>on</code>, and <code>off</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:privilege><code>http://marklogic.com/xdmp/privileges/admin/cluster</code></apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-logs-encryption($config, "on")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-logs-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function returns the encryption setting at cluster level
  for log files.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-logs-encryption($config)
  ==>  on

  (: returns the encryption setting for log files:)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-set-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function sets the encryption key ID to use for encryption of data
	 for the database identified by <code>database-id</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the database to copy (for example,
	    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="encryption-key-id" type="xs:string">
      An string identifying the encryption key at the KMS that should be use
	  to encrypt user data. The string must be a URN representation of a UUID
	  as defined by RFC4122: http://www.ietf.org/rfc/rfc4122.txt
      <span>Example URN: 06ea22c9-b972-4652-8d0f-9e58c62e0f7f</span>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:database-set-encryption-key-id($config, xdmp:database("myDatabase"), "c5c37ee2-31f4-4bba-ab8e-98352f900a17")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-get-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function returns the encryption key ID used for encryption of data
	 for the database identified by the <code>database-id</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the database to copy (for example,
	    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:database-get-encryption-key-id($config,xdmp:database("myDatabase"))
  ==> c5c37ee2-31f4-4bba-ab8e-98352f900a17

  (: returns the encryption key id used for encryption of data :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-set-data-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function sets the encryption setting for the database
  identified by <code>database-id</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the database to copy (for example,
	    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
    <apidoc:param name="data-encryption" type="xs:string">
      Specifies the encryption setting for the database identified by <code>database-id</code>.
      Valid values are: <code>default-cluster</code>, <code>on</code>, and <code>off</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:database-set-data-encryption($config, xdmp:database("myDatabase"), "default-cluster")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="database-get-data-encryption" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="database">
  <apidoc:summary>This function returns the encryption setting for the database
  ID by <code>database-id</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the
	   Admin module functions.
    </apidoc:param>
    <apidoc:param name="database-id" type="xs:unsignedLong">
	    The ID of the database to copy (for example,
	    <code><a href="#xdmp:database">xdmp:database</a>("myDatabase")</code>).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
     This operation requires at least one of the following privileges:
     <p><code>http://marklogic.com/xdmp/privileges/admin/database</code></p>
     <p><code>http://marklogic.com/xdmp/privileges/admin/database/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:database-get-data-encryption($config, xdmp:database("myDatabase"))
  ==>  default-cluster

  (: returns the encryption setting for the database :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-kmip-certificate-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
    This function updates the path for the PEM encoded KMIP certificate for this host
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
     </apidoc:param>
    <apidoc:param name="value" type="xs:string">
      A path to a PEM encoded KMIP certificate for this host
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-set-keystore-kmip-certificate-path($config,"/space/pems/kmip-cert.pem")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-kmip-certificate-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
    This function returns the path to PEM encoded KMIP certificate. Each host must have a copy of the KMIP certificate or their own at the path indicated here.
  </apidoc:summary>
  <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-get-keystore-kmip-certificate-path($config)

  => "/space/pems/kmip-cert.pem"

  (: returns the path of the PEM encoded KMIP certificate.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-kmip-key-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
    This function updates the path to the PEM encoded private key. Each host must have a copy of the private key or their own at the path indicated here.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
     </apidoc:param>
    <apidoc:param name="value" type="xs:string">
      A path to a PEM encoded private key
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-set-keystore-kmip-key-path($config,"/space/pems/kmip-key.pem")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-kmip-key-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
    This function returns the path to the PEM encoded private key
  </apidoc:summary>
  <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-get-keystore-kmip-key-path($config)

==> "/space/pems/kmip-key.pem"

  (: returns the path to the PEM encoded private key :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-keystore-kmip-CA-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
    This function updates the path to the PEM encoded Certificate Authority (CA) used for authentication with the KMS. Each host must have a copy of the CA at the path indicated here.
  </apidoc:summary>
  <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-set-keystore-kmip-CA-path($config,"/space/pems/kmip-CA.pem")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-kmip-CA-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>
    This function returns the path to the PEM encoded KMIP Certificate Authority (CA) used for authentication with the KMS
  </apidoc:summary>
  <apidoc:params>
        <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-get-keystore-kmip-CA-path($config)

==> "/space/pems/kmip-CA.pem"

(: returns the path to the PEM encoded KMIP Certificate Authority (CA) :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-keystore-kms-type" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function sets the type of Keystore Management System (KMS) to be used.
                  By default it is set to internal KMS, if configuring an external KMS,
                  a KSM host name and port number must also be set.
                  See <code>admin:cluster-set-keystore-host-name</code>, and
				  <code>admin:cluster-cluster-set-keystore-port</code>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="kms-type" type="xs:string">
      Specifies the type of the KMS
       valid values are: <code>internal</code>, and <code>external</code>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
admin:cluster-set-keystore-kms-type($config, "external")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes.  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-kms-type" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="cluster">
  <apidoc:summary>This function returns the encryption setting at cluster level for log files
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-keystore-kms-type($config)
  ==>  internal

  (: returns the encryption setting for log files:)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="group-set-telemetry-log-level" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function sets the initial log level for telemetry,
  which is also the maximum (finest) log level that will be sent.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
    The ID of the group. Typically, this is the result
    of an <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">The maximum (finest) log
	  level at which telemetry will collect and forward logs. This must be
	  either "disabled" or one of the levels defined in
	  <code>admin:group-set-file-log-level()</code> (must be one of
	  <code>finest</code>, <code>finer</code>, <code>fine</code>,
	  <code>debug</code>, <code>config</code>, <code>info</code>,
	  <code>notice</code>, <code>warning</code>, <code>error</code>,
	  <code>critical</code>, <code>alert</code>, <code>emergency</code>).
	  <p>If set to "disabled" then no log file data will be collected or
	  sent to telemetry.</p>
      <p><b>Note</b>: The logfile data collected by telemetry is unaffected
	  by other log level settings such as <code>admin:group-set-log-level()</code>.</p>
      <p>For example you may configure telemetry to send "fine" log
	  file data to assist in a support case, while only collecting
	  "info" level in the Logs directory.</p>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $spec := admin:group-set-telemetry-log-level($config, xdmp:group(),
   admin:group-get-file-log-level($config,xdmp:group() ))
return
admin:save-configuration($spec)

(: sets the telemetry log level to match the server's file log level :)

     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-telemetry-log-level" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function returns the current configured telemetry
  log level.
  <p><b>Note</b>: The current effective log level may be lower than this if limited
  by the Secure Telemetry Storage service.</p>
  <p>No host will send logs finer than the configured level.</p>
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one
	  of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
    The ID of the group. Typically, this is the result of an
	<code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return admin:group-get-telemetry-log-level($config, xdmp:group())

==>
"finest"
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-telemetry-config" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function sets the update frequency for
    configuation changes sent to telemetry, would also be the maximum
	frequency at which updates will be sent.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned
      from one of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
      The ID of the group. Typically, this is the result of an
	  <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
      The frequency at which configuration file updates will be sent
	  to the Secure Telemetry Storage.
     <p>This must be one of "disabled","frequent","infrequent".<br/>
         If "frequent", then all configuration changes will be sent.<br/>
         If "infrequent" then only periodic snapshots will be sent.<br/>
         If "disabled" then no configuration files are sent.<br/>
       </p>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $spec := admin:group-set-telemetry-config($config,
  xdmp:group(),"frequent")
return
admin:save-configuration($spec)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-telemetry-config" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function returns the currently set frequency
  for sending configuration file changes to telemetry.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one
	  of the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
      The ID of the group. Typically, this is the result of an
	  <code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return admin:group-get-telemetry-config($config, xdmp:group())

==>
"frequent"
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-telemetry-metering" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
 <apidoc:summary>This function sets the level of metering data sent to
 telemetry. This is also the maximum level of information that will be sent.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of
	  the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
      The ID of the group. Typically, this is the result of an
	  <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">
      The maximum level of detail for metering data updates sent to the
	  Secure Telemetry Storage.
      <p>
	  Must be one of "disabled","raw","hourly","daily". These correspond
	  to data collected by metering. Raw data is collected according
	  to the period set by <code>admin:group-set-performance-metering-period()</code>
	  and includes Hourly and Data aggregates. Hourly metering data
	  is collected hourly and includes Daily data. Daily metering data
	  is collected daily. </p>
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $spec := admin:group-set-telemetry-metering($config,
  xdmp:group(),"raw")
return
admin:save-configuration($spec)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-telemetry-metering" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function returns the configured detail
    level for collecting metering data sent to telemetry.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of
	  the Admin module functions.
    </apidoc:param>
     <apidoc:param name="group-id" type="xs:unsigned-long">
    The ID of the group. Typically, this is the result of an
	<code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return admin:group-get-telemetry-metering($config, xdmp:group())

==>
"raw"
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-set-telemetry-session-endpoint" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function sets the initial session endpoint for
  telemetry.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of
	  the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
      The ID of the group. Typically, this is the result of an
	  <code>admin:group-get-id</code> call.
    </apidoc:param>
    <apidoc:param name="value" type="xs:string">The session endpoint
	for telemetry. The default setting should not be changed unless
	directed by Support to do so.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $spec := admin:group-set-telemetry-session-endpoint($config,
  xdmp:group(),
  "https://telemetry.services.marklogic.com")
return
admin:save-configuration($spec)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="group-get-telemetry-session-endpoint" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
				 subcategory="group">
  <apidoc:summary>This function returns the initial default telemetry
  endpoint.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
      A configuration specification, typically as returned from one of
	  the Admin module functions.
    </apidoc:param>
    <apidoc:param name="group-id" type="xs:unsigned-long">
    The ID of the group. Typically, this is the result of an
	<code>admin:group-get-id</code> call.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
    <apidoc:privilege>
      This operation requires at least one of the following privileges:
      <p><code>http://marklogic.com/xdmp/privileges/admin/group</code></p>
      <p><code>http://marklogic.com/xdmp/privileges/admin/group/{id}</code></p>
    </apidoc:privilege>  
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";
  let $config := admin:get-configuration(),
    $endpoint := admin:group-get-telemetry-session-endpoint($config, xdmp:group())
return $endpoint
==>
"https://telemetry.services.marklogic.com/v1/session"
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="database-metadata-field" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                                 subcategory="database">
  <apidoc:summary>This function constructs a metadata field specification.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="xs:string">Name of the field.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $dbid := xdmp:database("Documents")
let $fieldspec := admin:database-metadata-field("w")
let $new-config := admin:database-add-field($config, $dbid, $fieldspec)
return
  $new-config

(: returns the new configuration element -- use admin:save-configuration
     to save the changes to the configuration or pass the configuration
     to other Admin API functions to make other changes. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-rotate-data-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function rotates the encryption key ID to use for encryption of data when MarkLogic is configured with internal KMS
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-rotate-data-encryption-key-id($config)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-rotate-config-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function rotates the encryption key ID to use for encryption of configuration files when MarkLogic is configured with internal KMS
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-rotate-config-encryption-key-id($config)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-rotate-logs-encryption-key-id" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This function rotates the encryption key ID to use for encryption of log files when MarkLogic is configured with internal KMS
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-rotate-logs-encryption-key-id($config)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-p11-driver-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
     This set the PKCS#11 library used to access the MLWallet. By default we use SoftHSM as key storage. A customer wanting to configure MarkLogic with an 3rd party HSM needs to update the path to the PKCS#11 library using this API. Note switching the HSM requires that the HSM be uninitialized at slot 0 without a PIN preset. MarkLogic will set the PIN and initialize slot 0.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="p11-driver-path" type="xs:string">
      A host fully qualified path to the PKCS#11 library
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-p11-driver-path($config,"/opt/HSM/libhsm.so")

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-p11-driver-path" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    This function returns the current setting for the PKCS#11 library path
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-keystore-p11-driver-path($config)

=> /opt/HSM/libhsm.so
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-passphrase" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    This function resets the MarkLogic PKCS#11 wallet protection passphrase
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="current-passphrase" type="xs:string">
      The current passphrase used to protect the embedded KMS
    </apidoc:param>
    <apidoc:param name="new-passphrase" type="xs:string">
      The new passphrase to be used to protect the embedded KMS
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-passphrase($config,$current-passphrase,$new-passphrase)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-logs-encryption-passphrase" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    MarkLogic supports encrypting the logs with a secondary encryption passphrase, this function can be used to set the passphrase.
    Note that log encryption must be enabled for this passphrase to be used.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="passphrase" type="xs:string">
      A passphrase to use when encrypting the logs
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-logs-encryption-passphrase($config,$passphrase)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-wallet-location" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    This function is used to set the PKCS#11 wallet location.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="dir-name" type="xs:string">
      The directory location where the embedded PKCS#11 wallet will be saved.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $dir-name := "/sotfhsm/wallet"
let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-wallet-location($config,$dir-name)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-set-keystore-backup-option" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    This function is used to set the backup option for the embedded PKCS#11 wallet.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
    <apidoc:param name="backup-option" type="xs:NMTOKEN">
      The backup option to use. Valid values are: <code>include</code> and <code>exclude</code>
      By default the embedded KMS (PKCS#11 wallet) is automatically included in backups. Setting the option to <code>exclude</code> will prevent the embedded KMS from being included in the backups.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

let $option := "exclude"
let $config := admin:get-configuration()
return
  admin:cluster-set-keystore-backup-option($config,$option)

  (: returns the new configuration element -- use admin:save-configuration to save
  the changes to the configuration or pass the configuration to other Admin API
  functions to make other changes. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-wallet-location" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    This function returns the PKCS#11 wallet location if it has been set by cluster-set-keystore-wallet-location.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-keystore-wallet-location($config)

=> /sotfhsm/wallet

  (: returns the current path to the keystore wallet, if it has been updated
      or the empty string for default location. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="cluster-get-keystore-backup-option" lib="admin"
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>
    This function is used to get the backup option for the embedded PKCS#11 wallet.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned from one of
	   the Admin module functions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin"
  at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-keystore-backup-option($config)

=> include

  (: returns the current setting for the backup option. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="cluster-set-opsdirector-log-level" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function sets Ops Director log level
of the managed cluster.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="value" type="xs:string">The logging level: "emergency",
"alert", "critical", "error", "warning", "notice", etc.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
let $newcfg := admin:cluster-set-opsdirector-log-level($config, "error")
return
  $newcfg
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-opsdirector-config" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster" hidden="true">
  <apidoc:summary>This function sets the frequency with which
the managed cluster sends configuration changes to Ops Director.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="value" type="xs:string">Correct operation of Ops Director
requires that the frequency be set to "frequent".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";
 
let $config := admin:get-configuration()
let $newcfg := admin:cluster-set-opsdirector-config($config, "frequent")
return
  $newcfg
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-opsdirector-metering" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function sets the type of metering data
the managed cluster sends to Ops Director.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="value" type="xs:string">The metering type: "disabled",
"daily", "hourly", or "raw".</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";
 
let $config := admin:get-configuration()
let $newcfg := admin:cluster-set-opsdirector-metering($config, "hour")
return
  $newcfg
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-set-opsdirector-session-endpoint" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function sets the session endpoint URI that
the managed cluster uses to communicate with Ops Director.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
    <apidoc:param name="value" type="xs:string">The endpoint URI.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";
 
let $config := admin:get-configuration()
let $newcfg := admin:cluster-set-opsdirector-session-endpoint($config,
                  "https://opsdir.example.com:8009/v1/opsdirector/session")
return
  $newcfg
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-opsdirector-log-level" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function returns the current Ops Director log level
of the managed cluster.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:usage>
    The return value is the logging level, with possible values "emergency", "alert", "critical", "error", "warning", "notice", etc.
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-opsdirector-log-level($config)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-opsdirector-config" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function returns the current frequency with which
the managed cluster sends configuration changes to Ops Director.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";

let $config := admin:get-configuration()
return
  admin:cluster-get-opsdirector-config($config)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-opsdirector-metering" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function returns the current type of metering data
the managed cluster sends to Ops Director.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:usage>
    The return value is the metering type, with possible values "disabled", "daily", "hourly", or "raw".
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";
 
let $config := admin:get-configuration()
return
  admin:cluster-get-opsdirector-metering($config)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="cluster-get-opsdirector-session-endpoint" lib="admin" 
                 category="Admin Library" bucket="XQuery Library Modules"
                 subcategory="cluster">
  <apidoc:summary>This function returns the session endpoint URI that
the managed cluster uses to communicate with Ops Director.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
       A configuration specification, typically as returned
	   from one of the Admin module functions.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[

xquery version "1.0-ml"; 
 
import module namespace admin = "http://marklogic.com/xdmp/admin" 
      at "/MarkLogic/admin.xqy";
 
let $config := admin:get-configuration()
return
  admin:cluster-get-opsdirector-session-endpoint($config)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

</apidoc:module>
